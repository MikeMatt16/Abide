//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Guerilla.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated sound_playback_parameters_struct_block tag block.
    /// </summary>
    public sealed class SoundPlaybackParametersStructBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoundPlaybackParametersStructBlock"/> class.
        /// </summary>
        public SoundPlaybackParametersStructBlock()
        {
            this.Fields.Add(new RealField("minimum distance:world units#the distance below which this sound no longer gets l" +
                        "ouder"));
            this.Fields.Add(new RealField("maximum distance:world units#the distance beyond which this sound is no longer au" +
                        "dible"));
            this.Fields.Add(new RealFractionField("skip fraction#fraction of requests to play this sound that will be ignored (0 mea" +
                        "ns always play.)"));
            this.Fields.Add(new RealField("maximum bend per second:cents"));
            this.Fields.Add(new ExplanationField("randomization", "these settings control random variation of volume and pitch.\n the second paramete" +
                        "r gets clipped to the first."));
            this.Fields.Add(new RealField("gain base:dB#sound\'s random gain will start here"));
            this.Fields.Add(new RealField("gain variance:dB#sound\'s gain will be randomly modulated within this range"));
            this.Fields.Add(new ShortBoundsField("random pitch bounds:cents#the sound\'s pitch will be modulated randomly within thi" +
                        "s range."));
            this.Fields.Add(new ExplanationField("directional sounds", "these settings allow sounds to be directional, fading as they turn away from the " +
                        "listener"));
            this.Fields.Add(new AngleField("inner cone angle:degrees#within the cone defined by this angle and the sound\'s di" +
                        "rection, the sound plays with a gain of 1.0."));
            this.Fields.Add(new AngleField("outer cone angle:degrees#outside the cone defined by this angle and the sound\'s d" +
                        "irection, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound doe" +
                        "s not attenuate with direction.)"));
            this.Fields.Add(new RealField("outer cone gain:dB#the gain to use when the sound is directed away from the liste" +
                        "ner"));
            this.Fields.Add(new ExplanationField("SCRIPTED LOCATION OVERRIDE", "NOTE: this will only apply when the sound is started via script\nazimuth:\n    0 =>" +
                        " front\n    90 => left\n    180 => back\n    270 => right\n"));
            this.Fields.Add(new LongFlagsField("flags", "override azimuth", "override 3d gain", "override speaker gain"));
            this.Fields.Add(new AngleField("azimuth"));
            this.Fields.Add(new RealField("positional gain:dB"));
            this.Fields.Add(new RealField("first person gain:dB"));
        }
        /// <summary>
        /// Gets and returns the name of the sound_playback_parameters_struct_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "sound_playback_parameters_struct_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the sound_playback_parameters_struct_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "sound_playback_parameters_struct";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the sound_playback_parameters_struct_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the sound_playback_parameters_struct_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
