//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.HaloLibrary.Halo2.Retail.Tag.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.HaloLibrary.Halo2.Retail.Tag;
    
    /// <summary>
    /// Represents the generated physics_block tag block.
    /// </summary>
    public sealed class PhysicsBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhysicsBlock"/> class.
        /// </summary>
        public PhysicsBlock()
        {
            this.Fields.Add(new RealField("radius#positive uses old inferior physics, negative uses new improved physics"));
            this.Fields.Add(new RealFractionField("moment scale"));
            this.Fields.Add(new RealField("mass"));
            this.Fields.Add(new RealPoint3dField("center of mass*"));
            this.Fields.Add(new RealField("density"));
            this.Fields.Add(new RealField("gravity scale"));
            this.Fields.Add(new RealField("ground friction"));
            this.Fields.Add(new RealField("ground depth"));
            this.Fields.Add(new RealFractionField("ground damp fraction"));
            this.Fields.Add(new RealField("ground normal k1"));
            this.Fields.Add(new RealField("ground normal k0"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new RealField("water friction"));
            this.Fields.Add(new RealField("water depth"));
            this.Fields.Add(new RealField("water density"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new RealFractionField("air friction"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new RealField("xx moment"));
            this.Fields.Add(new RealField("yy moment"));
            this.Fields.Add(new RealField("zz moment"));
            this.Fields.Add(new BlockField<InertialMatrixBlock>("inertial matrix and inverse*", 2));
            this.Fields.Add(new BlockField<PoweredMassPointBlock>("powered mass points", 32));
            this.Fields.Add(new BlockField<MassPointBlock>("mass points", 32));
        }
        /// <summary>
        /// Gets and returns the name of the physics_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "physics_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the physics_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "physics";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the physics_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the physics_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
