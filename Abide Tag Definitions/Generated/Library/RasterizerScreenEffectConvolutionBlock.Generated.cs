//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.HaloLibrary.Halo2.Retail.Tag.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.HaloLibrary.Halo2.Retail.Tag;
    
    /// <summary>
    /// Represents the generated rasterizer_screen_effect_convolution_block tag block.
    /// </summary>
    public sealed class RasterizerScreenEffectConvolutionBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RasterizerScreenEffectConvolutionBlock"/> class.
        /// </summary>
        public RasterizerScreenEffectConvolutionBlock()
        {
            this.Fields.Add(new ExplanationField("CONVOLUTION", @"Convolution blurs the target of this pass reference to the SCREEN EFFECT CONVOLUTION buffer, which is accessible in the shader system through a texture extern. It is not cheap especially for large convolution amounts, so please use it sparingly!! Note that the resolution will be clamped to 64x64 minimum and 768000 pixels total maximum."));
            this.Fields.Add(new WordFlagsField("flags", "only when primary is active", "only when secondary is active", "predator zoom"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 64));
            this.Fields.Add(new RealField("convolution amount:[0,+inf)"));
            this.Fields.Add(new RealField("filter scale"));
            this.Fields.Add(new RealFractionField("filter box factor:[0,1] not used for zoom"));
            this.Fields.Add(new RealField("zoom falloff radius"));
            this.Fields.Add(new RealField("zoom cutoff radius"));
            this.Fields.Add(new RealFractionField("resolution scale:[0,1]"));
        }
        /// <summary>
        /// Gets and returns the name of the rasterizer_screen_effect_convolution_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "rasterizer_screen_effect_convolution_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the rasterizer_screen_effect_convolution_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "convolution";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the rasterizer_screen_effect_convolution_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 2;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the rasterizer_screen_effect_convolution_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
