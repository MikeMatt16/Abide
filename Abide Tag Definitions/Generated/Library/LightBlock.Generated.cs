//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.HaloLibrary.Halo2.Retail.Tag.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.HaloLibrary.Halo2.Retail.Tag;
    
    /// <summary>
    /// Represents the generated light_block tag block.
    /// </summary>
    public sealed class LightBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LightBlock"/> class.
        /// </summary>
        public LightBlock()
        {
            this.Fields.Add(new LongFlagsField("flags", "no illumination#don\'t cast any per-pixel dynamic light", "no specular#don\'t cast any specular highlights", "force cast environment shadows through portals", "no shadow#don\'t cast any stencil shadows", "force frustum visibility on small light", "only render in first person", "only render in third person", "don\'t fade when invisible?#don\'t fade out this light when under active-camouflage" +
                        "", "multiplayer override#don\'t turn off in multiplayer", "animated gel", "only in dynamic envmap?#only draw this light in dynamic reflection maps", "ignore parent object#don\'t illuminate or shadow the single object we are attached" +
                        " to", "don\'t shadow parent#don\'t shadow the object we are attached to", "ignore all parents#don\'t illuminate or shadow all the way up to our parent object" +
                        "", "march milestone hack#don\'t click this unless you know what you\'re doing", "force light inside world#every update will push light back inside the world", "environment doesnt cast stencil shadows#environment in this light will not cast s" +
                        "tencil shadows", "objects don\'t cast stencil shadows#objects in this light will not cast stencil sh" +
                        "adows", "first person from camera", "texture camera gel", "light framerate killer", "allowed in split screen", "only on parent bipeds"));
            this.Fields.Add(new ExplanationField("SHAPE", "overall shape of the light"));
            this.Fields.Add(new EnumField("type", "sphere", "orthogonal", "projective", "pyramid"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new RealBoundsField("size modifer#how the light\'s size changes with external scale"));
            this.Fields.Add(new RealField("shadow quality bias#larger positive numbers improve quality, larger negative numb" +
                        "ers improve speed"));
            this.Fields.Add(new EnumField("shadow tap bias#the less taps you use, the faster the light (but edges can look w" +
                        "orse)", "3 tap", "UNUSED", "1 tap"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ExplanationField("SPHERE LIGHT", "default shape parameters for spherical lights"));
            this.Fields.Add(new RealField("radius:world units#the radius at which illumination falls off to zero"));
            this.Fields.Add(new RealField("specular radius:world units#the radius at which specular highlights fall off to z" +
                        "ero (if zero, same as maximum radius)"));
            this.Fields.Add(new ExplanationField("FRUSTUM LIGHT", "default shape parameters for frustum lights (orthogonal, projective or pyramid ty" +
                        "pes)"));
            this.Fields.Add(new RealField("near width:world units#width of the frustum light at its near plane"));
            this.Fields.Add(new RealField("height stretch#how much the gel is stretched vertically (0.0 or 1.0 = aspect rati" +
                        "o same as gel)"));
            this.Fields.Add(new RealField("field of view:degrees#horizontal angle that the frustum light covers (0.0 = no sp" +
                        "read, a parallel beam)"));
            this.Fields.Add(new RealField("falloff distance#distance from near plane to where the light falloff starts"));
            this.Fields.Add(new RealField("cutoff distance#distance from near plane to where illumination falls off to zero"));
            this.Fields.Add(new ExplanationField("COLOR", ""));
            this.Fields.Add(new LongFlagsField("interpolation flags", "blend in hsv#blends colors in hsv rather than rgb space", "...more colors#blends colors through more hues (goes the long way around the colo" +
                        "r wheel)"));
            this.Fields.Add(new RealBoundsField("bloom bounds:[0..2]"));
            this.Fields.Add(new RealRgbColorField("specular lower bound"));
            this.Fields.Add(new RealRgbColorField("specular upper bound"));
            this.Fields.Add(new RealRgbColorField("diffuse lower bound"));
            this.Fields.Add(new RealRgbColorField("diffuse upper bound"));
            this.Fields.Add(new RealBoundsField("brightness bounds:[0..2]"));
            this.Fields.Add(new ExplanationField("GEL", "the gel map tints the light\'s illumination per-pixel"));
            this.Fields.Add(new TagReferenceField("gel map#must be a cubemap for spherical light and a 2d texture for frustum light", 1651078253));
            this.Fields.Add(new EnumField("specular mask", "default", "none (no mask)", "gel alpha", "gel color"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ExplanationField("FALLOFF", ""));
            this.Fields.Add(new EnumField("falloff function", "default", "narrow", "broad", "very broad"));
            this.Fields.Add(new EnumField("diffuse contrast", "default (linear)", "high", "low", "very low"));
            this.Fields.Add(new EnumField("specular contrast", "default (one)", "high (linear)", "low", "very low"));
            this.Fields.Add(new EnumField("falloff geometry", "default", "directional", "spherical"));
            this.Fields.Add(new ExplanationField("LENS FLARE", "optional lens flare and light volume associated with this light"));
            this.Fields.Add(new TagReferenceField("lens flare", 1818586739));
            this.Fields.Add(new RealField("bounding radius:world units#used to generate a bounding radius for lensflare-only" +
                        " lights"));
            this.Fields.Add(new TagReferenceField("light volume", 1296519986));
            this.Fields.Add(new ExplanationField("RADIOSITY", "how the light affects the lightmaps (ignored for dynamic lights)"));
            this.Fields.Add(new EnumField("default lightmap setting", "dynamic only", "dynamic with lightmaps", "lightmaps only"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new RealField("lightmap half life"));
            this.Fields.Add(new RealField("lightmap light scale"));
            this.Fields.Add(new ExplanationField("EFFECT PARAMETERS", "if the light is created by an effect, it will animate itself as follows"));
            this.Fields.Add(new RealField("duration:seconds#the light will last this long when created by an effect"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new EnumField("falloff function#the scale of the light will diminish over time according to this" +
                        " function", "linear", "late", "very late", "early", "very early", "cosine", "zero", "one"));
            this.Fields.Add(new ExplanationField("DISTANCE FADING PARAMETERS", "To fade the light\'s illumination and shadow casting abilities"));
            this.Fields.Add(new EnumField("illumination fade", "fade very far", "fade far", "fade medium", "fade close", "fade very close"));
            this.Fields.Add(new EnumField("shadow fade", "fade very far", "fade far", "fade medium", "fade close", "fade very close"));
            this.Fields.Add(new EnumField("specular fade", "fade very far", "fade far", "fade medium", "fade close", "fade very close"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ExplanationField("ANIMATION PARAMETERS", ""));
            this.Fields.Add(new LongFlagsField("flags", "synchronized"));
            this.Fields.Add(new BlockField<LightBrightnessAnimationBlock>("brightness animation", 1));
            this.Fields.Add(new BlockField<LightColorAnimationBlock>("color animation", 1));
            this.Fields.Add(new BlockField<LightGelAnimationBlock>("gel animation", 1));
            this.Fields.Add(new ExplanationField("SHADER", ""));
            this.Fields.Add(new TagReferenceField("shader", 1936220516));
        }
        /// <summary>
        /// Gets and returns the name of the light_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "light_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the light_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "light";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the light_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the light_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
