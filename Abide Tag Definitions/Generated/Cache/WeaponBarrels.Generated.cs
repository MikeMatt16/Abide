//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Cache.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated weapon_barrels tag block.
    /// </summary>
    public sealed class WeaponBarrels : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeaponBarrels"/> class.
        /// </summary>
        public WeaponBarrels()
        {
            this.Fields.Add(new LongFlagsField("flags", "tracks fired projectile#poo poo ca ca pee pee", "random firing effects#rather than being chosen sequentially, firing effects are p" +
                        "icked randomly", "can fire with partial ammo#allows a weapon to be fired as long as there is a non-" +
                        "zero amount of ammunition loaded", "projectiles use weapon origin#instead of coming out of the magic first person cam" +
                        "era origin, the projectiles for this weapon actually come out of the gun", "ejects during chamber#this trigger\'s ejection port is started during the key fram" +
                        "e of its chamber animation", "use error when unzoomed", "projectile vector cannot be adjusted#projectiles fired by this weapon cannot have" +
                        " their direction adjusted by the AI to hit the target", "projectiles have identical error", "projectiles fire parallel#If there are multiple guns for this trigger, the projec" +
                        "tiles emerge in parallel beams (rather than independant aiming)", "cant fire when others firing", "cant fire when others recovering", "don\'t clear fire bit after recovering", "stagger fire across multiple markers", "fires locked projectiles"));
            this.Fields.Add(new ExplanationField("firing", ""));
            this.Fields.Add(new RealBoundsField("rounds per second#the number of firing effects created per second"));
            this.Fields.Add(new RealField("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                        "chieve its final rounds per second"));
            this.Fields.Add(new RealField("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                        "urn from its final rounds per second to its initial"));
            this.Fields.Add(new RealFractionField("barrel spin scale#scale the barrel spin speed by this amount"));
            this.Fields.Add(new RealFractionField("blurred rate of fire#a percentage between 0 and 1 which controls how soon in its " +
                        "firing animation the weapon blurs"));
            this.Fields.Add(new ShortBoundsField("shots per fire#allows designer caps to the shots you can fire from one firing act" +
                        "ion"));
            this.Fields.Add(new RealField("fire recovery time:seconds#how long after a set of shots it takes before the barr" +
                        "el can fire again"));
            this.Fields.Add(new RealFractionField("soft recovery fraction#how much of the recovery allows shots to be queued"));
            this.Fields.Add(new ShortBlockIndexField("magazine#the magazine from which this trigger draws its ammunition"));
            this.Fields.Add(new ShortIntegerField("rounds per shot#the number of rounds expended to create a single firing effect"));
            this.Fields.Add(new ShortIntegerField("minimum rounds loaded#the minimum number of rounds necessary to fire the weapon"));
            this.Fields.Add(new ShortIntegerField("rounds between tracers#the number of non-tracer rounds fired between tracers"));
            this.Fields.Add(new StringIdField("optional barrel marker name"));
            this.Fields.Add(new ExplanationField("prediction properties", "what the behavior of this barrel is in a predicted network game"));
            this.Fields.Add(new EnumField("prediction type", "none", "continuous", "instant"));
            this.Fields.Add(new EnumField("firing noise#how loud this weapon appears to the AI", "silent", "medium", "loud", "shout", "quiet"));
            this.Fields.Add(new ExplanationField("error", ""));
            this.Fields.Add(new RealField("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                        "chieve its final error"));
            this.Fields.Add(new RealField("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                        "urn to its initial error"));
            this.Fields.Add(new RealBoundsField("damage error#the range of angles (in degrees) that a damaged weapon will skew fir" +
                        "e"));
            this.Fields.Add(new ExplanationField("dual weapon error", ""));
            this.Fields.Add(new RealField("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                        "chieve its final error"));
            this.Fields.Add(new RealField("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                        "urn to its initial error"));
            this.Fields.Add(new PadField("", 8));
            this.Fields.Add(new AngleField("minimum error:degrees"));
            this.Fields.Add(new AngleBoundsField("error angle:degrees"));
            this.Fields.Add(new RealFractionField("dual wield damage scale"));
            this.Fields.Add(new ExplanationField("projectile", ""));
            this.Fields.Add(new EnumField("distribution function", "point", "horizontal fan"));
            this.Fields.Add(new ShortIntegerField("projectiles per shot"));
            this.Fields.Add(new RealField("distribution angle:degrees"));
            this.Fields.Add(new AngleField("minimum error:degrees"));
            this.Fields.Add(new AngleBoundsField("error angle:degrees"));
            this.Fields.Add(new RealPoint3dField("first person offset:world units#+x is forward, +z is up, +y is left"));
            this.Fields.Add(new CharEnumField("damage effect reporting type", "teh guardians!!1!!1!", "falling damage", "generic collision damage", "generic melee damage", "generic explosion", "magnum pistol", "plasma pistol", "needler", "smg", "plasma rifle", "battle rifle", "carbine", "shotgun", "sniper rifle", "beam rifle", "rocket launcher", "flak cannon", "brute shot", "disintegrator", "brute plasma rifle", "energy sword", "frag grenade", "plasma grenade", "flag melee damage", "bomb melee damage", "bomb explosion damage", "ball melee damage", "human turret", "plasma turret", "banshee", "ghost", "mongoose", "scorpion", "spectre driver", "spectre gunner", "warthog driver", "warthog gunner", "wraith", "tank", "sentinel beam", "sentinel rpg", "teleporter"));
            this.Fields.Add(new PadField("", 3));
            this.Fields.Add(new TagReferenceField("projectile", 1886547818));
            this.Fields.Add(new StructField<WeaponBarrelDamageEffectStructBlock>("eh"));
            this.Fields.Add(new ExplanationField("misc", ""));
            this.Fields.Add(new RealField("ejection port recovery time#the amount of time (in seconds) it takes for the ejec" +
                        "tion port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fi" +
                        "red"));
            this.Fields.Add(new RealField("illumination recovery time#the amount of time (in seconds) it takes the illuminat" +
                        "ion function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been" +
                        " fired"));
            this.Fields.Add(new RealFractionField("heat generated per round:[0,1]#the amount of heat generated each time the trigger" +
                        " is fired"));
            this.Fields.Add(new RealFractionField("age generated per round:[0,1]#the amount the weapon ages each time the trigger is" +
                        " fired"));
            this.Fields.Add(new RealField("overload time:seconds#the next trigger fires this often while holding down this t" +
                        "rigger"));
            this.Fields.Add(new ExplanationField("angle change (recoil)", ""));
            this.Fields.Add(new AngleBoundsField("angle change per shot#angle change per shot of the weapon during firing"));
            this.Fields.Add(new RealField("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                        "chieve its final angle change per shot"));
            this.Fields.Add(new RealField("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                        "urn to its initial angle change per shot"));
            this.Fields.Add(new EnumField("angle change function#function used to scale between initial and final angle chan" +
                        "ge per shot", "linear", "early", "very early", "late", "very late", "cosine", "one", "zero"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 8));
            this.Fields.Add(new PadField("", 24));
            this.Fields.Add(new BlockField<BarrelFiringEffectBlock>("firing effects#firing effects determine what happens when this trigger is fired", 3));
        }
        /// <summary>
        /// Gets and returns the name of the weapon_barrels tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "weapon_barrels";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the weapon_barrels tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "weapon_barrels";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the weapon_barrels tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 2;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the weapon_barrels tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
