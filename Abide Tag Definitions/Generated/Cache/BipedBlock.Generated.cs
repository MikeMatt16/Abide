//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Cache.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated biped_block tag block.
    /// </summary>
    public sealed class BipedBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BipedBlock"/> class.
        /// </summary>
        public BipedBlock()
        {
            this.Fields.Add(new ExplanationField("$$$ BIPED $$$", ""));
            this.Fields.Add(new AngleField("moving turning speed:degrees per second"));
            this.Fields.Add(new LongFlagsField("flags", "turns without animating", "passes through other bipeds", "immune to falling damage", "rotate while airborne", "uses limp body physics", "unused", "random speed increase", "unused", "spawn death children on destroy", "stunned by emp damage", "dead physics when stunned", "always ragdoll when dead"));
            this.Fields.Add(new AngleField("stationary turning threshold"));
            this.Fields.Add(new ExplanationField("jumping and landing", ""));
            this.Fields.Add(new RealField("jump velocity:world units per second"));
            this.Fields.Add(new RealField("maximum soft landing time:seconds#the longest amount of time the biped can take t" +
                        "o recover from a soft landing"));
            this.Fields.Add(new RealField("maximum hard landing time:seconds#the longest amount of time the biped can take t" +
                        "o recover from a hard landing"));
            this.Fields.Add(new RealField("minimum soft landing velocity:world units per second#below this velocity the bipe" +
                        "d does not react when landing"));
            this.Fields.Add(new RealField("minimum hard landing velocity:world units per second#below this velocity the bipe" +
                        "d will not do a soft landing when returning to the ground"));
            this.Fields.Add(new RealField("maximum hard landing velocity:world units per second#the velocity corresponding t" +
                        "o the maximum landing time"));
            this.Fields.Add(new RealField("death hard landing velocity:world units per second#the maximum velocity with whic" +
                        "h a character can strike the ground and live"));
            this.Fields.Add(new RealField("stun duration#0 is the default.  Bipeds are stuned when damaged by vehicle collis" +
                        "ions, also some are when they take emp damage"));
            this.Fields.Add(new ExplanationField("camera, collision, and autoaim", ""));
            this.Fields.Add(new RealField("standing camera height:world units"));
            this.Fields.Add(new RealField("crouching camera height:world units"));
            this.Fields.Add(new RealField("crouch transition time:seconds"));
            this.Fields.Add(new AngleField("camera interpolation start:degrees#looking-downward angle that starts camera inte" +
                        "rpolation to fp position"));
            this.Fields.Add(new AngleField("camera interpolation end:degrees#looking-downward angle at which camera interpola" +
                        "tion to fp position is complete"));
            this.Fields.Add(new RealField("camera forward movement scale#amount of fp camera movement forward and back (1.0 " +
                        "is full)"));
            this.Fields.Add(new RealField("camera side movement scale#amount of fp camera movement side-to-side (1.0 is full" +
                        ")"));
            this.Fields.Add(new RealField("camera vertical movement scale#amount of fp camera movement vertically (1.0 is fu" +
                        "ll)"));
            this.Fields.Add(new RealField("camera exclusion distance:world units#fp camera must always be at least this far " +
                        "out from root node"));
            this.Fields.Add(new RealField("autoaim width:world units"));
            this.Fields.Add(new StructField<BipedLockOnDataStructBlock>("lock-on data"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new RealField("head shot acc scale#when the biped ragdolls from a head shot it acceleartes based" +
                        " on this value.  0 defaults to the standard acceleration scale"));
            this.Fields.Add(new TagReferenceField("area damage effect", 1701209701));
            this.Fields.Add(new StructField<CharacterPhysicsStructBlock>("physics"));
            this.Fields.Add(new BlockField<ContactPointBlock>("contact points#these are the points where the biped touches the ground", 3));
            this.Fields.Add(new TagReferenceField("reanimation character#when the flood reanimate this guy, he turns into a ...", 1667785074));
            this.Fields.Add(new TagReferenceField("death spawn character#when I die, out of the ashes of my death crawls a ...", 1667785074));
            this.Fields.Add(new ShortIntegerField("death spawn count"));
            this.Fields.Add(new PadField("", 2));
        }
        /// <summary>
        /// Gets and returns the name of the biped_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "biped_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the biped_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "biped";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the biped_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the biped_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
