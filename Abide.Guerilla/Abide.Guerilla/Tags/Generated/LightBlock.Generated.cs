#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(272, 4)]
    [TagGroupAttribute("light", 1818847080u, 4294967293u, typeof(LightBlock))]
    public sealed class LightBlock : AbideTagBlock
    {
        private TagBlockList<LightBrightnessAnimationBlock> brightnessAnimationList = new TagBlockList<LightBrightnessAnimationBlock>(1);
        private TagBlockList<LightColorAnimationBlock> colorAnimationList = new TagBlockList<LightColorAnimationBlock>(1);
        private TagBlockList<LightGelAnimationBlock> gelAnimationList = new TagBlockList<LightGelAnimationBlock>(1);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("type", typeof(TypeOptions))]
        [OptionsAttribute(typeof(TypeOptions), false)]
        public TypeOptions Type;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("shadow quality bias#larger positive numbers improve quality, larger negative numb" +
            "ers improve speed", typeof(Single))]
        public Single ShadowQualityBias;
        [FieldAttribute("shadow tap bias#the less taps you use, the faster the light (but edges can look w" +
            "orse)", typeof(ShadowTapBiasOptions))]
        [OptionsAttribute(typeof(ShadowTapBiasOptions), false)]
        public ShadowTapBiasOptions ShadowTapBias;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString1;
        [FieldAttribute("radius:world units#the radius at which illumination falls off to zero", typeof(Single))]
        public Single Radius;
        [FieldAttribute("specular radius:world units#the radius at which specular highlights fall off to z" +
            "ero (if zero, same as maximum radius)", typeof(Single))]
        public Single SpecularRadius;
        [FieldAttribute("near width:world units#width of the frustum light at its near plane", typeof(Single))]
        public Single NearWidth;
        [FieldAttribute("height stretch#how much the gel is stretched vertically (0.0 or 1.0 = aspect rati" +
            "o same as gel)", typeof(Single))]
        public Single HeightStretch;
        [FieldAttribute("field of view:degrees#horizontal angle that the frustum light covers (0.0 = no sp" +
            "read, a parallel beam)", typeof(Single))]
        public Single FieldOfView;
        [FieldAttribute("falloff distance#distance from near plane to where the light falloff starts", typeof(Single))]
        public Single FalloffDistance;
        [FieldAttribute("cutoff distance#distance from near plane to where illumination falls off to zero", typeof(Single))]
        public Single CutoffDistance;
        [FieldAttribute("interpolation flags", typeof(InterpolationFlagsOptions))]
        [OptionsAttribute(typeof(InterpolationFlagsOptions), true)]
        public InterpolationFlagsOptions InterpolationFlags;
        [FieldAttribute("specular lower bound", typeof(ColorRgbF))]
        public ColorRgbF SpecularLowerBound;
        [FieldAttribute("specular upper bound", typeof(ColorRgbF))]
        public ColorRgbF SpecularUpperBound;
        [FieldAttribute("diffuse lower bound", typeof(ColorRgbF))]
        public ColorRgbF DiffuseLowerBound;
        [FieldAttribute("diffuse upper bound", typeof(ColorRgbF))]
        public ColorRgbF DiffuseUpperBound;
        [FieldAttribute("gel map#must be a cubemap for spherical light and a 2d texture for frustum light", typeof(TagReference))]
        public TagReference GelMap;
        [FieldAttribute("specular mask", typeof(SpecularMaskOptions))]
        [OptionsAttribute(typeof(SpecularMaskOptions), false)]
        public SpecularMaskOptions SpecularMask;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString3;
        [FieldAttribute("falloff function", typeof(FalloffFunctionOptions))]
        [OptionsAttribute(typeof(FalloffFunctionOptions), false)]
        public FalloffFunctionOptions FalloffFunction;
        [FieldAttribute("diffuse contrast", typeof(DiffuseContrastOptions))]
        [OptionsAttribute(typeof(DiffuseContrastOptions), false)]
        public DiffuseContrastOptions DiffuseContrast;
        [FieldAttribute("specular contrast", typeof(SpecularContrastOptions))]
        [OptionsAttribute(typeof(SpecularContrastOptions), false)]
        public SpecularContrastOptions SpecularContrast;
        [FieldAttribute("falloff geometry", typeof(FalloffGeometryOptions))]
        [OptionsAttribute(typeof(FalloffGeometryOptions), false)]
        public FalloffGeometryOptions FalloffGeometry;
        [FieldAttribute("lens flare", typeof(TagReference))]
        public TagReference LensFlare;
        [FieldAttribute("bounding radius:world units#used to generate a bounding radius for lensflare-only" +
            " lights", typeof(Single))]
        public Single BoundingRadius;
        [FieldAttribute("light volume", typeof(TagReference))]
        public TagReference LightVolume;
        [FieldAttribute("default lightmap setting", typeof(DefaultLightmapSettingOptions))]
        [OptionsAttribute(typeof(DefaultLightmapSettingOptions), false)]
        public DefaultLightmapSettingOptions DefaultLightmapSetting;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString4;
        [FieldAttribute("lightmap half life", typeof(Single))]
        public Single LightmapHalfLife;
        [FieldAttribute("lightmap light scale", typeof(Single))]
        public Single LightmapLightScale;
        [FieldAttribute("duration:seconds#the light will last this long when created by an effect", typeof(Single))]
        public Single Duration;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString5;
        [FieldAttribute("falloff function#the scale of the light will diminish over time according to this" +
            " function", typeof(FalloffFunctionOptions1))]
        [OptionsAttribute(typeof(FalloffFunctionOptions1), false)]
        public FalloffFunctionOptions1 FalloffFunction1;
        [FieldAttribute("illumination fade", typeof(IlluminationFadeOptions))]
        [OptionsAttribute(typeof(IlluminationFadeOptions), false)]
        public IlluminationFadeOptions IlluminationFade;
        [FieldAttribute("shadow fade", typeof(ShadowFadeOptions))]
        [OptionsAttribute(typeof(ShadowFadeOptions), false)]
        public ShadowFadeOptions ShadowFade;
        [FieldAttribute("specular fade", typeof(SpecularFadeOptions))]
        [OptionsAttribute(typeof(SpecularFadeOptions), false)]
        public SpecularFadeOptions SpecularFade;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString6;
        [FieldAttribute("flags", typeof(FlagsOptions1))]
        [OptionsAttribute(typeof(FlagsOptions1), true)]
        public FlagsOptions1 Flags1;
        [FieldAttribute("brightness animation", typeof(TagBlock))]
        [BlockAttribute("brightness animation", 1, typeof(LightBrightnessAnimationBlock))]
        public TagBlock BrightnessAnimation;
        [FieldAttribute("color animation", typeof(TagBlock))]
        [BlockAttribute("color animation", 1, typeof(LightColorAnimationBlock))]
        public TagBlock ColorAnimation;
        [FieldAttribute("gel animation", typeof(TagBlock))]
        [BlockAttribute("gel animation", 1, typeof(LightGelAnimationBlock))]
        public TagBlock GelAnimation;
        [FieldAttribute("shader", typeof(TagReference))]
        public TagReference Shader;
        public TagBlockList<LightBrightnessAnimationBlock> BrightnessAnimationList
        {
            get
            {
                return this.brightnessAnimationList;
            }
        }
        public TagBlockList<LightColorAnimationBlock> ColorAnimationList
        {
            get
            {
                return this.colorAnimationList;
            }
        }
        public TagBlockList<LightGelAnimationBlock> GelAnimationList
        {
            get
            {
                return this.gelAnimationList;
            }
        }
        public override int Size
        {
            get
            {
                return 272;
            }
        }
        public override void Initialize()
        {
            this.brightnessAnimationList.Clear();
            this.colorAnimationList.Clear();
            this.gelAnimationList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.Type = ((TypeOptions)(0));
            this.EmptyString = new byte[2];
            this.ShadowQualityBias = 0;
            this.ShadowTapBias = ((ShadowTapBiasOptions)(0));
            this.EmptyString1 = new byte[2];
            this.Radius = 0;
            this.SpecularRadius = 0;
            this.NearWidth = 0;
            this.HeightStretch = 0;
            this.FieldOfView = 0;
            this.FalloffDistance = 0;
            this.CutoffDistance = 0;
            this.InterpolationFlags = ((InterpolationFlagsOptions)(0));
            this.SpecularLowerBound = ColorRgbF.Zero;
            this.SpecularUpperBound = ColorRgbF.Zero;
            this.DiffuseLowerBound = ColorRgbF.Zero;
            this.DiffuseUpperBound = ColorRgbF.Zero;
            this.GelMap = TagReference.Null;
            this.SpecularMask = ((SpecularMaskOptions)(0));
            this.EmptyString2 = new byte[2];
            this.EmptyString3 = new byte[4];
            this.FalloffFunction = ((FalloffFunctionOptions)(0));
            this.DiffuseContrast = ((DiffuseContrastOptions)(0));
            this.SpecularContrast = ((SpecularContrastOptions)(0));
            this.FalloffGeometry = ((FalloffGeometryOptions)(0));
            this.LensFlare = TagReference.Null;
            this.BoundingRadius = 0;
            this.LightVolume = TagReference.Null;
            this.DefaultLightmapSetting = ((DefaultLightmapSettingOptions)(0));
            this.EmptyString4 = new byte[2];
            this.LightmapHalfLife = 0;
            this.LightmapLightScale = 0;
            this.Duration = 0;
            this.EmptyString5 = new byte[2];
            this.FalloffFunction1 = ((FalloffFunctionOptions1)(0));
            this.IlluminationFade = ((IlluminationFadeOptions)(0));
            this.ShadowFade = ((ShadowFadeOptions)(0));
            this.SpecularFade = ((SpecularFadeOptions)(0));
            this.EmptyString6 = new byte[2];
            this.Flags1 = ((FlagsOptions1)(0));
            this.BrightnessAnimation = TagBlock.Zero;
            this.ColorAnimation = TagBlock.Zero;
            this.GelAnimation = TagBlock.Zero;
            this.Shader = TagReference.Null;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.Type = ((TypeOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.ShadowQualityBias = reader.ReadSingle();
            this.ShadowTapBias = ((ShadowTapBiasOptions)(reader.ReadInt16()));
            this.EmptyString1 = reader.ReadBytes(2);
            this.Radius = reader.ReadSingle();
            this.SpecularRadius = reader.ReadSingle();
            this.NearWidth = reader.ReadSingle();
            this.HeightStretch = reader.ReadSingle();
            this.FieldOfView = reader.ReadSingle();
            this.FalloffDistance = reader.ReadSingle();
            this.CutoffDistance = reader.ReadSingle();
            this.InterpolationFlags = ((InterpolationFlagsOptions)(reader.ReadInt32()));
            this.SpecularLowerBound = reader.Read<ColorRgbF>();
            this.SpecularUpperBound = reader.Read<ColorRgbF>();
            this.DiffuseLowerBound = reader.Read<ColorRgbF>();
            this.DiffuseUpperBound = reader.Read<ColorRgbF>();
            this.GelMap = reader.Read<TagReference>();
            this.SpecularMask = ((SpecularMaskOptions)(reader.ReadInt16()));
            this.EmptyString2 = reader.ReadBytes(2);
            this.EmptyString3 = reader.ReadBytes(4);
            this.FalloffFunction = ((FalloffFunctionOptions)(reader.ReadInt16()));
            this.DiffuseContrast = ((DiffuseContrastOptions)(reader.ReadInt16()));
            this.SpecularContrast = ((SpecularContrastOptions)(reader.ReadInt16()));
            this.FalloffGeometry = ((FalloffGeometryOptions)(reader.ReadInt16()));
            this.LensFlare = reader.Read<TagReference>();
            this.BoundingRadius = reader.ReadSingle();
            this.LightVolume = reader.Read<TagReference>();
            this.DefaultLightmapSetting = ((DefaultLightmapSettingOptions)(reader.ReadInt16()));
            this.EmptyString4 = reader.ReadBytes(2);
            this.LightmapHalfLife = reader.ReadSingle();
            this.LightmapLightScale = reader.ReadSingle();
            this.Duration = reader.ReadSingle();
            this.EmptyString5 = reader.ReadBytes(2);
            this.FalloffFunction1 = ((FalloffFunctionOptions1)(reader.ReadInt16()));
            this.IlluminationFade = ((IlluminationFadeOptions)(reader.ReadInt16()));
            this.ShadowFade = ((ShadowFadeOptions)(reader.ReadInt16()));
            this.SpecularFade = ((SpecularFadeOptions)(reader.ReadInt16()));
            this.EmptyString6 = reader.ReadBytes(2);
            this.Flags1 = ((FlagsOptions1)(reader.ReadInt32()));
            this.BrightnessAnimation = reader.ReadInt64();
            this.brightnessAnimationList.Read(reader, this.BrightnessAnimation);
            this.ColorAnimation = reader.ReadInt64();
            this.colorAnimationList.Read(reader, this.ColorAnimation);
            this.GelAnimation = reader.ReadInt64();
            this.gelAnimationList.Read(reader, this.GelAnimation);
            this.Shader = reader.Read<TagReference>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(12, 4)]
        public sealed class LightBrightnessAnimationBlock : AbideTagBlock
        {
            [FieldAttribute("function", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock Function;
            public override int Size
            {
                get
                {
                    return 12;
                }
            }
            public override void Initialize()
            {
                this.Function = new MappingFunctionBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class MappingFunctionBlock : AbideTagBlock
            {
                private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                [FieldAttribute("data", typeof(TagBlock))]
                [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                public TagBlock Data;
                public TagBlockList<ByteBlock> DataList
                {
                    get
                    {
                        return this.dataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.dataList.Clear();
                    this.Data = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Data = reader.ReadInt64();
                    this.dataList.Read(reader, this.Data);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(1, 4)]
                public sealed class ByteBlock : AbideTagBlock
                {
                    [FieldAttribute("Value", typeof(Byte))]
                    public Byte Value;
                    public override int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Value = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Value = reader.ReadByte();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        [FieldSetAttribute(12, 4)]
        public sealed class LightColorAnimationBlock : AbideTagBlock
        {
            [FieldAttribute("function", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock Function;
            public override int Size
            {
                get
                {
                    return 12;
                }
            }
            public override void Initialize()
            {
                this.Function = new MappingFunctionBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class MappingFunctionBlock : AbideTagBlock
            {
                private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                [FieldAttribute("data", typeof(TagBlock))]
                [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                public TagBlock Data;
                public TagBlockList<ByteBlock> DataList
                {
                    get
                    {
                        return this.dataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.dataList.Clear();
                    this.Data = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Data = reader.ReadInt64();
                    this.dataList.Read(reader, this.Data);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(1, 4)]
                public sealed class ByteBlock : AbideTagBlock
                {
                    [FieldAttribute("Value", typeof(Byte))]
                    public Byte Value;
                    public override int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Value = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Value = reader.ReadByte();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class LightGelAnimationBlock : AbideTagBlock
        {
            [FieldAttribute("dx", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock Dx;
            [FieldAttribute("dy", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock Dy;
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.Dx = new MappingFunctionBlock();
                this.Dy = new MappingFunctionBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Dx = reader.ReadDataStructure<MappingFunctionBlock>();
                this.Dy = reader.ReadDataStructure<MappingFunctionBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class MappingFunctionBlock : AbideTagBlock
            {
                private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                [FieldAttribute("data", typeof(TagBlock))]
                [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                public TagBlock Data;
                public TagBlockList<ByteBlock> DataList
                {
                    get
                    {
                        return this.dataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.dataList.Clear();
                    this.Data = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Data = reader.ReadInt64();
                    this.dataList.Read(reader, this.Data);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(1, 4)]
                public sealed class ByteBlock : AbideTagBlock
                {
                    [FieldAttribute("Value", typeof(Byte))]
                    public Byte Value;
                    public override int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Value = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Value = reader.ReadByte();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        public enum FlagsOptions : Int32
        {
            NoIllumination = 1,
            NoSpecular = 2,
            ForceCastEnvironmentShadowsThroughPortals = 4,
            NoShadow = 8,
            ForceFrustumVisibilityOnSmallLight = 16,
            OnlyRenderInFirstPerson = 32,
            OnlyRenderInThirdPerson = 64,
            DontFadeWhenInvisible = 128,
            MultiplayerOverride = 256,
            AnimatedGel = 512,
            OnlyInDynamicEnvmap = 1024,
            IgnoreParentObject = 2048,
            DontShadowParent = 4096,
            IgnoreAllParents = 8192,
            MarchMilestoneHack = 16384,
            ForceLightInsideWorld = 32768,
            EnvironmentDoesntCastStencilShadows = 65536,
            ObjectsDontCastStencilShadows = 131072,
            FirstPersonFromCamera = 262144,
            TextureCameraGel = 524288,
            LightFramerateKiller = 1048576,
            AllowedInSplitScreen = 2097152,
            OnlyOnParentBipeds = 4194304,
        }
        public enum TypeOptions : Int16
        {
            Sphere = 0,
            Orthogonal = 1,
            Projective = 2,
            Pyramid = 3,
        }
        public enum ShadowTapBiasOptions : Int16
        {
            _3Tap = 0,
            Unused = 1,
            _1Tap = 2,
        }
        public enum InterpolationFlagsOptions : Int32
        {
            BlendInHsv = 1,
            MoreColors = 2,
        }
        public enum SpecularMaskOptions : Int16
        {
            Default = 0,
            NoneNoMask = 1,
            GelAlpha = 2,
            GelColor = 3,
        }
        public enum FalloffFunctionOptions : Int16
        {
            Default = 0,
            Narrow = 1,
            Broad = 2,
            VeryBroad = 3,
        }
        public enum DiffuseContrastOptions : Int16
        {
            DefaultLinear = 0,
            High = 1,
            Low = 2,
            VeryLow = 3,
        }
        public enum SpecularContrastOptions : Int16
        {
            DefaultOne = 0,
            HighLinear = 1,
            Low = 2,
            VeryLow = 3,
        }
        public enum FalloffGeometryOptions : Int16
        {
            Default = 0,
            Directional = 1,
            Spherical = 2,
        }
        public enum DefaultLightmapSettingOptions : Int16
        {
            DynamicOnly = 0,
            DynamicWithLightmaps = 1,
            LightmapsOnly = 2,
        }
        public enum FalloffFunctionOptions1 : Int16
        {
            Linear = 0,
            Late = 1,
            VeryLate = 2,
            Early = 3,
            VeryEarly = 4,
            Cosine = 5,
            Zero = 6,
            One = 7,
        }
        public enum IlluminationFadeOptions : Int16
        {
            FadeVeryFar = 0,
            FadeFar = 1,
            FadeMedium = 2,
            FadeClose = 3,
            FadeVeryClose = 4,
        }
        public enum ShadowFadeOptions : Int16
        {
            FadeVeryFar = 0,
            FadeFar = 1,
            FadeMedium = 2,
            FadeClose = 3,
            FadeVeryClose = 4,
        }
        public enum SpecularFadeOptions : Int16
        {
            FadeVeryFar = 0,
            FadeFar = 1,
            FadeMedium = 2,
            FadeClose = 3,
            FadeVeryClose = 4,
        }
        public enum FlagsOptions1 : Int32
        {
            Synchronized = 1,
        }
    }
}
#pragma warning restore CS1591
