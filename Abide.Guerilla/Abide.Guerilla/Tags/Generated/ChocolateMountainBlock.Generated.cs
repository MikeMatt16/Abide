#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(12, 4)]
    [TagGroupAttribute("chocolate_mountain", 1735156838u, 4294967293u, typeof(ChocolateMountainBlock))]
    public sealed class ChocolateMountainBlock : AbideTagBlock
    {
        private TagBlockList<LightingVariablesBlock> lightingVariablesList = new TagBlockList<LightingVariablesBlock>(13);
        [FieldAttribute("lighting variables", typeof(TagBlock))]
        [BlockAttribute("lighting_variables_block", 13, typeof(LightingVariablesBlock))]
        public TagBlock LightingVariables;
        public TagBlockList<LightingVariablesBlock> LightingVariablesList
        {
            get
            {
                return this.lightingVariablesList;
            }
        }
        public override int Size
        {
            get
            {
                return 12;
            }
        }
        public override void Initialize()
        {
            this.lightingVariablesList.Clear();
            this.LightingVariables = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.LightingVariables = reader.ReadInt64();
            this.lightingVariablesList.Read(reader, this.LightingVariables);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(160, 4)]
        public sealed class LightingVariablesBlock : AbideTagBlock
        {
            [FieldAttribute("object affected", typeof(ObjectAffectedOptions))]
            [OptionsAttribute(typeof(ObjectAffectedOptions), true)]
            public ObjectAffectedOptions ObjectAffected;
            [FieldAttribute("Lightmap brightness offset", typeof(Single))]
            public Single LightmapBrightnessOffset;
            [FieldAttribute("primary light", typeof(PrimaryLightStructBlock))]
            public PrimaryLightStructBlock PrimaryLight;
            [FieldAttribute("secondary light", typeof(SecondaryLightStructBlock))]
            public SecondaryLightStructBlock SecondaryLight;
            [FieldAttribute("ambient light", typeof(AmbientLightStructBlock))]
            public AmbientLightStructBlock AmbientLight;
            [FieldAttribute("lightmap shadows", typeof(LightmapShadowsStructBlock))]
            public LightmapShadowsStructBlock LightmapShadows;
            public override int Size
            {
                get
                {
                    return 160;
                }
            }
            public override void Initialize()
            {
                this.ObjectAffected = ((ObjectAffectedOptions)(0));
                this.LightmapBrightnessOffset = 0;
                this.PrimaryLight = new PrimaryLightStructBlock();
                this.SecondaryLight = new SecondaryLightStructBlock();
                this.AmbientLight = new AmbientLightStructBlock();
                this.LightmapShadows = new LightmapShadowsStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.ObjectAffected = ((ObjectAffectedOptions)(reader.ReadInt32()));
                this.LightmapBrightnessOffset = reader.ReadSingle();
                this.PrimaryLight = reader.ReadDataStructure<PrimaryLightStructBlock>();
                this.SecondaryLight = reader.ReadDataStructure<SecondaryLightStructBlock>();
                this.AmbientLight = reader.ReadDataStructure<AmbientLightStructBlock>();
                this.LightmapShadows = reader.ReadDataStructure<LightmapShadowsStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(40, 4)]
            public sealed class PrimaryLightStructBlock : AbideTagBlock
            {
                [FieldAttribute("Min lightmap color", typeof(ColorRgbF))]
                public ColorRgbF MinLightmapColor;
                [FieldAttribute("Max lightmap color", typeof(ColorRgbF))]
                public ColorRgbF MaxLightmapColor;
                [FieldAttribute("exclusion angle from up#degrees from up the direct light cannot be", typeof(Single))]
                public Single ExclusionAngleFromUp;
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.MinLightmapColor = ColorRgbF.Zero;
                    this.MaxLightmapColor = ColorRgbF.Zero;
                    this.ExclusionAngleFromUp = 0;
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.MinLightmapColor = reader.Read<ColorRgbF>();
                    this.MaxLightmapColor = reader.Read<ColorRgbF>();
                    this.ExclusionAngleFromUp = reader.ReadSingle();
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [FieldSetAttribute(64, 4)]
            public sealed class SecondaryLightStructBlock : AbideTagBlock
            {
                [FieldAttribute("Min lightmap color", typeof(ColorRgbF))]
                public ColorRgbF MinLightmapColor;
                [FieldAttribute("Max lightmap color", typeof(ColorRgbF))]
                public ColorRgbF MaxLightmapColor;
                [FieldAttribute("Min diffuse sample", typeof(ColorRgbF))]
                public ColorRgbF MinDiffuseSample;
                [FieldAttribute("Max diffuse sample", typeof(ColorRgbF))]
                public ColorRgbF MaxDiffuseSample;
                [FieldAttribute("z axis rotation#degrees", typeof(Single))]
                public Single ZAxisRotation;
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public override void Initialize()
                {
                    this.MinLightmapColor = ColorRgbF.Zero;
                    this.MaxLightmapColor = ColorRgbF.Zero;
                    this.MinDiffuseSample = ColorRgbF.Zero;
                    this.MaxDiffuseSample = ColorRgbF.Zero;
                    this.ZAxisRotation = 0;
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.MinLightmapColor = reader.Read<ColorRgbF>();
                    this.MaxLightmapColor = reader.Read<ColorRgbF>();
                    this.MinDiffuseSample = reader.Read<ColorRgbF>();
                    this.MaxDiffuseSample = reader.Read<ColorRgbF>();
                    this.ZAxisRotation = reader.ReadSingle();
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [FieldSetAttribute(36, 4)]
            public sealed class AmbientLightStructBlock : AbideTagBlock
            {
                [FieldAttribute("Min lightmap sample", typeof(ColorRgbF))]
                public ColorRgbF MinLightmapSample;
                [FieldAttribute("Max lightmap sample", typeof(ColorRgbF))]
                public ColorRgbF MaxLightmapSample;
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 36;
                    }
                }
                public override void Initialize()
                {
                    this.MinLightmapSample = ColorRgbF.Zero;
                    this.MaxLightmapSample = ColorRgbF.Zero;
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.MinLightmapSample = reader.Read<ColorRgbF>();
                    this.MaxLightmapSample = reader.Read<ColorRgbF>();
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class LightmapShadowsStructBlock : AbideTagBlock
            {
                [FieldAttribute("function 1", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function1;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Function1 = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Function1 = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            public enum ObjectAffectedOptions : Int32
            {
                All = 1,
                Biped = 2,
                Vehicle = 4,
                Weapon = 8,
                Equipment = 16,
                Garbage = 32,
                Projectile = 64,
                Scenery = 128,
                Machine = 256,
                Control = 512,
                LightFixture = 1024,
                SoundScenery = 2048,
                Crate = 4096,
                Creature = 8192,
            }
        }
    }
}
#pragma warning restore CS1591
