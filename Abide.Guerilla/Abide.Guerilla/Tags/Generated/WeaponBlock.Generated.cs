#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(716, 4)]
    [TagGroupAttribute("weapon", 2003132784u, 1769235821u, typeof(WeaponBlock))]
    public sealed class WeaponBlock : AbideTagBlock
    {
        private TagBlockList<PredictedResourceBlock> predictedResourcesList = new TagBlockList<PredictedResourceBlock>(2048);
        private TagBlockList<Magazines> magazinesList = new TagBlockList<Magazines>(2);
        private TagBlockList<WeaponTriggers> newTriggersList = new TagBlockList<WeaponTriggers>(2);
        private TagBlockList<WeaponBarrels> barrelsList = new TagBlockList<WeaponBarrels>(2);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("", typeof(StringId))]
        public StringId EmptyString;
        [FieldAttribute("secondary trigger mode", typeof(SecondaryTriggerModeOptions))]
        [OptionsAttribute(typeof(SecondaryTriggerModeOptions), false)]
        public SecondaryTriggerModeOptions SecondaryTriggerMode;
        [FieldAttribute("maximum alternate shots loaded#if the second trigger loads alternate ammunition, " +
            "this is the maximum number of shots that can be loaded at a time", typeof(Int16))]
        public Int16 MaximumAlternateShotsLoaded;
        [FieldAttribute("turn on time#how long after being readied it takes this weapon to switch its \'tur" +
            "ned_on\' attachment to 1.0", typeof(Single))]
        public Single TurnOnTime;
        [FieldAttribute("ready time:seconds", typeof(Single))]
        public Single ReadyTime;
        [FieldAttribute("ready effect", typeof(TagReference))]
        public TagReference ReadyEffect;
        [FieldAttribute("ready damage effect", typeof(TagReference))]
        public TagReference ReadyDamageEffect;
        [FieldAttribute("heat recovery threshold:[0,1]#the heat value a weapon must return to before leavi" +
            "ng the overheated state, once it has become overheated in the first place", typeof(Single))]
        public Single HeatRecoveryThreshold;
        [FieldAttribute("overheated threshold:[0,1]#the heat value over which a weapon first becomes overh" +
            "eated (should be greater than the heat recovery threshold)", typeof(Single))]
        public Single OverheatedThreshold;
        [FieldAttribute("heat detonation threshold:[0,1]#the heat value above which the weapon has a chanc" +
            "e of exploding each time it is fired", typeof(Single))]
        public Single HeatDetonationThreshold;
        [FieldAttribute("heat detonation fraction:[0,1]#the percent chance (between 0.0 and 1.0) the weapo" +
            "n will explode when fired over the heat detonation threshold", typeof(Single))]
        public Single HeatDetonationFraction;
        [FieldAttribute("heat loss per second:[0,1]#the amount of heat lost each second when the weapon is" +
            " not being fired", typeof(Single))]
        public Single HeatLossPerSecond;
        [FieldAttribute("heat illumination:[0,1]#the amount of illumination given off when the weapon is o" +
            "verheated", typeof(Single))]
        public Single HeatIllumination;
        [FieldAttribute("overheated heat loss per second:[0,1]#the amount of heat lost each second when th" +
            "e weapon is not being fired", typeof(Single))]
        public Single OverheatedHeatLossPerSecond;
        [FieldAttribute("overheated", typeof(TagReference))]
        public TagReference Overheated;
        [FieldAttribute("overheated damage effect", typeof(TagReference))]
        public TagReference OverheatedDamageEffect;
        [FieldAttribute("detonation", typeof(TagReference))]
        public TagReference Detonation;
        [FieldAttribute("detonation damage effect", typeof(TagReference))]
        public TagReference DetonationDamageEffect;
        [FieldAttribute("player melee damage", typeof(TagReference))]
        public TagReference PlayerMeleeDamage;
        [FieldAttribute("player melee response", typeof(TagReference))]
        public TagReference PlayerMeleeResponse;
        [FieldAttribute("melee aim assist", typeof(MeleeAimAssistStructBlock))]
        public MeleeAimAssistStructBlock MeleeAimAssist;
        [FieldAttribute("melee damage parameters", typeof(MeleeDamageParametersStructBlock))]
        public MeleeDamageParametersStructBlock MeleeDamageParameters;
        [FieldAttribute("melee damage reporting type", typeof(MeleeDamageReportingTypeOptions))]
        [OptionsAttribute(typeof(MeleeDamageReportingTypeOptions), false)]
        public MeleeDamageReportingTypeOptions MeleeDamageReportingType;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(1)]
        public Byte[] EmptyString1;
        [FieldAttribute("magnification levels#the number of magnification levels this weapon allows", typeof(Int16))]
        public Int16 MagnificationLevels;
        [FieldAttribute("weapon aim assist", typeof(AimAssistStructBlock))]
        public AimAssistStructBlock WeaponAimAssist;
        [FieldAttribute("movement penalized", typeof(MovementPenalizedOptions))]
        [OptionsAttribute(typeof(MovementPenalizedOptions), false)]
        public MovementPenalizedOptions MovementPenalized;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("forward movement penalty#percent slowdown to forward movement for units carrying " +
            "this weapon", typeof(Single))]
        public Single ForwardMovementPenalty;
        [FieldAttribute("sideways movement penalty#percent slowdown to sideways and backward movement for " +
            "units carrying this weapon", typeof(Single))]
        public Single SidewaysMovementPenalty;
        [FieldAttribute("AI scariness", typeof(Single))]
        public Single AiScariness;
        [FieldAttribute("weapon power-on time:seconds", typeof(Single))]
        public Single WeaponPowerOnTime;
        [FieldAttribute("weapon power-off time:seconds", typeof(Single))]
        public Single WeaponPowerOffTime;
        [FieldAttribute("weapon power-on effect", typeof(TagReference))]
        public TagReference WeaponPowerOnEffect;
        [FieldAttribute("weapon power-off effect", typeof(TagReference))]
        public TagReference WeaponPowerOffEffect;
        [FieldAttribute("age heat recovery penalty#how much the weapon\'s heat recovery is penalized as it " +
            "ages", typeof(Single))]
        public Single AgeHeatRecoveryPenalty;
        [FieldAttribute("age rate of fire penalty#how much the weapon\'s rate of fire is penalized as it ag" +
            "es", typeof(Single))]
        public Single AgeRateOfFirePenalty;
        [FieldAttribute("age misfire start:[0,1]#the age threshold when the weapon begins to misfire", typeof(Single))]
        public Single AgeMisfireStart;
        [FieldAttribute("age misfire chance:[0,1]#at age 1.0, the misfire chance per shot", typeof(Single))]
        public Single AgeMisfireChance;
        [FieldAttribute("pickup sound", typeof(TagReference))]
        public TagReference PickupSound;
        [FieldAttribute("zoom-in sound", typeof(TagReference))]
        public TagReference ZoomInSound;
        [FieldAttribute("zoom-out sound", typeof(TagReference))]
        public TagReference ZoomOutSound;
        [FieldAttribute("active camo ding#how much to decrease active camo when a round is fired", typeof(Single))]
        public Single ActiveCamoDing;
        [FieldAttribute("active camo regrowth rate#how fast to increase active camo (per tick) when a roun" +
            "d is fired", typeof(Single))]
        public Single ActiveCamoRegrowthRate;
        [FieldAttribute("handle node#the node that get\'s attached to the unit\'s hand", typeof(StringId))]
        public StringId HandleNode;
        [FieldAttribute("weapon class", typeof(StringId))]
        public StringId WeaponClass;
        [FieldAttribute("weapon name", typeof(StringId))]
        public StringId WeaponName;
        [FieldAttribute("multiplayer weapon type", typeof(MultiplayerWeaponTypeOptions))]
        [OptionsAttribute(typeof(MultiplayerWeaponTypeOptions), false)]
        public MultiplayerWeaponTypeOptions MultiplayerWeaponType;
        [FieldAttribute("weapon type", typeof(WeaponTypeOptions))]
        [OptionsAttribute(typeof(WeaponTypeOptions), false)]
        public WeaponTypeOptions WeaponType;
        [FieldAttribute("tracking", typeof(WeaponTrackingStructBlock))]
        public WeaponTrackingStructBlock Tracking;
        [FieldAttribute("player interface", typeof(WeaponInterfaceStructBlock))]
        public WeaponInterfaceStructBlock PlayerInterface;
        [FieldAttribute("predicted resources", typeof(TagBlock))]
        [BlockAttribute("predicted_resource_block", 2048, typeof(PredictedResourceBlock))]
        public TagBlock PredictedResources;
        [FieldAttribute("magazines", typeof(TagBlock))]
        [BlockAttribute("magazines", 2, typeof(Magazines))]
        public TagBlock Magazines1;
        [FieldAttribute("new triggers", typeof(TagBlock))]
        [BlockAttribute("weapon_triggers", 2, typeof(WeaponTriggers))]
        public TagBlock NewTriggers;
        [FieldAttribute("barrels", typeof(TagBlock))]
        [BlockAttribute("weapon_barrels", 2, typeof(WeaponBarrels))]
        public TagBlock Barrels;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(8)]
        public Byte[] EmptyString3;
        [FieldAttribute("max movement acceleration", typeof(Single))]
        public Single MaxMovementAcceleration;
        [FieldAttribute("max movement velocity", typeof(Single))]
        public Single MaxMovementVelocity;
        [FieldAttribute("max turning acceleration", typeof(Single))]
        public Single MaxTurningAcceleration;
        [FieldAttribute("max turning velocity", typeof(Single))]
        public Single MaxTurningVelocity;
        [FieldAttribute("deployed vehicle", typeof(TagReference))]
        public TagReference DeployedVehicle;
        [FieldAttribute("age effect", typeof(TagReference))]
        public TagReference AgeEffect;
        [FieldAttribute("aged weapon", typeof(TagReference))]
        public TagReference AgedWeapon;
        [FieldAttribute("first person weapon offset", typeof(Vector3))]
        public Vector3 FirstPersonWeaponOffset;
        [FieldAttribute("first person scope size", typeof(Vector2))]
        public Vector2 FirstPersonScopeSize;
        public TagBlockList<PredictedResourceBlock> PredictedResourcesList
        {
            get
            {
                return this.predictedResourcesList;
            }
        }
        public TagBlockList<Magazines> MagazinesList
        {
            get
            {
                return this.magazinesList;
            }
        }
        public TagBlockList<WeaponTriggers> NewTriggersList
        {
            get
            {
                return this.newTriggersList;
            }
        }
        public TagBlockList<WeaponBarrels> BarrelsList
        {
            get
            {
                return this.barrelsList;
            }
        }
        public override int Size
        {
            get
            {
                return 716;
            }
        }
        public override void Initialize()
        {
            this.predictedResourcesList.Clear();
            this.magazinesList.Clear();
            this.newTriggersList.Clear();
            this.barrelsList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.EmptyString = StringId.Zero;
            this.SecondaryTriggerMode = ((SecondaryTriggerModeOptions)(0));
            this.MaximumAlternateShotsLoaded = 0;
            this.TurnOnTime = 0;
            this.ReadyTime = 0;
            this.ReadyEffect = TagReference.Null;
            this.ReadyDamageEffect = TagReference.Null;
            this.HeatRecoveryThreshold = 0;
            this.OverheatedThreshold = 0;
            this.HeatDetonationThreshold = 0;
            this.HeatDetonationFraction = 0;
            this.HeatLossPerSecond = 0;
            this.HeatIllumination = 0;
            this.OverheatedHeatLossPerSecond = 0;
            this.Overheated = TagReference.Null;
            this.OverheatedDamageEffect = TagReference.Null;
            this.Detonation = TagReference.Null;
            this.DetonationDamageEffect = TagReference.Null;
            this.PlayerMeleeDamage = TagReference.Null;
            this.PlayerMeleeResponse = TagReference.Null;
            this.MeleeAimAssist = new MeleeAimAssistStructBlock();
            this.MeleeDamageParameters = new MeleeDamageParametersStructBlock();
            this.MeleeDamageReportingType = ((MeleeDamageReportingTypeOptions)(0));
            this.EmptyString1 = new byte[1];
            this.MagnificationLevels = 0;
            this.WeaponAimAssist = new AimAssistStructBlock();
            this.MovementPenalized = ((MovementPenalizedOptions)(0));
            this.EmptyString2 = new byte[2];
            this.ForwardMovementPenalty = 0;
            this.SidewaysMovementPenalty = 0;
            this.AiScariness = 0;
            this.WeaponPowerOnTime = 0;
            this.WeaponPowerOffTime = 0;
            this.WeaponPowerOnEffect = TagReference.Null;
            this.WeaponPowerOffEffect = TagReference.Null;
            this.AgeHeatRecoveryPenalty = 0;
            this.AgeRateOfFirePenalty = 0;
            this.AgeMisfireStart = 0;
            this.AgeMisfireChance = 0;
            this.PickupSound = TagReference.Null;
            this.ZoomInSound = TagReference.Null;
            this.ZoomOutSound = TagReference.Null;
            this.ActiveCamoDing = 0;
            this.ActiveCamoRegrowthRate = 0;
            this.HandleNode = StringId.Zero;
            this.WeaponClass = StringId.Zero;
            this.WeaponName = StringId.Zero;
            this.MultiplayerWeaponType = ((MultiplayerWeaponTypeOptions)(0));
            this.WeaponType = ((WeaponTypeOptions)(0));
            this.Tracking = new WeaponTrackingStructBlock();
            this.PlayerInterface = new WeaponInterfaceStructBlock();
            this.PredictedResources = TagBlock.Zero;
            this.Magazines1 = TagBlock.Zero;
            this.NewTriggers = TagBlock.Zero;
            this.Barrels = TagBlock.Zero;
            this.EmptyString3 = new byte[8];
            this.MaxMovementAcceleration = 0;
            this.MaxMovementVelocity = 0;
            this.MaxTurningAcceleration = 0;
            this.MaxTurningVelocity = 0;
            this.DeployedVehicle = TagReference.Null;
            this.AgeEffect = TagReference.Null;
            this.AgedWeapon = TagReference.Null;
            this.FirstPersonWeaponOffset = Vector3.Zero;
            this.FirstPersonScopeSize = Vector2.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.EmptyString = reader.ReadInt32();
            this.SecondaryTriggerMode = ((SecondaryTriggerModeOptions)(reader.ReadInt16()));
            this.MaximumAlternateShotsLoaded = reader.ReadInt16();
            this.TurnOnTime = reader.ReadSingle();
            this.ReadyTime = reader.ReadSingle();
            this.ReadyEffect = reader.Read<TagReference>();
            this.ReadyDamageEffect = reader.Read<TagReference>();
            this.HeatRecoveryThreshold = reader.ReadSingle();
            this.OverheatedThreshold = reader.ReadSingle();
            this.HeatDetonationThreshold = reader.ReadSingle();
            this.HeatDetonationFraction = reader.ReadSingle();
            this.HeatLossPerSecond = reader.ReadSingle();
            this.HeatIllumination = reader.ReadSingle();
            this.OverheatedHeatLossPerSecond = reader.ReadSingle();
            this.Overheated = reader.Read<TagReference>();
            this.OverheatedDamageEffect = reader.Read<TagReference>();
            this.Detonation = reader.Read<TagReference>();
            this.DetonationDamageEffect = reader.Read<TagReference>();
            this.PlayerMeleeDamage = reader.Read<TagReference>();
            this.PlayerMeleeResponse = reader.Read<TagReference>();
            this.MeleeAimAssist = reader.ReadDataStructure<MeleeAimAssistStructBlock>();
            this.MeleeDamageParameters = reader.ReadDataStructure<MeleeDamageParametersStructBlock>();
            this.MeleeDamageReportingType = ((MeleeDamageReportingTypeOptions)(reader.ReadByte()));
            this.EmptyString1 = reader.ReadBytes(1);
            this.MagnificationLevels = reader.ReadInt16();
            this.WeaponAimAssist = reader.ReadDataStructure<AimAssistStructBlock>();
            this.MovementPenalized = ((MovementPenalizedOptions)(reader.ReadInt16()));
            this.EmptyString2 = reader.ReadBytes(2);
            this.ForwardMovementPenalty = reader.ReadSingle();
            this.SidewaysMovementPenalty = reader.ReadSingle();
            this.AiScariness = reader.ReadSingle();
            this.WeaponPowerOnTime = reader.ReadSingle();
            this.WeaponPowerOffTime = reader.ReadSingle();
            this.WeaponPowerOnEffect = reader.Read<TagReference>();
            this.WeaponPowerOffEffect = reader.Read<TagReference>();
            this.AgeHeatRecoveryPenalty = reader.ReadSingle();
            this.AgeRateOfFirePenalty = reader.ReadSingle();
            this.AgeMisfireStart = reader.ReadSingle();
            this.AgeMisfireChance = reader.ReadSingle();
            this.PickupSound = reader.Read<TagReference>();
            this.ZoomInSound = reader.Read<TagReference>();
            this.ZoomOutSound = reader.Read<TagReference>();
            this.ActiveCamoDing = reader.ReadSingle();
            this.ActiveCamoRegrowthRate = reader.ReadSingle();
            this.HandleNode = reader.ReadInt32();
            this.WeaponClass = reader.ReadInt32();
            this.WeaponName = reader.ReadInt32();
            this.MultiplayerWeaponType = ((MultiplayerWeaponTypeOptions)(reader.ReadInt16()));
            this.WeaponType = ((WeaponTypeOptions)(reader.ReadInt16()));
            this.Tracking = reader.ReadDataStructure<WeaponTrackingStructBlock>();
            this.PlayerInterface = reader.ReadDataStructure<WeaponInterfaceStructBlock>();
            this.PredictedResources = reader.ReadInt64();
            this.predictedResourcesList.Read(reader, this.PredictedResources);
            this.Magazines1 = reader.ReadInt64();
            this.magazinesList.Read(reader, this.Magazines1);
            this.NewTriggers = reader.ReadInt64();
            this.newTriggersList.Read(reader, this.NewTriggers);
            this.Barrels = reader.ReadInt64();
            this.barrelsList.Read(reader, this.Barrels);
            this.EmptyString3 = reader.ReadBytes(8);
            this.MaxMovementAcceleration = reader.ReadSingle();
            this.MaxMovementVelocity = reader.ReadSingle();
            this.MaxTurningAcceleration = reader.ReadSingle();
            this.MaxTurningVelocity = reader.ReadSingle();
            this.DeployedVehicle = reader.Read<TagReference>();
            this.AgeEffect = reader.Read<TagReference>();
            this.AgedWeapon = reader.Read<TagReference>();
            this.FirstPersonWeaponOffset = reader.Read<Vector3>();
            this.FirstPersonScopeSize = reader.Read<Vector2>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(8, 4)]
        public sealed class PredictedResourceBlock : AbideTagBlock
        {
            [FieldAttribute("type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("resource index", typeof(Int16))]
            public Int16 ResourceIndex;
            [FieldAttribute("tag index", typeof(Int32))]
            public Int32 TagIndex;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.Type = ((TypeOptions)(0));
                this.ResourceIndex = 0;
                this.TagIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.ResourceIndex = reader.ReadInt16();
                this.TagIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TypeOptions : Int16
            {
                Bitmap = 0,
                Sound = 1,
                RenderModelGeometry = 2,
                ClusterGeometry = 3,
                ClusterInstancedGeometry = 4,
                LightmapGeometryObjectBuckets = 5,
                LightmapGeometryInstanceBuckets = 6,
                LightmapClusterBitmaps = 7,
                LightmapInstanceBitmaps = 8,
            }
        }
        [FieldSetAttribute(128, 4)]
        public sealed class Magazines : AbideTagBlock
        {
            private TagBlockList<MagazineObjects> magazinesList = new TagBlockList<MagazineObjects>(8);
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("rounds recharged:per second", typeof(Int16))]
            public Int16 RoundsRecharged;
            [FieldAttribute("rounds total initial", typeof(Int16))]
            public Int16 RoundsTotalInitial;
            [FieldAttribute("rounds total maximum", typeof(Int16))]
            public Int16 RoundsTotalMaximum;
            [FieldAttribute("rounds loaded maximum", typeof(Int16))]
            public Int16 RoundsLoadedMaximum;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("reload time:seconds#the length of time it takes to load a single magazine into th" +
                "e weapon", typeof(Single))]
            public Single ReloadTime;
            [FieldAttribute("rounds reloaded", typeof(Int16))]
            public Int16 RoundsReloaded;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("chamber time:seconds#the length of time it takes to chamber the next round", typeof(Single))]
            public Single ChamberTime;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString3;
            [FieldAttribute("reloading effect", typeof(TagReference))]
            public TagReference ReloadingEffect;
            [FieldAttribute("reloading damage effect", typeof(TagReference))]
            public TagReference ReloadingDamageEffect;
            [FieldAttribute("chambering effect", typeof(TagReference))]
            public TagReference ChamberingEffect;
            [FieldAttribute("chambering damage effect", typeof(TagReference))]
            public TagReference ChamberingDamageEffect;
            [FieldAttribute("magazines", typeof(TagBlock))]
            [BlockAttribute("magazine_objects", 8, typeof(MagazineObjects))]
            public TagBlock Magazines1;
            public TagBlockList<MagazineObjects> MagazinesList
            {
                get
                {
                    return this.magazinesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 128;
                }
            }
            public override void Initialize()
            {
                this.magazinesList.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.RoundsRecharged = 0;
                this.RoundsTotalInitial = 0;
                this.RoundsTotalMaximum = 0;
                this.RoundsLoadedMaximum = 0;
                this.EmptyString = new byte[4];
                this.ReloadTime = 0;
                this.RoundsReloaded = 0;
                this.EmptyString1 = new byte[2];
                this.ChamberTime = 0;
                this.EmptyString2 = new byte[8];
                this.EmptyString3 = new byte[16];
                this.ReloadingEffect = TagReference.Null;
                this.ReloadingDamageEffect = TagReference.Null;
                this.ChamberingEffect = TagReference.Null;
                this.ChamberingDamageEffect = TagReference.Null;
                this.Magazines1 = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.RoundsRecharged = reader.ReadInt16();
                this.RoundsTotalInitial = reader.ReadInt16();
                this.RoundsTotalMaximum = reader.ReadInt16();
                this.RoundsLoadedMaximum = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(4);
                this.ReloadTime = reader.ReadSingle();
                this.RoundsReloaded = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(2);
                this.ChamberTime = reader.ReadSingle();
                this.EmptyString2 = reader.ReadBytes(8);
                this.EmptyString3 = reader.ReadBytes(16);
                this.ReloadingEffect = reader.Read<TagReference>();
                this.ReloadingDamageEffect = reader.Read<TagReference>();
                this.ChamberingEffect = reader.Read<TagReference>();
                this.ChamberingDamageEffect = reader.Read<TagReference>();
                this.Magazines1 = reader.ReadInt64();
                this.magazinesList.Read(reader, this.Magazines1);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(20, 4)]
            public sealed class MagazineObjects : AbideTagBlock
            {
                [FieldAttribute("rounds", typeof(Int16))]
                public Int16 Rounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("equipment^", typeof(TagReference))]
                public TagReference Equipment;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.Rounds = 0;
                    this.EmptyString = new byte[2];
                    this.Equipment = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Rounds = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.Equipment = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int32
            {
                WastesRoundsWhenReloaded = 1,
                EveryRoundMustBeChambered = 2,
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class WeaponTriggers : AbideTagBlock
        {
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("input", typeof(InputOptions))]
            [OptionsAttribute(typeof(InputOptions), false)]
            public InputOptions Input;
            [FieldAttribute("behavior", typeof(BehaviorOptions))]
            [OptionsAttribute(typeof(BehaviorOptions), false)]
            public BehaviorOptions Behavior;
            [FieldAttribute("primary barrel", typeof(Int16))]
            public Int16 PrimaryBarrel;
            [FieldAttribute("secondary barrel", typeof(Int16))]
            public Int16 SecondaryBarrel;
            [FieldAttribute("prediction", typeof(PredictionOptions))]
            [OptionsAttribute(typeof(PredictionOptions), false)]
            public PredictionOptions Prediction;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("autofire", typeof(WeaponTriggerAutofireStructBlock))]
            public WeaponTriggerAutofireStructBlock Autofire;
            [FieldAttribute("charging", typeof(WeaponTriggerChargingStructBlock))]
            public WeaponTriggerChargingStructBlock Charging;
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.Input = ((InputOptions)(0));
                this.Behavior = ((BehaviorOptions)(0));
                this.PrimaryBarrel = 0;
                this.SecondaryBarrel = 0;
                this.Prediction = ((PredictionOptions)(0));
                this.EmptyString = new byte[2];
                this.Autofire = new WeaponTriggerAutofireStructBlock();
                this.Charging = new WeaponTriggerChargingStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Input = ((InputOptions)(reader.ReadInt16()));
                this.Behavior = ((BehaviorOptions)(reader.ReadInt16()));
                this.PrimaryBarrel = reader.ReadInt16();
                this.SecondaryBarrel = reader.ReadInt16();
                this.Prediction = ((PredictionOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.Autofire = reader.ReadDataStructure<WeaponTriggerAutofireStructBlock>();
                this.Charging = reader.ReadDataStructure<WeaponTriggerChargingStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class WeaponTriggerAutofireStructBlock : AbideTagBlock
            {
                [FieldAttribute("autofire time", typeof(Single))]
                public Single AutofireTime;
                [FieldAttribute("autofire throw", typeof(Single))]
                public Single AutofireThrow;
                [FieldAttribute("secondary action", typeof(SecondaryActionOptions))]
                [OptionsAttribute(typeof(SecondaryActionOptions), false)]
                public SecondaryActionOptions SecondaryAction;
                [FieldAttribute("primary action", typeof(PrimaryActionOptions))]
                [OptionsAttribute(typeof(PrimaryActionOptions), false)]
                public PrimaryActionOptions PrimaryAction;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.AutofireTime = 0;
                    this.AutofireThrow = 0;
                    this.SecondaryAction = ((SecondaryActionOptions)(0));
                    this.PrimaryAction = ((PrimaryActionOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.AutofireTime = reader.ReadSingle();
                    this.AutofireThrow = reader.ReadSingle();
                    this.SecondaryAction = ((SecondaryActionOptions)(reader.ReadInt16()));
                    this.PrimaryAction = ((PrimaryActionOptions)(reader.ReadInt16()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum SecondaryActionOptions : Int16
                {
                    Fire = 0,
                    Charge = 1,
                    Track = 2,
                    FireOther = 3,
                }
                public enum PrimaryActionOptions : Int16
                {
                    Fire = 0,
                    Charge = 1,
                    Track = 2,
                    FireOther = 3,
                }
            }
            [FieldSetAttribute(52, 4)]
            public sealed class WeaponTriggerChargingStructBlock : AbideTagBlock
            {
                [FieldAttribute("charging time:seconds#the amount of time it takes for this trigger to become full" +
                    "y charged", typeof(Single))]
                public Single ChargingTime;
                [FieldAttribute("charged time:seconds#the amount of time this trigger can be charged before becomi" +
                    "ng overcharged", typeof(Single))]
                public Single ChargedTime;
                [FieldAttribute("overcharged action", typeof(OverchargedActionOptions))]
                [OptionsAttribute(typeof(OverchargedActionOptions), false)]
                public OverchargedActionOptions OverchargedAction;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("charged illumination:[0,1]#the amount of illumination given off when the weapon i" +
                    "s fully charged", typeof(Single))]
                public Single ChargedIllumination;
                [FieldAttribute("spew time:seconds#length of time the weapon will spew (fire continuously) while d" +
                    "ischarging", typeof(Single))]
                public Single SpewTime;
                [FieldAttribute("charging effect#the charging effect is created once when the trigger begins to ch" +
                    "arge", typeof(TagReference))]
                public TagReference ChargingEffect;
                [FieldAttribute("charging damage effect#the charging effect is created once when the trigger begin" +
                    "s to charge", typeof(TagReference))]
                public TagReference ChargingDamageEffect;
                public override int Size
                {
                    get
                    {
                        return 52;
                    }
                }
                public override void Initialize()
                {
                    this.ChargingTime = 0;
                    this.ChargedTime = 0;
                    this.OverchargedAction = ((OverchargedActionOptions)(0));
                    this.EmptyString = new byte[2];
                    this.ChargedIllumination = 0;
                    this.SpewTime = 0;
                    this.ChargingEffect = TagReference.Null;
                    this.ChargingDamageEffect = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ChargingTime = reader.ReadSingle();
                    this.ChargedTime = reader.ReadSingle();
                    this.OverchargedAction = ((OverchargedActionOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.ChargedIllumination = reader.ReadSingle();
                    this.SpewTime = reader.ReadSingle();
                    this.ChargingEffect = reader.Read<TagReference>();
                    this.ChargingDamageEffect = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum OverchargedActionOptions : Int16
                {
                    None = 0,
                    Explode = 1,
                    Discharge = 2,
                }
            }
            public enum FlagsOptions : Int32
            {
                AutofireSingleActionOnly = 1,
            }
            public enum InputOptions : Int16
            {
                RightTrigger = 0,
                LeftTrigger = 1,
                MeleeAttack = 2,
            }
            public enum BehaviorOptions : Int16
            {
                Spew = 0,
                Latch = 1,
                LatchAutofire = 2,
                Charge = 3,
                LatchZoom = 4,
                LatchRocketlauncher = 5,
            }
            public enum PredictionOptions : Int16
            {
                None = 0,
                Spew = 1,
                Charge = 2,
            }
        }
        [FieldSetAttribute(256, 4)]
        public sealed class WeaponBarrels : AbideTagBlock
        {
            private TagBlockList<BarrelFiringEffectBlock> firingEffectsList = new TagBlockList<BarrelFiringEffectBlock>(3);
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                "chieve its final rounds per second", typeof(Single))]
            public Single AccelerationTime;
            [FieldAttribute("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                "urn from its final rounds per second to its initial", typeof(Single))]
            public Single DecelerationTime;
            [FieldAttribute("barrel spin scale#scale the barrel spin speed by this amount", typeof(Single))]
            public Single BarrelSpinScale;
            [FieldAttribute("blurred rate of fire#a percentage between 0 and 1 which controls how soon in its " +
                "firing animation the weapon blurs", typeof(Single))]
            public Single BlurredRateOfFire;
            [FieldAttribute("fire recovery time:seconds#how long after a set of shots it takes before the barr" +
                "el can fire again", typeof(Single))]
            public Single FireRecoveryTime;
            [FieldAttribute("soft recovery fraction#how much of the recovery allows shots to be queued", typeof(Single))]
            public Single SoftRecoveryFraction;
            [FieldAttribute("magazine#the magazine from which this trigger draws its ammunition", typeof(Int16))]
            public Int16 Magazine;
            [FieldAttribute("rounds per shot#the number of rounds expended to create a single firing effect", typeof(Int16))]
            public Int16 RoundsPerShot;
            [FieldAttribute("minimum rounds loaded#the minimum number of rounds necessary to fire the weapon", typeof(Int16))]
            public Int16 MinimumRoundsLoaded;
            [FieldAttribute("rounds between tracers#the number of non-tracer rounds fired between tracers", typeof(Int16))]
            public Int16 RoundsBetweenTracers;
            [FieldAttribute("optional barrel marker name", typeof(StringId))]
            public StringId OptionalBarrelMarkerName;
            [FieldAttribute("prediction type", typeof(PredictionTypeOptions))]
            [OptionsAttribute(typeof(PredictionTypeOptions), false)]
            public PredictionTypeOptions PredictionType;
            [FieldAttribute("firing noise#how loud this weapon appears to the AI", typeof(FiringNoiseOptions))]
            [OptionsAttribute(typeof(FiringNoiseOptions), false)]
            public FiringNoiseOptions FiringNoise;
            [FieldAttribute("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                "chieve its final error", typeof(Single))]
            public Single AccelerationTime1;
            [FieldAttribute("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                "urn to its initial error", typeof(Single))]
            public Single DecelerationTime1;
            [FieldAttribute("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                "chieve its final error", typeof(Single))]
            public Single AccelerationTime2;
            [FieldAttribute("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                "urn to its initial error", typeof(Single))]
            public Single DecelerationTime2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString;
            [FieldAttribute("minimum error:degrees", typeof(Single))]
            public Single MinimumError;
            [FieldAttribute("dual wield damage scale", typeof(Single))]
            public Single DualWieldDamageScale;
            [FieldAttribute("distribution function", typeof(DistributionFunctionOptions))]
            [OptionsAttribute(typeof(DistributionFunctionOptions), false)]
            public DistributionFunctionOptions DistributionFunction;
            [FieldAttribute("projectiles per shot", typeof(Int16))]
            public Int16 ProjectilesPerShot;
            [FieldAttribute("distribution angle:degrees", typeof(Single))]
            public Single DistributionAngle;
            [FieldAttribute("minimum error:degrees", typeof(Single))]
            public Single MinimumError1;
            [FieldAttribute("first person offset:world units#+x is forward, +z is up, +y is left", typeof(Vector3))]
            public Vector3 FirstPersonOffset;
            [FieldAttribute("damage effect reporting type", typeof(DamageEffectReportingTypeOptions))]
            [OptionsAttribute(typeof(DamageEffectReportingTypeOptions), false)]
            public DamageEffectReportingTypeOptions DamageEffectReportingType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(3)]
            public Byte[] EmptyString1;
            [FieldAttribute("projectile", typeof(TagReference))]
            public TagReference Projectile;
            [FieldAttribute("eh", typeof(WeaponBarrelDamageEffectStructBlock))]
            public WeaponBarrelDamageEffectStructBlock Eh;
            [FieldAttribute("ejection port recovery time#the amount of time (in seconds) it takes for the ejec" +
                "tion port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fi" +
                "red", typeof(Single))]
            public Single EjectionPortRecoveryTime;
            [FieldAttribute("illumination recovery time#the amount of time (in seconds) it takes the illuminat" +
                "ion function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been" +
                " fired", typeof(Single))]
            public Single IlluminationRecoveryTime;
            [FieldAttribute("heat generated per round:[0,1]#the amount of heat generated each time the trigger" +
                " is fired", typeof(Single))]
            public Single HeatGeneratedPerRound;
            [FieldAttribute("age generated per round:[0,1]#the amount the weapon ages each time the trigger is" +
                " fired", typeof(Single))]
            public Single AgeGeneratedPerRound;
            [FieldAttribute("overload time:seconds#the next trigger fires this often while holding down this t" +
                "rigger", typeof(Single))]
            public Single OverloadTime;
            [FieldAttribute("acceleration time:seconds#the continuous firing time it takes for the weapon to a" +
                "chieve its final angle change per shot", typeof(Single))]
            public Single AccelerationTime3;
            [FieldAttribute("deceleration time:seconds#the continuous idle time it takes for the weapon to ret" +
                "urn to its initial angle change per shot", typeof(Single))]
            public Single DecelerationTime3;
            [FieldAttribute("angle change function#function used to scale between initial and final angle chan" +
                "ge per shot", typeof(AngleChangeFunctionOptions))]
            [OptionsAttribute(typeof(AngleChangeFunctionOptions), false)]
            public AngleChangeFunctionOptions AngleChangeFunction;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString4;
            [FieldAttribute("firing effects#firing effects determine what happens when this trigger is fired", typeof(TagBlock))]
            [BlockAttribute("barrel_firing_effect_block", 3, typeof(BarrelFiringEffectBlock))]
            public TagBlock FiringEffects;
            public TagBlockList<BarrelFiringEffectBlock> FiringEffectsList
            {
                get
                {
                    return this.firingEffectsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 256;
                }
            }
            public override void Initialize()
            {
                this.firingEffectsList.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.AccelerationTime = 0;
                this.DecelerationTime = 0;
                this.BarrelSpinScale = 0;
                this.BlurredRateOfFire = 0;
                this.FireRecoveryTime = 0;
                this.SoftRecoveryFraction = 0;
                this.Magazine = 0;
                this.RoundsPerShot = 0;
                this.MinimumRoundsLoaded = 0;
                this.RoundsBetweenTracers = 0;
                this.OptionalBarrelMarkerName = StringId.Zero;
                this.PredictionType = ((PredictionTypeOptions)(0));
                this.FiringNoise = ((FiringNoiseOptions)(0));
                this.AccelerationTime1 = 0;
                this.DecelerationTime1 = 0;
                this.AccelerationTime2 = 0;
                this.DecelerationTime2 = 0;
                this.EmptyString = new byte[8];
                this.MinimumError = 0;
                this.DualWieldDamageScale = 0;
                this.DistributionFunction = ((DistributionFunctionOptions)(0));
                this.ProjectilesPerShot = 0;
                this.DistributionAngle = 0;
                this.MinimumError1 = 0;
                this.FirstPersonOffset = Vector3.Zero;
                this.DamageEffectReportingType = ((DamageEffectReportingTypeOptions)(0));
                this.EmptyString1 = new byte[3];
                this.Projectile = TagReference.Null;
                this.Eh = new WeaponBarrelDamageEffectStructBlock();
                this.EjectionPortRecoveryTime = 0;
                this.IlluminationRecoveryTime = 0;
                this.HeatGeneratedPerRound = 0;
                this.AgeGeneratedPerRound = 0;
                this.OverloadTime = 0;
                this.AccelerationTime3 = 0;
                this.DecelerationTime3 = 0;
                this.AngleChangeFunction = ((AngleChangeFunctionOptions)(0));
                this.EmptyString2 = new byte[2];
                this.EmptyString3 = new byte[8];
                this.EmptyString4 = new byte[24];
                this.FiringEffects = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.AccelerationTime = reader.ReadSingle();
                this.DecelerationTime = reader.ReadSingle();
                this.BarrelSpinScale = reader.ReadSingle();
                this.BlurredRateOfFire = reader.ReadSingle();
                this.FireRecoveryTime = reader.ReadSingle();
                this.SoftRecoveryFraction = reader.ReadSingle();
                this.Magazine = reader.ReadInt16();
                this.RoundsPerShot = reader.ReadInt16();
                this.MinimumRoundsLoaded = reader.ReadInt16();
                this.RoundsBetweenTracers = reader.ReadInt16();
                this.OptionalBarrelMarkerName = reader.ReadInt32();
                this.PredictionType = ((PredictionTypeOptions)(reader.ReadInt16()));
                this.FiringNoise = ((FiringNoiseOptions)(reader.ReadInt16()));
                this.AccelerationTime1 = reader.ReadSingle();
                this.DecelerationTime1 = reader.ReadSingle();
                this.AccelerationTime2 = reader.ReadSingle();
                this.DecelerationTime2 = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(8);
                this.MinimumError = reader.ReadSingle();
                this.DualWieldDamageScale = reader.ReadSingle();
                this.DistributionFunction = ((DistributionFunctionOptions)(reader.ReadInt16()));
                this.ProjectilesPerShot = reader.ReadInt16();
                this.DistributionAngle = reader.ReadSingle();
                this.MinimumError1 = reader.ReadSingle();
                this.FirstPersonOffset = reader.Read<Vector3>();
                this.DamageEffectReportingType = ((DamageEffectReportingTypeOptions)(reader.ReadByte()));
                this.EmptyString1 = reader.ReadBytes(3);
                this.Projectile = reader.Read<TagReference>();
                this.Eh = reader.ReadDataStructure<WeaponBarrelDamageEffectStructBlock>();
                this.EjectionPortRecoveryTime = reader.ReadSingle();
                this.IlluminationRecoveryTime = reader.ReadSingle();
                this.HeatGeneratedPerRound = reader.ReadSingle();
                this.AgeGeneratedPerRound = reader.ReadSingle();
                this.OverloadTime = reader.ReadSingle();
                this.AccelerationTime3 = reader.ReadSingle();
                this.DecelerationTime3 = reader.ReadSingle();
                this.AngleChangeFunction = ((AngleChangeFunctionOptions)(reader.ReadInt16()));
                this.EmptyString2 = reader.ReadBytes(2);
                this.EmptyString3 = reader.ReadBytes(8);
                this.EmptyString4 = reader.ReadBytes(24);
                this.FiringEffects = reader.ReadInt64();
                this.firingEffectsList.Read(reader, this.FiringEffects);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(100, 4)]
            public sealed class BarrelFiringEffectBlock : AbideTagBlock
            {
                [FieldAttribute("shot count lower bound#the minimum number of times this firing effect will be use" +
                    "d, once it has been chosen", typeof(Int16))]
                public Int16 ShotCountLowerBound;
                [FieldAttribute("shot count upper bound#the maximum number of times this firing effect will be use" +
                    "d, once it has been chosen", typeof(Int16))]
                public Int16 ShotCountUpperBound;
                [FieldAttribute("firing effect^#this effect is used when the weapon is loaded and fired normally", typeof(TagReference))]
                public TagReference FiringEffect;
                [FieldAttribute("misfire effect#this effect is used when the weapon is loaded but fired while over" +
                    "heated", typeof(TagReference))]
                public TagReference MisfireEffect;
                [FieldAttribute("empty effect#this effect is used when the weapon is not loaded", typeof(TagReference))]
                public TagReference EmptyEffect;
                [FieldAttribute("firing damage#this effect is used when the weapon is loaded and fired normally", typeof(TagReference))]
                public TagReference FiringDamage;
                [FieldAttribute("misfire damage#this effect is used when the weapon is loaded but fired while over" +
                    "heated", typeof(TagReference))]
                public TagReference MisfireDamage;
                [FieldAttribute("empty damage#this effect is used when the weapon is not loaded", typeof(TagReference))]
                public TagReference EmptyDamage;
                public override int Size
                {
                    get
                    {
                        return 100;
                    }
                }
                public override void Initialize()
                {
                    this.ShotCountLowerBound = 0;
                    this.ShotCountUpperBound = 0;
                    this.FiringEffect = TagReference.Null;
                    this.MisfireEffect = TagReference.Null;
                    this.EmptyEffect = TagReference.Null;
                    this.FiringDamage = TagReference.Null;
                    this.MisfireDamage = TagReference.Null;
                    this.EmptyDamage = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ShotCountLowerBound = reader.ReadInt16();
                    this.ShotCountUpperBound = reader.ReadInt16();
                    this.FiringEffect = reader.Read<TagReference>();
                    this.MisfireEffect = reader.Read<TagReference>();
                    this.EmptyEffect = reader.Read<TagReference>();
                    this.FiringDamage = reader.Read<TagReference>();
                    this.MisfireDamage = reader.Read<TagReference>();
                    this.EmptyDamage = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class WeaponBarrelDamageEffectStructBlock : AbideTagBlock
            {
                [FieldAttribute("damage effect", typeof(TagReference))]
                public TagReference DamageEffect;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.DamageEffect = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.DamageEffect = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int32
            {
                TracksFiredProjectile = 1,
                RandomFiringEffects = 2,
                CanFireWithPartialAmmo = 4,
                ProjectilesUseWeaponOrigin = 8,
                EjectsDuringChamber = 16,
                UseErrorWhenUnzoomed = 32,
                ProjectileVectorCannotBeAdjusted = 64,
                ProjectilesHaveIdenticalError = 128,
                ProjectilesFireParallel = 256,
                CantFireWhenOthersFiring = 512,
                CantFireWhenOthersRecovering = 1024,
                DontClearFireBitAfterRecovering = 2048,
                StaggerFireAcrossMultipleMarkers = 4096,
                FiresLockedProjectiles = 8192,
            }
            public enum PredictionTypeOptions : Int16
            {
                None = 0,
                Continuous = 1,
                Instant = 2,
            }
            public enum FiringNoiseOptions : Int16
            {
                Silent = 0,
                Medium = 1,
                Loud = 2,
                Shout = 3,
                Quiet = 4,
            }
            public enum DistributionFunctionOptions : Int16
            {
                Point = 0,
                HorizontalFan = 1,
            }
            public enum DamageEffectReportingTypeOptions : Byte
            {
                TehGuardians11 = 0,
                FallingDamage = 1,
                GenericCollisionDamage = 2,
                GenericMeleeDamage = 3,
                GenericExplosion = 4,
                MagnumPistol = 5,
                PlasmaPistol = 6,
                Needler = 7,
                Smg = 8,
                PlasmaRifle = 9,
                BattleRifle = 10,
                Carbine = 11,
                Shotgun = 12,
                SniperRifle = 13,
                BeamRifle = 14,
                RocketLauncher = 15,
                FlakCannon = 16,
                BruteShot = 17,
                Disintegrator = 18,
                BrutePlasmaRifle = 19,
                EnergySword = 20,
                FragGrenade = 21,
                PlasmaGrenade = 22,
                FlagMeleeDamage = 23,
                BombMeleeDamage = 24,
                BombExplosionDamage = 25,
                BallMeleeDamage = 26,
                HumanTurret = 27,
                PlasmaTurret = 28,
                Banshee = 29,
                Ghost = 30,
                Mongoose = 31,
                Scorpion = 32,
                SpectreDriver = 33,
                SpectreGunner = 34,
                WarthogDriver = 35,
                WarthogGunner = 36,
                Wraith = 37,
                Tank = 38,
                SentinelBeam = 39,
                SentinelRpg = 40,
                Teleporter = 41,
            }
            public enum AngleChangeFunctionOptions : Int16
            {
                Linear = 0,
                Early = 1,
                VeryEarly = 2,
                Late = 3,
                VeryLate = 4,
                Cosine = 5,
                One = 6,
                Zero = 7,
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class MeleeAimAssistStructBlock : AbideTagBlock
        {
            [FieldAttribute("magnetism angle:degrees#the maximum angle that magnetism works at full strength", typeof(Single))]
            public Single MagnetismAngle;
            [FieldAttribute("magnetism range:world units#the maximum distance that magnetism works at full str" +
                "ength", typeof(Single))]
            public Single MagnetismRange;
            [FieldAttribute("throttle magnitude", typeof(Single))]
            public Single ThrottleMagnitude;
            [FieldAttribute("throttle minimum distance", typeof(Single))]
            public Single ThrottleMinimumDistance;
            [FieldAttribute("throttle maximum adjustment angle:degrees", typeof(Single))]
            public Single ThrottleMaximumAdjustmentAngle;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.MagnetismAngle = 0;
                this.MagnetismRange = 0;
                this.ThrottleMagnitude = 0;
                this.ThrottleMinimumDistance = 0;
                this.ThrottleMaximumAdjustmentAngle = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.MagnetismAngle = reader.ReadSingle();
                this.MagnetismRange = reader.ReadSingle();
                this.ThrottleMagnitude = reader.ReadSingle();
                this.ThrottleMinimumDistance = reader.ReadSingle();
                this.ThrottleMaximumAdjustmentAngle = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(140, 4)]
        public sealed class MeleeDamageParametersStructBlock : AbideTagBlock
        {
            [FieldAttribute("damage pyramid angles", typeof(Vector2))]
            public Vector2 DamagePyramidAngles;
            [FieldAttribute("damage pyramid depth", typeof(Single))]
            public Single DamagePyramidDepth;
            [FieldAttribute("1st hit melee damage", typeof(TagReference))]
            public TagReference _1stHitMeleeDamage;
            [FieldAttribute("1st hit melee response", typeof(TagReference))]
            public TagReference _1stHitMeleeResponse;
            [FieldAttribute("2nd hit melee damage", typeof(TagReference))]
            public TagReference _2ndHitMeleeDamage;
            [FieldAttribute("2nd hit melee response", typeof(TagReference))]
            public TagReference _2ndHitMeleeResponse;
            [FieldAttribute("3rd hit melee damage", typeof(TagReference))]
            public TagReference _3rdHitMeleeDamage;
            [FieldAttribute("3rd hit melee response", typeof(TagReference))]
            public TagReference _3rdHitMeleeResponse;
            [FieldAttribute("lunge melee damage#this is only important for the energy sword", typeof(TagReference))]
            public TagReference LungeMeleeDamage;
            [FieldAttribute("lunge melee response#this is only important for the energy sword", typeof(TagReference))]
            public TagReference LungeMeleeResponse;
            public override int Size
            {
                get
                {
                    return 140;
                }
            }
            public override void Initialize()
            {
                this.DamagePyramidAngles = Vector2.Zero;
                this.DamagePyramidDepth = 0;
                this._1stHitMeleeDamage = TagReference.Null;
                this._1stHitMeleeResponse = TagReference.Null;
                this._2ndHitMeleeDamage = TagReference.Null;
                this._2ndHitMeleeResponse = TagReference.Null;
                this._3rdHitMeleeDamage = TagReference.Null;
                this._3rdHitMeleeResponse = TagReference.Null;
                this.LungeMeleeDamage = TagReference.Null;
                this.LungeMeleeResponse = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.DamagePyramidAngles = reader.Read<Vector2>();
                this.DamagePyramidDepth = reader.ReadSingle();
                this._1stHitMeleeDamage = reader.Read<TagReference>();
                this._1stHitMeleeResponse = reader.Read<TagReference>();
                this._2ndHitMeleeDamage = reader.Read<TagReference>();
                this._2ndHitMeleeResponse = reader.Read<TagReference>();
                this._3rdHitMeleeDamage = reader.Read<TagReference>();
                this._3rdHitMeleeResponse = reader.Read<TagReference>();
                this.LungeMeleeDamage = reader.Read<TagReference>();
                this.LungeMeleeResponse = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class AimAssistStructBlock : AbideTagBlock
        {
            [FieldAttribute("autoaim angle:degrees#the maximum angle that autoaim works at full strength", typeof(Single))]
            public Single AutoaimAngle;
            [FieldAttribute("autoaim range:world units#the maximum distance that autoaim works at full strengt" +
                "h", typeof(Single))]
            public Single AutoaimRange;
            [FieldAttribute("magnetism angle:degrees#the maximum angle that magnetism works at full strength", typeof(Single))]
            public Single MagnetismAngle;
            [FieldAttribute("magnetism range:world units#the maximum distance that magnetism works at full str" +
                "ength", typeof(Single))]
            public Single MagnetismRange;
            [FieldAttribute("deviation angle:degrees#the maximum angle that a projectile is allowed to deviate" +
                " from the gun barrel", typeof(Single))]
            public Single DeviationAngle;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.AutoaimAngle = 0;
                this.AutoaimRange = 0;
                this.MagnetismAngle = 0;
                this.MagnetismRange = 0;
                this.DeviationAngle = 0;
                this.EmptyString = new byte[4];
                this.EmptyString1 = new byte[12];
            }
            public override void Read(BinaryReader reader)
            {
                this.AutoaimAngle = reader.ReadSingle();
                this.AutoaimRange = reader.ReadSingle();
                this.MagnetismAngle = reader.ReadSingle();
                this.MagnetismRange = reader.ReadSingle();
                this.DeviationAngle = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(4);
                this.EmptyString1 = reader.ReadBytes(12);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class WeaponTrackingStructBlock : AbideTagBlock
        {
            [FieldAttribute("tracking type", typeof(TrackingTypeOptions))]
            [OptionsAttribute(typeof(TrackingTypeOptions), false)]
            public TrackingTypeOptions TrackingType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.TrackingType = ((TrackingTypeOptions)(0));
                this.EmptyString = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.TrackingType = ((TrackingTypeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TrackingTypeOptions : Int16
            {
                NoTracking = 0,
                HumanTracking = 1,
                PlasmaTracking = 2,
            }
        }
        [FieldSetAttribute(44, 4)]
        public sealed class WeaponInterfaceStructBlock : AbideTagBlock
        {
            private TagBlockList<WeaponFirstPersonInterfaceBlock> firstPersonList = new TagBlockList<WeaponFirstPersonInterfaceBlock>(4);
            [FieldAttribute("shared interface", typeof(WeaponSharedInterfaceStructBlock))]
            public WeaponSharedInterfaceStructBlock SharedInterface;
            [FieldAttribute("first person", typeof(TagBlock))]
            [BlockAttribute("weapon_first_person_interface_block", 4, typeof(WeaponFirstPersonInterfaceBlock))]
            public TagBlock FirstPerson;
            [FieldAttribute("new hud interface", typeof(TagReference))]
            public TagReference NewHudInterface;
            public TagBlockList<WeaponFirstPersonInterfaceBlock> FirstPersonList
            {
                get
                {
                    return this.firstPersonList;
                }
            }
            public override int Size
            {
                get
                {
                    return 44;
                }
            }
            public override void Initialize()
            {
                this.firstPersonList.Clear();
                this.SharedInterface = new WeaponSharedInterfaceStructBlock();
                this.FirstPerson = TagBlock.Zero;
                this.NewHudInterface = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.SharedInterface = reader.ReadDataStructure<WeaponSharedInterfaceStructBlock>();
                this.FirstPerson = reader.ReadInt64();
                this.firstPersonList.Read(reader, this.FirstPerson);
                this.NewHudInterface = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class WeaponFirstPersonInterfaceBlock : AbideTagBlock
            {
                [FieldAttribute("first person model", typeof(TagReference))]
                public TagReference FirstPersonModel;
                [FieldAttribute("first person animations", typeof(TagReference))]
                public TagReference FirstPersonAnimations;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.FirstPersonModel = TagReference.Null;
                    this.FirstPersonAnimations = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.FirstPersonModel = reader.Read<TagReference>();
                    this.FirstPersonAnimations = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class WeaponSharedInterfaceStructBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[16];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(16);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        public enum FlagsOptions : Int32
        {
            VerticalHeatDisplay = 1,
            MutuallyExclusiveTriggers = 2,
            AttacksAutomaticallyOnBump = 4,
            MustBeReadied = 8,
            DoesntCountTowardMaximum = 16,
            AimAssistsOnlyWhenZoomed = 32,
            PreventsGrenadeThrowing = 64,
            MustBePickedUp = 128,
            HoldsTriggersWhenDropped = 256,
            PreventsMeleeAttack = 512,
            DetonatesWhenDropped = 1024,
            CannotFireAtMaximumAge = 2048,
            SecondaryTriggerOverridesGrenades = 4096,
            ObsoletedoesNotDepowerActiveCamoInMultilplayer = 8192,
            EnablesIntegratedNightVision = 16384,
            AisUseWeaponMeleeDamage = 32768,
            ForcesNoBinoculars = 65536,
            LoopFpFiringAnimation = 131072,
            PreventsSprinting = 262144,
            CannotFireWhileBoosting = 524288,
            PreventsDriving = 1048576,
            PreventsGunning = 2097152,
            CanBeDualWielded = 4194304,
            CanOnlyBeDualWielded = 8388608,
            MeleeOnly = 16777216,
            CantFireIfParentDead = 33554432,
            WeaponAgesWithEachKill = 67108864,
            WeaponUsesOldDualFireErrorCode = 134217728,
            PrimaryTriggerMeleeAttacks = 268435456,
            CannotBeUsedByPlayer = 536870912,
        }
        public enum SecondaryTriggerModeOptions : Int16
        {
            Normal = 0,
            SlavedToPrimary = 1,
            InhibitsPrimary = 2,
            LoadsAlterateAmmunition = 3,
            LoadsMultiplePrimaryAmmunition = 4,
        }
        public enum MeleeDamageReportingTypeOptions : Byte
        {
            TehGuardians11 = 0,
            FallingDamage = 1,
            GenericCollisionDamage = 2,
            GenericMeleeDamage = 3,
            GenericExplosion = 4,
            MagnumPistol = 5,
            PlasmaPistol = 6,
            Needler = 7,
            Smg = 8,
            PlasmaRifle = 9,
            BattleRifle = 10,
            Carbine = 11,
            Shotgun = 12,
            SniperRifle = 13,
            BeamRifle = 14,
            RocketLauncher = 15,
            FlakCannon = 16,
            BruteShot = 17,
            Disintegrator = 18,
            BrutePlasmaRifle = 19,
            EnergySword = 20,
            FragGrenade = 21,
            PlasmaGrenade = 22,
            FlagMeleeDamage = 23,
            BombMeleeDamage = 24,
            BombExplosionDamage = 25,
            BallMeleeDamage = 26,
            HumanTurret = 27,
            PlasmaTurret = 28,
            Banshee = 29,
            Ghost = 30,
            Mongoose = 31,
            Scorpion = 32,
            SpectreDriver = 33,
            SpectreGunner = 34,
            WarthogDriver = 35,
            WarthogGunner = 36,
            Wraith = 37,
            Tank = 38,
            SentinelBeam = 39,
            SentinelRpg = 40,
            Teleporter = 41,
        }
        public enum MovementPenalizedOptions : Int16
        {
            Always = 0,
            WhenZoomed = 1,
            WhenZoomedOrReloading = 2,
        }
        public enum MultiplayerWeaponTypeOptions : Int16
        {
            None = 0,
            CtfFlag = 1,
            OddballBall = 2,
            HeadhunterHead = 3,
            JuggernautPowerup = 4,
        }
        public enum WeaponTypeOptions : Int16
        {
            Undefined = 0,
            Shotgun = 1,
            Needler = 2,
            PlasmaPistol = 3,
            PlasmaRifle = 4,
            RocketLauncher = 5,
        }
    }
}
#pragma warning restore CS1591
