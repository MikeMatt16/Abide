#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(60, 4)]
    [TagGroupAttribute("device_control", 1668575852u, 1684371049u, typeof(DeviceControlBlock))]
    public sealed class DeviceControlBlock : AbideTagBlock
    {
        [FieldAttribute("type", typeof(TypeOptions))]
        [OptionsAttribute(typeof(TypeOptions), false)]
        public TypeOptions Type;
        [FieldAttribute("triggers when", typeof(TriggersWhenOptions))]
        [OptionsAttribute(typeof(TriggersWhenOptions), false)]
        public TriggersWhenOptions TriggersWhen;
        [FieldAttribute("call value:[0,1]", typeof(Single))]
        public Single CallValue;
        [FieldAttribute("action string", typeof(StringId))]
        public StringId ActionString;
        [FieldAttribute("on", typeof(TagReference))]
        public TagReference On;
        [FieldAttribute("off", typeof(TagReference))]
        public TagReference Off;
        [FieldAttribute("deny", typeof(TagReference))]
        public TagReference Deny;
        public override int Size
        {
            get
            {
                return 60;
            }
        }
        public override void Initialize()
        {
            this.Type = ((TypeOptions)(0));
            this.TriggersWhen = ((TriggersWhenOptions)(0));
            this.CallValue = 0;
            this.ActionString = StringId.Zero;
            this.On = TagReference.Null;
            this.Off = TagReference.Null;
            this.Deny = TagReference.Null;
        }
        public override void Read(BinaryReader reader)
        {
            this.Type = ((TypeOptions)(reader.ReadInt16()));
            this.TriggersWhen = ((TriggersWhenOptions)(reader.ReadInt16()));
            this.CallValue = reader.ReadSingle();
            this.ActionString = reader.ReadInt32();
            this.On = reader.Read<TagReference>();
            this.Off = reader.Read<TagReference>();
            this.Deny = reader.Read<TagReference>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        public enum TypeOptions : Int16
        {
            ToggleSwitch = 0,
            OnButton = 1,
            OffButton = 2,
            CallButton = 3,
        }
        public enum TriggersWhenOptions : Int16
        {
            TouchedByPlayer = 0,
            Destroyed = 1,
        }
    }
}
#pragma warning restore CS1591
