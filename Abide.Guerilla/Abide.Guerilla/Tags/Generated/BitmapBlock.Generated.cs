#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(108, 4)]
    [TagGroupAttribute("bitmap", 1651078253u, 4294967293u, typeof(BitmapBlock))]
    public sealed class BitmapBlock : AbideTagBlock
    {
        private DataList compressedColorPlateDataList = new DataList(1073741824);
        private DataList processedPixelDataList = new DataList(1073741824);
        private TagBlockList<BitmapGroupSequenceBlock> sequencesList = new TagBlockList<BitmapGroupSequenceBlock>(256);
        private TagBlockList<BitmapDataBlock> bitmapsList = new TagBlockList<BitmapDataBlock>(65536);
        [FieldAttribute("Type", typeof(TypeOptions))]
        [OptionsAttribute(typeof(TypeOptions), false)]
        public TypeOptions Type;
        [FieldAttribute("Format", typeof(FormatOptions))]
        [OptionsAttribute(typeof(FormatOptions), false)]
        public FormatOptions Format;
        [FieldAttribute("Usage", typeof(UsageOptions))]
        [OptionsAttribute(typeof(UsageOptions), false)]
        public UsageOptions Usage;
        [FieldAttribute("Flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("Detail Fade Factor:[0,1]#0 means fade to gray by last mipmap; 1 means fade to gra" +
            "y by first mipmap.", typeof(Single))]
        public Single DetailFadeFactor;
        [FieldAttribute("Sharpen Amount:[0,1]#Sharpens mipmap after downsampling.", typeof(Single))]
        public Single SharpenAmount;
        [FieldAttribute("Bump Height:repeats#tApparent height of the bump map above the triangle onto whic" +
            "h it is textured, in texture repeats (i.e., 1.0 would be as high as the texture " +
            "is wide).", typeof(Single))]
        public Single BumpHeight;
        [FieldAttribute("EMPTY STRING", typeof(EmptyStringOptions))]
        [OptionsAttribute(typeof(EmptyStringOptions), false)]
        public EmptyStringOptions EmptyString;
        [FieldAttribute("EMPTY STRING", typeof(Int16))]
        public Int16 EmptyString1;
        [FieldAttribute("Color Plate Width*:pixels", typeof(Int16))]
        public Int16 ColorPlateWidth;
        [FieldAttribute("Color Plate Height*:pixels", typeof(Int16))]
        public Int16 ColorPlateHeight;
        [FieldAttribute("Compressed Color Plate Data*", typeof(TagBlock))]
        [DataAttribute(1073741824)]
        public TagBlock CompressedColorPlateData;
        [FieldAttribute("Processed Pixel Data*", typeof(TagBlock))]
        [DataAttribute(1073741824)]
        public TagBlock ProcessedPixelData;
        [FieldAttribute("Blur Filter Size:[0,10] pixels#Blurs the bitmap before generating mipmaps.", typeof(Single))]
        public Single BlurFilterSize;
        [FieldAttribute("Alpha Bias:[-1,1]#Affects alpha mipmap generation.", typeof(Single))]
        public Single AlphaBias;
        [FieldAttribute("Mipmap Count:levels#0 Defaults to all levels.", typeof(Int16))]
        public Int16 MipmapCount;
        [FieldAttribute("Sprite Usage", typeof(SpriteUsageOptions))]
        [OptionsAttribute(typeof(SpriteUsageOptions), false)]
        public SpriteUsageOptions SpriteUsage;
        [FieldAttribute("Sprite Spacing*", typeof(Int16))]
        public Int16 SpriteSpacing;
        [FieldAttribute("Force Format", typeof(ForceFormatOptions))]
        [OptionsAttribute(typeof(ForceFormatOptions), false)]
        public ForceFormatOptions ForceFormat;
        [FieldAttribute("Sequences*", typeof(TagBlock))]
        [BlockAttribute("bitmap_group_sequence_block", 256, typeof(BitmapGroupSequenceBlock))]
        public TagBlock Sequences;
        [FieldAttribute("Bitmaps*", typeof(TagBlock))]
        [BlockAttribute("bitmap_data_block", 65536, typeof(BitmapDataBlock))]
        public TagBlock Bitmaps;
        public DataList CompressedColorPlateDataList
        {
            get
            {
                return this.compressedColorPlateDataList;
            }
        }
        public DataList ProcessedPixelDataList
        {
            get
            {
                return this.processedPixelDataList;
            }
        }
        public TagBlockList<BitmapGroupSequenceBlock> SequencesList
        {
            get
            {
                return this.sequencesList;
            }
        }
        public TagBlockList<BitmapDataBlock> BitmapsList
        {
            get
            {
                return this.bitmapsList;
            }
        }
        public override int Size
        {
            get
            {
                return 112;
            }
        }
        public override void Initialize()
        {
            this.compressedColorPlateDataList.Clear();
            this.processedPixelDataList.Clear();
            this.sequencesList.Clear();
            this.bitmapsList.Clear();
            this.Type = ((TypeOptions)(0));
            this.Format = ((FormatOptions)(0));
            this.Usage = ((UsageOptions)(0));
            this.Flags = ((FlagsOptions)(0));
            this.DetailFadeFactor = 0;
            this.SharpenAmount = 0;
            this.BumpHeight = 0;
            this.EmptyString = ((EmptyStringOptions)(0));
            this.EmptyString1 = 0;
            this.ColorPlateWidth = 0;
            this.ColorPlateHeight = 0;
            this.CompressedColorPlateData = TagBlock.Zero;
            this.ProcessedPixelData = TagBlock.Zero;
            this.BlurFilterSize = 0;
            this.AlphaBias = 0;
            this.MipmapCount = 0;
            this.SpriteUsage = ((SpriteUsageOptions)(0));
            this.SpriteSpacing = 0;
            this.ForceFormat = ((ForceFormatOptions)(0));
            this.Sequences = TagBlock.Zero;
            this.Bitmaps = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Type = ((TypeOptions)(reader.ReadInt16()));
            this.Format = ((FormatOptions)(reader.ReadInt16()));
            this.Usage = ((UsageOptions)(reader.ReadInt16()));
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.DetailFadeFactor = reader.ReadSingle();
            this.SharpenAmount = reader.ReadSingle();
            this.BumpHeight = reader.ReadSingle();
            this.EmptyString = ((EmptyStringOptions)(reader.ReadInt16()));
            this.EmptyString1 = reader.ReadInt16();
            this.ColorPlateWidth = reader.ReadInt16();
            this.ColorPlateHeight = reader.ReadInt16();
            this.CompressedColorPlateData = reader.ReadInt64();
            this.compressedColorPlateDataList.Read(reader, this.CompressedColorPlateData);
            this.ProcessedPixelData = reader.ReadInt64();
            this.processedPixelDataList.Read(reader, this.ProcessedPixelData);
            this.BlurFilterSize = reader.ReadSingle();
            this.AlphaBias = reader.ReadSingle();
            this.MipmapCount = reader.ReadInt16();
            this.SpriteUsage = ((SpriteUsageOptions)(reader.ReadInt16()));
            this.SpriteSpacing = reader.ReadInt16();
            this.ForceFormat = ((ForceFormatOptions)(reader.ReadInt16()));
            this.Sequences = reader.ReadInt64();
            this.sequencesList.Read(reader, this.Sequences);
            this.Bitmaps = reader.ReadInt64();
            this.bitmapsList.Read(reader, this.Bitmaps);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(64, 4)]
        public sealed class BitmapGroupSequenceBlock : AbideTagBlock
        {
            private TagBlockList<BitmapGroupSpriteBlock> spritesList = new TagBlockList<BitmapGroupSpriteBlock>(64);
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("First Bitmap Index*", typeof(Int16))]
            public Int16 FirstBitmapIndex;
            [FieldAttribute("Bitmap Count*", typeof(Int16))]
            public Int16 BitmapCount;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            [FieldAttribute("Sprites*", typeof(TagBlock))]
            [BlockAttribute("bitmap_group_sprite_block", 64, typeof(BitmapGroupSpriteBlock))]
            public TagBlock Sprites;
            public TagBlockList<BitmapGroupSpriteBlock> SpritesList
            {
                get
                {
                    return this.spritesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.spritesList.Clear();
                this.Name = String32.Empty;
                this.FirstBitmapIndex = 0;
                this.BitmapCount = 0;
                this.EmptyString = new byte[16];
                this.Sprites = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.FirstBitmapIndex = reader.ReadInt16();
                this.BitmapCount = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(16);
                this.Sprites = reader.ReadInt64();
                this.spritesList.Read(reader, this.Sprites);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class BitmapGroupSpriteBlock : AbideTagBlock
            {
                [FieldAttribute("Bitmap Index*", typeof(Int16))]
                public Int16 BitmapIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [FieldAttribute("Left*", typeof(Single))]
                public Single Left;
                [FieldAttribute("Right*", typeof(Single))]
                public Single Right;
                [FieldAttribute("Top*", typeof(Single))]
                public Single Top;
                [FieldAttribute("Bottom*", typeof(Single))]
                public Single Bottom;
                [FieldAttribute("Registration Point*", typeof(Vector2))]
                public Vector2 RegistrationPoint;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.BitmapIndex = 0;
                    this.EmptyString = new byte[2];
                    this.EmptyString1 = new byte[4];
                    this.Left = 0;
                    this.Right = 0;
                    this.Top = 0;
                    this.Bottom = 0;
                    this.RegistrationPoint = Vector2.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.BitmapIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.EmptyString1 = reader.ReadBytes(4);
                    this.Left = reader.ReadSingle();
                    this.Right = reader.ReadSingle();
                    this.Top = reader.ReadSingle();
                    this.Bottom = reader.ReadSingle();
                    this.RegistrationPoint = reader.Read<Vector2>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class BitmapDataBlock : AbideTagBlock
        {
            [FieldAttribute("Signature*", typeof(Tag))]
            public Tag Signature;
            [FieldAttribute("Width*:pixels", typeof(Int16))]
            public Int16 Width;
            [FieldAttribute("Height*:pixels", typeof(Int16))]
            public Int16 Height;
            [FieldAttribute("Depth*:pixels#Depth is 1 for 2D textures and cube maps.", typeof(Byte))]
            public Byte Depth;
            [FieldAttribute("More Flags", typeof(MoreFlagsOptions))]
            [OptionsAttribute(typeof(MoreFlagsOptions), true)]
            public MoreFlagsOptions MoreFlags;
            [FieldAttribute("Type*#Determines bitmap \"geometry.\"", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("Format*#Determines how pixels are represented internally.", typeof(FormatOptions))]
            [OptionsAttribute(typeof(FormatOptions), false)]
            public FormatOptions Format;
            [FieldAttribute("Flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Registration Point*", typeof(Vector2))]
            public Vector2 RegistrationPoint;
            [FieldAttribute("mipmap Count*", typeof(Int16))]
            public Int16 MipmapCount;
            [FieldAttribute("Low-Detail mipmap Count*", typeof(Int16))]
            public Int16 LowDetailMipmapCount;
            [FieldAttribute("Pixels Offset*", typeof(Int32))]
            public Int32 PixelsOffset;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString7;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString8;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString9;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Signature = "null";
                this.Width = 0;
                this.Height = 0;
                this.Depth = 0;
                this.MoreFlags = ((MoreFlagsOptions)(0));
                this.Type = ((TypeOptions)(0));
                this.Format = ((FormatOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.RegistrationPoint = Vector2.Zero;
                this.MipmapCount = 0;
                this.LowDetailMipmapCount = 0;
                this.PixelsOffset = 0;
                this.EmptyString = new byte[12];
                this.EmptyString1 = new byte[12];
                this.EmptyString2 = new byte[12];
                this.EmptyString3 = new byte[12];
                this.EmptyString4 = new byte[4];
                this.EmptyString5 = new byte[4];
                this.EmptyString6 = new byte[4];
                this.EmptyString7 = new byte[4];
                this.EmptyString8 = new byte[20];
                this.EmptyString9 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.Signature = reader.Read<Tag>();
                this.Width = reader.ReadInt16();
                this.Height = reader.ReadInt16();
                this.Depth = reader.ReadByte();
                this.MoreFlags = ((MoreFlagsOptions)(reader.ReadByte()));
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.Format = ((FormatOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.RegistrationPoint = reader.Read<Vector2>();
                this.MipmapCount = reader.ReadInt16();
                this.LowDetailMipmapCount = reader.ReadInt16();
                this.PixelsOffset = reader.ReadInt32();
                this.EmptyString = reader.ReadBytes(12);
                this.EmptyString1 = reader.ReadBytes(12);
                this.EmptyString2 = reader.ReadBytes(12);
                this.EmptyString3 = reader.ReadBytes(12);
                this.EmptyString4 = reader.ReadBytes(4);
                this.EmptyString5 = reader.ReadBytes(4);
                this.EmptyString6 = reader.ReadBytes(4);
                this.EmptyString7 = reader.ReadBytes(4);
                this.EmptyString8 = reader.ReadBytes(20);
                this.EmptyString9 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum MoreFlagsOptions : Byte
            {
                DeleteFromCacheFile = 1,
                BitmapCreateAttempted = 2,
                EmptyString = 4,
            }
            public enum TypeOptions : Int16
            {
                _2dTexture = 0,
                _3dTexture = 1,
                CubeMap = 2,
            }
            public enum FormatOptions : Int16
            {
                A8 = 0,
                Y8 = 1,
                Ay8 = 2,
                A8y8 = 3,
                Unused1 = 4,
                Unused2 = 5,
                R5g6b5 = 6,
                Unused3 = 7,
                A1r5g5b5 = 8,
                A4r4g4b4 = 9,
                X8r8g8b8 = 10,
                A8r8g8b8 = 11,
                Unused4 = 12,
                Unused5 = 13,
                Dxt1 = 14,
                Dxt3 = 15,
                Dxt5 = 16,
                P8Bump = 17,
                P8 = 18,
                Argbfp32 = 19,
                Rgbfp32 = 20,
                Rgbfp16 = 21,
                V8u8 = 22,
                G8b8 = 23,
            }
            public enum FlagsOptions : Int16
            {
                PowerOfTwoDimensions = 1,
                Compressed = 2,
                Palettized = 4,
                Swizzled = 8,
                Linear = 16,
                V16u16 = 32,
                MipMapDebugLevel = 64,
                PreferStutterPreferLowDetail = 128,
            }
        }
        public enum TypeOptions : Int16
        {
            _2dTextures = 0,
            _3dTextures = 1,
            CubeMaps = 2,
            Sprites = 3,
            InterfaceBitmaps = 4,
        }
        public enum FormatOptions : Int16
        {
            CompressedWithColorKeyTransparency = 0,
            CompressedWithExplicitAlpha = 1,
            CompressedWithInterpolatedAlpha = 2,
            _16BitColor = 3,
            _32BitColor = 4,
            Monochrome = 5,
        }
        public enum UsageOptions : Int16
        {
            AlphaBlend = 0,
            Default = 1,
            HeightMap = 2,
            DetailMap = 3,
            LightMap = 4,
            VectorMap = 5,
            HeightMapBlue255 = 6,
            Embm = 7,
            HeightMapA8l8 = 8,
            HeightMapG8b8 = 9,
            HeightMapG8b8WAlpha = 10,
        }
        public enum FlagsOptions : Int16
        {
            EnableDiffusionDithering = 1,
            DisableHeightMapCompression = 2,
            UniformSpriteSequences = 4,
            FilthySpriteBugFix = 8,
            UseSharpBumpFilter = 16,
            Unused = 32,
            UseClampedmirroredBumpFilter = 64,
            InvertDetailFade = 128,
            SwapXYVectorComponents = 256,
            ConvertFromSigned = 512,
            ConvertToSigned = 1024,
            ImportMipmapChains = 2048,
            IntentionallyTrueColor = 4096,
        }
        public enum EmptyStringOptions : Int16
        {
            _32X32 = 0,
            _64X64 = 1,
            _128X128 = 2,
            _256X256 = 3,
            _512X512 = 4,
            _1024X1024 = 5,
        }
        public enum SpriteUsageOptions : Int16
        {
            Blendaddsubtractmax = 0,
            Multiplymin = 1,
            DoubleMultiply = 2,
        }
        public enum ForceFormatOptions : Int16
        {
            Default = 0,
            ForceG8b8 = 1,
            ForceDxt1 = 2,
            ForceDxt3 = 3,
            ForceDxt5 = 4,
            ForceAlphaLuminance8 = 5,
            ForceA4r4g4b4 = 6,
        }
    }
}
#pragma warning restore CS1591
