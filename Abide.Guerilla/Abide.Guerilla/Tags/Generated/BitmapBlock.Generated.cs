#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(112, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("bitmap", 1651078253u, 4294967293u, typeof(BitmapBlock))]
    public sealed class BitmapBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
        public Int16 Type1;
        [Abide.Guerilla.Tags.FieldAttribute("Format", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FormatOptions), false)]
        public Int16 Format1;
        [Abide.Guerilla.Tags.FieldAttribute("Usage", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(UsageOptions), false)]
        public Int16 Usage1;
        [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int16 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("Detail Fade Factor:[0,1]#0 means fade to gray by last mipmap; 1 means fade to gra" +
            "y by first mipmap.", typeof(Single))]
        public Single DetailFadeFactor;
        [Abide.Guerilla.Tags.FieldAttribute("Sharpen Amount:[0,1]#Sharpens mipmap after downsampling.", typeof(Single))]
        public Single SharpenAmount;
        [Abide.Guerilla.Tags.FieldAttribute("Bump Height:repeats#tApparent height of the bump map above the triangle onto whic" +
            "h it is textured, in texture repeats (i.e., 1.0 would be as high as the texture " +
            "is wide).", typeof(Single))]
        public Single BumpHeight;
        [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(EmptyStringOptions), false)]
        public Int16 EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Int16))]
        public Int16 EmptyString2;
        [Abide.Guerilla.Tags.FieldAttribute("Color Plate Width*:pixels", typeof(Int16))]
        public Int16 ColorPlateWidth;
        [Abide.Guerilla.Tags.FieldAttribute("Color Plate Height*:pixels", typeof(Int16))]
        public Int16 ColorPlateHeight;
        [Abide.Guerilla.Tags.FieldAttribute("Blur Filter Size:[0,10] pixels#Blurs the bitmap before generating mipmaps.", typeof(Single))]
        public Single BlurFilterSize;
        [Abide.Guerilla.Tags.FieldAttribute("Alpha Bias:[-1,1]#Affects alpha mipmap generation.", typeof(Single))]
        public Single AlphaBias;
        [Abide.Guerilla.Tags.FieldAttribute("Mipmap Count:levels#0 Defaults to all levels.", typeof(Int16))]
        public Int16 MipmapCount;
        [Abide.Guerilla.Tags.FieldAttribute("Sprite Usage", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpriteUsageOptions), false)]
        public Int16 SpriteUsage;
        [Abide.Guerilla.Tags.FieldAttribute("Sprite Spacing*", typeof(Int16))]
        public Int16 SpriteSpacing;
        [Abide.Guerilla.Tags.FieldAttribute("Force Format", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(ForceFormatOptions), false)]
        public Int16 ForceFormat;
        [Abide.Guerilla.Tags.FieldAttribute("Sequences*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("bitmap_group_sequence_block", 256, typeof(BitmapGroupSequenceBlock))]
        public TagBlock Sequences;
        [Abide.Guerilla.Tags.FieldAttribute("Bitmaps*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("bitmap_data_block", 65536, typeof(BitmapDataBlock))]
        public TagBlock Bitmaps;
        [Abide.Guerilla.Tags.FieldAttribute("color compression quality:[1,127]#1 means lossless, 127 means crappy", typeof(Byte))]
        public Byte ColorCompressionQuality;
        [Abide.Guerilla.Tags.FieldAttribute("alpha compression quality:[1,127]#1 means lossless, 127 means crappy", typeof(Byte))]
        public Byte AlphaCompressionQuality;
        [Abide.Guerilla.Tags.FieldAttribute("overlap*", typeof(Byte))]
        public Byte Overlap;
        [Abide.Guerilla.Tags.FieldAttribute("color subsampling*", typeof(Byte))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(ColorSubsamplingOptions), false)]
        public Byte ColorSubsampling;
        public int Size
        {
            get
            {
                return 112;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class BitmapGroupSequenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("First Bitmap Index*", typeof(Int16))]
            public Int16 FirstBitmapIndex;
            [Abide.Guerilla.Tags.FieldAttribute("Bitmap Count*", typeof(Int16))]
            public Int16 BitmapCount;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Sprites*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("bitmap_group_sprite_block", 64, typeof(BitmapGroupSpriteBlock))]
            public TagBlock Sprites;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class BitmapGroupSpriteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap Index*", typeof(Int16))]
                public Int16 BitmapIndex;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Left*", typeof(Single))]
                public Single Left;
                [Abide.Guerilla.Tags.FieldAttribute("Right*", typeof(Single))]
                public Single Right;
                [Abide.Guerilla.Tags.FieldAttribute("Top*", typeof(Single))]
                public Single Top;
                [Abide.Guerilla.Tags.FieldAttribute("Bottom*", typeof(Single))]
                public Single Bottom;
                [Abide.Guerilla.Tags.FieldAttribute("Registration Point*", typeof(Vector2))]
                public Vector2 RegistrationPoint;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(116, 4)]
        public sealed class BitmapDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Signature*", typeof(Tag))]
            public Tag Signature;
            [Abide.Guerilla.Tags.FieldAttribute("Width*:pixels", typeof(Int16))]
            public Int16 Width;
            [Abide.Guerilla.Tags.FieldAttribute("Height*:pixels", typeof(Int16))]
            public Int16 Height;
            [Abide.Guerilla.Tags.FieldAttribute("Depth*:pixels#Depth is 1 for 2D textures and cube maps.", typeof(Byte))]
            public Byte Depth;
            [Abide.Guerilla.Tags.FieldAttribute("More Flags", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(MoreFlagsOptions), true)]
            public Byte MoreFlags;
            [Abide.Guerilla.Tags.FieldAttribute("Type*#Determines bitmap \"geometry.\"", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Format*#Determines how pixels are represented internally.", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FormatOptions), false)]
            public Int16 Format;
            [Abide.Guerilla.Tags.FieldAttribute("Flags*", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Registration Point*", typeof(Vector2))]
            public Vector2 RegistrationPoint;
            [Abide.Guerilla.Tags.FieldAttribute("mipmap Count*", typeof(Int16))]
            public Int16 MipmapCount;
            [Abide.Guerilla.Tags.FieldAttribute("Low-Detail mipmap Count*", typeof(Int16))]
            public Int16 LowDetailMipmapCount;
            [Abide.Guerilla.Tags.FieldAttribute("Pixels Offset*", typeof(Int32))]
            public Int32 PixelsOffset;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString7;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString8;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString9;
            public int Size
            {
                get
                {
                    return 116;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum MoreFlagsOptions
            {
                DeleteFromCacheFile = 1,
                BitmapCreateAttempted = 2,
                EmptyString = 4,
            }
            public enum TypeOptions
            {
                _2dTexture = 0,
                _3dTexture = 1,
                CubeMap = 2,
            }
            public enum FormatOptions
            {
                A8 = 0,
                Y8 = 1,
                Ay8 = 2,
                A8y8 = 3,
                Unused1 = 4,
                Unused2 = 5,
                R5g6b5 = 6,
                Unused3 = 7,
                A1r5g5b5 = 8,
                A4r4g4b4 = 9,
                X8r8g8b8 = 10,
                A8r8g8b8 = 11,
                Unused4 = 12,
                Unused5 = 13,
                Dxt1 = 14,
                Dxt3 = 15,
                Dxt5 = 16,
                P8Bump = 17,
                P8 = 18,
                Argbfp32 = 19,
                Rgbfp32 = 20,
                Rgbfp16 = 21,
                V8u8 = 22,
                G8b8 = 23,
            }
            public enum FlagsOptions
            {
                PowerOfTwoDimensions = 1,
                Compressed = 2,
                Palettized = 4,
                Swizzled = 8,
                Linear = 16,
                V16u16 = 32,
                MipMapDebugLevel = 64,
                PreferStutterPreferLowDetail = 128,
            }
        }
        public enum TypeOptions
        {
            _2dTextures = 0,
            _3dTextures = 1,
            CubeMaps = 2,
            Sprites = 3,
            InterfaceBitmaps = 4,
        }
        public enum FormatOptions
        {
            CompressedWithColorKeyTransparency = 0,
            CompressedWithExplicitAlpha = 1,
            CompressedWithInterpolatedAlpha = 2,
            _16BitColor = 3,
            _32BitColor = 4,
            Monochrome = 5,
        }
        public enum UsageOptions
        {
            AlphaBlend = 0,
            Default = 1,
            HeightMap = 2,
            DetailMap = 3,
            LightMap = 4,
            VectorMap = 5,
            HeightMapBlue255 = 6,
            Embm = 7,
            HeightMapA8l8 = 8,
            HeightMapG8b8 = 9,
            HeightMapG8b8WAlpha = 10,
        }
        public enum FlagsOptions
        {
            EnableDiffusionDithering = 1,
            DisableHeightMapCompression = 2,
            UniformSpriteSequences = 4,
            FilthySpriteBugFix = 8,
            UseSharpBumpFilter = 16,
            Unused = 32,
            UseClampedmirroredBumpFilter = 64,
            InvertDetailFade = 128,
            SwapXYVectorComponents = 256,
            ConvertFromSigned = 512,
            ConvertToSigned = 1024,
            ImportMipmapChains = 2048,
            IntentionallyTrueColor = 4096,
        }
        public enum EmptyStringOptions
        {
            _32X32 = 0,
            _64X64 = 1,
            _128X128 = 2,
            _256X256 = 3,
            _512X512 = 4,
            _1024X1024 = 5,
        }
        public enum SpriteUsageOptions
        {
            Blendaddsubtractmax = 0,
            Multiplymin = 1,
            DoubleMultiply = 2,
        }
        public enum ForceFormatOptions
        {
            Default = 0,
            ForceG8b8 = 1,
            ForceDxt1 = 2,
            ForceDxt3 = 3,
            ForceDxt5 = 4,
            ForceAlphaLuminance8 = 5,
            ForceA4r4g4b4 = 6,
        }
        public enum ColorSubsamplingOptions
        {
            _4 = 0,
            _41 = 1,
            _42 = 2,
            _43 = 3,
        }
    }
}
#pragma warning restore CS1591
