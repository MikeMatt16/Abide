#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(256, 4)]
    [TagGroupAttribute("object", 1868720741u, 4294967293u, typeof(ObjectBlock))]
    public sealed class ObjectBlock : AbideTagBlock
    {
        private TagBlockList<ObjectAiPropertiesBlock> aiPropertiesList = new TagBlockList<ObjectAiPropertiesBlock>(1);
        private TagBlockList<ObjectFunctionBlock> functionsList = new TagBlockList<ObjectFunctionBlock>(256);
        private TagBlockList<ObjectAttachmentBlock> attachmentsList = new TagBlockList<ObjectAttachmentBlock>(16);
        private TagBlockList<ObjectWidgetBlock> widgetsList = new TagBlockList<ObjectWidgetBlock>(4);
        private TagBlockList<OldObjectFunctionBlock> oldFunctionsList = new TagBlockList<OldObjectFunctionBlock>(4);
        private TagBlockList<ObjectChangeColors> changeColorsList = new TagBlockList<ObjectChangeColors>(4);
        private TagBlockList<PredictedResourceBlock> predictedResourcesList = new TagBlockList<PredictedResourceBlock>(2048);
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("bounding radius:world units", typeof(Single))]
        public Single BoundingRadius;
        [FieldAttribute("bounding offset", typeof(Vector3))]
        public Vector3 BoundingOffset;
        [FieldAttribute("acceleration scale:[0,+inf]#marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", typeof(Single))]
        public Single AccelerationScale;
        [FieldAttribute("lightmap shadow mode", typeof(LightmapShadowModeOptions))]
        [OptionsAttribute(typeof(LightmapShadowModeOptions), false)]
        public LightmapShadowModeOptions LightmapShadowMode;
        [FieldAttribute("sweetener size", typeof(SweetenerSizeOptions))]
        [OptionsAttribute(typeof(SweetenerSizeOptions), false)]
        public SweetenerSizeOptions SweetenerSize;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(1)]
        public Byte[] EmptyString1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString2;
        [FieldAttribute("dynamic light sphere radius#sphere to use for dynamic lights and shadows. only us" +
            "ed if not 0", typeof(Single))]
        public Single DynamicLightSphereRadius;
        [FieldAttribute("dynamic light sphere offset#only used if radius not 0", typeof(Vector3))]
        public Vector3 DynamicLightSphereOffset;
        [FieldAttribute("default model variant", typeof(StringId))]
        public StringId DefaultModelVariant;
        [FieldAttribute("model", typeof(TagReference))]
        public TagReference Model;
        [FieldAttribute("crate object", typeof(TagReference))]
        public TagReference CrateObject;
        [FieldAttribute("modifier shader", typeof(TagReference))]
        public TagReference ModifierShader;
        [FieldAttribute("creation effect", typeof(TagReference))]
        public TagReference CreationEffect;
        [FieldAttribute("material effects", typeof(TagReference))]
        public TagReference MaterialEffects;
        [FieldAttribute("ai properties", typeof(TagBlock))]
        [BlockAttribute("object_ai_properties_block", 1, typeof(ObjectAiPropertiesBlock))]
        public TagBlock AiProperties;
        [FieldAttribute("functions", typeof(TagBlock))]
        [BlockAttribute("object_function_block", 256, typeof(ObjectFunctionBlock))]
        public TagBlock Functions;
        [FieldAttribute("Apply collision damage scale#0 means 1.  1 is standard scale.  Some things may wa" +
            "nt to apply more damage", typeof(Single))]
        public Single ApplyCollisionDamageScale;
        [FieldAttribute("min game acc (default)#0-oo", typeof(Single))]
        public Single MinGameAccDefault;
        [FieldAttribute("max game acc (default)#0-oo", typeof(Single))]
        public Single MaxGameAccDefault;
        [FieldAttribute("min game scale (default)#0-1", typeof(Single))]
        public Single MinGameScaleDefault;
        [FieldAttribute("max game scale (default)#0-1", typeof(Single))]
        public Single MaxGameScaleDefault;
        [FieldAttribute("min abs acc (default)#0-oo", typeof(Single))]
        public Single MinAbsAccDefault;
        [FieldAttribute("max abs acc (default)#0-oo", typeof(Single))]
        public Single MaxAbsAccDefault;
        [FieldAttribute("min abs scale (default)#0-1", typeof(Single))]
        public Single MinAbsScaleDefault;
        [FieldAttribute("max abs scale (default)#0-1", typeof(Single))]
        public Single MaxAbsScaleDefault;
        [FieldAttribute("hud text message index", typeof(Int16))]
        public Int16 HudTextMessageIndex;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString3;
        [FieldAttribute("attachments", typeof(TagBlock))]
        [BlockAttribute("object_attachment_block", 16, typeof(ObjectAttachmentBlock))]
        public TagBlock Attachments;
        [FieldAttribute("widgets", typeof(TagBlock))]
        [BlockAttribute("object_widget_block", 4, typeof(ObjectWidgetBlock))]
        public TagBlock Widgets;
        [FieldAttribute("old functions", typeof(TagBlock))]
        [BlockAttribute("old_object_function_block", 4, typeof(OldObjectFunctionBlock))]
        public TagBlock OldFunctions;
        [FieldAttribute("change colors", typeof(TagBlock))]
        [BlockAttribute("object_change_colors", 4, typeof(ObjectChangeColors))]
        public TagBlock ChangeColors;
        [FieldAttribute("predicted resources*", typeof(TagBlock))]
        [BlockAttribute("predicted_resource_block", 2048, typeof(PredictedResourceBlock))]
        public TagBlock PredictedResources;
        public TagBlockList<ObjectAiPropertiesBlock> AiPropertiesList
        {
            get
            {
                return this.aiPropertiesList;
            }
        }
        public TagBlockList<ObjectFunctionBlock> FunctionsList
        {
            get
            {
                return this.functionsList;
            }
        }
        public TagBlockList<ObjectAttachmentBlock> AttachmentsList
        {
            get
            {
                return this.attachmentsList;
            }
        }
        public TagBlockList<ObjectWidgetBlock> WidgetsList
        {
            get
            {
                return this.widgetsList;
            }
        }
        public TagBlockList<OldObjectFunctionBlock> OldFunctionsList
        {
            get
            {
                return this.oldFunctionsList;
            }
        }
        public TagBlockList<ObjectChangeColors> ChangeColorsList
        {
            get
            {
                return this.changeColorsList;
            }
        }
        public TagBlockList<PredictedResourceBlock> PredictedResourcesList
        {
            get
            {
                return this.predictedResourcesList;
            }
        }
        public override int Size
        {
            get
            {
                return 256;
            }
        }
        public override void Initialize()
        {
            this.aiPropertiesList.Clear();
            this.functionsList.Clear();
            this.attachmentsList.Clear();
            this.widgetsList.Clear();
            this.oldFunctionsList.Clear();
            this.changeColorsList.Clear();
            this.predictedResourcesList.Clear();
            this.EmptyString = new byte[2];
            this.Flags = ((FlagsOptions)(0));
            this.BoundingRadius = 0;
            this.BoundingOffset = Vector3.Zero;
            this.AccelerationScale = 0;
            this.LightmapShadowMode = ((LightmapShadowModeOptions)(0));
            this.SweetenerSize = ((SweetenerSizeOptions)(0));
            this.EmptyString1 = new byte[1];
            this.EmptyString2 = new byte[4];
            this.DynamicLightSphereRadius = 0;
            this.DynamicLightSphereOffset = Vector3.Zero;
            this.DefaultModelVariant = StringId.Zero;
            this.Model = TagReference.Null;
            this.CrateObject = TagReference.Null;
            this.ModifierShader = TagReference.Null;
            this.CreationEffect = TagReference.Null;
            this.MaterialEffects = TagReference.Null;
            this.AiProperties = TagBlock.Zero;
            this.Functions = TagBlock.Zero;
            this.ApplyCollisionDamageScale = 0;
            this.MinGameAccDefault = 0;
            this.MaxGameAccDefault = 0;
            this.MinGameScaleDefault = 0;
            this.MaxGameScaleDefault = 0;
            this.MinAbsAccDefault = 0;
            this.MaxAbsAccDefault = 0;
            this.MinAbsScaleDefault = 0;
            this.MaxAbsScaleDefault = 0;
            this.HudTextMessageIndex = 0;
            this.EmptyString3 = new byte[2];
            this.Attachments = TagBlock.Zero;
            this.Widgets = TagBlock.Zero;
            this.OldFunctions = TagBlock.Zero;
            this.ChangeColors = TagBlock.Zero;
            this.PredictedResources = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.EmptyString = reader.ReadBytes(2);
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.BoundingRadius = reader.ReadSingle();
            this.BoundingOffset = reader.Read<Vector3>();
            this.AccelerationScale = reader.ReadSingle();
            this.LightmapShadowMode = ((LightmapShadowModeOptions)(reader.ReadInt16()));
            this.SweetenerSize = ((SweetenerSizeOptions)(reader.ReadByte()));
            this.EmptyString1 = reader.ReadBytes(1);
            this.EmptyString2 = reader.ReadBytes(4);
            this.DynamicLightSphereRadius = reader.ReadSingle();
            this.DynamicLightSphereOffset = reader.Read<Vector3>();
            this.DefaultModelVariant = reader.ReadInt32();
            this.Model = reader.Read<TagReference>();
            this.CrateObject = reader.Read<TagReference>();
            this.ModifierShader = reader.Read<TagReference>();
            this.CreationEffect = reader.Read<TagReference>();
            this.MaterialEffects = reader.Read<TagReference>();
            this.AiProperties = reader.ReadInt64();
            this.aiPropertiesList.Read(reader, this.AiProperties);
            this.Functions = reader.ReadInt64();
            this.functionsList.Read(reader, this.Functions);
            this.ApplyCollisionDamageScale = reader.ReadSingle();
            this.MinGameAccDefault = reader.ReadSingle();
            this.MaxGameAccDefault = reader.ReadSingle();
            this.MinGameScaleDefault = reader.ReadSingle();
            this.MaxGameScaleDefault = reader.ReadSingle();
            this.MinAbsAccDefault = reader.ReadSingle();
            this.MaxAbsAccDefault = reader.ReadSingle();
            this.MinAbsScaleDefault = reader.ReadSingle();
            this.MaxAbsScaleDefault = reader.ReadSingle();
            this.HudTextMessageIndex = reader.ReadInt16();
            this.EmptyString3 = reader.ReadBytes(2);
            this.Attachments = reader.ReadInt64();
            this.attachmentsList.Read(reader, this.Attachments);
            this.Widgets = reader.ReadInt64();
            this.widgetsList.Read(reader, this.Widgets);
            this.OldFunctions = reader.ReadInt64();
            this.oldFunctionsList.Read(reader, this.OldFunctions);
            this.ChangeColors = reader.ReadInt64();
            this.changeColorsList.Read(reader, this.ChangeColors);
            this.PredictedResources = reader.ReadInt64();
            this.predictedResourcesList.Read(reader, this.PredictedResources);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ObjectAiPropertiesBlock : AbideTagBlock
        {
            [FieldAttribute("ai flags", typeof(AiFlagsOptions))]
            [OptionsAttribute(typeof(AiFlagsOptions), true)]
            public AiFlagsOptions AiFlags;
            [FieldAttribute("ai type name#used for combat dialogue, etc.", typeof(StringId))]
            public StringId AiTypeName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("ai size", typeof(AiSizeOptions))]
            [OptionsAttribute(typeof(AiSizeOptions), false)]
            public AiSizeOptions AiSize;
            [FieldAttribute("leap jump speed", typeof(LeapJumpSpeedOptions))]
            [OptionsAttribute(typeof(LeapJumpSpeedOptions), false)]
            public LeapJumpSpeedOptions LeapJumpSpeed;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.AiFlags = ((AiFlagsOptions)(0));
                this.AiTypeName = StringId.Zero;
                this.EmptyString = new byte[4];
                this.AiSize = ((AiSizeOptions)(0));
                this.LeapJumpSpeed = ((LeapJumpSpeedOptions)(0));
            }
            public override void Read(BinaryReader reader)
            {
                this.AiFlags = ((AiFlagsOptions)(reader.ReadInt32()));
                this.AiTypeName = reader.ReadInt32();
                this.EmptyString = reader.ReadBytes(4);
                this.AiSize = ((AiSizeOptions)(reader.ReadInt16()));
                this.LeapJumpSpeed = ((LeapJumpSpeedOptions)(reader.ReadInt16()));
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum AiFlagsOptions : Int32
            {
                DetroyableCover = 1,
                PathfindingIgnoreWhenDead = 2,
                DynamicCover = 4,
            }
            public enum AiSizeOptions : Int16
            {
                Default = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                Immobile = 6,
            }
            public enum LeapJumpSpeedOptions : Int16
            {
                None = 0,
                Down = 1,
                Step = 2,
                Crouch = 3,
                Stand = 4,
                Storey = 5,
                Tower = 6,
                Infinite = 7,
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class ObjectFunctionBlock : AbideTagBlock
        {
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("import name", typeof(StringId))]
            public StringId ImportName;
            [FieldAttribute("export name", typeof(StringId))]
            public StringId ExportName;
            [FieldAttribute("turn off with#if the specified function is off, so is this function", typeof(StringId))]
            public StringId TurnOffWith;
            [FieldAttribute("min value#function must exceed this value (after mapping) to be active 0. means d" +
                "o nothing", typeof(Single))]
            public Single MinValue;
            [FieldAttribute("default function", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock DefaultFunction;
            [FieldAttribute("scale by", typeof(StringId))]
            public StringId ScaleBy;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.ImportName = StringId.Zero;
                this.ExportName = StringId.Zero;
                this.TurnOffWith = StringId.Zero;
                this.MinValue = 0;
                this.DefaultFunction = new MappingFunctionBlock();
                this.ScaleBy = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.ImportName = reader.ReadInt32();
                this.ExportName = reader.ReadInt32();
                this.TurnOffWith = reader.ReadInt32();
                this.MinValue = reader.ReadSingle();
                this.DefaultFunction = reader.ReadDataStructure<MappingFunctionBlock>();
                this.ScaleBy = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class MappingFunctionBlock : AbideTagBlock
            {
                private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                [FieldAttribute("data", typeof(TagBlock))]
                [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                public TagBlock Data;
                public TagBlockList<ByteBlock> DataList
                {
                    get
                    {
                        return this.dataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.dataList.Clear();
                    this.Data = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Data = reader.ReadInt64();
                    this.dataList.Read(reader, this.Data);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(1, 4)]
                public sealed class ByteBlock : AbideTagBlock
                {
                    [FieldAttribute("Value", typeof(Byte))]
                    public Byte Value;
                    public override int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Value = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Value = reader.ReadByte();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            public enum FlagsOptions : Int32
            {
                Invert = 1,
                MappingDoesNotControlsActive = 2,
                AlwaysActive = 4,
                RandomTimeOffset = 8,
            }
        }
        [FieldSetAttribute(32, 4)]
        public sealed class ObjectAttachmentBlock : AbideTagBlock
        {
            [FieldAttribute("type^", typeof(TagReference))]
            public TagReference Type;
            [FieldAttribute("marker", typeof(StringId))]
            public StringId Marker;
            [FieldAttribute("change color", typeof(ChangeColorOptions))]
            [OptionsAttribute(typeof(ChangeColorOptions), false)]
            public ChangeColorOptions ChangeColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("primary scale", typeof(StringId))]
            public StringId PrimaryScale;
            [FieldAttribute("secondary scale", typeof(StringId))]
            public StringId SecondaryScale;
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.Type = TagReference.Null;
                this.Marker = StringId.Zero;
                this.ChangeColor = ((ChangeColorOptions)(0));
                this.EmptyString = new byte[2];
                this.PrimaryScale = StringId.Zero;
                this.SecondaryScale = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.Read<TagReference>();
                this.Marker = reader.ReadInt32();
                this.ChangeColor = ((ChangeColorOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.PrimaryScale = reader.ReadInt32();
                this.SecondaryScale = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum ChangeColorOptions : Int16
            {
                None = 0,
                Primary = 1,
                Secondary = 2,
                Tertiary = 3,
                Quaternary = 4,
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ObjectWidgetBlock : AbideTagBlock
        {
            [FieldAttribute("type", typeof(TagReference))]
            public TagReference Type;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Type = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class OldObjectFunctionBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(76)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(StringId))]
            public StringId EmptyString1;
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[76];
                this.EmptyString1 = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(76);
                this.EmptyString1 = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class ObjectChangeColors : AbideTagBlock
        {
            private TagBlockList<ObjectChangeColorInitialPermutation> initialPermutationsList = new TagBlockList<ObjectChangeColorInitialPermutation>(32);
            private TagBlockList<ObjectChangeColorFunction> functionsList = new TagBlockList<ObjectChangeColorFunction>(4);
            [FieldAttribute("initial permutations", typeof(TagBlock))]
            [BlockAttribute("object_change_color_initial_permutation", 32, typeof(ObjectChangeColorInitialPermutation))]
            public TagBlock InitialPermutations;
            [FieldAttribute("functions", typeof(TagBlock))]
            [BlockAttribute("object_change_color_function", 4, typeof(ObjectChangeColorFunction))]
            public TagBlock Functions;
            public TagBlockList<ObjectChangeColorInitialPermutation> InitialPermutationsList
            {
                get
                {
                    return this.initialPermutationsList;
                }
            }
            public TagBlockList<ObjectChangeColorFunction> FunctionsList
            {
                get
                {
                    return this.functionsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.initialPermutationsList.Clear();
                this.functionsList.Clear();
                this.InitialPermutations = TagBlock.Zero;
                this.Functions = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.InitialPermutations = reader.ReadInt64();
                this.initialPermutationsList.Read(reader, this.InitialPermutations);
                this.Functions = reader.ReadInt64();
                this.functionsList.Read(reader, this.Functions);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class ObjectChangeColorInitialPermutation : AbideTagBlock
            {
                [FieldAttribute("weight", typeof(Single))]
                public Single Weight;
                [FieldAttribute("color lower bound", typeof(ColorRgbF))]
                public ColorRgbF ColorLowerBound;
                [FieldAttribute("color upper bound", typeof(ColorRgbF))]
                public ColorRgbF ColorUpperBound;
                [FieldAttribute("variant name#if empty, may be used by any model variant", typeof(StringId))]
                public StringId VariantName;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.Weight = 0;
                    this.ColorLowerBound = ColorRgbF.Zero;
                    this.ColorUpperBound = ColorRgbF.Zero;
                    this.VariantName = StringId.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Weight = reader.ReadSingle();
                    this.ColorLowerBound = reader.Read<ColorRgbF>();
                    this.ColorUpperBound = reader.Read<ColorRgbF>();
                    this.VariantName = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class ObjectChangeColorFunction : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("scale flags", typeof(ScaleFlagsOptions))]
                [OptionsAttribute(typeof(ScaleFlagsOptions), true)]
                public ScaleFlagsOptions ScaleFlags;
                [FieldAttribute("color lower bound", typeof(ColorRgbF))]
                public ColorRgbF ColorLowerBound;
                [FieldAttribute("color upper bound", typeof(ColorRgbF))]
                public ColorRgbF ColorUpperBound;
                [FieldAttribute("darken by", typeof(StringId))]
                public StringId DarkenBy;
                [FieldAttribute("scale by", typeof(StringId))]
                public StringId ScaleBy;
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[4];
                    this.ScaleFlags = ((ScaleFlagsOptions)(0));
                    this.ColorLowerBound = ColorRgbF.Zero;
                    this.ColorUpperBound = ColorRgbF.Zero;
                    this.DarkenBy = StringId.Zero;
                    this.ScaleBy = StringId.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(4);
                    this.ScaleFlags = ((ScaleFlagsOptions)(reader.ReadInt32()));
                    this.ColorLowerBound = reader.Read<ColorRgbF>();
                    this.ColorUpperBound = reader.Read<ColorRgbF>();
                    this.DarkenBy = reader.ReadInt32();
                    this.ScaleBy = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ScaleFlagsOptions : Int32
                {
                    BlendInHsv = 1,
                    MoreColors = 2,
                }
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class PredictedResourceBlock : AbideTagBlock
        {
            [FieldAttribute("type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("resource index", typeof(Int16))]
            public Int16 ResourceIndex;
            [FieldAttribute("tag index", typeof(Int32))]
            public Int32 TagIndex;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.Type = ((TypeOptions)(0));
                this.ResourceIndex = 0;
                this.TagIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.ResourceIndex = reader.ReadInt16();
                this.TagIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TypeOptions : Int16
            {
                Bitmap = 0,
                Sound = 1,
                RenderModelGeometry = 2,
                ClusterGeometry = 3,
                ClusterInstancedGeometry = 4,
                LightmapGeometryObjectBuckets = 5,
                LightmapGeometryInstanceBuckets = 6,
                LightmapClusterBitmaps = 7,
                LightmapInstanceBitmaps = 8,
            }
        }
        public enum FlagsOptions : Int16
        {
            DoesNotCastShadow = 1,
            SearchCardinalDirectionLightmapsOnFailure = 2,
            Unused = 4,
            NotAPathfindingObstacle = 8,
            ExtensionOfParent = 16,
            DoesNotCauseCollisionDamage = 32,
            EarlyMover = 64,
            EarlyMoverLocalizedPhysics = 128,
            UseStaticMassiveLightmapSample = 256,
            ObjectScalesAttachments = 512,
            InheritsPlayersAppearance = 1024,
            DeadBipedsCantLocalize = 2048,
            AttachToClustersByDynamicSphere = 4096,
            EffectsCreatedByThisObjectDoNotSpawnObjectsInMultiplayer = 8192,
        }
        public enum LightmapShadowModeOptions : Int16
        {
            Default = 0,
            Never = 1,
            Always = 2,
        }
        public enum SweetenerSizeOptions : Byte
        {
            Small = 0,
            Medium = 1,
            Large = 2,
        }
    }
}
#pragma warning restore CS1591
