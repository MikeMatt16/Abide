#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(256, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("object", 1868720741u, 4294967293u, typeof(ObjectBlock))]
    public sealed class ObjectBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int16 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("bounding radius:world units", typeof(Single))]
        public Single BoundingRadius;
        [Abide.Guerilla.Tags.FieldAttribute("bounding offset", typeof(Vector3))]
        public Vector3 BoundingOffset;
        [Abide.Guerilla.Tags.FieldAttribute("acceleration scale:[0,+inf]#marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", typeof(Single))]
        public Single AccelerationScale;
        [Abide.Guerilla.Tags.FieldAttribute("lightmap shadow mode", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(LightmapShadowModeOptions), false)]
        public Int16 LightmapShadowMode;
        [Abide.Guerilla.Tags.FieldAttribute("sweetener size", typeof(Byte))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(SweetenerSizeOptions), false)]
        public Byte SweetenerSize;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(1)]
        public Byte[] EmptyString2;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString3;
        [Abide.Guerilla.Tags.FieldAttribute("dynamic light sphere radius#sphere to use for dynamic lights and shadows. only us" +
            "ed if not 0", typeof(Single))]
        public Single DynamicLightSphereRadius;
        [Abide.Guerilla.Tags.FieldAttribute("dynamic light sphere offset#only used if radius not 0", typeof(Vector3))]
        public Vector3 DynamicLightSphereOffset;
        [Abide.Guerilla.Tags.FieldAttribute("default model variant", typeof(StringId))]
        public StringId DefaultModelVariant;
        [Abide.Guerilla.Tags.FieldAttribute("model", typeof(TagReference))]
        public TagReference Model;
        [Abide.Guerilla.Tags.FieldAttribute("crate object", typeof(TagReference))]
        public TagReference CrateObject;
        [Abide.Guerilla.Tags.FieldAttribute("modifier shader", typeof(TagReference))]
        public TagReference ModifierShader;
        [Abide.Guerilla.Tags.FieldAttribute("creation effect", typeof(TagReference))]
        public TagReference CreationEffect;
        [Abide.Guerilla.Tags.FieldAttribute("material effects", typeof(TagReference))]
        public TagReference MaterialEffects;
        [Abide.Guerilla.Tags.FieldAttribute("ai properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("object_ai_properties_block", 1, typeof(ObjectAiPropertiesBlock))]
        public TagBlock AiProperties;
        [Abide.Guerilla.Tags.FieldAttribute("functions", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("object_function_block", 256, typeof(ObjectFunctionBlock))]
        public TagBlock Functions;
        [Abide.Guerilla.Tags.FieldAttribute("Apply collision damage scale#0 means 1.  1 is standard scale.  Some things may wa" +
            "nt to apply more damage", typeof(Single))]
        public Single ApplyCollisionDamageScale;
        [Abide.Guerilla.Tags.FieldAttribute("min game acc (default)#0-oo", typeof(Single))]
        public Single MinGameAccDefault;
        [Abide.Guerilla.Tags.FieldAttribute("max game acc (default)#0-oo", typeof(Single))]
        public Single MaxGameAccDefault;
        [Abide.Guerilla.Tags.FieldAttribute("min game scale (default)#0-1", typeof(Single))]
        public Single MinGameScaleDefault;
        [Abide.Guerilla.Tags.FieldAttribute("max game scale (default)#0-1", typeof(Single))]
        public Single MaxGameScaleDefault;
        [Abide.Guerilla.Tags.FieldAttribute("min abs acc (default)#0-oo", typeof(Single))]
        public Single MinAbsAccDefault;
        [Abide.Guerilla.Tags.FieldAttribute("max abs acc (default)#0-oo", typeof(Single))]
        public Single MaxAbsAccDefault;
        [Abide.Guerilla.Tags.FieldAttribute("min abs scale (default)#0-1", typeof(Single))]
        public Single MinAbsScaleDefault;
        [Abide.Guerilla.Tags.FieldAttribute("max abs scale (default)#0-1", typeof(Single))]
        public Single MaxAbsScaleDefault;
        [Abide.Guerilla.Tags.FieldAttribute("hud text message index", typeof(Int16))]
        public Int16 HudTextMessageIndex;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString9;
        [Abide.Guerilla.Tags.FieldAttribute("attachments", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("object_attachment_block", 16, typeof(ObjectAttachmentBlock))]
        public TagBlock Attachments;
        [Abide.Guerilla.Tags.FieldAttribute("widgets", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("object_widget_block", 4, typeof(ObjectWidgetBlock))]
        public TagBlock Widgets;
        [Abide.Guerilla.Tags.FieldAttribute("old functions", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("old_object_function_block", 4, typeof(OldObjectFunctionBlock))]
        public TagBlock OldFunctions;
        [Abide.Guerilla.Tags.FieldAttribute("change colors", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("object_change_colors", 4, typeof(ObjectChangeColors))]
        public TagBlock ChangeColors;
        [Abide.Guerilla.Tags.FieldAttribute("predicted resources*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("predicted_resource_block", 2048, typeof(PredictedResourceBlock))]
        public TagBlock PredictedResources;
        public int Size
        {
            get
            {
                return 256;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ObjectAiPropertiesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("ai flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(AiFlagsOptions), true)]
            public Int32 AiFlags;
            [Abide.Guerilla.Tags.FieldAttribute("ai type name#used for combat dialogue, etc.", typeof(StringId))]
            public StringId AiTypeName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("ai size", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(AiSizeOptions), false)]
            public Int16 AiSize;
            [Abide.Guerilla.Tags.FieldAttribute("leap jump speed", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(LeapJumpSpeedOptions), false)]
            public Int16 LeapJumpSpeed;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum AiFlagsOptions
            {
                DetroyableCover = 1,
                PathfindingIgnoreWhenDead = 2,
                DynamicCover = 4,
            }
            public enum AiSizeOptions
            {
                Default = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                Immobile = 6,
            }
            public enum LeapJumpSpeedOptions
            {
                None = 0,
                Down = 1,
                Step = 2,
                Crouch = 3,
                Stand = 4,
                Storey = 5,
                Tower = 6,
                Infinite = 7,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class ObjectFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("import name", typeof(StringId))]
            public StringId ImportName;
            [Abide.Guerilla.Tags.FieldAttribute("export name", typeof(StringId))]
            public StringId ExportName;
            [Abide.Guerilla.Tags.FieldAttribute("turn off with#if the specified function is off, so is this function", typeof(StringId))]
            public StringId TurnOffWith;
            [Abide.Guerilla.Tags.FieldAttribute("min value#function must exceed this value (after mapping) to be active 0. means d" +
                "o nothing", typeof(Single))]
            public Single MinValue;
            [Abide.Guerilla.Tags.FieldAttribute("default function", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock DefaultFunction1;
            [Abide.Guerilla.Tags.FieldAttribute("scale by", typeof(StringId))]
            public StringId ScaleBy;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                public TagBlock Data;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                    public Byte Value;
                    public int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            public enum FlagsOptions
            {
                Invert = 1,
                MappingDoesNotControlsActive = 2,
                AlwaysActive = 4,
                RandomTimeOffset = 8,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
        public sealed class ObjectAttachmentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("type^", typeof(TagReference))]
            public TagReference Type;
            [Abide.Guerilla.Tags.FieldAttribute("marker", typeof(StringId))]
            public StringId Marker;
            [Abide.Guerilla.Tags.FieldAttribute("change color", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ChangeColorOptions), false)]
            public Int16 ChangeColor;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("primary scale", typeof(StringId))]
            public StringId PrimaryScale;
            [Abide.Guerilla.Tags.FieldAttribute("secondary scale", typeof(StringId))]
            public StringId SecondaryScale;
            public int Size
            {
                get
                {
                    return 32;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum ChangeColorOptions
            {
                None = 0,
                Primary = 1,
                Secondary = 2,
                Tertiary = 3,
                Quaternary = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ObjectWidgetBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("type", typeof(TagReference))]
            public TagReference Type;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
        public sealed class OldObjectFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(76)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(StringId))]
            public StringId EmptyString1;
            public int Size
            {
                get
                {
                    return 80;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
        public sealed class ObjectChangeColors : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("initial permutations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("object_change_color_initial_permutation", 32, typeof(ObjectChangeColorInitialPermutation))]
            public TagBlock InitialPermutations;
            [Abide.Guerilla.Tags.FieldAttribute("functions", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("object_change_color_function", 4, typeof(ObjectChangeColorFunction))]
            public TagBlock Functions;
            public int Size
            {
                get
                {
                    return 24;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class ObjectChangeColorInitialPermutation : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("weight", typeof(Single))]
                public Single Weight;
                [Abide.Guerilla.Tags.FieldAttribute("color lower bound", typeof(ColorRgbF))]
                public ColorRgbF ColorLowerBound;
                [Abide.Guerilla.Tags.FieldAttribute("color upper bound", typeof(ColorRgbF))]
                public ColorRgbF ColorUpperBound;
                [Abide.Guerilla.Tags.FieldAttribute("variant name#if empty, may be used by any model variant", typeof(StringId))]
                public StringId VariantName;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
            public sealed class ObjectChangeColorFunction : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("scale flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScaleFlagsOptions), true)]
                public Int32 ScaleFlags;
                [Abide.Guerilla.Tags.FieldAttribute("color lower bound", typeof(ColorRgbF))]
                public ColorRgbF ColorLowerBound;
                [Abide.Guerilla.Tags.FieldAttribute("color upper bound", typeof(ColorRgbF))]
                public ColorRgbF ColorUpperBound;
                [Abide.Guerilla.Tags.FieldAttribute("darken by", typeof(StringId))]
                public StringId DarkenBy;
                [Abide.Guerilla.Tags.FieldAttribute("scale by", typeof(StringId))]
                public StringId ScaleBy;
                public int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ScaleFlagsOptions
                {
                    BlendInHsv = 1,
                    MoreColors = 2,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class PredictedResourceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("resource index", typeof(Int16))]
            public Int16 ResourceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("tag index", typeof(Int32))]
            public Int32 TagIndex;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum TypeOptions
            {
                Bitmap = 0,
                Sound = 1,
                RenderModelGeometry = 2,
                ClusterGeometry = 3,
                ClusterInstancedGeometry = 4,
                LightmapGeometryObjectBuckets = 5,
                LightmapGeometryInstanceBuckets = 6,
                LightmapClusterBitmaps = 7,
                LightmapInstanceBitmaps = 8,
            }
        }
        public enum FlagsOptions
        {
            DoesNotCastShadow = 1,
            SearchCardinalDirectionLightmapsOnFailure = 2,
            Unused = 4,
            NotAPathfindingObstacle = 8,
            ExtensionOfParent = 16,
            DoesNotCauseCollisionDamage = 32,
            EarlyMover = 64,
            EarlyMoverLocalizedPhysics = 128,
            UseStaticMassiveLightmapSample = 256,
            ObjectScalesAttachments = 512,
            InheritsPlayersAppearance = 1024,
            DeadBipedsCantLocalize = 2048,
            AttachToClustersByDynamicSphere = 4096,
            EffectsCreatedByThisObjectDoNotSpawnObjectsInMultiplayer = 8192,
        }
        public enum LightmapShadowModeOptions
        {
            Default = 0,
            Never = 1,
            Always = 2,
        }
        public enum SweetenerSizeOptions
        {
            Small = 0,
            Medium = 1,
            Large = 2,
        }
    }
}
#pragma warning restore CS1591
