#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(32, 4)]
    [TagGroupAttribute("particle_physics", 1886220150u, 4294967293u, typeof(ParticlePhysicsBlock))]
    public sealed class ParticlePhysicsBlock : AbideTagBlock
    {
        private TagBlockList<ParticleController> movementsList = new TagBlockList<ParticleController>(4);
        [FieldAttribute("template", typeof(TagReference))]
        public TagReference Template;
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("movements", typeof(TagBlock))]
        [BlockAttribute("particle_controller", 4, typeof(ParticleController))]
        public TagBlock Movements;
        public TagBlockList<ParticleController> MovementsList
        {
            get
            {
                return this.movementsList;
            }
        }
        public override int Size
        {
            get
            {
                return 32;
            }
        }
        public override void Initialize()
        {
            this.movementsList.Clear();
            this.Template = TagReference.Null;
            this.Flags = ((FlagsOptions)(0));
            this.Movements = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Template = reader.Read<TagReference>();
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.Movements = reader.ReadInt64();
            this.movementsList.Read(reader, this.Movements);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(24, 4)]
        public sealed class ParticleController : AbideTagBlock
        {
            private TagBlockList<ParticleControllerParameters> parametersList = new TagBlockList<ParticleControllerParameters>(9);
            [FieldAttribute("type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("parameters", typeof(TagBlock))]
            [BlockAttribute("particle_controller_parameters", 9, typeof(ParticleControllerParameters))]
            public TagBlock Parameters;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString1;
            public TagBlockList<ParticleControllerParameters> ParametersList
            {
                get
                {
                    return this.parametersList;
                }
            }
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.parametersList.Clear();
                this.Type = ((TypeOptions)(0));
                this.EmptyString = new byte[2];
                this.Parameters = TagBlock.Zero;
                this.EmptyString1 = new byte[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.Parameters = reader.ReadInt64();
                this.parametersList.Read(reader, this.Parameters);
                this.EmptyString1 = reader.ReadBytes(8);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ParticleControllerParameters : AbideTagBlock
            {
                [FieldAttribute("parameter id", typeof(Int32))]
                public Int32 ParameterId;
                [FieldAttribute("property", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock Property;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.ParameterId = 0;
                    this.Property = new ParticlePropertyScalarStructNewBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.ParameterId = reader.ReadInt32();
                    this.Property = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(20, 4)]
                public sealed class ParticlePropertyScalarStructNewBlock : AbideTagBlock
                {
                    [FieldAttribute("Input Variable", typeof(InputVariableOptions))]
                    [OptionsAttribute(typeof(InputVariableOptions), false)]
                    public InputVariableOptions InputVariable;
                    [FieldAttribute("Range Variable", typeof(RangeVariableOptions))]
                    [OptionsAttribute(typeof(RangeVariableOptions), false)]
                    public RangeVariableOptions RangeVariable;
                    [FieldAttribute("Output Modifier", typeof(OutputModifierOptions))]
                    [OptionsAttribute(typeof(OutputModifierOptions), false)]
                    public OutputModifierOptions OutputModifier;
                    [FieldAttribute("Output Modifier Input", typeof(OutputModifierInputOptions))]
                    [OptionsAttribute(typeof(OutputModifierInputOptions), false)]
                    public OutputModifierInputOptions OutputModifierInput;
                    [FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Mapping;
                    public override int Size
                    {
                        get
                        {
                            return 20;
                        }
                    }
                    public override void Initialize()
                    {
                        this.InputVariable = ((InputVariableOptions)(0));
                        this.RangeVariable = ((RangeVariableOptions)(0));
                        this.OutputModifier = ((OutputModifierOptions)(0));
                        this.OutputModifierInput = ((OutputModifierInputOptions)(0));
                        this.Mapping = new MappingFunctionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.InputVariable = ((InputVariableOptions)(reader.ReadInt16()));
                        this.RangeVariable = ((RangeVariableOptions)(reader.ReadInt16()));
                        this.OutputModifier = ((OutputModifierOptions)(reader.ReadInt16()));
                        this.OutputModifierInput = ((OutputModifierInputOptions)(reader.ReadInt16()));
                        this.Mapping = reader.ReadDataStructure<MappingFunctionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : AbideTagBlock
                    {
                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                        [FieldAttribute("data", typeof(TagBlock))]
                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public TagBlockList<ByteBlock> DataList
                        {
                            get
                            {
                                return this.dataList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.dataList.Clear();
                            this.Data = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Data = reader.ReadInt64();
                            this.dataList.Read(reader, this.Data);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : AbideTagBlock
                        {
                            [FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public override int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Value = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Value = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public enum InputVariableOptions : Int16
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                    public enum RangeVariableOptions : Int16
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                    public enum OutputModifierOptions : Int16
                    {
                        EmptyString = 0,
                        Plus = 1,
                        Times = 2,
                    }
                    public enum OutputModifierInputOptions : Int16
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                }
            }
            public enum TypeOptions : Int16
            {
                Physics = 0,
                Collider = 1,
                Swarm = 2,
                Wind = 3,
            }
        }
        public enum FlagsOptions : Int32
        {
            Physics = 1,
            CollideWithStructure = 2,
            CollideWithMedia = 4,
            CollideWithScenery = 8,
            CollideWithVehicles = 16,
            CollideWithBipeds = 32,
            Swarm = 64,
            Wind = 128,
        }
    }
}
#pragma warning restore CS1591
