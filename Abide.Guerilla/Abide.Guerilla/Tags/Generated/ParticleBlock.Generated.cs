#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(248, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("particle", 1886549043u, 4294967293u, typeof(ParticleBlock))]
    public sealed class ParticleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int32 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("particle billboard style", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(ParticleBillboardStyleOptions), false)]
        public Int16 ParticleBillboardStyle;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("first sequence index", typeof(Int16))]
        public Int16 FirstSequenceIndex;
        [Abide.Guerilla.Tags.FieldAttribute("sequence count", typeof(Int16))]
        public Int16 SequenceCount;
        [Abide.Guerilla.Tags.FieldAttribute("shader template", typeof(TagReference))]
        public TagReference ShaderTemplate;
        [Abide.Guerilla.Tags.FieldAttribute("shader parameters", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("parameter", 64, typeof(GlobalShaderParameterBlock))]
        public TagBlock ShaderParameters1;
        [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ParticlePropertyColorStructNewBlock))]
        public ParticlePropertyColorStructNewBlock Color1;
        [Abide.Guerilla.Tags.FieldAttribute("alpha", typeof(ParticlePropertyScalarStructNewBlock))]
        public ParticlePropertyScalarStructNewBlock Alpha1;
        [Abide.Guerilla.Tags.FieldAttribute("scale", typeof(ParticlePropertyScalarStructNewBlock))]
        public ParticlePropertyScalarStructNewBlock Scale1;
        [Abide.Guerilla.Tags.FieldAttribute("rotation", typeof(ParticlePropertyScalarStructNewBlock))]
        public ParticlePropertyScalarStructNewBlock Rotation1;
        [Abide.Guerilla.Tags.FieldAttribute("frame index", typeof(ParticlePropertyScalarStructNewBlock))]
        public ParticlePropertyScalarStructNewBlock FrameIndex1;
        [Abide.Guerilla.Tags.FieldAttribute("collision effect#effect, material effect or sound spawned when this particle coll" +
            "ides with something", typeof(TagReference))]
        public TagReference CollisionEffect;
        [Abide.Guerilla.Tags.FieldAttribute("death effect#effect, material effect or sound spawned when this particle dies", typeof(TagReference))]
        public TagReference DeathEffect;
        [Abide.Guerilla.Tags.FieldAttribute("locations", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("effect_locations_block", 32, typeof(EffectLocationsBlock))]
        public TagBlock Locations;
        [Abide.Guerilla.Tags.FieldAttribute("attached particle systems", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("particle_system_definition_block_new", 32, typeof(ParticleSystemDefinitionBlockNew))]
        public TagBlock AttachedParticleSystems1;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_definition_new_block", 1, typeof(ShaderPostprocessDefinitionNewBlock))]
        public TagBlock EmptyString3;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(8)]
        public Byte[] EmptyString4;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(16)]
        public Byte[] EmptyString5;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(16)]
        public Byte[] EmptyString6;
        public int Size
        {
            get
            {
                return 248;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class GlobalShaderParameterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Bitmap", typeof(TagReference))]
            public TagReference Bitmap;
            [Abide.Guerilla.Tags.FieldAttribute("Const Value", typeof(Single))]
            public Single ConstValue;
            [Abide.Guerilla.Tags.FieldAttribute("Const Color", typeof(ColorRgbF))]
            public ColorRgbF ConstColor;
            [Abide.Guerilla.Tags.FieldAttribute("Animation Properties", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("animation property", 14, typeof(ShaderAnimationPropertyBlock))]
            public TagBlock AnimationProperties;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
            public sealed class ShaderAnimationPropertyBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Type^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("Input Name", typeof(StringId))]
                public StringId InputName;
                [Abide.Guerilla.Tags.FieldAttribute("Range Name", typeof(StringId))]
                public StringId RangeName;
                [Abide.Guerilla.Tags.FieldAttribute("Time Period:sec", typeof(Single))]
                public Single TimePeriod;
                [Abide.Guerilla.Tags.FieldAttribute("Function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function1;
                public int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                public enum TypeOptions
                {
                    BitmapScaleUniform = 0,
                    BitmapScaleX = 1,
                    BitmapScaleY = 2,
                    BitmapScaleZ = 3,
                    BitmapTranslationX = 4,
                    BitmapTranslationY = 5,
                    BitmapTranslationZ = 6,
                    BitmapRotationAngle = 7,
                    BitmapRotationAxisX = 8,
                    BitmapRotationAxisY = 9,
                    BitmapRotationAxisZ = 10,
                    Value = 11,
                    Color = 12,
                    BitmapIndex = 13,
                }
            }
            public enum TypeOptions
            {
                Bitmap = 0,
                Value = 1,
                Color = 2,
                Switch = 3,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
        public sealed class EffectLocationsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("marker name^", typeof(StringId))]
            public StringId MarkerName;
            public int Size
            {
                get
                {
                    return 4;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
        public sealed class ParticleSystemDefinitionBlockNew : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("particle", typeof(TagReference))]
            public TagReference Particle;
            [Abide.Guerilla.Tags.FieldAttribute("location", typeof(Int32))]
            public Int32 Location;
            [Abide.Guerilla.Tags.FieldAttribute("coordinate system", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CoordinateSystemOptions), false)]
            public Int16 CoordinateSystem;
            [Abide.Guerilla.Tags.FieldAttribute("environment", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(EnvironmentOptions), false)]
            public Int16 Environment;
            [Abide.Guerilla.Tags.FieldAttribute("disposition", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(DispositionOptions), false)]
            public Int16 Disposition;
            [Abide.Guerilla.Tags.FieldAttribute("camera mode", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CameraModeOptions), false)]
            public Int16 CameraMode;
            [Abide.Guerilla.Tags.FieldAttribute("sort bias#use values between -10 and 10 to move closer and farther from camera (p" +
                "ositive is closer)", typeof(Int16))]
            public Int16 SortBias;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("LOD in distance#defaults to 0.0", typeof(Single))]
            public Single LodInDistance;
            [Abide.Guerilla.Tags.FieldAttribute("LOD feather in delta#defaults to 0.0", typeof(Single))]
            public Single LodFeatherInDelta;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("LOD out distance#defaults to 30.0", typeof(Single))]
            public Single LodOutDistance;
            [Abide.Guerilla.Tags.FieldAttribute("LOD feather out delta#defaults to 10.0", typeof(Single))]
            public Single LodFeatherOutDelta;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("emitters", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("particle_system_emitter_definition_block", 8, typeof(ParticleSystemEmitterDefinitionBlock))]
            public TagBlock Emitters;
            public int Size
            {
                get
                {
                    return 68;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(228, 4)]
            public sealed class ParticleSystemEmitterDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("particle physics", typeof(TagReference))]
                public TagReference ParticlePhysics;
                [Abide.Guerilla.Tags.FieldAttribute("particle emission rate", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock ParticleEmissionRate;
                [Abide.Guerilla.Tags.FieldAttribute("particle lifespan", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock ParticleLifespan;
                [Abide.Guerilla.Tags.FieldAttribute("particle velocity", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock ParticleVelocity;
                [Abide.Guerilla.Tags.FieldAttribute("particle angular velocity", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock ParticleAngularVelocity;
                [Abide.Guerilla.Tags.FieldAttribute("particle size", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock ParticleSize;
                [Abide.Guerilla.Tags.FieldAttribute("particle tint", typeof(ParticlePropertyColorStructNewBlock))]
                public ParticlePropertyColorStructNewBlock ParticleTint1;
                [Abide.Guerilla.Tags.FieldAttribute("particle alpha", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock ParticleAlpha1;
                [Abide.Guerilla.Tags.FieldAttribute("emission shape", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EmissionShapeOptions), false)]
                public Int32 EmissionShape;
                [Abide.Guerilla.Tags.FieldAttribute("emission radius", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock EmissionRadius;
                [Abide.Guerilla.Tags.FieldAttribute("emission angle", typeof(ParticlePropertyScalarStructNewBlock))]
                public ParticlePropertyScalarStructNewBlock EmissionAngle;
                [Abide.Guerilla.Tags.FieldAttribute("translational offset", typeof(Vector3))]
                public Vector3 TranslationalOffset;
                [Abide.Guerilla.Tags.FieldAttribute("relative direction#particle initial velocity direction relative to the location\'s" +
                    " forward", typeof(Vector2))]
                public Vector2 RelativeDirection;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 228;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
                public sealed class ParticlePropertyScalarStructNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Input Variable", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputVariableOptions), false)]
                    public Int16 InputVariable;
                    [Abide.Guerilla.Tags.FieldAttribute("Range Variable", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeVariableOptions), false)]
                    public Int16 RangeVariable;
                    [Abide.Guerilla.Tags.FieldAttribute("Output Modifier", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierOptions), false)]
                    public Int16 OutputModifier;
                    [Abide.Guerilla.Tags.FieldAttribute("Output Modifier Input", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierInputOptions), false)]
                    public Int16 OutputModifierInput;
                    [Abide.Guerilla.Tags.FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Mapping1;
                    public int Size
                    {
                        get
                        {
                            return 20;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                        [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public enum InputVariableOptions
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                    public enum RangeVariableOptions
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                    public enum OutputModifierOptions
                    {
                        EmptyString = 0,
                        Plus = 1,
                        Times = 2,
                    }
                    public enum OutputModifierInputOptions
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
                public sealed class ParticlePropertyColorStructNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Input Variable", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputVariableOptions), false)]
                    public Int16 InputVariable;
                    [Abide.Guerilla.Tags.FieldAttribute("Range Variable", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeVariableOptions), false)]
                    public Int16 RangeVariable;
                    [Abide.Guerilla.Tags.FieldAttribute("Output Modifier", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierOptions), false)]
                    public Int16 OutputModifier;
                    [Abide.Guerilla.Tags.FieldAttribute("Output Modifier Input", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierInputOptions), false)]
                    public Int16 OutputModifierInput;
                    [Abide.Guerilla.Tags.FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Mapping1;
                    public int Size
                    {
                        get
                        {
                            return 20;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                        [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public enum InputVariableOptions
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                    public enum RangeVariableOptions
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                    public enum OutputModifierOptions
                    {
                        EmptyString = 0,
                        Plus = 1,
                        Times = 2,
                    }
                    public enum OutputModifierInputOptions
                    {
                        ParticleAge = 0,
                        ParticleEmitTime = 1,
                        ParticleRandom1 = 2,
                        ParticleRandom2 = 3,
                        EmitterAge = 4,
                        EmitterRandom1 = 5,
                        EmitterRandom2 = 6,
                        SystemLod = 7,
                        GameTime = 8,
                        EffectAScale = 9,
                        EffectBScale = 10,
                        ParticleRotation = 11,
                        ExplosionAnimation = 12,
                        ExplosionRotation = 13,
                        ParticleRandom3 = 14,
                        ParticleRandom4 = 15,
                        LocationRandom = 16,
                    }
                }
                public enum EmissionShapeOptions
                {
                    Sprayer = 0,
                    Disc = 1,
                    Globe = 2,
                    Implode = 3,
                    Tube = 4,
                    Halo = 5,
                    ImpactContour = 6,
                    ImpactArea = 7,
                    Debris = 8,
                    Line = 9,
                }
            }
            public enum CoordinateSystemOptions
            {
                World = 0,
                Local = 1,
                Parent = 2,
            }
            public enum EnvironmentOptions
            {
                AnyEnvironment = 0,
                AirOnly = 1,
                WaterOnly = 2,
                SpaceOnly = 3,
            }
            public enum DispositionOptions
            {
                EitherMode = 0,
                ViolentModeOnly = 1,
                NonviolentModeOnly = 2,
            }
            public enum CameraModeOptions
            {
                IndependentOfCameraMode = 0,
                OnlyInFirstPerson = 1,
                OnlyInThirdPerson = 2,
                BothFirstAndThird = 3,
            }
            public enum FlagsOptions
            {
                Glow = 1,
                Cinematics = 2,
                LoopingParticle = 4,
                DisabledForDebugging = 8,
                InheritEffectVelocity = 16,
                DontRenderSystem = 32,
                RenderWhenZoomed = 64,
                SpreadBetweenTicks = 128,
                PersistentParticle = 256,
                ExpensiveVisibility = 512,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(184, 4)]
        public sealed class ShaderPostprocessDefinitionNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("shader template index", typeof(Int32))]
            public Int32 ShaderTemplateIndex;
            [Abide.Guerilla.Tags.FieldAttribute("bitmaps", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_bitmap_new_block", 1024, typeof(ShaderPostprocessBitmapNewBlock))]
            public TagBlock Bitmaps;
            [Abide.Guerilla.Tags.FieldAttribute("pixel constants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("pixel32_block", 1024, typeof(Pixel32Block))]
            public TagBlock PixelConstants;
            [Abide.Guerilla.Tags.FieldAttribute("vertex constants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("real_vector4d_block", 1024, typeof(RealVector4dBlock))]
            public TagBlock VertexConstants;
            [Abide.Guerilla.Tags.FieldAttribute("levels of detail", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_level_of_detail_new_block", 1024, typeof(ShaderPostprocessLevelOfDetailNewBlock))]
            public TagBlock LevelsOfDetail;
            [Abide.Guerilla.Tags.FieldAttribute("layers", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("tag_block_index_block", 1024, typeof(TagBlockIndexBlock))]
            public TagBlock Layers;
            [Abide.Guerilla.Tags.FieldAttribute("passes", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("tag_block_index_block", 1024, typeof(TagBlockIndexBlock))]
            public TagBlock Passes;
            [Abide.Guerilla.Tags.FieldAttribute("implementations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_implementation_new_block", 1024, typeof(ShaderPostprocessImplementationNewBlock))]
            public TagBlock Implementations;
            [Abide.Guerilla.Tags.FieldAttribute("overlays", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_overlay_new_block", 1024, typeof(ShaderPostprocessOverlayNewBlock))]
            public TagBlock Overlays;
            [Abide.Guerilla.Tags.FieldAttribute("overlay references", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_overlay_reference_new_block", 1024, typeof(ShaderPostprocessOverlayReferenceNewBlock))]
            public TagBlock OverlayReferences;
            [Abide.Guerilla.Tags.FieldAttribute("animated parameters", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_animated_parameter_new_block", 1024, typeof(ShaderPostprocessAnimatedParameterNewBlock))]
            public TagBlock AnimatedParameters;
            [Abide.Guerilla.Tags.FieldAttribute("animated parameter references", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_animated_parameter_reference_new_block", 1024, typeof(ShaderPostprocessAnimatedParameterReferenceNewBlock))]
            public TagBlock AnimatedParameterReferences;
            [Abide.Guerilla.Tags.FieldAttribute("bitmap properties", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_bitmap_property_block", 5, typeof(ShaderPostprocessBitmapPropertyBlock))]
            public TagBlock BitmapProperties;
            [Abide.Guerilla.Tags.FieldAttribute("color properties", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_color_property_block", 2, typeof(ShaderPostprocessColorPropertyBlock))]
            public TagBlock ColorProperties;
            [Abide.Guerilla.Tags.FieldAttribute("value properties", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_value_property_block", 6, typeof(ShaderPostprocessValuePropertyBlock))]
            public TagBlock ValueProperties;
            [Abide.Guerilla.Tags.FieldAttribute("old levels of detail", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_level_of_detail_block", 1024, typeof(ShaderPostprocessLevelOfDetailBlock))]
            public TagBlock OldLevelsOfDetail;
            public int Size
            {
                get
                {
                    return 184;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ShaderPostprocessBitmapNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bitmap group", typeof(Int32))]
                public Int32 BitmapGroup;
                [Abide.Guerilla.Tags.FieldAttribute("bitmap index", typeof(Int32))]
                public Int32 BitmapIndex;
                [Abide.Guerilla.Tags.FieldAttribute("log bitmap dimension", typeof(Single))]
                public Single LogBitmapDimension;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class Pixel32Block : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorArgb))]
                public ColorArgb Color;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class RealVector4dBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("vector3", typeof(Vector3))]
                public Vector3 Vector3;
                [Abide.Guerilla.Tags.FieldAttribute("w", typeof(Single))]
                public Single W;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(6, 4)]
            public sealed class ShaderPostprocessLevelOfDetailNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("available layer flags", typeof(Int32))]
                public Int32 AvailableLayerFlags;
                [Abide.Guerilla.Tags.FieldAttribute("layers", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock Layers;
                public int Size
                {
                    get
                    {
                        return 6;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                    public Int16 BlockIndexData;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
            public sealed class TagBlockIndexBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("indices", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock Indices;
                public int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                    public Int16 BlockIndexData;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(10, 4)]
            public sealed class ShaderPostprocessImplementationNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bitmap transforms", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock BitmapTransforms;
                [Abide.Guerilla.Tags.FieldAttribute("render states", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock RenderStates;
                [Abide.Guerilla.Tags.FieldAttribute("texture states", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock TextureStates;
                [Abide.Guerilla.Tags.FieldAttribute("pixel constants", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PixelConstants;
                [Abide.Guerilla.Tags.FieldAttribute("vertex constants", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock VertexConstants;
                public int Size
                {
                    get
                    {
                        return 10;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                    public Int16 BlockIndexData;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ShaderPostprocessOverlayNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("input name", typeof(StringId))]
                public StringId InputName;
                [Abide.Guerilla.Tags.FieldAttribute("range name", typeof(StringId))]
                public StringId RangeName;
                [Abide.Guerilla.Tags.FieldAttribute("time period in seconds", typeof(Single))]
                public Single TimePeriodInSeconds;
                [Abide.Guerilla.Tags.FieldAttribute("function", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Function;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class ScalarFunctionStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function1;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                        [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderPostprocessOverlayReferenceNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("overlay index", typeof(Int16))]
                public Int16 OverlayIndex;
                [Abide.Guerilla.Tags.FieldAttribute("transform index", typeof(Int16))]
                public Int16 TransformIndex;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
            public sealed class ShaderPostprocessAnimatedParameterNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("overlay references", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock OverlayReferences;
                public int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                    public Int16 BlockIndexData;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderPostprocessAnimatedParameterReferenceNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(3)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                public Byte ParameterIndex;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderPostprocessBitmapPropertyBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bitmap index", typeof(Int16))]
                public Int16 BitmapIndex;
                [Abide.Guerilla.Tags.FieldAttribute("animated parameter index", typeof(Int16))]
                public Int16 AnimatedParameterIndex;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ShaderPostprocessColorPropertyBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderPostprocessValuePropertyBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("value", typeof(Single))]
                public Single Value;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(224, 4)]
            public sealed class ShaderPostprocessLevelOfDetailBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("projected height percentage", typeof(Single))]
                public Single ProjectedHeightPercentage;
                [Abide.Guerilla.Tags.FieldAttribute("available layers", typeof(Int32))]
                public Int32 AvailableLayers;
                [Abide.Guerilla.Tags.FieldAttribute("layers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_layer_block", 25, typeof(ShaderPostprocessLayerBlock))]
                public TagBlock Layers;
                [Abide.Guerilla.Tags.FieldAttribute("passes", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_pass_block", 1024, typeof(ShaderPostprocessPassBlock))]
                public TagBlock Passes;
                [Abide.Guerilla.Tags.FieldAttribute("implementations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_implementation_block", 1024, typeof(ShaderPostprocessImplementationBlock))]
                public TagBlock Implementations;
                [Abide.Guerilla.Tags.FieldAttribute("bitmaps", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_bitmap_block", 1024, typeof(ShaderPostprocessBitmapBlock))]
                public TagBlock Bitmaps;
                [Abide.Guerilla.Tags.FieldAttribute("bitmap transforms", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_bitmap_transform_block", 1024, typeof(ShaderPostprocessBitmapTransformBlock))]
                public TagBlock BitmapTransforms;
                [Abide.Guerilla.Tags.FieldAttribute("values", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_value_block", 1024, typeof(ShaderPostprocessValueBlock))]
                public TagBlock Values;
                [Abide.Guerilla.Tags.FieldAttribute("colors", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_color_block", 1024, typeof(ShaderPostprocessColorBlock))]
                public TagBlock Colors;
                [Abide.Guerilla.Tags.FieldAttribute("bitmap transform overlays", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_bitmap_transform_overlay_block", 1024, typeof(ShaderPostprocessBitmapTransformOverlayBlock))]
                public TagBlock BitmapTransformOverlays;
                [Abide.Guerilla.Tags.FieldAttribute("value overlays", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_value_overlay_block", 1024, typeof(ShaderPostprocessValueOverlayBlock))]
                public TagBlock ValueOverlays;
                [Abide.Guerilla.Tags.FieldAttribute("color overlays", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_color_overlay_block", 1024, typeof(ShaderPostprocessColorOverlayBlock))]
                public TagBlock ColorOverlays;
                [Abide.Guerilla.Tags.FieldAttribute("vertex shader constants", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_vertex_shader_constant_block", 1024, typeof(ShaderPostprocessVertexShaderConstantBlock))]
                public TagBlock VertexShaderConstants;
                [Abide.Guerilla.Tags.FieldAttribute("GPU State", typeof(ShaderGpuStateStructBlock))]
                public ShaderGpuStateStructBlock GpuState;
                public int Size
                {
                    get
                    {
                        return 224;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class ShaderPostprocessLayerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("passes", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock Passes;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                    public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                        public Int16 BlockIndexData;
                        public int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(18, 4)]
                public sealed class ShaderPostprocessPassBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("shader pass", typeof(TagReference))]
                    public TagReference ShaderPass;
                    [Abide.Guerilla.Tags.FieldAttribute("implementations", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock Implementations;
                    public int Size
                    {
                        get
                        {
                            return 18;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                    public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                        public Int16 BlockIndexData;
                        public int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(44, 4)]
                public sealed class ShaderPostprocessImplementationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("GPU Constant State", typeof(ShaderGpuStateReferenceStructBlock))]
                    public ShaderGpuStateReferenceStructBlock GpuConstantState;
                    [Abide.Guerilla.Tags.FieldAttribute("GPU Volatile State", typeof(ShaderGpuStateReferenceStructBlock))]
                    public ShaderGpuStateReferenceStructBlock GpuVolatileState;
                    [Abide.Guerilla.Tags.FieldAttribute("bitmap parameters", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock BitmapParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("bitmap transforms", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock BitmapTransforms;
                    [Abide.Guerilla.Tags.FieldAttribute("value parameters", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock ValueParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("color parameters", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock ColorParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("bitmap transform overlays", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock BitmapTransformOverlays;
                    [Abide.Guerilla.Tags.FieldAttribute("value overlays", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock ValueOverlays;
                    [Abide.Guerilla.Tags.FieldAttribute("color overlays", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock ColorOverlays;
                    [Abide.Guerilla.Tags.FieldAttribute("vertex shader constants", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock VertexShaderConstants;
                    public int Size
                    {
                        get
                        {
                            return 44;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(14, 4)]
                    public sealed class ShaderGpuStateReferenceStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("render states", typeof(TagBlockIndexStructBlock))]
                        public TagBlockIndexStructBlock RenderStates;
                        [Abide.Guerilla.Tags.FieldAttribute("texture stage states", typeof(TagBlockIndexStructBlock))]
                        public TagBlockIndexStructBlock TextureStageStates;
                        [Abide.Guerilla.Tags.FieldAttribute("render state parameters", typeof(TagBlockIndexStructBlock))]
                        public TagBlockIndexStructBlock RenderStateParameters;
                        [Abide.Guerilla.Tags.FieldAttribute("texture stage parameters", typeof(TagBlockIndexStructBlock))]
                        public TagBlockIndexStructBlock TextureStageParameters;
                        [Abide.Guerilla.Tags.FieldAttribute("textures", typeof(TagBlockIndexStructBlock))]
                        public TagBlockIndexStructBlock Textures;
                        [Abide.Guerilla.Tags.FieldAttribute("Vn Constants", typeof(TagBlockIndexStructBlock))]
                        public TagBlockIndexStructBlock VnConstants;
                        [Abide.Guerilla.Tags.FieldAttribute("Cn Constants", typeof(TagBlockIndexStructBlock))]
                        public TagBlockIndexStructBlock CnConstants;
                        public int Size
                        {
                            get
                            {
                                return 14;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                        public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                            public Int16 BlockIndexData;
                            public int Size
                            {
                                get
                                {
                                    return 2;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                    public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                        public Int16 BlockIndexData;
                        public int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(10, 4)]
                public sealed class ShaderPostprocessBitmapBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
                    public Byte Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("bitmap group index", typeof(Int32))]
                    public Int32 BitmapGroupIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("log bitmap dimension", typeof(Single))]
                    public Single LogBitmapDimension;
                    public int Size
                    {
                        get
                        {
                            return 10;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(6, 4)]
                public sealed class ShaderPostprocessBitmapTransformBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("bitmap transform index", typeof(Byte))]
                    public Byte BitmapTransformIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("value", typeof(Single))]
                    public Single Value;
                    public int Size
                    {
                        get
                        {
                            return 6;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(5, 4)]
                public sealed class ShaderPostprocessValueBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("value", typeof(Single))]
                    public Single Value;
                    public int Size
                    {
                        get
                        {
                            return 5;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(13, 4)]
                public sealed class ShaderPostprocessColorBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorRgbF))]
                    public ColorRgbF Color;
                    public int Size
                    {
                        get
                        {
                            return 13;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(27, 4)]
                public sealed class ShaderPostprocessBitmapTransformOverlayBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("transform index", typeof(Byte))]
                    public Byte TransformIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("animation property type", typeof(Byte))]
                    public Byte AnimationPropertyType;
                    [Abide.Guerilla.Tags.FieldAttribute("input name", typeof(StringId))]
                    public StringId InputName;
                    [Abide.Guerilla.Tags.FieldAttribute("range name", typeof(StringId))]
                    public StringId RangeName;
                    [Abide.Guerilla.Tags.FieldAttribute("time period in seconds", typeof(Single))]
                    public Single TimePeriodInSeconds;
                    [Abide.Guerilla.Tags.FieldAttribute("function", typeof(ScalarFunctionStructBlock))]
                    public ScalarFunctionStructBlock Function;
                    public int Size
                    {
                        get
                        {
                            return 27;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class ScalarFunctionStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Function1;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                            }
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(25, 4)]
                public sealed class ShaderPostprocessValueOverlayBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("input name", typeof(StringId))]
                    public StringId InputName;
                    [Abide.Guerilla.Tags.FieldAttribute("range name", typeof(StringId))]
                    public StringId RangeName;
                    [Abide.Guerilla.Tags.FieldAttribute("time period in seconds", typeof(Single))]
                    public Single TimePeriodInSeconds;
                    [Abide.Guerilla.Tags.FieldAttribute("function", typeof(ScalarFunctionStructBlock))]
                    public ScalarFunctionStructBlock Function;
                    public int Size
                    {
                        get
                        {
                            return 25;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class ScalarFunctionStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Function1;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                            }
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(25, 4)]
                public sealed class ShaderPostprocessColorOverlayBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("input name", typeof(StringId))]
                    public StringId InputName;
                    [Abide.Guerilla.Tags.FieldAttribute("range name", typeof(StringId))]
                    public StringId RangeName;
                    [Abide.Guerilla.Tags.FieldAttribute("time period in seconds", typeof(Single))]
                    public Single TimePeriodInSeconds;
                    [Abide.Guerilla.Tags.FieldAttribute("function", typeof(ColorFunctionStructBlock))]
                    public ColorFunctionStructBlock Function;
                    public int Size
                    {
                        get
                        {
                            return 25;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class ColorFunctionStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Function1;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                            }
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(18, 4)]
                public sealed class ShaderPostprocessVertexShaderConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("register index", typeof(Byte))]
                    public Byte RegisterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("register bank", typeof(Byte))]
                    public Byte RegisterBank;
                    [Abide.Guerilla.Tags.FieldAttribute("data", typeof(Single))]
                    public Single Data;
                    [Abide.Guerilla.Tags.FieldAttribute("data", typeof(Single))]
                    public Single Data1;
                    [Abide.Guerilla.Tags.FieldAttribute("data", typeof(Single))]
                    public Single Data2;
                    [Abide.Guerilla.Tags.FieldAttribute("data", typeof(Single))]
                    public Single Data3;
                    public int Size
                    {
                        get
                        {
                            return 18;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
                public sealed class ShaderGpuStateStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("render states", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("render_state_block", 1024, typeof(RenderStateBlock))]
                    public TagBlock RenderStates;
                    [Abide.Guerilla.Tags.FieldAttribute("texture stage states", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("texture_stage_state_block", 1024, typeof(TextureStageStateBlock))]
                    public TagBlock TextureStageStates;
                    [Abide.Guerilla.Tags.FieldAttribute("render state parameters", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("render_state_parameter_block", 1024, typeof(RenderStateParameterBlock))]
                    public TagBlock RenderStateParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("texture stage parameters", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("texture_stage_state_parameter_block", 1024, typeof(TextureStageStateParameterBlock))]
                    public TagBlock TextureStageParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("textures", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("texture_block", 1024, typeof(TextureBlock))]
                    public TagBlock Textures;
                    [Abide.Guerilla.Tags.FieldAttribute("Vn Constants", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("vertex_shader_constant_block", 1024, typeof(VertexShaderConstantBlock))]
                    public TagBlock VnConstants;
                    [Abide.Guerilla.Tags.FieldAttribute("Cn Constants", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("vertex_shader_constant_block", 1024, typeof(VertexShaderConstantBlock))]
                    public TagBlock CnConstants;
                    public int Size
                    {
                        get
                        {
                            return 84;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(5, 4)]
                    public sealed class RenderStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("state value", typeof(Int32))]
                        public Int32 StateValue;
                        public int Size
                        {
                            get
                            {
                                return 5;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(6, 4)]
                    public sealed class TextureStageStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("stage index", typeof(Byte))]
                        public Byte StageIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("state value", typeof(Int32))]
                        public Int32 StateValue;
                        public int Size
                        {
                            get
                            {
                                return 6;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(3, 4)]
                    public sealed class RenderStateParameterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter type", typeof(Byte))]
                        public Byte ParameterType;
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        public int Size
                        {
                            get
                            {
                                return 3;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                    public sealed class TextureStageStateParameterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter type", typeof(Byte))]
                        public Byte ParameterType;
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("stage index", typeof(Byte))]
                        public Byte StageIndex;
                        public int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                    public sealed class TextureBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("stage index", typeof(Byte))]
                        public Byte StageIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("global texture index", typeof(Byte))]
                        public Byte GlobalTextureIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
                        public Byte Flags;
                        public int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                    public sealed class VertexShaderConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("register index", typeof(Byte))]
                        public Byte RegisterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("destination mask", typeof(Byte))]
                        public Byte DestinationMask;
                        [Abide.Guerilla.Tags.FieldAttribute("scale by texture stage", typeof(Byte))]
                        public Byte ScaleByTextureStage;
                        public int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class ParticlePropertyColorStructNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Input Variable", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputVariableOptions), false)]
            public Int16 InputVariable;
            [Abide.Guerilla.Tags.FieldAttribute("Range Variable", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeVariableOptions), false)]
            public Int16 RangeVariable;
            [Abide.Guerilla.Tags.FieldAttribute("Output Modifier", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierOptions), false)]
            public Int16 OutputModifier;
            [Abide.Guerilla.Tags.FieldAttribute("Output Modifier Input", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierInputOptions), false)]
            public Int16 OutputModifierInput;
            [Abide.Guerilla.Tags.FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock Mapping1;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                public TagBlock Data;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                    public Byte Value;
                    public int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            public enum InputVariableOptions
            {
                ParticleAge = 0,
                ParticleEmitTime = 1,
                ParticleRandom1 = 2,
                ParticleRandom2 = 3,
                EmitterAge = 4,
                EmitterRandom1 = 5,
                EmitterRandom2 = 6,
                SystemLod = 7,
                GameTime = 8,
                EffectAScale = 9,
                EffectBScale = 10,
                ParticleRotation = 11,
                ExplosionAnimation = 12,
                ExplosionRotation = 13,
                ParticleRandom3 = 14,
                ParticleRandom4 = 15,
                LocationRandom = 16,
            }
            public enum RangeVariableOptions
            {
                ParticleAge = 0,
                ParticleEmitTime = 1,
                ParticleRandom1 = 2,
                ParticleRandom2 = 3,
                EmitterAge = 4,
                EmitterRandom1 = 5,
                EmitterRandom2 = 6,
                SystemLod = 7,
                GameTime = 8,
                EffectAScale = 9,
                EffectBScale = 10,
                ParticleRotation = 11,
                ExplosionAnimation = 12,
                ExplosionRotation = 13,
                ParticleRandom3 = 14,
                ParticleRandom4 = 15,
                LocationRandom = 16,
            }
            public enum OutputModifierOptions
            {
                EmptyString = 0,
                Plus = 1,
                Times = 2,
            }
            public enum OutputModifierInputOptions
            {
                ParticleAge = 0,
                ParticleEmitTime = 1,
                ParticleRandom1 = 2,
                ParticleRandom2 = 3,
                EmitterAge = 4,
                EmitterRandom1 = 5,
                EmitterRandom2 = 6,
                SystemLod = 7,
                GameTime = 8,
                EffectAScale = 9,
                EffectBScale = 10,
                ParticleRotation = 11,
                ExplosionAnimation = 12,
                ExplosionRotation = 13,
                ParticleRandom3 = 14,
                ParticleRandom4 = 15,
                LocationRandom = 16,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class ParticlePropertyScalarStructNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Input Variable", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputVariableOptions), false)]
            public Int16 InputVariable;
            [Abide.Guerilla.Tags.FieldAttribute("Range Variable", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeVariableOptions), false)]
            public Int16 RangeVariable;
            [Abide.Guerilla.Tags.FieldAttribute("Output Modifier", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierOptions), false)]
            public Int16 OutputModifier;
            [Abide.Guerilla.Tags.FieldAttribute("Output Modifier Input", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierInputOptions), false)]
            public Int16 OutputModifierInput;
            [Abide.Guerilla.Tags.FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
            public MappingFunctionBlock Mapping1;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                public TagBlock Data;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                    public Byte Value;
                    public int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            public enum InputVariableOptions
            {
                ParticleAge = 0,
                ParticleEmitTime = 1,
                ParticleRandom1 = 2,
                ParticleRandom2 = 3,
                EmitterAge = 4,
                EmitterRandom1 = 5,
                EmitterRandom2 = 6,
                SystemLod = 7,
                GameTime = 8,
                EffectAScale = 9,
                EffectBScale = 10,
                ParticleRotation = 11,
                ExplosionAnimation = 12,
                ExplosionRotation = 13,
                ParticleRandom3 = 14,
                ParticleRandom4 = 15,
                LocationRandom = 16,
            }
            public enum RangeVariableOptions
            {
                ParticleAge = 0,
                ParticleEmitTime = 1,
                ParticleRandom1 = 2,
                ParticleRandom2 = 3,
                EmitterAge = 4,
                EmitterRandom1 = 5,
                EmitterRandom2 = 6,
                SystemLod = 7,
                GameTime = 8,
                EffectAScale = 9,
                EffectBScale = 10,
                ParticleRotation = 11,
                ExplosionAnimation = 12,
                ExplosionRotation = 13,
                ParticleRandom3 = 14,
                ParticleRandom4 = 15,
                LocationRandom = 16,
            }
            public enum OutputModifierOptions
            {
                EmptyString = 0,
                Plus = 1,
                Times = 2,
            }
            public enum OutputModifierInputOptions
            {
                ParticleAge = 0,
                ParticleEmitTime = 1,
                ParticleRandom1 = 2,
                ParticleRandom2 = 3,
                EmitterAge = 4,
                EmitterRandom1 = 5,
                EmitterRandom2 = 6,
                SystemLod = 7,
                GameTime = 8,
                EffectAScale = 9,
                EffectBScale = 10,
                ParticleRotation = 11,
                ExplosionAnimation = 12,
                ExplosionRotation = 13,
                ParticleRandom3 = 14,
                ParticleRandom4 = 15,
                LocationRandom = 16,
            }
        }
        public enum FlagsOptions
        {
            Spins = 1,
            RandomUMirror = 2,
            RandomVMirror = 4,
            FrameAnimationOneShot = 8,
            SelectRandomSequence = 16,
            DisableFrameBlending = 32,
            CanAnimateBackwards = 64,
            ReceiveLightmapLighting = 128,
            TintFromDiffuseTexture = 256,
            DiesAtRest = 512,
            DiesOnStructureCollision = 1024,
            DiesInMedia = 2048,
            DiesInAir = 4096,
            BitmapAuthoredVertically = 8192,
            HasSweetener = 16384,
        }
        public enum ParticleBillboardStyleOptions
        {
            ScreenFacing = 0,
            ParallelToDirection = 1,
            PerpendicularToDirection = 2,
            Vertical = 3,
            Horizontal = 4,
        }
    }
}
#pragma warning restore CS1591
