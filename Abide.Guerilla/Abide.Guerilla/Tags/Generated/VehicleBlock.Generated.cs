#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(332, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("vehicle", 1986357353u, 1970170228u, typeof(VehicleBlock))]
    public sealed class VehicleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int32 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("type", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
        public Int16 Type;
        [Abide.Guerilla.Tags.FieldAttribute("control", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(ControlOptions), false)]
        public Int16 Control;
        [Abide.Guerilla.Tags.FieldAttribute("maximum forward speed", typeof(Single))]
        public Single MaximumForwardSpeed;
        [Abide.Guerilla.Tags.FieldAttribute("maximum reverse speed", typeof(Single))]
        public Single MaximumReverseSpeed;
        [Abide.Guerilla.Tags.FieldAttribute("speed acceleration", typeof(Single))]
        public Single SpeedAcceleration;
        [Abide.Guerilla.Tags.FieldAttribute("speed deceleration", typeof(Single))]
        public Single SpeedDeceleration;
        [Abide.Guerilla.Tags.FieldAttribute("maximum left turn", typeof(Single))]
        public Single MaximumLeftTurn;
        [Abide.Guerilla.Tags.FieldAttribute("maximum right turn (negative)", typeof(Single))]
        public Single MaximumRightTurnNegative;
        [Abide.Guerilla.Tags.FieldAttribute("wheel circumference", typeof(Single))]
        public Single WheelCircumference;
        [Abide.Guerilla.Tags.FieldAttribute("turn rate", typeof(Single))]
        public Single TurnRate;
        [Abide.Guerilla.Tags.FieldAttribute("blur speed", typeof(Single))]
        public Single BlurSpeed;
        [Abide.Guerilla.Tags.FieldAttribute("specific type#if your type corresponds to something in this list choose it", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpecificTypeOptions), false)]
        public Int16 SpecificType;
        [Abide.Guerilla.Tags.FieldAttribute("player training vehicle type", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlayerTrainingVehicleTypeOptions), false)]
        public Int16 PlayerTrainingVehicleType;
        [Abide.Guerilla.Tags.FieldAttribute("flip message", typeof(StringId))]
        public StringId FlipMessage;
        [Abide.Guerilla.Tags.FieldAttribute("turn scale", typeof(Single))]
        public Single TurnScale;
        [Abide.Guerilla.Tags.FieldAttribute("speed turn penalty power (0.5 .. 2)", typeof(Single))]
        public Single SpeedTurnPenaltyPower052;
        [Abide.Guerilla.Tags.FieldAttribute("speed turn penalty (0 = none, 1 = can\'t turn at top speed)", typeof(Single))]
        public Single SpeedTurnPenalty0EqualsNone1EqualsCantTurnAtTopSpeed;
        [Abide.Guerilla.Tags.FieldAttribute("maximum left slide", typeof(Single))]
        public Single MaximumLeftSlide;
        [Abide.Guerilla.Tags.FieldAttribute("maximum right slide", typeof(Single))]
        public Single MaximumRightSlide;
        [Abide.Guerilla.Tags.FieldAttribute("slide acceleration", typeof(Single))]
        public Single SlideAcceleration;
        [Abide.Guerilla.Tags.FieldAttribute("slide deceleration", typeof(Single))]
        public Single SlideDeceleration;
        [Abide.Guerilla.Tags.FieldAttribute("minimum flipping angular velocity", typeof(Single))]
        public Single MinimumFlippingAngularVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("maximum flipping angular velocity", typeof(Single))]
        public Single MaximumFlippingAngularVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("vehicle size#The size determine what kind of seats in larger vehicles it may occu" +
            "py (i.e. small or large cargo seats)", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(VehicleSizeOptions), false)]
        public Int16 VehicleSize;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("fixed gun yaw", typeof(Single))]
        public Single FixedGunYaw;
        [Abide.Guerilla.Tags.FieldAttribute("fixed gun pitch", typeof(Single))]
        public Single FixedGunPitch;
        [Abide.Guerilla.Tags.FieldAttribute("overdampen cusp angle:degrees", typeof(Single))]
        public Single OverdampenCuspAngle;
        [Abide.Guerilla.Tags.FieldAttribute("overdampen exponent", typeof(Single))]
        public Single OverdampenExponent;
        [Abide.Guerilla.Tags.FieldAttribute("crouch transition time:seconds", typeof(Single))]
        public Single CrouchTransitionTime;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString2;
        [Abide.Guerilla.Tags.FieldAttribute("engine moment#higher moments make engine spin up slower", typeof(Single))]
        public Single EngineMoment;
        [Abide.Guerilla.Tags.FieldAttribute("engine max angular velocity#higher moments make engine spin up slower", typeof(Single))]
        public Single EngineMaxAngularVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("gears", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("gear_block", 16, typeof(GearBlock))]
        public TagBlock Gears;
        [Abide.Guerilla.Tags.FieldAttribute("flying torque scale#big vehicles need to scale this down.  0 defaults to 1, which" +
            " is generally a good value.  This is used with alien fighter physics", typeof(Single))]
        public Single FlyingTorqueScale;
        [Abide.Guerilla.Tags.FieldAttribute("seat enterance acceleration scale#how much do we scale the force the biped the ap" +
            "plies down on the seat when he enters. 0 == no acceleration", typeof(Single))]
        public Single SeatEnteranceAccelerationScale;
        [Abide.Guerilla.Tags.FieldAttribute("seat exit accelersation scale#how much do we scale the force the biped the applie" +
            "s down on the seat when he exits. 0 == no acceleration", typeof(Single))]
        public Single SeatExitAccelersationScale;
        [Abide.Guerilla.Tags.FieldAttribute("air friction deceleration#human plane physics only. 0 is nothing.  1 is like thow" +
            "ing the engine to full reverse", typeof(Single))]
        public Single AirFrictionDeceleration;
        [Abide.Guerilla.Tags.FieldAttribute("thrust scale#human plane physics only. 0 is default (1)", typeof(Single))]
        public Single ThrustScale;
        [Abide.Guerilla.Tags.FieldAttribute("suspension sound", typeof(TagReference))]
        public TagReference SuspensionSound;
        [Abide.Guerilla.Tags.FieldAttribute("crash sound", typeof(TagReference))]
        public TagReference CrashSound;
        [Abide.Guerilla.Tags.FieldAttribute("UNUSED*", typeof(TagReference))]
        public TagReference Unused;
        [Abide.Guerilla.Tags.FieldAttribute("special effect", typeof(TagReference))]
        public TagReference SpecialEffect;
        [Abide.Guerilla.Tags.FieldAttribute("unused effect", typeof(TagReference))]
        public TagReference UnusedEffect;
        [Abide.Guerilla.Tags.FieldAttribute("havok vehicle physics", typeof(HavokVehiclePhysicsStructBlock))]
        public HavokVehiclePhysicsStructBlock HavokVehiclePhysics;
        public int Size
        {
            get
            {
                return 332;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
        public sealed class GearBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("loaded torque curve", typeof(TorqueCurveStructBlock))]
            public TorqueCurveStructBlock LoadedTorqueCurve;
            [Abide.Guerilla.Tags.FieldAttribute("cruising torque curve", typeof(TorqueCurveStructBlock))]
            public TorqueCurveStructBlock CruisingTorqueCurve;
            [Abide.Guerilla.Tags.FieldAttribute("min time to upshift#seconds", typeof(Single))]
            public Single MinTimeToUpshift;
            [Abide.Guerilla.Tags.FieldAttribute("engine up-shift scale#0-1", typeof(Single))]
            public Single EngineUpShiftScale;
            [Abide.Guerilla.Tags.FieldAttribute("gear ratio", typeof(Single))]
            public Single GearRatio;
            [Abide.Guerilla.Tags.FieldAttribute("min time to downshift#seconds", typeof(Single))]
            public Single MinTimeToDownshift;
            [Abide.Guerilla.Tags.FieldAttribute("engine down-shift scale#0-1", typeof(Single))]
            public Single EngineDownShiftScale;
            public int Size
            {
                get
                {
                    return 68;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class TorqueCurveStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("min torque", typeof(Single))]
                public Single MinTorque;
                [Abide.Guerilla.Tags.FieldAttribute("max torque", typeof(Single))]
                public Single MaxTorque;
                [Abide.Guerilla.Tags.FieldAttribute("peak torque scale", typeof(Single))]
                public Single PeakTorqueScale;
                [Abide.Guerilla.Tags.FieldAttribute("past peak torque exponent", typeof(Single))]
                public Single PastPeakTorqueExponent;
                [Abide.Guerilla.Tags.FieldAttribute("torque at max angular velocity#generally 0 for loading torque and something less " +
                    "than max torque for cruising torque", typeof(Single))]
                public Single TorqueAtMaxAngularVelocity;
                [Abide.Guerilla.Tags.FieldAttribute("torque at 2x max angular velocity", typeof(Single))]
                public Single TorqueAt2xMaxAngularVelocity;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(96, 4)]
        public sealed class HavokVehiclePhysicsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags*", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("ground friction# for friction based vehicles only", typeof(Single))]
            public Single GroundFriction;
            [Abide.Guerilla.Tags.FieldAttribute("ground depth# for friction based vehicles only", typeof(Single))]
            public Single GroundDepth;
            [Abide.Guerilla.Tags.FieldAttribute("ground damp factor# for friction based vehicles only", typeof(Single))]
            public Single GroundDampFactor;
            [Abide.Guerilla.Tags.FieldAttribute("ground moving friction# for friction based vehicles only", typeof(Single))]
            public Single GroundMovingFriction;
            [Abide.Guerilla.Tags.FieldAttribute("ground maximum slope 0#degrees 0-90", typeof(Single))]
            public Single GroundMaximumSlope0;
            [Abide.Guerilla.Tags.FieldAttribute("ground maximum slope 1#degrees 0-90.  and greater than slope 0", typeof(Single))]
            public Single GroundMaximumSlope1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("anti_gravity_bank_lift#lift per WU.", typeof(Single))]
            public Single AntiGravityBankLift;
            [Abide.Guerilla.Tags.FieldAttribute("steering_bank_reaction_scale#how quickly we bank when we steer ", typeof(Single))]
            public Single SteeringBankReactionScale;
            [Abide.Guerilla.Tags.FieldAttribute("gravity scale#value of 0 defaults to 1.  .5 is half gravity", typeof(Single))]
            public Single GravityScale;
            [Abide.Guerilla.Tags.FieldAttribute("radius*#generated from the radius of the hkConvexShape for this vehicle", typeof(Single))]
            public Single Radius;
            [Abide.Guerilla.Tags.FieldAttribute("anti gravity points", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("anti_gravity_point_definition_block", 16, typeof(AntiGravityPointDefinitionBlock))]
            public TagBlock AntiGravityPoints;
            [Abide.Guerilla.Tags.FieldAttribute("friction points", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("friction_point_definition_block", 16, typeof(FrictionPointDefinitionBlock))]
            public TagBlock FrictionPoints;
            [Abide.Guerilla.Tags.FieldAttribute("*shape phantom shape*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("vehicle_phantom_shape_block", 1, typeof(VehiclePhantomShapeBlock))]
            public TagBlock ShapePhantomShape;
            public int Size
            {
                get
                {
                    return 96;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(76, 4)]
            public sealed class AntiGravityPointDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("marker name^", typeof(StringId))]
                public StringId MarkerName;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("antigrav strength", typeof(Single))]
                public Single AntigravStrength;
                [Abide.Guerilla.Tags.FieldAttribute("antigrav offset", typeof(Single))]
                public Single AntigravOffset;
                [Abide.Guerilla.Tags.FieldAttribute("antigrav height", typeof(Single))]
                public Single AntigravHeight;
                [Abide.Guerilla.Tags.FieldAttribute("antigrav damp factor", typeof(Single))]
                public Single AntigravDampFactor;
                [Abide.Guerilla.Tags.FieldAttribute("antigrav normal k1", typeof(Single))]
                public Single AntigravNormalK1;
                [Abide.Guerilla.Tags.FieldAttribute("antigrav normal k0", typeof(Single))]
                public Single AntigravNormalK0;
                [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("damage source region name", typeof(StringId))]
                public StringId DamageSourceRegionName;
                [Abide.Guerilla.Tags.FieldAttribute("default state error", typeof(Single))]
                public Single DefaultStateError;
                [Abide.Guerilla.Tags.FieldAttribute("minor damage error", typeof(Single))]
                public Single MinorDamageError;
                [Abide.Guerilla.Tags.FieldAttribute("medium damage error", typeof(Single))]
                public Single MediumDamageError;
                [Abide.Guerilla.Tags.FieldAttribute("major damage error", typeof(Single))]
                public Single MajorDamageError;
                [Abide.Guerilla.Tags.FieldAttribute("destroyed state error", typeof(Single))]
                public Single DestroyedStateError;
                public int Size
                {
                    get
                    {
                        return 76;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    GetsDamageFromRegion = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(76, 4)]
            public sealed class FrictionPointDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("marker name^", typeof(StringId))]
                public StringId MarkerName;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("fraction of total mass#(0.0-1.0) fraction of total vehicle mass", typeof(Single))]
                public Single FractionOfTotalMass;
                [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                [Abide.Guerilla.Tags.FieldAttribute("damaged radius#radius when the tire is blown off.", typeof(Single))]
                public Single DamagedRadius;
                [Abide.Guerilla.Tags.FieldAttribute("friction type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FrictionTypeOptions), false)]
                public Int16 FrictionType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("moving friction velocity diff", typeof(Single))]
                public Single MovingFrictionVelocityDiff;
                [Abide.Guerilla.Tags.FieldAttribute("e-brake moving friction", typeof(Single))]
                public Single EBrakeMovingFriction;
                [Abide.Guerilla.Tags.FieldAttribute("e-brake friction", typeof(Single))]
                public Single EBrakeFriction;
                [Abide.Guerilla.Tags.FieldAttribute("e-brake moving friction vel diff", typeof(Single))]
                public Single EBrakeMovingFrictionVelDiff;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(20)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("collision global material name", typeof(StringId))]
                public StringId CollisionGlobalMaterialName;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("model state destroyed#only need point can destroy flag set", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ModelStateDestroyedOptions), false)]
                public Int16 ModelStateDestroyed;
                [Abide.Guerilla.Tags.FieldAttribute("region name#only need point can destroy flag set", typeof(StringId))]
                public StringId RegionName;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                public int Size
                {
                    get
                    {
                        return 76;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    GetsDamageFromRegion = 1,
                    Powered = 2,
                    FrontTurning = 4,
                    RearTurning = 8,
                    AttachedToEBrake = 16,
                    CanBeDestroyed = 32,
                }
                public enum FrictionTypeOptions
                {
                    Point = 0,
                    Forward = 1,
                }
                public enum ModelStateDestroyedOptions
                {
                    Default = 0,
                    MinorDamage = 1,
                    MediumDamage = 2,
                    MajorDamage = 3,
                    Destroyed = 4,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(672, 16)]
            public sealed class VehiclePhantomShapeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("size*", typeof(Int16))]
                public Int16 Size1;
                [Abide.Guerilla.Tags.FieldAttribute("count*", typeof(Int16))]
                public Int16 Count;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("child shapes size*", typeof(Int32))]
                public Int32 ChildShapesSize;
                [Abide.Guerilla.Tags.FieldAttribute("child shapes capacity*", typeof(Int32))]
                public Int32 ChildShapesCapacity;
                [Abide.Guerilla.Tags.FieldAttribute("child shapes storage*", typeof(ChildShapesStorageElement[]))]
                [Abide.Guerilla.Tags.ArrayAttribute(4, typeof(ChildShapesStorageElement))]
                public ChildShapesStorageElement[] ChildShapesStorage;
                [Abide.Guerilla.Tags.FieldAttribute("multisphere count*", typeof(Int32))]
                public Int32 MultisphereCount;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("x0", typeof(Single))]
                public Single X0;
                [Abide.Guerilla.Tags.FieldAttribute("x1", typeof(Single))]
                public Single X1;
                [Abide.Guerilla.Tags.FieldAttribute("y0", typeof(Single))]
                public Single Y0;
                [Abide.Guerilla.Tags.FieldAttribute("y1", typeof(Single))]
                public Single Y1;
                [Abide.Guerilla.Tags.FieldAttribute("z0", typeof(Single))]
                public Single Z0;
                [Abide.Guerilla.Tags.FieldAttribute("z1", typeof(Single))]
                public Single Z1;
                [Abide.Guerilla.Tags.FieldAttribute("multispheres*", typeof(MultispheresElement[]))]
                [Abide.Guerilla.Tags.ArrayAttribute(4, typeof(MultispheresElement))]
                public MultispheresElement[] Multispheres;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString4;
                public int Size
                {
                    get
                    {
                        return 672;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public sealed class ChildShapesStorageElement : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("shape type*", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ShapeTypeOptions), false)]
                    public Int16 ShapeType;
                    [Abide.Guerilla.Tags.FieldAttribute("shape*", typeof(Int16))]
                    public Int16 Shape;
                    [Abide.Guerilla.Tags.FieldAttribute("collision filter*", typeof(Int32))]
                    public Int32 CollisionFilter;
                    public int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum ShapeTypeOptions
                    {
                        Sphere = 0,
                        Pill = 1,
                        Box = 2,
                        Triangle = 3,
                        Polyhedron = 4,
                        MultiSphere = 5,
                        Unused0 = 6,
                        Unused1 = 7,
                        Unused2 = 8,
                        Unused3 = 9,
                        Unused4 = 10,
                        Unused5 = 11,
                        Unused6 = 12,
                        Unused7 = 13,
                        List = 14,
                        Mopp = 15,
                    }
                }
                public sealed class MultispheresElement : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("size*", typeof(Int16))]
                    public Int16 Size1;
                    [Abide.Guerilla.Tags.FieldAttribute("count*", typeof(Int16))]
                    public Int16 Count;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("num spheres*", typeof(Int32))]
                    public Int32 NumSpheres;
                    [Abide.Guerilla.Tags.FieldAttribute("four vectors storage*", typeof(FourVectorsStorageElement[]))]
                    [Abide.Guerilla.Tags.ArrayAttribute(8, typeof(FourVectorsStorageElement))]
                    public FourVectorsStorageElement[] FourVectorsStorage;
                    public int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public sealed class FourVectorsStorageElement : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("sphere*", typeof(Vector3))]
                        public Vector3 Sphere;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                        [Abide.Guerilla.Tags.PaddingAttribute(4)]
                        public Byte[] EmptyString;
                        public int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                public enum FlagsOptions
                {
                    HasAabbPhantom = 1,
                    Oo1 = 2,
                }
            }
            public enum FlagsOptions
            {
                Invalid = 1,
            }
        }
        public enum FlagsOptions
        {
            SpeedWakesPhysics = 1,
            TurnWakesPhysics = 2,
            DriverPowerWakesPhysics = 4,
            GunnerPowerWakesPhysics = 8,
            ControlOppositeSpeedSetsBrake = 16,
            SlideWakesPhysics = 32,
            KillsRidersAtTerminalVelocity = 64,
            CausesCollisionDamage = 128,
            AiWeaponCannotRotate = 256,
            AiDoesNotRequireDriver = 512,
            AiUnused = 1024,
            AiDriverEnable = 2048,
            AiDriverFlying = 4096,
            AiDriverCanSidestep = 8192,
            AiDriverHovering = 16384,
            VehicleSteersDirectly = 32768,
            Unused = 65536,
            HasEBrake = 131072,
            NoncombatVehicle = 262144,
            NoFrictionWdriver = 524288,
            CanTriggerAutomaticOpeningDoors = 1048576,
            AutoaimWhenTeamless = 2097152,
        }
        public enum TypeOptions
        {
            HumanTank = 0,
            HumanJeep = 1,
            HumanBoat = 2,
            HumanPlane = 3,
            AlienScout = 4,
            AlienFighter = 5,
            Turret = 6,
        }
        public enum ControlOptions
        {
            VehicleControlNormal = 0,
            VehicleControlUnused = 1,
            VehicleControlTank = 2,
        }
        public enum SpecificTypeOptions
        {
            None = 0,
            Ghost = 1,
            Wraith = 2,
            Spectre = 3,
            SentinelEnforcer = 4,
        }
        public enum PlayerTrainingVehicleTypeOptions
        {
            None = 0,
            Warthog = 1,
            WarthogTurret = 2,
            Ghost = 3,
            Banshee = 4,
            Tank = 5,
            Wraith = 6,
        }
        public enum VehicleSizeOptions
        {
            Small = 0,
            Large = 1,
        }
    }
}
#pragma warning restore CS1591
