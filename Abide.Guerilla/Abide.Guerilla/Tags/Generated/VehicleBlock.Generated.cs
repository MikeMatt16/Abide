#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(332, 4)]
    [TagGroupAttribute("vehicle", 1986357353u, 1970170228u, typeof(VehicleBlock))]
    public sealed class VehicleBlock : AbideTagBlock
    {
        private TagBlockList<GearBlock> gearsList = new TagBlockList<GearBlock>(16);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("type", typeof(TypeOptions))]
        [OptionsAttribute(typeof(TypeOptions), false)]
        public TypeOptions Type;
        [FieldAttribute("control", typeof(ControlOptions))]
        [OptionsAttribute(typeof(ControlOptions), false)]
        public ControlOptions Control;
        [FieldAttribute("maximum forward speed", typeof(Single))]
        public Single MaximumForwardSpeed;
        [FieldAttribute("maximum reverse speed", typeof(Single))]
        public Single MaximumReverseSpeed;
        [FieldAttribute("speed acceleration", typeof(Single))]
        public Single SpeedAcceleration;
        [FieldAttribute("speed deceleration", typeof(Single))]
        public Single SpeedDeceleration;
        [FieldAttribute("maximum left turn", typeof(Single))]
        public Single MaximumLeftTurn;
        [FieldAttribute("maximum right turn (negative)", typeof(Single))]
        public Single MaximumRightTurnNegative;
        [FieldAttribute("wheel circumference", typeof(Single))]
        public Single WheelCircumference;
        [FieldAttribute("turn rate", typeof(Single))]
        public Single TurnRate;
        [FieldAttribute("blur speed", typeof(Single))]
        public Single BlurSpeed;
        [FieldAttribute("specific type#if your type corresponds to something in this list choose it", typeof(SpecificTypeOptions))]
        [OptionsAttribute(typeof(SpecificTypeOptions), false)]
        public SpecificTypeOptions SpecificType;
        [FieldAttribute("player training vehicle type", typeof(PlayerTrainingVehicleTypeOptions))]
        [OptionsAttribute(typeof(PlayerTrainingVehicleTypeOptions), false)]
        public PlayerTrainingVehicleTypeOptions PlayerTrainingVehicleType;
        [FieldAttribute("flip message", typeof(StringId))]
        public StringId FlipMessage;
        [FieldAttribute("turn scale", typeof(Single))]
        public Single TurnScale;
        [FieldAttribute("speed turn penalty power (0.5 .. 2)", typeof(Single))]
        public Single SpeedTurnPenaltyPower052;
        [FieldAttribute("speed turn penalty (0 = none, 1 = can\'t turn at top speed)", typeof(Single))]
        public Single SpeedTurnPenalty0EqualsNone1EqualsCantTurnAtTopSpeed;
        [FieldAttribute("maximum left slide", typeof(Single))]
        public Single MaximumLeftSlide;
        [FieldAttribute("maximum right slide", typeof(Single))]
        public Single MaximumRightSlide;
        [FieldAttribute("slide acceleration", typeof(Single))]
        public Single SlideAcceleration;
        [FieldAttribute("slide deceleration", typeof(Single))]
        public Single SlideDeceleration;
        [FieldAttribute("minimum flipping angular velocity", typeof(Single))]
        public Single MinimumFlippingAngularVelocity;
        [FieldAttribute("maximum flipping angular velocity", typeof(Single))]
        public Single MaximumFlippingAngularVelocity;
        [FieldAttribute("vehicle size#The size determine what kind of seats in larger vehicles it may occu" +
            "py (i.e. small or large cargo seats)", typeof(VehicleSizeOptions))]
        [OptionsAttribute(typeof(VehicleSizeOptions), false)]
        public VehicleSizeOptions VehicleSize;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("fixed gun yaw", typeof(Single))]
        public Single FixedGunYaw;
        [FieldAttribute("fixed gun pitch", typeof(Single))]
        public Single FixedGunPitch;
        [FieldAttribute("overdampen cusp angle:degrees", typeof(Single))]
        public Single OverdampenCuspAngle;
        [FieldAttribute("overdampen exponent", typeof(Single))]
        public Single OverdampenExponent;
        [FieldAttribute("crouch transition time:seconds", typeof(Single))]
        public Single CrouchTransitionTime;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [FieldAttribute("engine moment#higher moments make engine spin up slower", typeof(Single))]
        public Single EngineMoment;
        [FieldAttribute("engine max angular velocity#higher moments make engine spin up slower", typeof(Single))]
        public Single EngineMaxAngularVelocity;
        [FieldAttribute("gears", typeof(TagBlock))]
        [BlockAttribute("gear_block", 16, typeof(GearBlock))]
        public TagBlock Gears;
        [FieldAttribute("flying torque scale#big vehicles need to scale this down.  0 defaults to 1, which" +
            " is generally a good value.  This is used with alien fighter physics", typeof(Single))]
        public Single FlyingTorqueScale;
        [FieldAttribute("seat enterance acceleration scale#how much do we scale the force the biped the ap" +
            "plies down on the seat when he enters. 0 == no acceleration", typeof(Single))]
        public Single SeatEnteranceAccelerationScale;
        [FieldAttribute("seat exit accelersation scale#how much do we scale the force the biped the applie" +
            "s down on the seat when he exits. 0 == no acceleration", typeof(Single))]
        public Single SeatExitAccelersationScale;
        [FieldAttribute("air friction deceleration#human plane physics only. 0 is nothing.  1 is like thow" +
            "ing the engine to full reverse", typeof(Single))]
        public Single AirFrictionDeceleration;
        [FieldAttribute("thrust scale#human plane physics only. 0 is default (1)", typeof(Single))]
        public Single ThrustScale;
        [FieldAttribute("suspension sound", typeof(TagReference))]
        public TagReference SuspensionSound;
        [FieldAttribute("crash sound", typeof(TagReference))]
        public TagReference CrashSound;
        [FieldAttribute("UNUSED*", typeof(TagReference))]
        public TagReference Unused;
        [FieldAttribute("special effect", typeof(TagReference))]
        public TagReference SpecialEffect;
        [FieldAttribute("unused effect", typeof(TagReference))]
        public TagReference UnusedEffect;
        [FieldAttribute("havok vehicle physics", typeof(HavokVehiclePhysicsStructBlock))]
        public HavokVehiclePhysicsStructBlock HavokVehiclePhysics;
        public TagBlockList<GearBlock> GearsList
        {
            get
            {
                return this.gearsList;
            }
        }
        public override int Size
        {
            get
            {
                return 332;
            }
        }
        public override void Initialize()
        {
            this.gearsList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.Type = ((TypeOptions)(0));
            this.Control = ((ControlOptions)(0));
            this.MaximumForwardSpeed = 0;
            this.MaximumReverseSpeed = 0;
            this.SpeedAcceleration = 0;
            this.SpeedDeceleration = 0;
            this.MaximumLeftTurn = 0;
            this.MaximumRightTurnNegative = 0;
            this.WheelCircumference = 0;
            this.TurnRate = 0;
            this.BlurSpeed = 0;
            this.SpecificType = ((SpecificTypeOptions)(0));
            this.PlayerTrainingVehicleType = ((PlayerTrainingVehicleTypeOptions)(0));
            this.FlipMessage = StringId.Zero;
            this.TurnScale = 0;
            this.SpeedTurnPenaltyPower052 = 0;
            this.SpeedTurnPenalty0EqualsNone1EqualsCantTurnAtTopSpeed = 0;
            this.MaximumLeftSlide = 0;
            this.MaximumRightSlide = 0;
            this.SlideAcceleration = 0;
            this.SlideDeceleration = 0;
            this.MinimumFlippingAngularVelocity = 0;
            this.MaximumFlippingAngularVelocity = 0;
            this.VehicleSize = ((VehicleSizeOptions)(0));
            this.EmptyString = new byte[2];
            this.FixedGunYaw = 0;
            this.FixedGunPitch = 0;
            this.OverdampenCuspAngle = 0;
            this.OverdampenExponent = 0;
            this.CrouchTransitionTime = 0;
            this.EmptyString1 = new byte[4];
            this.EngineMoment = 0;
            this.EngineMaxAngularVelocity = 0;
            this.Gears = TagBlock.Zero;
            this.FlyingTorqueScale = 0;
            this.SeatEnteranceAccelerationScale = 0;
            this.SeatExitAccelersationScale = 0;
            this.AirFrictionDeceleration = 0;
            this.ThrustScale = 0;
            this.SuspensionSound = TagReference.Null;
            this.CrashSound = TagReference.Null;
            this.Unused = TagReference.Null;
            this.SpecialEffect = TagReference.Null;
            this.UnusedEffect = TagReference.Null;
            this.HavokVehiclePhysics = new HavokVehiclePhysicsStructBlock();
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.Type = ((TypeOptions)(reader.ReadInt16()));
            this.Control = ((ControlOptions)(reader.ReadInt16()));
            this.MaximumForwardSpeed = reader.ReadSingle();
            this.MaximumReverseSpeed = reader.ReadSingle();
            this.SpeedAcceleration = reader.ReadSingle();
            this.SpeedDeceleration = reader.ReadSingle();
            this.MaximumLeftTurn = reader.ReadSingle();
            this.MaximumRightTurnNegative = reader.ReadSingle();
            this.WheelCircumference = reader.ReadSingle();
            this.TurnRate = reader.ReadSingle();
            this.BlurSpeed = reader.ReadSingle();
            this.SpecificType = ((SpecificTypeOptions)(reader.ReadInt16()));
            this.PlayerTrainingVehicleType = ((PlayerTrainingVehicleTypeOptions)(reader.ReadInt16()));
            this.FlipMessage = reader.ReadInt32();
            this.TurnScale = reader.ReadSingle();
            this.SpeedTurnPenaltyPower052 = reader.ReadSingle();
            this.SpeedTurnPenalty0EqualsNone1EqualsCantTurnAtTopSpeed = reader.ReadSingle();
            this.MaximumLeftSlide = reader.ReadSingle();
            this.MaximumRightSlide = reader.ReadSingle();
            this.SlideAcceleration = reader.ReadSingle();
            this.SlideDeceleration = reader.ReadSingle();
            this.MinimumFlippingAngularVelocity = reader.ReadSingle();
            this.MaximumFlippingAngularVelocity = reader.ReadSingle();
            this.VehicleSize = ((VehicleSizeOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.FixedGunYaw = reader.ReadSingle();
            this.FixedGunPitch = reader.ReadSingle();
            this.OverdampenCuspAngle = reader.ReadSingle();
            this.OverdampenExponent = reader.ReadSingle();
            this.CrouchTransitionTime = reader.ReadSingle();
            this.EmptyString1 = reader.ReadBytes(4);
            this.EngineMoment = reader.ReadSingle();
            this.EngineMaxAngularVelocity = reader.ReadSingle();
            this.Gears = reader.ReadInt64();
            this.gearsList.Read(reader, this.Gears);
            this.FlyingTorqueScale = reader.ReadSingle();
            this.SeatEnteranceAccelerationScale = reader.ReadSingle();
            this.SeatExitAccelersationScale = reader.ReadSingle();
            this.AirFrictionDeceleration = reader.ReadSingle();
            this.ThrustScale = reader.ReadSingle();
            this.SuspensionSound = reader.Read<TagReference>();
            this.CrashSound = reader.Read<TagReference>();
            this.Unused = reader.Read<TagReference>();
            this.SpecialEffect = reader.Read<TagReference>();
            this.UnusedEffect = reader.Read<TagReference>();
            this.HavokVehiclePhysics = reader.ReadDataStructure<HavokVehiclePhysicsStructBlock>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(68, 4)]
        public sealed class GearBlock : AbideTagBlock
        {
            [FieldAttribute("loaded torque curve", typeof(TorqueCurveStructBlock))]
            public TorqueCurveStructBlock LoadedTorqueCurve;
            [FieldAttribute("cruising torque curve", typeof(TorqueCurveStructBlock))]
            public TorqueCurveStructBlock CruisingTorqueCurve;
            [FieldAttribute("min time to upshift#seconds", typeof(Single))]
            public Single MinTimeToUpshift;
            [FieldAttribute("engine up-shift scale#0-1", typeof(Single))]
            public Single EngineUpShiftScale;
            [FieldAttribute("gear ratio", typeof(Single))]
            public Single GearRatio;
            [FieldAttribute("min time to downshift#seconds", typeof(Single))]
            public Single MinTimeToDownshift;
            [FieldAttribute("engine down-shift scale#0-1", typeof(Single))]
            public Single EngineDownShiftScale;
            public override int Size
            {
                get
                {
                    return 68;
                }
            }
            public override void Initialize()
            {
                this.LoadedTorqueCurve = new TorqueCurveStructBlock();
                this.CruisingTorqueCurve = new TorqueCurveStructBlock();
                this.MinTimeToUpshift = 0;
                this.EngineUpShiftScale = 0;
                this.GearRatio = 0;
                this.MinTimeToDownshift = 0;
                this.EngineDownShiftScale = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.LoadedTorqueCurve = reader.ReadDataStructure<TorqueCurveStructBlock>();
                this.CruisingTorqueCurve = reader.ReadDataStructure<TorqueCurveStructBlock>();
                this.MinTimeToUpshift = reader.ReadSingle();
                this.EngineUpShiftScale = reader.ReadSingle();
                this.GearRatio = reader.ReadSingle();
                this.MinTimeToDownshift = reader.ReadSingle();
                this.EngineDownShiftScale = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(24, 4)]
            public sealed class TorqueCurveStructBlock : AbideTagBlock
            {
                [FieldAttribute("min torque", typeof(Single))]
                public Single MinTorque;
                [FieldAttribute("max torque", typeof(Single))]
                public Single MaxTorque;
                [FieldAttribute("peak torque scale", typeof(Single))]
                public Single PeakTorqueScale;
                [FieldAttribute("past peak torque exponent", typeof(Single))]
                public Single PastPeakTorqueExponent;
                [FieldAttribute("torque at max angular velocity#generally 0 for loading torque and something less " +
                    "than max torque for cruising torque", typeof(Single))]
                public Single TorqueAtMaxAngularVelocity;
                [FieldAttribute("torque at 2x max angular velocity", typeof(Single))]
                public Single TorqueAt2xMaxAngularVelocity;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.MinTorque = 0;
                    this.MaxTorque = 0;
                    this.PeakTorqueScale = 0;
                    this.PastPeakTorqueExponent = 0;
                    this.TorqueAtMaxAngularVelocity = 0;
                    this.TorqueAt2xMaxAngularVelocity = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.MinTorque = reader.ReadSingle();
                    this.MaxTorque = reader.ReadSingle();
                    this.PeakTorqueScale = reader.ReadSingle();
                    this.PastPeakTorqueExponent = reader.ReadSingle();
                    this.TorqueAtMaxAngularVelocity = reader.ReadSingle();
                    this.TorqueAt2xMaxAngularVelocity = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(96, 4)]
        public sealed class HavokVehiclePhysicsStructBlock : AbideTagBlock
        {
            private TagBlockList<AntiGravityPointDefinitionBlock> antiGravityPointsList = new TagBlockList<AntiGravityPointDefinitionBlock>(16);
            private TagBlockList<FrictionPointDefinitionBlock> frictionPointsList = new TagBlockList<FrictionPointDefinitionBlock>(16);
            private TagBlockList<VehiclePhantomShapeBlock> shapePhantomShapeList = new TagBlockList<VehiclePhantomShapeBlock>(1);
            [FieldAttribute("flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("ground friction# for friction based vehicles only", typeof(Single))]
            public Single GroundFriction;
            [FieldAttribute("ground depth# for friction based vehicles only", typeof(Single))]
            public Single GroundDepth;
            [FieldAttribute("ground damp factor# for friction based vehicles only", typeof(Single))]
            public Single GroundDampFactor;
            [FieldAttribute("ground moving friction# for friction based vehicles only", typeof(Single))]
            public Single GroundMovingFriction;
            [FieldAttribute("ground maximum slope 0#degrees 0-90", typeof(Single))]
            public Single GroundMaximumSlope0;
            [FieldAttribute("ground maximum slope 1#degrees 0-90.  and greater than slope 0", typeof(Single))]
            public Single GroundMaximumSlope1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            [FieldAttribute("anti_gravity_bank_lift#lift per WU.", typeof(Single))]
            public Single AntiGravityBankLift;
            [FieldAttribute("steering_bank_reaction_scale#how quickly we bank when we steer ", typeof(Single))]
            public Single SteeringBankReactionScale;
            [FieldAttribute("gravity scale#value of 0 defaults to 1.  .5 is half gravity", typeof(Single))]
            public Single GravityScale;
            [FieldAttribute("radius*#generated from the radius of the hkConvexShape for this vehicle", typeof(Single))]
            public Single Radius;
            [FieldAttribute("anti gravity points", typeof(TagBlock))]
            [BlockAttribute("anti_gravity_point_definition_block", 16, typeof(AntiGravityPointDefinitionBlock))]
            public TagBlock AntiGravityPoints;
            [FieldAttribute("friction points", typeof(TagBlock))]
            [BlockAttribute("friction_point_definition_block", 16, typeof(FrictionPointDefinitionBlock))]
            public TagBlock FrictionPoints;
            [FieldAttribute("*shape phantom shape*", typeof(TagBlock))]
            [BlockAttribute("vehicle_phantom_shape_block", 1, typeof(VehiclePhantomShapeBlock))]
            public TagBlock ShapePhantomShape;
            public TagBlockList<AntiGravityPointDefinitionBlock> AntiGravityPointsList
            {
                get
                {
                    return this.antiGravityPointsList;
                }
            }
            public TagBlockList<FrictionPointDefinitionBlock> FrictionPointsList
            {
                get
                {
                    return this.frictionPointsList;
                }
            }
            public TagBlockList<VehiclePhantomShapeBlock> ShapePhantomShapeList
            {
                get
                {
                    return this.shapePhantomShapeList;
                }
            }
            public override int Size
            {
                get
                {
                    return 96;
                }
            }
            public override void Initialize()
            {
                this.antiGravityPointsList.Clear();
                this.frictionPointsList.Clear();
                this.shapePhantomShapeList.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.GroundFriction = 0;
                this.GroundDepth = 0;
                this.GroundDampFactor = 0;
                this.GroundMovingFriction = 0;
                this.GroundMaximumSlope0 = 0;
                this.GroundMaximumSlope1 = 0;
                this.EmptyString = new byte[16];
                this.AntiGravityBankLift = 0;
                this.SteeringBankReactionScale = 0;
                this.GravityScale = 0;
                this.Radius = 0;
                this.AntiGravityPoints = TagBlock.Zero;
                this.FrictionPoints = TagBlock.Zero;
                this.ShapePhantomShape = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.GroundFriction = reader.ReadSingle();
                this.GroundDepth = reader.ReadSingle();
                this.GroundDampFactor = reader.ReadSingle();
                this.GroundMovingFriction = reader.ReadSingle();
                this.GroundMaximumSlope0 = reader.ReadSingle();
                this.GroundMaximumSlope1 = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(16);
                this.AntiGravityBankLift = reader.ReadSingle();
                this.SteeringBankReactionScale = reader.ReadSingle();
                this.GravityScale = reader.ReadSingle();
                this.Radius = reader.ReadSingle();
                this.AntiGravityPoints = reader.ReadInt64();
                this.antiGravityPointsList.Read(reader, this.AntiGravityPoints);
                this.FrictionPoints = reader.ReadInt64();
                this.frictionPointsList.Read(reader, this.FrictionPoints);
                this.ShapePhantomShape = reader.ReadInt64();
                this.shapePhantomShapeList.Read(reader, this.ShapePhantomShape);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(76, 4)]
            public sealed class AntiGravityPointDefinitionBlock : AbideTagBlock
            {
                [FieldAttribute("marker name^", typeof(StringId))]
                public StringId MarkerName;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("antigrav strength", typeof(Single))]
                public Single AntigravStrength;
                [FieldAttribute("antigrav offset", typeof(Single))]
                public Single AntigravOffset;
                [FieldAttribute("antigrav height", typeof(Single))]
                public Single AntigravHeight;
                [FieldAttribute("antigrav damp factor", typeof(Single))]
                public Single AntigravDampFactor;
                [FieldAttribute("antigrav normal k1", typeof(Single))]
                public Single AntigravNormalK1;
                [FieldAttribute("antigrav normal k0", typeof(Single))]
                public Single AntigravNormalK0;
                [FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("damage source region name", typeof(StringId))]
                public StringId DamageSourceRegionName;
                [FieldAttribute("default state error", typeof(Single))]
                public Single DefaultStateError;
                [FieldAttribute("minor damage error", typeof(Single))]
                public Single MinorDamageError;
                [FieldAttribute("medium damage error", typeof(Single))]
                public Single MediumDamageError;
                [FieldAttribute("major damage error", typeof(Single))]
                public Single MajorDamageError;
                [FieldAttribute("destroyed state error", typeof(Single))]
                public Single DestroyedStateError;
                public override int Size
                {
                    get
                    {
                        return 76;
                    }
                }
                public override void Initialize()
                {
                    this.MarkerName = StringId.Zero;
                    this.Flags = ((FlagsOptions)(0));
                    this.AntigravStrength = 0;
                    this.AntigravOffset = 0;
                    this.AntigravHeight = 0;
                    this.AntigravDampFactor = 0;
                    this.AntigravNormalK1 = 0;
                    this.AntigravNormalK0 = 0;
                    this.Radius = 0;
                    this.EmptyString = new byte[12];
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DamageSourceRegionName = StringId.Zero;
                    this.DefaultStateError = 0;
                    this.MinorDamageError = 0;
                    this.MediumDamageError = 0;
                    this.MajorDamageError = 0;
                    this.DestroyedStateError = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.MarkerName = reader.ReadInt32();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.AntigravStrength = reader.ReadSingle();
                    this.AntigravOffset = reader.ReadSingle();
                    this.AntigravHeight = reader.ReadSingle();
                    this.AntigravDampFactor = reader.ReadSingle();
                    this.AntigravNormalK1 = reader.ReadSingle();
                    this.AntigravNormalK0 = reader.ReadSingle();
                    this.Radius = reader.ReadSingle();
                    this.EmptyString = reader.ReadBytes(12);
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DamageSourceRegionName = reader.ReadInt32();
                    this.DefaultStateError = reader.ReadSingle();
                    this.MinorDamageError = reader.ReadSingle();
                    this.MediumDamageError = reader.ReadSingle();
                    this.MajorDamageError = reader.ReadSingle();
                    this.DestroyedStateError = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    GetsDamageFromRegion = 1,
                }
            }
            [FieldSetAttribute(76, 4)]
            public sealed class FrictionPointDefinitionBlock : AbideTagBlock
            {
                [FieldAttribute("marker name^", typeof(StringId))]
                public StringId MarkerName;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("fraction of total mass#(0.0-1.0) fraction of total vehicle mass", typeof(Single))]
                public Single FractionOfTotalMass;
                [FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                [FieldAttribute("damaged radius#radius when the tire is blown off.", typeof(Single))]
                public Single DamagedRadius;
                [FieldAttribute("friction type", typeof(FrictionTypeOptions))]
                [OptionsAttribute(typeof(FrictionTypeOptions), false)]
                public FrictionTypeOptions FrictionType;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("moving friction velocity diff", typeof(Single))]
                public Single MovingFrictionVelocityDiff;
                [FieldAttribute("e-brake moving friction", typeof(Single))]
                public Single EBrakeMovingFriction;
                [FieldAttribute("e-brake friction", typeof(Single))]
                public Single EBrakeFriction;
                [FieldAttribute("e-brake moving friction vel diff", typeof(Single))]
                public Single EBrakeMovingFrictionVelDiff;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(20)]
                public Byte[] EmptyString1;
                [FieldAttribute("collision global material name", typeof(StringId))]
                public StringId CollisionGlobalMaterialName;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("model state destroyed#only need point can destroy flag set", typeof(ModelStateDestroyedOptions))]
                [OptionsAttribute(typeof(ModelStateDestroyedOptions), false)]
                public ModelStateDestroyedOptions ModelStateDestroyed;
                [FieldAttribute("region name#only need point can destroy flag set", typeof(StringId))]
                public StringId RegionName;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString3;
                public override int Size
                {
                    get
                    {
                        return 76;
                    }
                }
                public override void Initialize()
                {
                    this.MarkerName = StringId.Zero;
                    this.Flags = ((FlagsOptions)(0));
                    this.FractionOfTotalMass = 0;
                    this.Radius = 0;
                    this.DamagedRadius = 0;
                    this.FrictionType = ((FrictionTypeOptions)(0));
                    this.EmptyString = new byte[2];
                    this.MovingFrictionVelocityDiff = 0;
                    this.EBrakeMovingFriction = 0;
                    this.EBrakeFriction = 0;
                    this.EBrakeMovingFrictionVelDiff = 0;
                    this.EmptyString1 = new byte[20];
                    this.CollisionGlobalMaterialName = StringId.Zero;
                    this.EmptyString2 = new byte[2];
                    this.ModelStateDestroyed = ((ModelStateDestroyedOptions)(0));
                    this.RegionName = StringId.Zero;
                    this.EmptyString3 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.MarkerName = reader.ReadInt32();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.FractionOfTotalMass = reader.ReadSingle();
                    this.Radius = reader.ReadSingle();
                    this.DamagedRadius = reader.ReadSingle();
                    this.FrictionType = ((FrictionTypeOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.MovingFrictionVelocityDiff = reader.ReadSingle();
                    this.EBrakeMovingFriction = reader.ReadSingle();
                    this.EBrakeFriction = reader.ReadSingle();
                    this.EBrakeMovingFrictionVelDiff = reader.ReadSingle();
                    this.EmptyString1 = reader.ReadBytes(20);
                    this.CollisionGlobalMaterialName = reader.ReadInt32();
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.ModelStateDestroyed = ((ModelStateDestroyedOptions)(reader.ReadInt16()));
                    this.RegionName = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    GetsDamageFromRegion = 1,
                    Powered = 2,
                    FrontTurning = 4,
                    RearTurning = 8,
                    AttachedToEBrake = 16,
                    CanBeDestroyed = 32,
                }
                public enum FrictionTypeOptions : Int16
                {
                    Point = 0,
                    Forward = 1,
                }
                public enum ModelStateDestroyedOptions : Int16
                {
                    Default = 0,
                    MinorDamage = 1,
                    MediumDamage = 2,
                    MajorDamage = 3,
                    Destroyed = 4,
                }
            }
            [FieldSetAttribute(672, 16)]
            public sealed class VehiclePhantomShapeBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("size*", typeof(Int16))]
                public Int16 Size1;
                [FieldAttribute("count*", typeof(Int16))]
                public Int16 Count;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [FieldAttribute("child shapes size*", typeof(Int32))]
                public Int32 ChildShapesSize;
                [FieldAttribute("child shapes capacity*", typeof(Int32))]
                public Int32 ChildShapesCapacity;
                [FieldAttribute("child shapes storage*", typeof(ChildShapesStorageElement[]))]
                [ArrayAttribute(4, typeof(ChildShapesStorageElement))]
                public ChildShapesStorageElement[] ChildShapesStorage;
                [FieldAttribute("multisphere count*", typeof(Int32))]
                public Int32 MultisphereCount;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString3;
                [FieldAttribute("x0", typeof(Single))]
                public Single X0;
                [FieldAttribute("x1", typeof(Single))]
                public Single X1;
                [FieldAttribute("y0", typeof(Single))]
                public Single Y0;
                [FieldAttribute("y1", typeof(Single))]
                public Single Y1;
                [FieldAttribute("z0", typeof(Single))]
                public Single Z0;
                [FieldAttribute("z1", typeof(Single))]
                public Single Z1;
                [FieldAttribute("multispheres*", typeof(MultispheresElement[]))]
                [ArrayAttribute(4, typeof(MultispheresElement))]
                public MultispheresElement[] Multispheres;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString4;
                public override int Size
                {
                    get
                    {
                        return 672;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[4];
                    this.Size1 = 0;
                    this.Count = 0;
                    this.EmptyString1 = new byte[4];
                    this.EmptyString2 = new byte[4];
                    this.ChildShapesSize = 0;
                    this.ChildShapesCapacity = 0;
                    this.ChildShapesStorage = new ChildShapesStorageElement[4];
                    this.MultisphereCount = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString3 = new byte[8];
                    this.X0 = 0;
                    this.X1 = 0;
                    this.Y0 = 0;
                    this.Y1 = 0;
                    this.Z0 = 0;
                    this.Z1 = 0;
                    this.Multispheres = new MultispheresElement[4];
                    this.EmptyString4 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(4);
                    this.Size1 = reader.ReadInt16();
                    this.Count = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(4);
                    this.EmptyString2 = reader.ReadBytes(4);
                    this.ChildShapesSize = reader.ReadInt32();
                    this.ChildShapesCapacity = reader.ReadInt32();
                    this.MultisphereCount = reader.ReadInt32();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.EmptyString3 = reader.ReadBytes(8);
                    this.X0 = reader.ReadSingle();
                    this.X1 = reader.ReadSingle();
                    this.Y0 = reader.ReadSingle();
                    this.Y1 = reader.ReadSingle();
                    this.Z0 = reader.ReadSingle();
                    this.Z1 = reader.ReadSingle();
                    this.EmptyString4 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public sealed class ChildShapesStorageElement : AbideTagBlock
                {
                    [FieldAttribute("shape type*", typeof(ShapeTypeOptions))]
                    [OptionsAttribute(typeof(ShapeTypeOptions), false)]
                    public ShapeTypeOptions ShapeType;
                    [FieldAttribute("shape*", typeof(Int16))]
                    public Int16 Shape;
                    [FieldAttribute("collision filter*", typeof(Int32))]
                    public Int32 CollisionFilter;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.ShapeType = ((ShapeTypeOptions)(0));
                        this.Shape = 0;
                        this.CollisionFilter = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.ShapeType = ((ShapeTypeOptions)(reader.ReadInt16()));
                        this.Shape = reader.ReadInt16();
                        this.CollisionFilter = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum ShapeTypeOptions : Int16
                    {
                        Sphere = 0,
                        Pill = 1,
                        Box = 2,
                        Triangle = 3,
                        Polyhedron = 4,
                        MultiSphere = 5,
                        Unused0 = 6,
                        Unused1 = 7,
                        Unused2 = 8,
                        Unused3 = 9,
                        Unused4 = 10,
                        Unused5 = 11,
                        Unused6 = 12,
                        Unused7 = 13,
                        List = 14,
                        Mopp = 15,
                    }
                }
                public sealed class MultispheresElement : AbideTagBlock
                {
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [FieldAttribute("size*", typeof(Int16))]
                    public Int16 Size1;
                    [FieldAttribute("count*", typeof(Int16))]
                    public Int16 Count;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("num spheres*", typeof(Int32))]
                    public Int32 NumSpheres;
                    [FieldAttribute("four vectors storage*", typeof(FourVectorsStorageElement[]))]
                    [ArrayAttribute(8, typeof(FourVectorsStorageElement))]
                    public FourVectorsStorageElement[] FourVectorsStorage;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.EmptyString = new byte[4];
                        this.Size1 = 0;
                        this.Count = 0;
                        this.EmptyString1 = new byte[4];
                        this.NumSpheres = 0;
                        this.FourVectorsStorage = new FourVectorsStorageElement[8];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.EmptyString = reader.ReadBytes(4);
                        this.Size1 = reader.ReadInt16();
                        this.Count = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(4);
                        this.NumSpheres = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class FourVectorsStorageElement : AbideTagBlock
                    {
                        [FieldAttribute("sphere*", typeof(Vector3))]
                        public Vector3 Sphere;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(4)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Sphere = Vector3.Zero;
                            this.EmptyString = new byte[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Sphere = reader.Read<Vector3>();
                            this.EmptyString = reader.ReadBytes(4);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                public enum FlagsOptions : Int32
                {
                    HasAabbPhantom = 1,
                    Oo1 = 2,
                }
            }
            public enum FlagsOptions : Int32
            {
                Invalid = 1,
            }
        }
        public enum FlagsOptions : Int32
        {
            SpeedWakesPhysics = 1,
            TurnWakesPhysics = 2,
            DriverPowerWakesPhysics = 4,
            GunnerPowerWakesPhysics = 8,
            ControlOppositeSpeedSetsBrake = 16,
            SlideWakesPhysics = 32,
            KillsRidersAtTerminalVelocity = 64,
            CausesCollisionDamage = 128,
            AiWeaponCannotRotate = 256,
            AiDoesNotRequireDriver = 512,
            AiUnused = 1024,
            AiDriverEnable = 2048,
            AiDriverFlying = 4096,
            AiDriverCanSidestep = 8192,
            AiDriverHovering = 16384,
            VehicleSteersDirectly = 32768,
            Unused = 65536,
            HasEBrake = 131072,
            NoncombatVehicle = 262144,
            NoFrictionWdriver = 524288,
            CanTriggerAutomaticOpeningDoors = 1048576,
            AutoaimWhenTeamless = 2097152,
        }
        public enum TypeOptions : Int16
        {
            HumanTank = 0,
            HumanJeep = 1,
            HumanBoat = 2,
            HumanPlane = 3,
            AlienScout = 4,
            AlienFighter = 5,
            Turret = 6,
        }
        public enum ControlOptions : Int16
        {
            VehicleControlNormal = 0,
            VehicleControlUnused = 1,
            VehicleControlTank = 2,
        }
        public enum SpecificTypeOptions : Int16
        {
            None = 0,
            Ghost = 1,
            Wraith = 2,
            Spectre = 3,
            SentinelEnforcer = 4,
        }
        public enum PlayerTrainingVehicleTypeOptions : Int16
        {
            None = 0,
            Warthog = 1,
            WarthogTurret = 2,
            Ghost = 3,
            Banshee = 4,
            Tank = 5,
            Wraith = 6,
        }
        public enum VehicleSizeOptions : Int16
        {
            Small = 0,
            Large = 1,
        }
    }
}
#pragma warning restore CS1591
