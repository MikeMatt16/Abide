#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(396, 4)]
    [TagGroupAttribute("physics_model", 1885891951u, 4294967293u, typeof(PhysicsModelBlock))]
    public sealed class PhysicsModelBlock : AbideTagBlock
    {
        private DataList moppCodesList = new DataList(1048576);
        private TagBlockList<PhantomTypesBlock> phantomTypesList = new TagBlockList<PhantomTypesBlock>(16);
        private TagBlockList<PhysicsModelNodeConstraintEdgeBlock> nodeEdgesList = new TagBlockList<PhysicsModelNodeConstraintEdgeBlock>(4096);
        private TagBlockList<RigidBodiesBlock> rigidBodiesList = new TagBlockList<RigidBodiesBlock>(64);
        private TagBlockList<MaterialsBlock> materialsList = new TagBlockList<MaterialsBlock>(64);
        private TagBlockList<SpheresBlock> spheresList = new TagBlockList<SpheresBlock>(1024);
        private TagBlockList<MultiSpheresBlock> multiSpheresList = new TagBlockList<MultiSpheresBlock>(1024);
        private TagBlockList<PillsBlock> pillsList = new TagBlockList<PillsBlock>(1024);
        private TagBlockList<BoxesBlock> boxesList = new TagBlockList<BoxesBlock>(1024);
        private TagBlockList<TrianglesBlock> trianglesList = new TagBlockList<TrianglesBlock>(1024);
        private TagBlockList<PolyhedraBlock> polyhedraList = new TagBlockList<PolyhedraBlock>(1024);
        private TagBlockList<PolyhedronFourVectorsBlock> polyhedronFourVectorsList = new TagBlockList<PolyhedronFourVectorsBlock>(4096);
        private TagBlockList<PolyhedronPlaneEquationsBlock> polyhedronPlaneEquationsList = new TagBlockList<PolyhedronPlaneEquationsBlock>(1024);
        private TagBlockList<MassDistributionsBlock> massDistributionsList = new TagBlockList<MassDistributionsBlock>(256);
        private TagBlockList<ListsBlock> listsList = new TagBlockList<ListsBlock>(64);
        private TagBlockList<ListShapesBlock> listShapesList = new TagBlockList<ListShapesBlock>(256);
        private TagBlockList<MoppsBlock> moppsList = new TagBlockList<MoppsBlock>(64);
        private TagBlockList<HingeConstraintsBlock> hingeConstraintsList = new TagBlockList<HingeConstraintsBlock>(64);
        private TagBlockList<RagdollConstraintsBlock> ragdollConstraintsList = new TagBlockList<RagdollConstraintsBlock>(64);
        private TagBlockList<RegionsBlock> regionsList = new TagBlockList<RegionsBlock>(16);
        private TagBlockList<NodesBlock> nodesList = new TagBlockList<NodesBlock>(255);
        private TagBlockList<GlobalTagImportInfoBlock> importInfoList = new TagBlockList<GlobalTagImportInfoBlock>(1);
        private TagBlockList<GlobalErrorReportCategoriesBlock> errorsList = new TagBlockList<GlobalErrorReportCategoriesBlock>(64);
        private TagBlockList<PointToPathCurveBlock> pointToPathCurvesList = new TagBlockList<PointToPathCurveBlock>(64);
        private TagBlockList<LimitedHingeConstraintsBlock> limitedHingeConstraintsList = new TagBlockList<LimitedHingeConstraintsBlock>(64);
        private TagBlockList<BallAndSocketConstraintsBlock> ballAndSocketConstraintsList = new TagBlockList<BallAndSocketConstraintsBlock>(64);
        private TagBlockList<StiffSpringConstraintsBlock> stiffSpringConstraintsList = new TagBlockList<StiffSpringConstraintsBlock>(64);
        private TagBlockList<PrismaticConstraintsBlock> prismaticConstraintsList = new TagBlockList<PrismaticConstraintsBlock>(64);
        private TagBlockList<PhantomsBlock> phantomsList = new TagBlockList<PhantomsBlock>(1024);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("mass", typeof(Single))]
        public Single Mass;
        [FieldAttribute("low freq. deactivation scale#0 is default (1). LESS than 1 deactivates less aggre" +
            "ssively. GREATER than 1 is more agressive.", typeof(Single))]
        public Single LowFreqDeactivationScale;
        [FieldAttribute("high freq. deactivation scale#0 is default (1). LESS than 1 deactivates less aggr" +
            "essively. GREATER than 1 is more agressive.", typeof(Single))]
        public Single HighFreqDeactivationScale;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(24)]
        public Byte[] EmptyString;
        [FieldAttribute("phantom types", typeof(TagBlock))]
        [BlockAttribute("phantom_types_block", 16, typeof(PhantomTypesBlock))]
        public TagBlock PhantomTypes;
        [FieldAttribute("node edges*", typeof(TagBlock))]
        [BlockAttribute("physics_model_node_constraint_edge_block", 4096, typeof(PhysicsModelNodeConstraintEdgeBlock))]
        public TagBlock NodeEdges;
        [FieldAttribute("rigid bodies*", typeof(TagBlock))]
        [BlockAttribute("rigid_bodies_block", 64, typeof(RigidBodiesBlock))]
        public TagBlock RigidBodies;
        [FieldAttribute("materials*", typeof(TagBlock))]
        [BlockAttribute("materials_block", 64, typeof(MaterialsBlock))]
        public TagBlock Materials;
        [FieldAttribute("spheres*", typeof(TagBlock))]
        [BlockAttribute("spheres_block", 1024, typeof(SpheresBlock))]
        public TagBlock Spheres;
        [FieldAttribute("multi spheres*", typeof(TagBlock))]
        [BlockAttribute("multi_spheres_block", 1024, typeof(MultiSpheresBlock))]
        public TagBlock MultiSpheres;
        [FieldAttribute("pills*", typeof(TagBlock))]
        [BlockAttribute("pills_block", 1024, typeof(PillsBlock))]
        public TagBlock Pills;
        [FieldAttribute("boxes*", typeof(TagBlock))]
        [BlockAttribute("boxes_block", 1024, typeof(BoxesBlock))]
        public TagBlock Boxes;
        [FieldAttribute("triangles*", typeof(TagBlock))]
        [BlockAttribute("triangles_block", 1024, typeof(TrianglesBlock))]
        public TagBlock Triangles;
        [FieldAttribute("polyhedra*", typeof(TagBlock))]
        [BlockAttribute("polyhedra_block", 1024, typeof(PolyhedraBlock))]
        public TagBlock Polyhedra;
        [FieldAttribute("polyhedron four vectors*", typeof(TagBlock))]
        [BlockAttribute("polyhedron_four_vectors_block", 4096, typeof(PolyhedronFourVectorsBlock))]
        public TagBlock PolyhedronFourVectors;
        [FieldAttribute("polyhedron plane equations*", typeof(TagBlock))]
        [BlockAttribute("polyhedron_plane_equations_block", 1024, typeof(PolyhedronPlaneEquationsBlock))]
        public TagBlock PolyhedronPlaneEquations;
        [FieldAttribute("mass distributions*", typeof(TagBlock))]
        [BlockAttribute("mass_distributions_block", 256, typeof(MassDistributionsBlock))]
        public TagBlock MassDistributions;
        [FieldAttribute("lists*", typeof(TagBlock))]
        [BlockAttribute("lists_block", 64, typeof(ListsBlock))]
        public TagBlock Lists;
        [FieldAttribute("list shapes*", typeof(TagBlock))]
        [BlockAttribute("list_shapes_block", 256, typeof(ListShapesBlock))]
        public TagBlock ListShapes;
        [FieldAttribute("mopps*", typeof(TagBlock))]
        [BlockAttribute("mopps_block", 64, typeof(MoppsBlock))]
        public TagBlock Mopps;
        [FieldAttribute("mopp codes*", typeof(TagBlock))]
        [DataAttribute(1048576)]
        public TagBlock MoppCodes;
        [FieldAttribute("hinge constraints*", typeof(TagBlock))]
        [BlockAttribute("hinge_constraints_block", 64, typeof(HingeConstraintsBlock))]
        public TagBlock HingeConstraints;
        [FieldAttribute("ragdoll constraints*", typeof(TagBlock))]
        [BlockAttribute("ragdoll_constraints_block", 64, typeof(RagdollConstraintsBlock))]
        public TagBlock RagdollConstraints;
        [FieldAttribute("regions*", typeof(TagBlock))]
        [BlockAttribute("regions_block", 16, typeof(RegionsBlock))]
        public TagBlock Regions;
        [FieldAttribute("nodes*", typeof(TagBlock))]
        [BlockAttribute("nodes_block", 255, typeof(NodesBlock))]
        public TagBlock Nodes;
        [FieldAttribute("import info*", typeof(TagBlock))]
        [BlockAttribute("import info", 1, typeof(GlobalTagImportInfoBlock))]
        public TagBlock ImportInfo;
        [FieldAttribute("errors*", typeof(TagBlock))]
        [BlockAttribute("error report category", 64, typeof(GlobalErrorReportCategoriesBlock))]
        public TagBlock Errors;
        [FieldAttribute("point to path curves*", typeof(TagBlock))]
        [BlockAttribute("point_to_path_curve_block", 64, typeof(PointToPathCurveBlock))]
        public TagBlock PointToPathCurves;
        [FieldAttribute("limited hinge constraints*", typeof(TagBlock))]
        [BlockAttribute("limited_hinge_constraints_block", 64, typeof(LimitedHingeConstraintsBlock))]
        public TagBlock LimitedHingeConstraints;
        [FieldAttribute("ball and socket constraints*", typeof(TagBlock))]
        [BlockAttribute("ball_and_socket_constraints_block", 64, typeof(BallAndSocketConstraintsBlock))]
        public TagBlock BallAndSocketConstraints;
        [FieldAttribute("stiff spring constraints*", typeof(TagBlock))]
        [BlockAttribute("stiff_spring_constraints_block", 64, typeof(StiffSpringConstraintsBlock))]
        public TagBlock StiffSpringConstraints;
        [FieldAttribute("prismatic constraints*", typeof(TagBlock))]
        [BlockAttribute("prismatic_constraints_block", 64, typeof(PrismaticConstraintsBlock))]
        public TagBlock PrismaticConstraints;
        [FieldAttribute("phantoms*", typeof(TagBlock))]
        [BlockAttribute("phantoms_block", 1024, typeof(PhantomsBlock))]
        public TagBlock Phantoms;
        public DataList MoppCodesList
        {
            get
            {
                return this.moppCodesList;
            }
        }
        public TagBlockList<PhantomTypesBlock> PhantomTypesList
        {
            get
            {
                return this.phantomTypesList;
            }
        }
        public TagBlockList<PhysicsModelNodeConstraintEdgeBlock> NodeEdgesList
        {
            get
            {
                return this.nodeEdgesList;
            }
        }
        public TagBlockList<RigidBodiesBlock> RigidBodiesList
        {
            get
            {
                return this.rigidBodiesList;
            }
        }
        public TagBlockList<MaterialsBlock> MaterialsList
        {
            get
            {
                return this.materialsList;
            }
        }
        public TagBlockList<SpheresBlock> SpheresList
        {
            get
            {
                return this.spheresList;
            }
        }
        public TagBlockList<MultiSpheresBlock> MultiSpheresList
        {
            get
            {
                return this.multiSpheresList;
            }
        }
        public TagBlockList<PillsBlock> PillsList
        {
            get
            {
                return this.pillsList;
            }
        }
        public TagBlockList<BoxesBlock> BoxesList
        {
            get
            {
                return this.boxesList;
            }
        }
        public TagBlockList<TrianglesBlock> TrianglesList
        {
            get
            {
                return this.trianglesList;
            }
        }
        public TagBlockList<PolyhedraBlock> PolyhedraList
        {
            get
            {
                return this.polyhedraList;
            }
        }
        public TagBlockList<PolyhedronFourVectorsBlock> PolyhedronFourVectorsList
        {
            get
            {
                return this.polyhedronFourVectorsList;
            }
        }
        public TagBlockList<PolyhedronPlaneEquationsBlock> PolyhedronPlaneEquationsList
        {
            get
            {
                return this.polyhedronPlaneEquationsList;
            }
        }
        public TagBlockList<MassDistributionsBlock> MassDistributionsList
        {
            get
            {
                return this.massDistributionsList;
            }
        }
        public TagBlockList<ListsBlock> ListsList
        {
            get
            {
                return this.listsList;
            }
        }
        public TagBlockList<ListShapesBlock> ListShapesList
        {
            get
            {
                return this.listShapesList;
            }
        }
        public TagBlockList<MoppsBlock> MoppsList
        {
            get
            {
                return this.moppsList;
            }
        }
        public TagBlockList<HingeConstraintsBlock> HingeConstraintsList
        {
            get
            {
                return this.hingeConstraintsList;
            }
        }
        public TagBlockList<RagdollConstraintsBlock> RagdollConstraintsList
        {
            get
            {
                return this.ragdollConstraintsList;
            }
        }
        public TagBlockList<RegionsBlock> RegionsList
        {
            get
            {
                return this.regionsList;
            }
        }
        public TagBlockList<NodesBlock> NodesList
        {
            get
            {
                return this.nodesList;
            }
        }
        public TagBlockList<GlobalTagImportInfoBlock> ImportInfoList
        {
            get
            {
                return this.importInfoList;
            }
        }
        public TagBlockList<GlobalErrorReportCategoriesBlock> ErrorsList
        {
            get
            {
                return this.errorsList;
            }
        }
        public TagBlockList<PointToPathCurveBlock> PointToPathCurvesList
        {
            get
            {
                return this.pointToPathCurvesList;
            }
        }
        public TagBlockList<LimitedHingeConstraintsBlock> LimitedHingeConstraintsList
        {
            get
            {
                return this.limitedHingeConstraintsList;
            }
        }
        public TagBlockList<BallAndSocketConstraintsBlock> BallAndSocketConstraintsList
        {
            get
            {
                return this.ballAndSocketConstraintsList;
            }
        }
        public TagBlockList<StiffSpringConstraintsBlock> StiffSpringConstraintsList
        {
            get
            {
                return this.stiffSpringConstraintsList;
            }
        }
        public TagBlockList<PrismaticConstraintsBlock> PrismaticConstraintsList
        {
            get
            {
                return this.prismaticConstraintsList;
            }
        }
        public TagBlockList<PhantomsBlock> PhantomsList
        {
            get
            {
                return this.phantomsList;
            }
        }
        public override int Size
        {
            get
            {
                return 396;
            }
        }
        public override void Initialize()
        {
            this.moppCodesList.Clear();
            this.phantomTypesList.Clear();
            this.nodeEdgesList.Clear();
            this.rigidBodiesList.Clear();
            this.materialsList.Clear();
            this.spheresList.Clear();
            this.multiSpheresList.Clear();
            this.pillsList.Clear();
            this.boxesList.Clear();
            this.trianglesList.Clear();
            this.polyhedraList.Clear();
            this.polyhedronFourVectorsList.Clear();
            this.polyhedronPlaneEquationsList.Clear();
            this.massDistributionsList.Clear();
            this.listsList.Clear();
            this.listShapesList.Clear();
            this.moppsList.Clear();
            this.hingeConstraintsList.Clear();
            this.ragdollConstraintsList.Clear();
            this.regionsList.Clear();
            this.nodesList.Clear();
            this.importInfoList.Clear();
            this.errorsList.Clear();
            this.pointToPathCurvesList.Clear();
            this.limitedHingeConstraintsList.Clear();
            this.ballAndSocketConstraintsList.Clear();
            this.stiffSpringConstraintsList.Clear();
            this.prismaticConstraintsList.Clear();
            this.phantomsList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.Mass = 0;
            this.LowFreqDeactivationScale = 0;
            this.HighFreqDeactivationScale = 0;
            this.EmptyString = new byte[24];
            this.PhantomTypes = TagBlock.Zero;
            this.NodeEdges = TagBlock.Zero;
            this.RigidBodies = TagBlock.Zero;
            this.Materials = TagBlock.Zero;
            this.Spheres = TagBlock.Zero;
            this.MultiSpheres = TagBlock.Zero;
            this.Pills = TagBlock.Zero;
            this.Boxes = TagBlock.Zero;
            this.Triangles = TagBlock.Zero;
            this.Polyhedra = TagBlock.Zero;
            this.PolyhedronFourVectors = TagBlock.Zero;
            this.PolyhedronPlaneEquations = TagBlock.Zero;
            this.MassDistributions = TagBlock.Zero;
            this.Lists = TagBlock.Zero;
            this.ListShapes = TagBlock.Zero;
            this.Mopps = TagBlock.Zero;
            this.MoppCodes = TagBlock.Zero;
            this.HingeConstraints = TagBlock.Zero;
            this.RagdollConstraints = TagBlock.Zero;
            this.Regions = TagBlock.Zero;
            this.Nodes = TagBlock.Zero;
            this.ImportInfo = TagBlock.Zero;
            this.Errors = TagBlock.Zero;
            this.PointToPathCurves = TagBlock.Zero;
            this.LimitedHingeConstraints = TagBlock.Zero;
            this.BallAndSocketConstraints = TagBlock.Zero;
            this.StiffSpringConstraints = TagBlock.Zero;
            this.PrismaticConstraints = TagBlock.Zero;
            this.Phantoms = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.Mass = reader.ReadSingle();
            this.LowFreqDeactivationScale = reader.ReadSingle();
            this.HighFreqDeactivationScale = reader.ReadSingle();
            this.EmptyString = reader.ReadBytes(24);
            this.PhantomTypes = reader.ReadInt64();
            this.phantomTypesList.Read(reader, this.PhantomTypes);
            this.NodeEdges = reader.ReadInt64();
            this.nodeEdgesList.Read(reader, this.NodeEdges);
            this.RigidBodies = reader.ReadInt64();
            this.rigidBodiesList.Read(reader, this.RigidBodies);
            this.Materials = reader.ReadInt64();
            this.materialsList.Read(reader, this.Materials);
            this.Spheres = reader.ReadInt64();
            this.spheresList.Read(reader, this.Spheres);
            this.MultiSpheres = reader.ReadInt64();
            this.multiSpheresList.Read(reader, this.MultiSpheres);
            this.Pills = reader.ReadInt64();
            this.pillsList.Read(reader, this.Pills);
            this.Boxes = reader.ReadInt64();
            this.boxesList.Read(reader, this.Boxes);
            this.Triangles = reader.ReadInt64();
            this.trianglesList.Read(reader, this.Triangles);
            this.Polyhedra = reader.ReadInt64();
            this.polyhedraList.Read(reader, this.Polyhedra);
            this.PolyhedronFourVectors = reader.ReadInt64();
            this.polyhedronFourVectorsList.Read(reader, this.PolyhedronFourVectors);
            this.PolyhedronPlaneEquations = reader.ReadInt64();
            this.polyhedronPlaneEquationsList.Read(reader, this.PolyhedronPlaneEquations);
            this.MassDistributions = reader.ReadInt64();
            this.massDistributionsList.Read(reader, this.MassDistributions);
            this.Lists = reader.ReadInt64();
            this.listsList.Read(reader, this.Lists);
            this.ListShapes = reader.ReadInt64();
            this.listShapesList.Read(reader, this.ListShapes);
            this.Mopps = reader.ReadInt64();
            this.moppsList.Read(reader, this.Mopps);
            this.MoppCodes = reader.ReadInt64();
            this.HingeConstraints = reader.ReadInt64();
            this.hingeConstraintsList.Read(reader, this.HingeConstraints);
            this.RagdollConstraints = reader.ReadInt64();
            this.ragdollConstraintsList.Read(reader, this.RagdollConstraints);
            this.Regions = reader.ReadInt64();
            this.regionsList.Read(reader, this.Regions);
            this.Nodes = reader.ReadInt64();
            this.nodesList.Read(reader, this.Nodes);
            this.ImportInfo = reader.ReadInt64();
            this.importInfoList.Read(reader, this.ImportInfo);
            this.Errors = reader.ReadInt64();
            this.errorsList.Read(reader, this.Errors);
            this.PointToPathCurves = reader.ReadInt64();
            this.pointToPathCurvesList.Read(reader, this.PointToPathCurves);
            this.LimitedHingeConstraints = reader.ReadInt64();
            this.limitedHingeConstraintsList.Read(reader, this.LimitedHingeConstraints);
            this.BallAndSocketConstraints = reader.ReadInt64();
            this.ballAndSocketConstraintsList.Read(reader, this.BallAndSocketConstraints);
            this.StiffSpringConstraints = reader.ReadInt64();
            this.stiffSpringConstraintsList.Read(reader, this.StiffSpringConstraints);
            this.PrismaticConstraints = reader.ReadInt64();
            this.prismaticConstraintsList.Read(reader, this.PrismaticConstraints);
            this.Phantoms = reader.ReadInt64();
            this.phantomsList.Read(reader, this.Phantoms);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(104, 4)]
        public sealed class PhantomTypesBlock : AbideTagBlock
        {
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("minimum size", typeof(MinimumSizeOptions))]
            [OptionsAttribute(typeof(MinimumSizeOptions), false)]
            public MinimumSizeOptions MinimumSize;
            [FieldAttribute("maximum size", typeof(MaximumSizeOptions))]
            [OptionsAttribute(typeof(MaximumSizeOptions), false)]
            public MaximumSizeOptions MaximumSize;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("marker name#you don\'t need this if you\'re just generating effects.  If empty it d" +
                "efaults to the up of the object", typeof(StringId))]
            public StringId MarkerName;
            [FieldAttribute("alignment marker name#you don\'t need this if you\'re just generating effects.  If " +
                "empty it defaults to \"marker name\"", typeof(StringId))]
            public StringId AlignmentMarkerName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString1;
            [FieldAttribute("hookes law e#0 if you don\'t want this to behave like spring.  1 is a good startin" +
                "g point if you do.", typeof(Single))]
            public Single HookesLawE;
            [FieldAttribute("linear dead radius#radius from linear motion origin in which acceleration is dead" +
                ".", typeof(Single))]
            public Single LinearDeadRadius;
            [FieldAttribute("center acc", typeof(Single))]
            public Single CenterAcc;
            [FieldAttribute("center max vel", typeof(Single))]
            public Single CenterMaxVel;
            [FieldAttribute("axis acc", typeof(Single))]
            public Single AxisAcc;
            [FieldAttribute("axis max vel", typeof(Single))]
            public Single AxisMaxVel;
            [FieldAttribute("direction acc", typeof(Single))]
            public Single DirectionAcc;
            [FieldAttribute("direction max vel", typeof(Single))]
            public Single DirectionMaxVel;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [FieldAttribute("alignment hookes law e#0 if you don\'t want this to behave like spring.  1 is a go" +
                "od starting point if you do.", typeof(Single))]
            public Single AlignmentHookesLawE;
            [FieldAttribute("alignment acc", typeof(Single))]
            public Single AlignmentAcc;
            [FieldAttribute("alignment max vel", typeof(Single))]
            public Single AlignmentMaxVel;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString3;
            public override int Size
            {
                get
                {
                    return 104;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.MinimumSize = ((MinimumSizeOptions)(0));
                this.MaximumSize = ((MaximumSizeOptions)(0));
                this.EmptyString = new byte[2];
                this.MarkerName = StringId.Zero;
                this.AlignmentMarkerName = StringId.Zero;
                this.EmptyString1 = new byte[8];
                this.HookesLawE = 0;
                this.LinearDeadRadius = 0;
                this.CenterAcc = 0;
                this.CenterMaxVel = 0;
                this.AxisAcc = 0;
                this.AxisMaxVel = 0;
                this.DirectionAcc = 0;
                this.DirectionMaxVel = 0;
                this.EmptyString2 = new byte[28];
                this.AlignmentHookesLawE = 0;
                this.AlignmentAcc = 0;
                this.AlignmentMaxVel = 0;
                this.EmptyString3 = new byte[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.MinimumSize = ((MinimumSizeOptions)(reader.ReadByte()));
                this.MaximumSize = ((MaximumSizeOptions)(reader.ReadByte()));
                this.EmptyString = reader.ReadBytes(2);
                this.MarkerName = reader.ReadInt32();
                this.AlignmentMarkerName = reader.ReadInt32();
                this.EmptyString1 = reader.ReadBytes(8);
                this.HookesLawE = reader.ReadSingle();
                this.LinearDeadRadius = reader.ReadSingle();
                this.CenterAcc = reader.ReadSingle();
                this.CenterMaxVel = reader.ReadSingle();
                this.AxisAcc = reader.ReadSingle();
                this.AxisMaxVel = reader.ReadSingle();
                this.DirectionAcc = reader.ReadSingle();
                this.DirectionMaxVel = reader.ReadSingle();
                this.EmptyString2 = reader.ReadBytes(28);
                this.AlignmentHookesLawE = reader.ReadSingle();
                this.AlignmentAcc = reader.ReadSingle();
                this.AlignmentMaxVel = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(8);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                GeneratesEffects = 1,
                UseAccAsForce = 2,
                NegatesGravity = 4,
                IgnoresPlayers = 8,
                IgnoresNonplayers = 16,
                IgnoresBipeds = 32,
                IgnoresVehicles = 64,
                IgnoresWeapons = 128,
                IgnoresEquipment = 256,
                IgnoresGarbage = 512,
                IgnoresProjectiles = 1024,
                IgnoresScenery = 2048,
                IgnoresMachines = 4096,
                IgnoresControls = 8192,
                IgnoresLightFixtures = 16384,
                IgnoresSoundScenery = 32768,
                IgnoresCrates = 65536,
                IgnoresCreatures = 131072,
                EmptyString = 262144,
                EmptyString1 = 524288,
                EmptyString2 = 1048576,
                EmptyString3 = 2097152,
                EmptyString4 = 4194304,
                EmptyString5 = 8388608,
                LocalizesPhysics = 16777216,
                DisableLinearDamping = 33554432,
                DisableAngularDamping = 67108864,
                IgnoresDeadBipeds = 134217728,
            }
            public enum MinimumSizeOptions : Byte
            {
                Default = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                ExtraHuge = 6,
            }
            public enum MaximumSizeOptions : Byte
            {
                Default = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                ExtraHuge = 6,
            }
        }
        [FieldSetAttribute(28, 4)]
        public sealed class PhysicsModelNodeConstraintEdgeBlock : AbideTagBlock
        {
            private TagBlockList<PhysicsModelConstraintEdgeConstraintBlock> constraintsList = new TagBlockList<PhysicsModelConstraintEdgeConstraintBlock>(64);
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("node a*", typeof(Int16))]
            public Int16 NodeA;
            [FieldAttribute("node b*", typeof(Int16))]
            public Int16 NodeB;
            [FieldAttribute("constraints*", typeof(TagBlock))]
            [BlockAttribute("physics_model_constraint_edge_constraint_block", 64, typeof(PhysicsModelConstraintEdgeConstraintBlock))]
            public TagBlock Constraints;
            [FieldAttribute("node a material#if you don\'t fill this out we will pluck the material from the fi" +
                "rst primitive, of the first rigid body attached to node a", typeof(StringId))]
            public StringId NodeAMaterial;
            [FieldAttribute("node b material#if you don\'t fill this out we will pluck the material from the fi" +
                "rst primitive, of the first rigid body attached to node b, if node b is none we " +
                "use whatever material a has", typeof(StringId))]
            public StringId NodeBMaterial;
            public TagBlockList<PhysicsModelConstraintEdgeConstraintBlock> ConstraintsList
            {
                get
                {
                    return this.constraintsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 28;
                }
            }
            public override void Initialize()
            {
                this.constraintsList.Clear();
                this.EmptyString = new byte[4];
                this.NodeA = 0;
                this.NodeB = 0;
                this.Constraints = TagBlock.Zero;
                this.NodeAMaterial = StringId.Zero;
                this.NodeBMaterial = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
                this.NodeA = reader.ReadInt16();
                this.NodeB = reader.ReadInt16();
                this.Constraints = reader.ReadInt64();
                this.constraintsList.Read(reader, this.Constraints);
                this.NodeAMaterial = reader.ReadInt32();
                this.NodeBMaterial = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class PhysicsModelConstraintEdgeConstraintBlock : AbideTagBlock
            {
                [FieldAttribute("type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("index*", typeof(Int16))]
                public Int16 Index;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("friction#0 is the default (takes what it was set in max) anything else overrides " +
                    "that value", typeof(Single))]
                public Single Friction;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Type = ((TypeOptions)(0));
                    this.Index = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.Friction = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Index = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.Friction = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Int16
                {
                    Hinge = 0,
                    LimitedHinge = 1,
                    Ragdoll = 2,
                    StiffSpring = 3,
                    BallAndSocket = 4,
                    Prismatic = 5,
                }
                public enum FlagsOptions : Int32
                {
                    IsRigid = 1,
                    DisableEffects = 2,
                }
            }
        }
        [FieldSetAttribute(144, 16)]
        public sealed class RigidBodiesBlock : AbideTagBlock
        {
            [FieldAttribute("node*", typeof(Int16))]
            public Int16 Node;
            [FieldAttribute("region*", typeof(Int16))]
            public Int16 Region;
            [FieldAttribute("permutattion*", typeof(Int16))]
            public Int16 Permutattion;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("bouding sphere offset*", typeof(Vector3))]
            public Vector3 BoudingSphereOffset;
            [FieldAttribute("bounding sphere radius*", typeof(Single))]
            public Single BoundingSphereRadius;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("motion type", typeof(MotionTypeOptions))]
            [OptionsAttribute(typeof(MotionTypeOptions), false)]
            public MotionTypeOptions MotionType;
            [FieldAttribute("no phantom power alt", typeof(Int16))]
            public Int16 NoPhantomPowerAlt;
            [FieldAttribute("size", typeof(SizeOptions))]
            [OptionsAttribute(typeof(SizeOptions), false)]
            public SizeOptions Size1;
            [FieldAttribute("inertia tensor scale#0.0 defaults to 1.0", typeof(Single))]
            public Single InertiaTensorScale;
            [FieldAttribute("linear damping#this goes from 0-10 (10 is really, really high)", typeof(Single))]
            public Single LinearDamping;
            [FieldAttribute("angular damping#this goes from 0-10 (10 is really, really high)", typeof(Single))]
            public Single AngularDamping;
            [FieldAttribute("center off mass offset", typeof(Vector3))]
            public Vector3 CenterOffMassOffset;
            [FieldAttribute("shape type*", typeof(ShapeTypeOptions))]
            [OptionsAttribute(typeof(ShapeTypeOptions), false)]
            public ShapeTypeOptions ShapeType;
            [FieldAttribute("shape*", typeof(Int16))]
            public Int16 Shape;
            [FieldAttribute("mass:kg*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("center of mass*", typeof(Vector3))]
            public Vector3 CenterOfMass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("intertia tensor x*", typeof(Vector3))]
            public Vector3 IntertiaTensorX;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("intertia tensor y*", typeof(Vector3))]
            public Vector3 IntertiaTensorY;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("intertia tensor z*", typeof(Vector3))]
            public Vector3 IntertiaTensorZ;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("bounding sphere pad#the bounding sphere for this rigid body will be outset by thi" +
                "s much", typeof(Single))]
            public Single BoundingSpherePad;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString5;
            public override int Size
            {
                get
                {
                    return 144;
                }
            }
            public override void Initialize()
            {
                this.Node = 0;
                this.Region = 0;
                this.Permutattion = 0;
                this.EmptyString = new byte[2];
                this.BoudingSphereOffset = Vector3.Zero;
                this.BoundingSphereRadius = 0;
                this.Flags = ((FlagsOptions)(0));
                this.MotionType = ((MotionTypeOptions)(0));
                this.NoPhantomPowerAlt = 0;
                this.Size1 = ((SizeOptions)(0));
                this.InertiaTensorScale = 0;
                this.LinearDamping = 0;
                this.AngularDamping = 0;
                this.CenterOffMassOffset = Vector3.Zero;
                this.ShapeType = ((ShapeTypeOptions)(0));
                this.Shape = 0;
                this.Mass = 0;
                this.CenterOfMass = Vector3.Zero;
                this.EmptyString1 = new byte[4];
                this.IntertiaTensorX = Vector3.Zero;
                this.EmptyString2 = new byte[4];
                this.IntertiaTensorY = Vector3.Zero;
                this.EmptyString3 = new byte[4];
                this.IntertiaTensorZ = Vector3.Zero;
                this.EmptyString4 = new byte[4];
                this.BoundingSpherePad = 0;
                this.EmptyString5 = new byte[12];
            }
            public override void Read(BinaryReader reader)
            {
                this.Node = reader.ReadInt16();
                this.Region = reader.ReadInt16();
                this.Permutattion = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.BoudingSphereOffset = reader.Read<Vector3>();
                this.BoundingSphereRadius = reader.ReadSingle();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.MotionType = ((MotionTypeOptions)(reader.ReadInt16()));
                this.NoPhantomPowerAlt = reader.ReadInt16();
                this.Size1 = ((SizeOptions)(reader.ReadInt16()));
                this.InertiaTensorScale = reader.ReadSingle();
                this.LinearDamping = reader.ReadSingle();
                this.AngularDamping = reader.ReadSingle();
                this.CenterOffMassOffset = reader.Read<Vector3>();
                this.ShapeType = ((ShapeTypeOptions)(reader.ReadInt16()));
                this.Shape = reader.ReadInt16();
                this.Mass = reader.ReadSingle();
                this.CenterOfMass = reader.Read<Vector3>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.IntertiaTensorX = reader.Read<Vector3>();
                this.EmptyString2 = reader.ReadBytes(4);
                this.IntertiaTensorY = reader.Read<Vector3>();
                this.EmptyString3 = reader.ReadBytes(4);
                this.IntertiaTensorZ = reader.Read<Vector3>();
                this.EmptyString4 = reader.ReadBytes(4);
                this.BoundingSpherePad = reader.ReadSingle();
                this.EmptyString5 = reader.ReadBytes(12);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                NoCollisionsWself = 1,
                OnlyCollideWenv = 2,
                DisableEffects = 4,
                DoesNotInteractWenvironment = 8,
                BestEarlyMoverBody = 16,
                HasNoPhantomPowerVersion = 32,
            }
            public enum MotionTypeOptions : Int16
            {
                Sphere = 0,
                StabilizedSphere = 1,
                Box = 2,
                StabilizedBox = 3,
                Keyframed = 4,
                Fixed = 5,
            }
            public enum SizeOptions : Int16
            {
                Default = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                ExtraHuge = 6,
            }
            public enum ShapeTypeOptions : Int16
            {
                Sphere = 0,
                Pill = 1,
                Box = 2,
                Triangle = 3,
                Polyhedron = 4,
                MultiSphere = 5,
                Unused0 = 6,
                Unused1 = 7,
                Unused2 = 8,
                Unused3 = 9,
                Unused4 = 10,
                Unused5 = 11,
                Unused6 = 12,
                Unused7 = 13,
                List = 14,
                Mopp = 15,
            }
        }
        [FieldSetAttribute(12, 4)]
        public sealed class MaterialsBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("global material name", typeof(StringId))]
            public StringId GlobalMaterialName;
            [FieldAttribute("phantom type", typeof(Int16))]
            public Int16 PhantomType;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            public override int Size
            {
                get
                {
                    return 12;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.GlobalMaterialName = StringId.Zero;
                this.PhantomType = 0;
                this.Flags = ((FlagsOptions)(0));
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.GlobalMaterialName = reader.ReadInt32();
                this.PhantomType = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                DoesNotCollideWithFixedBodies = 1,
            }
        }
        [FieldSetAttribute(128, 16)]
        public sealed class SpheresBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("material*", typeof(Int16))]
            public Int16 Material;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("relative mass scale", typeof(Single))]
            public Single RelativeMassScale;
            [FieldAttribute("friction", typeof(Single))]
            public Single Friction;
            [FieldAttribute("restitution", typeof(Single))]
            public Single Restitution;
            [FieldAttribute("volume *", typeof(Single))]
            public Single Volume;
            [FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("phantom*", typeof(Int16))]
            public Int16 Phantom;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("radius*", typeof(Single))]
            public Single Radius;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size2;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [FieldAttribute("rotation i*", typeof(Vector3))]
            public Vector3 RotationI;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [FieldAttribute("rotation j*", typeof(Vector3))]
            public Vector3 RotationJ;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString7;
            [FieldAttribute("rotation k*", typeof(Vector3))]
            public Vector3 RotationK;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString8;
            [FieldAttribute("translation*", typeof(Vector3))]
            public Vector3 Translation;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString9;
            public override int Size
            {
                get
                {
                    return 128;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Material = 0;
                this.Flags = ((FlagsOptions)(0));
                this.RelativeMassScale = 0;
                this.Friction = 0;
                this.Restitution = 0;
                this.Volume = 0;
                this.Mass = 0;
                this.EmptyString = new byte[2];
                this.Phantom = 0;
                this.EmptyString1 = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString2 = new byte[4];
                this.Radius = 0;
                this.EmptyString3 = new byte[4];
                this.Size2 = 0;
                this.Count1 = 0;
                this.EmptyString4 = new byte[4];
                this.EmptyString5 = new byte[4];
                this.RotationI = Vector3.Zero;
                this.EmptyString6 = new byte[4];
                this.RotationJ = Vector3.Zero;
                this.EmptyString7 = new byte[4];
                this.RotationK = Vector3.Zero;
                this.EmptyString8 = new byte[4];
                this.Translation = Vector3.Zero;
                this.EmptyString9 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Material = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.RelativeMassScale = reader.ReadSingle();
                this.Friction = reader.ReadSingle();
                this.Restitution = reader.ReadSingle();
                this.Volume = reader.ReadSingle();
                this.Mass = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(2);
                this.Phantom = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString2 = reader.ReadBytes(4);
                this.Radius = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(4);
                this.Size2 = reader.ReadInt16();
                this.Count1 = reader.ReadInt16();
                this.EmptyString4 = reader.ReadBytes(4);
                this.EmptyString5 = reader.ReadBytes(4);
                this.RotationI = reader.Read<Vector3>();
                this.EmptyString6 = reader.ReadBytes(4);
                this.RotationJ = reader.Read<Vector3>();
                this.EmptyString7 = reader.ReadBytes(4);
                this.RotationK = reader.Read<Vector3>();
                this.EmptyString8 = reader.ReadBytes(4);
                this.Translation = reader.Read<Vector3>();
                this.EmptyString9 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(176, 16)]
        public sealed class MultiSpheresBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("material*", typeof(Int16))]
            public Int16 Material;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("relative mass scale", typeof(Single))]
            public Single RelativeMassScale;
            [FieldAttribute("friction", typeof(Single))]
            public Single Friction;
            [FieldAttribute("restitution", typeof(Single))]
            public Single Restitution;
            [FieldAttribute("volume *", typeof(Single))]
            public Single Volume;
            [FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("phantom*", typeof(Int16))]
            public Int16 Phantom;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("num spheres*", typeof(Int32))]
            public Int32 NumSpheres;
            [FieldAttribute("four vectors storage*", typeof(FourVectorsStorageElement[]))]
            [ArrayAttribute(8, typeof(FourVectorsStorageElement))]
            public FourVectorsStorageElement[] FourVectorsStorage;
            public override int Size
            {
                get
                {
                    return 176;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Material = 0;
                this.Flags = ((FlagsOptions)(0));
                this.RelativeMassScale = 0;
                this.Friction = 0;
                this.Restitution = 0;
                this.Volume = 0;
                this.Mass = 0;
                this.EmptyString = new byte[2];
                this.Phantom = 0;
                this.EmptyString1 = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString2 = new byte[4];
                this.NumSpheres = 0;
                this.FourVectorsStorage = new FourVectorsStorageElement[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Material = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.RelativeMassScale = reader.ReadSingle();
                this.Friction = reader.ReadSingle();
                this.Restitution = reader.ReadSingle();
                this.Volume = reader.ReadSingle();
                this.Mass = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(2);
                this.Phantom = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString2 = reader.ReadBytes(4);
                this.NumSpheres = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public sealed class FourVectorsStorageElement : AbideTagBlock
            {
                [FieldAttribute("sphere*", typeof(Vector3))]
                public Vector3 Sphere;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                    this.Sphere = Vector3.Zero;
                    this.EmptyString = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Sphere = reader.Read<Vector3>();
                    this.EmptyString = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(80, 16)]
        public sealed class PillsBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("material*", typeof(Int16))]
            public Int16 Material;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("relative mass scale", typeof(Single))]
            public Single RelativeMassScale;
            [FieldAttribute("friction", typeof(Single))]
            public Single Friction;
            [FieldAttribute("restitution", typeof(Single))]
            public Single Restitution;
            [FieldAttribute("volume *", typeof(Single))]
            public Single Volume;
            [FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("phantom*", typeof(Int16))]
            public Int16 Phantom;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("radius*", typeof(Single))]
            public Single Radius;
            [FieldAttribute("bottom*", typeof(Vector3))]
            public Vector3 Bottom;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("top*", typeof(Vector3))]
            public Vector3 Top;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Material = 0;
                this.Flags = ((FlagsOptions)(0));
                this.RelativeMassScale = 0;
                this.Friction = 0;
                this.Restitution = 0;
                this.Volume = 0;
                this.Mass = 0;
                this.EmptyString = new byte[2];
                this.Phantom = 0;
                this.EmptyString1 = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString2 = new byte[4];
                this.Radius = 0;
                this.Bottom = Vector3.Zero;
                this.EmptyString3 = new byte[4];
                this.Top = Vector3.Zero;
                this.EmptyString4 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Material = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.RelativeMassScale = reader.ReadSingle();
                this.Friction = reader.ReadSingle();
                this.Restitution = reader.ReadSingle();
                this.Volume = reader.ReadSingle();
                this.Mass = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(2);
                this.Phantom = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString2 = reader.ReadBytes(4);
                this.Radius = reader.ReadSingle();
                this.Bottom = reader.Read<Vector3>();
                this.EmptyString3 = reader.ReadBytes(4);
                this.Top = reader.Read<Vector3>();
                this.EmptyString4 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(144, 16)]
        public sealed class BoxesBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("material*", typeof(Int16))]
            public Int16 Material;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("relative mass scale", typeof(Single))]
            public Single RelativeMassScale;
            [FieldAttribute("friction", typeof(Single))]
            public Single Friction;
            [FieldAttribute("restitution", typeof(Single))]
            public Single Restitution;
            [FieldAttribute("volume *", typeof(Single))]
            public Single Volume;
            [FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("phantom*", typeof(Int16))]
            public Int16 Phantom;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("radius*", typeof(Single))]
            public Single Radius;
            [FieldAttribute("half extents*", typeof(Vector3))]
            public Vector3 HalfExtents;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size2;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [FieldAttribute("rotation i*", typeof(Vector3))]
            public Vector3 RotationI;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString7;
            [FieldAttribute("rotation j*", typeof(Vector3))]
            public Vector3 RotationJ;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString8;
            [FieldAttribute("rotation k*", typeof(Vector3))]
            public Vector3 RotationK;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString9;
            [FieldAttribute("translation*", typeof(Vector3))]
            public Vector3 Translation;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString10;
            public override int Size
            {
                get
                {
                    return 144;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Material = 0;
                this.Flags = ((FlagsOptions)(0));
                this.RelativeMassScale = 0;
                this.Friction = 0;
                this.Restitution = 0;
                this.Volume = 0;
                this.Mass = 0;
                this.EmptyString = new byte[2];
                this.Phantom = 0;
                this.EmptyString1 = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString2 = new byte[4];
                this.Radius = 0;
                this.HalfExtents = Vector3.Zero;
                this.EmptyString3 = new byte[4];
                this.EmptyString4 = new byte[4];
                this.Size2 = 0;
                this.Count1 = 0;
                this.EmptyString5 = new byte[4];
                this.EmptyString6 = new byte[4];
                this.RotationI = Vector3.Zero;
                this.EmptyString7 = new byte[4];
                this.RotationJ = Vector3.Zero;
                this.EmptyString8 = new byte[4];
                this.RotationK = Vector3.Zero;
                this.EmptyString9 = new byte[4];
                this.Translation = Vector3.Zero;
                this.EmptyString10 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Material = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.RelativeMassScale = reader.ReadSingle();
                this.Friction = reader.ReadSingle();
                this.Restitution = reader.ReadSingle();
                this.Volume = reader.ReadSingle();
                this.Mass = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(2);
                this.Phantom = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString2 = reader.ReadBytes(4);
                this.Radius = reader.ReadSingle();
                this.HalfExtents = reader.Read<Vector3>();
                this.EmptyString3 = reader.ReadBytes(4);
                this.EmptyString4 = reader.ReadBytes(4);
                this.Size2 = reader.ReadInt16();
                this.Count1 = reader.ReadInt16();
                this.EmptyString5 = reader.ReadBytes(4);
                this.EmptyString6 = reader.ReadBytes(4);
                this.RotationI = reader.Read<Vector3>();
                this.EmptyString7 = reader.ReadBytes(4);
                this.RotationJ = reader.Read<Vector3>();
                this.EmptyString8 = reader.ReadBytes(4);
                this.RotationK = reader.Read<Vector3>();
                this.EmptyString9 = reader.ReadBytes(4);
                this.Translation = reader.Read<Vector3>();
                this.EmptyString10 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(96, 16)]
        public sealed class TrianglesBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("material*", typeof(Int16))]
            public Int16 Material;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("relative mass scale", typeof(Single))]
            public Single RelativeMassScale;
            [FieldAttribute("friction", typeof(Single))]
            public Single Friction;
            [FieldAttribute("restitution", typeof(Single))]
            public Single Restitution;
            [FieldAttribute("volume *", typeof(Single))]
            public Single Volume;
            [FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("phantom*", typeof(Int16))]
            public Int16 Phantom;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("radius*", typeof(Single))]
            public Single Radius;
            [FieldAttribute("point a*", typeof(Vector3))]
            public Vector3 PointA;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("point b*", typeof(Vector3))]
            public Vector3 PointB;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("point c*", typeof(Vector3))]
            public Vector3 PointC;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            public override int Size
            {
                get
                {
                    return 96;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Material = 0;
                this.Flags = ((FlagsOptions)(0));
                this.RelativeMassScale = 0;
                this.Friction = 0;
                this.Restitution = 0;
                this.Volume = 0;
                this.Mass = 0;
                this.EmptyString = new byte[2];
                this.Phantom = 0;
                this.EmptyString1 = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString2 = new byte[4];
                this.Radius = 0;
                this.PointA = Vector3.Zero;
                this.EmptyString3 = new byte[4];
                this.PointB = Vector3.Zero;
                this.EmptyString4 = new byte[4];
                this.PointC = Vector3.Zero;
                this.EmptyString5 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Material = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.RelativeMassScale = reader.ReadSingle();
                this.Friction = reader.ReadSingle();
                this.Restitution = reader.ReadSingle();
                this.Volume = reader.ReadSingle();
                this.Mass = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(2);
                this.Phantom = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString2 = reader.ReadBytes(4);
                this.Radius = reader.ReadSingle();
                this.PointA = reader.Read<Vector3>();
                this.EmptyString3 = reader.ReadBytes(4);
                this.PointB = reader.Read<Vector3>();
                this.EmptyString4 = reader.ReadBytes(4);
                this.PointC = reader.Read<Vector3>();
                this.EmptyString5 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(256, 16)]
        public sealed class PolyhedraBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("material*", typeof(Int16))]
            public Int16 Material;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("relative mass scale", typeof(Single))]
            public Single RelativeMassScale;
            [FieldAttribute("friction", typeof(Single))]
            public Single Friction;
            [FieldAttribute("restitution", typeof(Single))]
            public Single Restitution;
            [FieldAttribute("volume *", typeof(Single))]
            public Single Volume;
            [FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("phantom*", typeof(Int16))]
            public Int16 Phantom;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("radius*", typeof(Single))]
            public Single Radius;
            [FieldAttribute("aabb half extents*", typeof(Vector3))]
            public Vector3 AabbHalfExtents;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("aabb center*", typeof(Vector3))]
            public Vector3 AabbCenter;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [FieldAttribute("four vectors size*", typeof(Int32))]
            public Int32 FourVectorsSize;
            [FieldAttribute("four vectors capacity*", typeof(Int32))]
            public Int32 FourVectorsCapacity;
            [FieldAttribute("num vertices*", typeof(Int32))]
            public Int32 NumVertices;
            [FieldAttribute("four vectors storage*", typeof(FourVectorsStorageElement[]))]
            [ArrayAttribute(3, typeof(FourVectorsStorageElement))]
            public FourVectorsStorageElement[] FourVectorsStorage;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [FieldAttribute("plane equations size*", typeof(Int32))]
            public Int32 PlaneEquationsSize;
            [FieldAttribute("plane equations capacity*", typeof(Int32))]
            public Int32 PlaneEquationsCapacity;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString7;
            public override int Size
            {
                get
                {
                    return 256;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Material = 0;
                this.Flags = ((FlagsOptions)(0));
                this.RelativeMassScale = 0;
                this.Friction = 0;
                this.Restitution = 0;
                this.Volume = 0;
                this.Mass = 0;
                this.EmptyString = new byte[2];
                this.Phantom = 0;
                this.EmptyString1 = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString2 = new byte[4];
                this.Radius = 0;
                this.AabbHalfExtents = Vector3.Zero;
                this.EmptyString3 = new byte[4];
                this.AabbCenter = Vector3.Zero;
                this.EmptyString4 = new byte[4];
                this.EmptyString5 = new byte[4];
                this.FourVectorsSize = 0;
                this.FourVectorsCapacity = 0;
                this.NumVertices = 0;
                this.FourVectorsStorage = new FourVectorsStorageElement[3];
                this.EmptyString6 = new byte[4];
                this.PlaneEquationsSize = 0;
                this.PlaneEquationsCapacity = 0;
                this.EmptyString7 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Material = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.RelativeMassScale = reader.ReadSingle();
                this.Friction = reader.ReadSingle();
                this.Restitution = reader.ReadSingle();
                this.Volume = reader.ReadSingle();
                this.Mass = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(2);
                this.Phantom = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString2 = reader.ReadBytes(4);
                this.Radius = reader.ReadSingle();
                this.AabbHalfExtents = reader.Read<Vector3>();
                this.EmptyString3 = reader.ReadBytes(4);
                this.AabbCenter = reader.Read<Vector3>();
                this.EmptyString4 = reader.ReadBytes(4);
                this.EmptyString5 = reader.ReadBytes(4);
                this.FourVectorsSize = reader.ReadInt32();
                this.FourVectorsCapacity = reader.ReadInt32();
                this.NumVertices = reader.ReadInt32();
                this.EmptyString6 = reader.ReadBytes(4);
                this.PlaneEquationsSize = reader.ReadInt32();
                this.PlaneEquationsCapacity = reader.ReadInt32();
                this.EmptyString7 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public sealed class FourVectorsStorageElement : AbideTagBlock
            {
                [FieldAttribute("four vectors x*", typeof(Vector3))]
                public Vector3 FourVectorsX;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("four vectors y*", typeof(Vector3))]
                public Vector3 FourVectorsY;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [FieldAttribute("four vectors z*", typeof(Vector3))]
                public Vector3 FourVectorsZ;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                    this.FourVectorsX = Vector3.Zero;
                    this.EmptyString = new byte[4];
                    this.FourVectorsY = Vector3.Zero;
                    this.EmptyString1 = new byte[4];
                    this.FourVectorsZ = Vector3.Zero;
                    this.EmptyString2 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.FourVectorsX = reader.Read<Vector3>();
                    this.EmptyString = reader.ReadBytes(4);
                    this.FourVectorsY = reader.Read<Vector3>();
                    this.EmptyString1 = reader.ReadBytes(4);
                    this.FourVectorsZ = reader.Read<Vector3>();
                    this.EmptyString2 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(48, 16)]
        public sealed class PolyhedronFourVectorsBlock : AbideTagBlock
        {
            [FieldAttribute("four vectors x*", typeof(Vector3))]
            public Vector3 FourVectorsX;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("four vectors y*", typeof(Vector3))]
            public Vector3 FourVectorsY;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("four vectors z*", typeof(Vector3))]
            public Vector3 FourVectorsZ;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.FourVectorsX = Vector3.Zero;
                this.EmptyString = new byte[4];
                this.FourVectorsY = Vector3.Zero;
                this.EmptyString1 = new byte[4];
                this.FourVectorsZ = Vector3.Zero;
                this.EmptyString2 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.FourVectorsX = reader.Read<Vector3>();
                this.EmptyString = reader.ReadBytes(4);
                this.FourVectorsY = reader.Read<Vector3>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.FourVectorsZ = reader.Read<Vector3>();
                this.EmptyString2 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 16)]
        public sealed class PolyhedronPlaneEquationsBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[16];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(16);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(64, 16)]
        public sealed class MassDistributionsBlock : AbideTagBlock
        {
            [FieldAttribute("center of mass*", typeof(Vector3))]
            public Vector3 CenterOfMass;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("inertia tensor i*", typeof(Vector3))]
            public Vector3 InertiaTensorI;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("inertia tensor j*", typeof(Vector3))]
            public Vector3 InertiaTensorJ;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("inertia tensor k*", typeof(Vector3))]
            public Vector3 InertiaTensorK;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.CenterOfMass = Vector3.Zero;
                this.EmptyString = new byte[4];
                this.InertiaTensorI = Vector3.Zero;
                this.EmptyString1 = new byte[4];
                this.InertiaTensorJ = Vector3.Zero;
                this.EmptyString2 = new byte[4];
                this.InertiaTensorK = Vector3.Zero;
                this.EmptyString3 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.CenterOfMass = reader.Read<Vector3>();
                this.EmptyString = reader.ReadBytes(4);
                this.InertiaTensorI = reader.Read<Vector3>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.InertiaTensorJ = reader.Read<Vector3>();
                this.EmptyString2 = reader.ReadBytes(4);
                this.InertiaTensorK = reader.Read<Vector3>();
                this.EmptyString3 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(56, 4)]
        public sealed class ListsBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("child shapes size*", typeof(Int32))]
            public Int32 ChildShapesSize;
            [FieldAttribute("child shapes capacity*", typeof(Int32))]
            public Int32 ChildShapesCapacity;
            [FieldAttribute("child shapes storage*", typeof(ChildShapesStorageElement[]))]
            [ArrayAttribute(4, typeof(ChildShapesStorageElement))]
            public ChildShapesStorageElement[] ChildShapesStorage;
            public override int Size
            {
                get
                {
                    return 56;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString1 = new byte[4];
                this.EmptyString2 = new byte[4];
                this.ChildShapesSize = 0;
                this.ChildShapesCapacity = 0;
                this.ChildShapesStorage = new ChildShapesStorageElement[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.EmptyString2 = reader.ReadBytes(4);
                this.ChildShapesSize = reader.ReadInt32();
                this.ChildShapesCapacity = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public sealed class ChildShapesStorageElement : AbideTagBlock
            {
                [FieldAttribute("shape type*", typeof(ShapeTypeOptions))]
                [OptionsAttribute(typeof(ShapeTypeOptions), false)]
                public ShapeTypeOptions ShapeType;
                [FieldAttribute("shape*", typeof(Int16))]
                public Int16 Shape;
                [FieldAttribute("collision filter*", typeof(Int32))]
                public Int32 CollisionFilter;
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                    this.ShapeType = ((ShapeTypeOptions)(0));
                    this.Shape = 0;
                    this.CollisionFilter = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ShapeType = ((ShapeTypeOptions)(reader.ReadInt16()));
                    this.Shape = reader.ReadInt16();
                    this.CollisionFilter = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ShapeTypeOptions : Int16
                {
                    Sphere = 0,
                    Pill = 1,
                    Box = 2,
                    Triangle = 3,
                    Polyhedron = 4,
                    MultiSphere = 5,
                    Unused0 = 6,
                    Unused1 = 7,
                    Unused2 = 8,
                    Unused3 = 9,
                    Unused4 = 10,
                    Unused5 = 11,
                    Unused6 = 12,
                    Unused7 = 13,
                    List = 14,
                    Mopp = 15,
                }
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class ListShapesBlock : AbideTagBlock
        {
            [FieldAttribute("shape type*", typeof(ShapeTypeOptions))]
            [OptionsAttribute(typeof(ShapeTypeOptions), false)]
            public ShapeTypeOptions ShapeType;
            [FieldAttribute("shape*", typeof(Int16))]
            public Int16 Shape;
            [FieldAttribute("collision filter*", typeof(Int32))]
            public Int32 CollisionFilter;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.ShapeType = ((ShapeTypeOptions)(0));
                this.Shape = 0;
                this.CollisionFilter = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.ShapeType = ((ShapeTypeOptions)(reader.ReadInt16()));
                this.Shape = reader.ReadInt16();
                this.CollisionFilter = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum ShapeTypeOptions : Int16
            {
                Sphere = 0,
                Pill = 1,
                Box = 2,
                Triangle = 3,
                Polyhedron = 4,
                MultiSphere = 5,
                Unused0 = 6,
                Unused1 = 7,
                Unused2 = 8,
                Unused3 = 9,
                Unused4 = 10,
                Unused5 = 11,
                Unused6 = 12,
                Unused7 = 13,
                List = 14,
                Mopp = 15,
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class MoppsBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("list*", typeof(Int16))]
            public Int16 List;
            [FieldAttribute("code offset", typeof(Int32))]
            public Int32 CodeOffset;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString1 = new byte[4];
                this.EmptyString2 = new byte[2];
                this.List = 0;
                this.CodeOffset = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.EmptyString2 = reader.ReadBytes(2);
                this.List = reader.ReadInt16();
                this.CodeOffset = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(120, 4)]
        public sealed class HingeConstraintsBlock : AbideTagBlock
        {
            [FieldAttribute("constraint bodies*", typeof(ConstraintBodiesStructBlock))]
            public ConstraintBodiesStructBlock ConstraintBodies;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 120;
                }
            }
            public override void Initialize()
            {
                this.ConstraintBodies = new ConstraintBodiesStructBlock();
                this.EmptyString = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.ConstraintBodies = reader.ReadDataStructure<ConstraintBodiesStructBlock>();
                this.EmptyString = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(116, 4)]
            public sealed class ConstraintBodiesStructBlock : AbideTagBlock
            {
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("node a*", typeof(Int16))]
                public Int16 NodeA;
                [FieldAttribute("node b*", typeof(Int16))]
                public Int16 NodeB;
                [FieldAttribute("a scale*", typeof(Single))]
                public Single AScale;
                [FieldAttribute("a forward*", typeof(Vector3))]
                public Vector3 AForward;
                [FieldAttribute("a left*", typeof(Vector3))]
                public Vector3 ALeft;
                [FieldAttribute("a up*", typeof(Vector3))]
                public Vector3 AUp;
                [FieldAttribute("a position*", typeof(Vector3))]
                public Vector3 APosition;
                [FieldAttribute("b scale*", typeof(Single))]
                public Single BScale;
                [FieldAttribute("b forward*", typeof(Vector3))]
                public Vector3 BForward;
                [FieldAttribute("b left*", typeof(Vector3))]
                public Vector3 BLeft;
                [FieldAttribute("b up*", typeof(Vector3))]
                public Vector3 BUp;
                [FieldAttribute("b position*", typeof(Vector3))]
                public Vector3 BPosition;
                [FieldAttribute("edge index*", typeof(Int16))]
                public Int16 EdgeIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 116;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.NodeA = 0;
                    this.NodeB = 0;
                    this.AScale = 0;
                    this.AForward = Vector3.Zero;
                    this.ALeft = Vector3.Zero;
                    this.AUp = Vector3.Zero;
                    this.APosition = Vector3.Zero;
                    this.BScale = 0;
                    this.BForward = Vector3.Zero;
                    this.BLeft = Vector3.Zero;
                    this.BUp = Vector3.Zero;
                    this.BPosition = Vector3.Zero;
                    this.EdgeIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NodeA = reader.ReadInt16();
                    this.NodeB = reader.ReadInt16();
                    this.AScale = reader.ReadSingle();
                    this.AForward = reader.Read<Vector3>();
                    this.ALeft = reader.Read<Vector3>();
                    this.AUp = reader.Read<Vector3>();
                    this.APosition = reader.Read<Vector3>();
                    this.BScale = reader.ReadSingle();
                    this.BForward = reader.Read<Vector3>();
                    this.BLeft = reader.Read<Vector3>();
                    this.BUp = reader.Read<Vector3>();
                    this.BPosition = reader.Read<Vector3>();
                    this.EdgeIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(148, 4)]
        public sealed class RagdollConstraintsBlock : AbideTagBlock
        {
            [FieldAttribute("constraint bodies*", typeof(ConstraintBodiesStructBlock))]
            public ConstraintBodiesStructBlock ConstraintBodies;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("min twist*", typeof(Single))]
            public Single MinTwist;
            [FieldAttribute("max twist*", typeof(Single))]
            public Single MaxTwist;
            [FieldAttribute("min cone*", typeof(Single))]
            public Single MinCone;
            [FieldAttribute("max cone*", typeof(Single))]
            public Single MaxCone;
            [FieldAttribute("min plane*", typeof(Single))]
            public Single MinPlane;
            [FieldAttribute("max plane*", typeof(Single))]
            public Single MaxPlane;
            [FieldAttribute("max friciton torque*", typeof(Single))]
            public Single MaxFricitonTorque;
            public override int Size
            {
                get
                {
                    return 148;
                }
            }
            public override void Initialize()
            {
                this.ConstraintBodies = new ConstraintBodiesStructBlock();
                this.EmptyString = new byte[4];
                this.MinTwist = 0;
                this.MaxTwist = 0;
                this.MinCone = 0;
                this.MaxCone = 0;
                this.MinPlane = 0;
                this.MaxPlane = 0;
                this.MaxFricitonTorque = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.ConstraintBodies = reader.ReadDataStructure<ConstraintBodiesStructBlock>();
                this.EmptyString = reader.ReadBytes(4);
                this.MinTwist = reader.ReadSingle();
                this.MaxTwist = reader.ReadSingle();
                this.MinCone = reader.ReadSingle();
                this.MaxCone = reader.ReadSingle();
                this.MinPlane = reader.ReadSingle();
                this.MaxPlane = reader.ReadSingle();
                this.MaxFricitonTorque = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(116, 4)]
            public sealed class ConstraintBodiesStructBlock : AbideTagBlock
            {
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("node a*", typeof(Int16))]
                public Int16 NodeA;
                [FieldAttribute("node b*", typeof(Int16))]
                public Int16 NodeB;
                [FieldAttribute("a scale*", typeof(Single))]
                public Single AScale;
                [FieldAttribute("a forward*", typeof(Vector3))]
                public Vector3 AForward;
                [FieldAttribute("a left*", typeof(Vector3))]
                public Vector3 ALeft;
                [FieldAttribute("a up*", typeof(Vector3))]
                public Vector3 AUp;
                [FieldAttribute("a position*", typeof(Vector3))]
                public Vector3 APosition;
                [FieldAttribute("b scale*", typeof(Single))]
                public Single BScale;
                [FieldAttribute("b forward*", typeof(Vector3))]
                public Vector3 BForward;
                [FieldAttribute("b left*", typeof(Vector3))]
                public Vector3 BLeft;
                [FieldAttribute("b up*", typeof(Vector3))]
                public Vector3 BUp;
                [FieldAttribute("b position*", typeof(Vector3))]
                public Vector3 BPosition;
                [FieldAttribute("edge index*", typeof(Int16))]
                public Int16 EdgeIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 116;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.NodeA = 0;
                    this.NodeB = 0;
                    this.AScale = 0;
                    this.AForward = Vector3.Zero;
                    this.ALeft = Vector3.Zero;
                    this.AUp = Vector3.Zero;
                    this.APosition = Vector3.Zero;
                    this.BScale = 0;
                    this.BForward = Vector3.Zero;
                    this.BLeft = Vector3.Zero;
                    this.BUp = Vector3.Zero;
                    this.BPosition = Vector3.Zero;
                    this.EdgeIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NodeA = reader.ReadInt16();
                    this.NodeB = reader.ReadInt16();
                    this.AScale = reader.ReadSingle();
                    this.AForward = reader.Read<Vector3>();
                    this.ALeft = reader.Read<Vector3>();
                    this.AUp = reader.Read<Vector3>();
                    this.APosition = reader.Read<Vector3>();
                    this.BScale = reader.ReadSingle();
                    this.BForward = reader.Read<Vector3>();
                    this.BLeft = reader.Read<Vector3>();
                    this.BUp = reader.Read<Vector3>();
                    this.BPosition = reader.Read<Vector3>();
                    this.EdgeIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class RegionsBlock : AbideTagBlock
        {
            private TagBlockList<PermutationsBlock> permutationsList = new TagBlockList<PermutationsBlock>(32);
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("permutations", typeof(TagBlock))]
            [BlockAttribute("permutations_block", 32, typeof(PermutationsBlock))]
            public TagBlock Permutations;
            public TagBlockList<PermutationsBlock> PermutationsList
            {
                get
                {
                    return this.permutationsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.permutationsList.Clear();
                this.Name = StringId.Zero;
                this.Permutations = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Permutations = reader.ReadInt64();
                this.permutationsList.Read(reader, this.Permutations);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class PermutationsBlock : AbideTagBlock
            {
                private TagBlockList<RigidBodyIndicesBlock> rigidBodiesList = new TagBlockList<RigidBodyIndicesBlock>(64);
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("rigid bodies", typeof(TagBlock))]
                [BlockAttribute("rigid_body_indices_block", 64, typeof(RigidBodyIndicesBlock))]
                public TagBlock RigidBodies;
                public TagBlockList<RigidBodyIndicesBlock> RigidBodiesList
                {
                    get
                    {
                        return this.rigidBodiesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.rigidBodiesList.Clear();
                    this.Name = StringId.Zero;
                    this.RigidBodies = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.RigidBodies = reader.ReadInt64();
                    this.rigidBodiesList.Read(reader, this.RigidBodies);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(2, 4)]
                public sealed class RigidBodyIndicesBlock : AbideTagBlock
                {
                    [FieldAttribute("rigid body^*", typeof(Int16))]
                    public Int16 RigidBody;
                    public override int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public override void Initialize()
                    {
                        this.RigidBody = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.RigidBody = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        [FieldSetAttribute(12, 4)]
        public sealed class NodesBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("parent*", typeof(Int16))]
            public Int16 Parent;
            [FieldAttribute("sibling*", typeof(Int16))]
            public Int16 Sibling;
            [FieldAttribute("child*", typeof(Int16))]
            public Int16 Child;
            public override int Size
            {
                get
                {
                    return 12;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Flags = ((FlagsOptions)(0));
                this.Parent = 0;
                this.Sibling = 0;
                this.Child = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Parent = reader.ReadInt16();
                this.Sibling = reader.ReadInt16();
                this.Child = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                DoesNotAnimate = 1,
            }
        }
        [FieldSetAttribute(596, 4)]
        public sealed class GlobalTagImportInfoBlock : AbideTagBlock
        {
            private TagBlockList<TagImportFileBlock> filesList = new TagBlockList<TagImportFileBlock>(1024);
            [FieldAttribute("build*", typeof(Int32))]
            public Int32 Build;
            [FieldAttribute("version*", typeof(String256))]
            public String256 Version;
            [FieldAttribute("import date*", typeof(String32))]
            public String32 ImportDate;
            [FieldAttribute("culprit*", typeof(String32))]
            public String32 Culprit;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(96)]
            public Byte[] EmptyString;
            [FieldAttribute("import time*", typeof(String32))]
            public String32 ImportTime;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("files*", typeof(TagBlock))]
            [BlockAttribute("import file", 1024, typeof(TagImportFileBlock))]
            public TagBlock Files;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(128)]
            public Byte[] EmptyString2;
            public TagBlockList<TagImportFileBlock> FilesList
            {
                get
                {
                    return this.filesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 596;
                }
            }
            public override void Initialize()
            {
                this.filesList.Clear();
                this.Build = 0;
                this.Version = String256.Empty;
                this.ImportDate = String32.Empty;
                this.Culprit = String32.Empty;
                this.EmptyString = new byte[96];
                this.ImportTime = String32.Empty;
                this.EmptyString1 = new byte[4];
                this.Files = TagBlock.Zero;
                this.EmptyString2 = new byte[128];
            }
            public override void Read(BinaryReader reader)
            {
                this.Build = reader.ReadInt32();
                this.Version = reader.Read<String256>();
                this.ImportDate = reader.Read<String32>();
                this.Culprit = reader.Read<String32>();
                this.EmptyString = reader.ReadBytes(96);
                this.ImportTime = reader.Read<String32>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Files = reader.ReadInt64();
                this.filesList.Read(reader, this.Files);
                this.EmptyString2 = reader.ReadBytes(128);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(540, 4)]
            public sealed class TagImportFileBlock : AbideTagBlock
            {
                private DataList zippedDataList = new DataList(134217728);
                [FieldAttribute("path*", typeof(String256))]
                public String256 Path;
                [FieldAttribute("modification date*", typeof(String32))]
                public String32 ModificationDate;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(88)]
                public Byte[] EmptyString1;
                [FieldAttribute("checksum*:crc32", typeof(Int32))]
                public Int32 Checksum;
                [FieldAttribute("size*:bytes", typeof(Int32))]
                public Int32 Size1;
                [FieldAttribute("zipped data*", typeof(TagBlock))]
                [DataAttribute(134217728)]
                public TagBlock ZippedData;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(128)]
                public Byte[] EmptyString2;
                public DataList ZippedDataList
                {
                    get
                    {
                        return this.zippedDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 540;
                    }
                }
                public override void Initialize()
                {
                    this.zippedDataList.Clear();
                    this.Path = String256.Empty;
                    this.ModificationDate = String32.Empty;
                    this.EmptyString = new byte[8];
                    this.EmptyString1 = new byte[88];
                    this.Checksum = 0;
                    this.Size1 = 0;
                    this.ZippedData = TagBlock.Zero;
                    this.EmptyString2 = new byte[128];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Path = reader.Read<String256>();
                    this.ModificationDate = reader.Read<String32>();
                    this.EmptyString = reader.ReadBytes(8);
                    this.EmptyString1 = reader.ReadBytes(88);
                    this.Checksum = reader.ReadInt32();
                    this.Size1 = reader.ReadInt32();
                    this.ZippedData = reader.ReadInt64();
                    this.EmptyString2 = reader.ReadBytes(128);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(680, 4)]
        public sealed class GlobalErrorReportCategoriesBlock : AbideTagBlock
        {
            private TagBlockList<ErrorReportsBlock> reportsList = new TagBlockList<ErrorReportsBlock>(1024);
            [FieldAttribute("Name^*", typeof(String256))]
            public String256 Name;
            [FieldAttribute("Report Type*", typeof(ReportTypeOptions))]
            [OptionsAttribute(typeof(ReportTypeOptions), false)]
            public ReportTypeOptions ReportType;
            [FieldAttribute("Flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(404)]
            public Byte[] EmptyString2;
            [FieldAttribute("Reports*", typeof(TagBlock))]
            [BlockAttribute("error report", 1024, typeof(ErrorReportsBlock))]
            public TagBlock Reports;
            public TagBlockList<ErrorReportsBlock> ReportsList
            {
                get
                {
                    return this.reportsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 680;
                }
            }
            public override void Initialize()
            {
                this.reportsList.Clear();
                this.Name = String256.Empty;
                this.ReportType = ((ReportTypeOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[404];
                this.Reports = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String256>();
                this.ReportType = ((ReportTypeOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(404);
                this.Reports = reader.ReadInt64();
                this.reportsList.Read(reader, this.Reports);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(644, 4)]
            public sealed class ErrorReportsBlock : AbideTagBlock
            {
                private DataList textList = new DataList(8192);
                private TagBlockList<ErrorReportVerticesBlock> verticesList = new TagBlockList<ErrorReportVerticesBlock>(1024);
                private TagBlockList<ErrorReportVectorsBlock> vectorsList = new TagBlockList<ErrorReportVectorsBlock>(1024);
                private TagBlockList<ErrorReportLinesBlock> linesList = new TagBlockList<ErrorReportLinesBlock>(1024);
                private TagBlockList<ErrorReportTrianglesBlock> trianglesList = new TagBlockList<ErrorReportTrianglesBlock>(1024);
                private TagBlockList<ErrorReportQuadsBlock> quadsList = new TagBlockList<ErrorReportQuadsBlock>(1024);
                private TagBlockList<ErrorReportCommentsBlock> commentsList = new TagBlockList<ErrorReportCommentsBlock>(1024);
                [FieldAttribute("Type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Flags*", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Text*", typeof(TagBlock))]
                [DataAttribute(8192)]
                public TagBlock Text;
                [FieldAttribute("Source Filename*", typeof(String32))]
                public String32 SourceFilename;
                [FieldAttribute("Source Line Number*", typeof(Int32))]
                public Int32 SourceLineNumber;
                [FieldAttribute("Vertices*", typeof(TagBlock))]
                [BlockAttribute("error report vertex", 1024, typeof(ErrorReportVerticesBlock))]
                public TagBlock Vertices;
                [FieldAttribute("Vectors*", typeof(TagBlock))]
                [BlockAttribute("error report vector", 1024, typeof(ErrorReportVectorsBlock))]
                public TagBlock Vectors;
                [FieldAttribute("Lines*", typeof(TagBlock))]
                [BlockAttribute("error report line", 1024, typeof(ErrorReportLinesBlock))]
                public TagBlock Lines;
                [FieldAttribute("Triangles*", typeof(TagBlock))]
                [BlockAttribute("error report triangle", 1024, typeof(ErrorReportTrianglesBlock))]
                public TagBlock Triangles;
                [FieldAttribute("Quads*", typeof(TagBlock))]
                [BlockAttribute("error report quad", 1024, typeof(ErrorReportQuadsBlock))]
                public TagBlock Quads;
                [FieldAttribute("Comments*", typeof(TagBlock))]
                [BlockAttribute("error report comment", 1024, typeof(ErrorReportCommentsBlock))]
                public TagBlock Comments;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(380)]
                public Byte[] EmptyString;
                [FieldAttribute("Report Key*", typeof(Int32))]
                public Int32 ReportKey;
                [FieldAttribute("Node Index*", typeof(Int32))]
                public Int32 NodeIndex;
                [FieldAttribute("Color*", typeof(ColorArgbF))]
                public ColorArgbF Color;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(84)]
                public Byte[] EmptyString1;
                public DataList TextList
                {
                    get
                    {
                        return this.textList;
                    }
                }
                public TagBlockList<ErrorReportVerticesBlock> VerticesList
                {
                    get
                    {
                        return this.verticesList;
                    }
                }
                public TagBlockList<ErrorReportVectorsBlock> VectorsList
                {
                    get
                    {
                        return this.vectorsList;
                    }
                }
                public TagBlockList<ErrorReportLinesBlock> LinesList
                {
                    get
                    {
                        return this.linesList;
                    }
                }
                public TagBlockList<ErrorReportTrianglesBlock> TrianglesList
                {
                    get
                    {
                        return this.trianglesList;
                    }
                }
                public TagBlockList<ErrorReportQuadsBlock> QuadsList
                {
                    get
                    {
                        return this.quadsList;
                    }
                }
                public TagBlockList<ErrorReportCommentsBlock> CommentsList
                {
                    get
                    {
                        return this.commentsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 644;
                    }
                }
                public override void Initialize()
                {
                    this.textList.Clear();
                    this.verticesList.Clear();
                    this.vectorsList.Clear();
                    this.linesList.Clear();
                    this.trianglesList.Clear();
                    this.quadsList.Clear();
                    this.commentsList.Clear();
                    this.Type = ((TypeOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.Text = TagBlock.Zero;
                    this.SourceFilename = String32.Empty;
                    this.SourceLineNumber = 0;
                    this.Vertices = TagBlock.Zero;
                    this.Vectors = TagBlock.Zero;
                    this.Lines = TagBlock.Zero;
                    this.Triangles = TagBlock.Zero;
                    this.Quads = TagBlock.Zero;
                    this.Comments = TagBlock.Zero;
                    this.EmptyString = new byte[380];
                    this.ReportKey = 0;
                    this.NodeIndex = 0;
                    this.Color = ColorArgbF.Zero;
                    this.EmptyString1 = new byte[84];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.Text = reader.ReadInt64();
                    this.SourceFilename = reader.Read<String32>();
                    this.SourceLineNumber = reader.ReadInt32();
                    this.Vertices = reader.ReadInt64();
                    this.verticesList.Read(reader, this.Vertices);
                    this.Vectors = reader.ReadInt64();
                    this.vectorsList.Read(reader, this.Vectors);
                    this.Lines = reader.ReadInt64();
                    this.linesList.Read(reader, this.Lines);
                    this.Triangles = reader.ReadInt64();
                    this.trianglesList.Read(reader, this.Triangles);
                    this.Quads = reader.ReadInt64();
                    this.quadsList.Read(reader, this.Quads);
                    this.Comments = reader.ReadInt64();
                    this.commentsList.Read(reader, this.Comments);
                    this.EmptyString = reader.ReadBytes(380);
                    this.ReportKey = reader.ReadInt32();
                    this.NodeIndex = reader.ReadInt32();
                    this.Color = reader.Read<ColorArgbF>();
                    this.EmptyString1 = reader.ReadBytes(84);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(52, 4)]
                public sealed class ErrorReportVerticesBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Screen Size*", typeof(Single))]
                    public Single ScreenSize;
                    public override int Size
                    {
                        get
                        {
                            return 52;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.ScreenSize = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.ScreenSize = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(64, 4)]
                public sealed class ErrorReportVectorsBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Normal*", typeof(Vector3))]
                    public Vector3 Normal;
                    [FieldAttribute("Screen Length*", typeof(Single))]
                    public Single ScreenLength;
                    public override int Size
                    {
                        get
                        {
                            return 64;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.Normal = Vector3.Zero;
                        this.ScreenLength = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.Normal = reader.Read<Vector3>();
                        this.ScreenLength = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(80, 4)]
                public sealed class ErrorReportLinesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(2, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 80;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[2];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(112, 4)]
                public sealed class ErrorReportTrianglesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(3, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 112;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[3];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(144, 4)]
                public sealed class ErrorReportQuadsBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(4, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 144;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(68, 4)]
                public sealed class ErrorReportCommentsBlock : AbideTagBlock
                {
                    private DataList textList = new DataList(8192);
                    [FieldAttribute("Text*", typeof(TagBlock))]
                    [DataAttribute(8192)]
                    public TagBlock Text;
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public DataList TextList
                    {
                        get
                        {
                            return this.textList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 68;
                        }
                    }
                    public override void Initialize()
                    {
                        this.textList.Clear();
                        this.Text = TagBlock.Zero;
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Text = reader.ReadInt64();
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                public enum TypeOptions : Int16
                {
                    Silent = 0,
                    Comment = 1,
                    Warning = 2,
                    Error = 3,
                }
                public enum FlagsOptions : Int16
                {
                    Rendered = 1,
                    TangentSpace = 2,
                    Noncritical = 4,
                    LightmapLight = 8,
                    ReportKeyIsValid = 16,
                }
            }
            public enum ReportTypeOptions : Int16
            {
                Silent = 0,
                Comment = 1,
                Warning = 2,
                Error = 3,
            }
            public enum FlagsOptions : Int16
            {
                Rendered = 1,
                TangentSpace = 2,
                Noncritical = 4,
                LightmapLight = 8,
                ReportKeyIsValid = 16,
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class PointToPathCurveBlock : AbideTagBlock
        {
            private TagBlockList<PointToPathCurvePointBlock> pointsList = new TagBlockList<PointToPathCurvePointBlock>(1024);
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("node index*", typeof(Int16))]
            public Int16 NodeIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("points*", typeof(TagBlock))]
            [BlockAttribute("point_to_path_curve_point_block", 1024, typeof(PointToPathCurvePointBlock))]
            public TagBlock Points;
            public TagBlockList<PointToPathCurvePointBlock> PointsList
            {
                get
                {
                    return this.pointsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.pointsList.Clear();
                this.Name = StringId.Zero;
                this.NodeIndex = 0;
                this.EmptyString = new byte[2];
                this.Points = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.NodeIndex = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.Points = reader.ReadInt64();
                this.pointsList.Read(reader, this.Points);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class PointToPathCurvePointBlock : AbideTagBlock
            {
                [FieldAttribute("position*", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("t value*", typeof(Single))]
                public Single TValue;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Position = Vector3.Zero;
                    this.TValue = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Position = reader.Read<Vector3>();
                    this.TValue = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(132, 4)]
        public sealed class LimitedHingeConstraintsBlock : AbideTagBlock
        {
            [FieldAttribute("constraint bodies*", typeof(ConstraintBodiesStructBlock))]
            public ConstraintBodiesStructBlock ConstraintBodies;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("limit friction*", typeof(Single))]
            public Single LimitFriction;
            [FieldAttribute("limit min angle*", typeof(Single))]
            public Single LimitMinAngle;
            [FieldAttribute("limit max angle*", typeof(Single))]
            public Single LimitMaxAngle;
            public override int Size
            {
                get
                {
                    return 132;
                }
            }
            public override void Initialize()
            {
                this.ConstraintBodies = new ConstraintBodiesStructBlock();
                this.EmptyString = new byte[4];
                this.LimitFriction = 0;
                this.LimitMinAngle = 0;
                this.LimitMaxAngle = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.ConstraintBodies = reader.ReadDataStructure<ConstraintBodiesStructBlock>();
                this.EmptyString = reader.ReadBytes(4);
                this.LimitFriction = reader.ReadSingle();
                this.LimitMinAngle = reader.ReadSingle();
                this.LimitMaxAngle = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(116, 4)]
            public sealed class ConstraintBodiesStructBlock : AbideTagBlock
            {
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("node a*", typeof(Int16))]
                public Int16 NodeA;
                [FieldAttribute("node b*", typeof(Int16))]
                public Int16 NodeB;
                [FieldAttribute("a scale*", typeof(Single))]
                public Single AScale;
                [FieldAttribute("a forward*", typeof(Vector3))]
                public Vector3 AForward;
                [FieldAttribute("a left*", typeof(Vector3))]
                public Vector3 ALeft;
                [FieldAttribute("a up*", typeof(Vector3))]
                public Vector3 AUp;
                [FieldAttribute("a position*", typeof(Vector3))]
                public Vector3 APosition;
                [FieldAttribute("b scale*", typeof(Single))]
                public Single BScale;
                [FieldAttribute("b forward*", typeof(Vector3))]
                public Vector3 BForward;
                [FieldAttribute("b left*", typeof(Vector3))]
                public Vector3 BLeft;
                [FieldAttribute("b up*", typeof(Vector3))]
                public Vector3 BUp;
                [FieldAttribute("b position*", typeof(Vector3))]
                public Vector3 BPosition;
                [FieldAttribute("edge index*", typeof(Int16))]
                public Int16 EdgeIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 116;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.NodeA = 0;
                    this.NodeB = 0;
                    this.AScale = 0;
                    this.AForward = Vector3.Zero;
                    this.ALeft = Vector3.Zero;
                    this.AUp = Vector3.Zero;
                    this.APosition = Vector3.Zero;
                    this.BScale = 0;
                    this.BForward = Vector3.Zero;
                    this.BLeft = Vector3.Zero;
                    this.BUp = Vector3.Zero;
                    this.BPosition = Vector3.Zero;
                    this.EdgeIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NodeA = reader.ReadInt16();
                    this.NodeB = reader.ReadInt16();
                    this.AScale = reader.ReadSingle();
                    this.AForward = reader.Read<Vector3>();
                    this.ALeft = reader.Read<Vector3>();
                    this.AUp = reader.Read<Vector3>();
                    this.APosition = reader.Read<Vector3>();
                    this.BScale = reader.ReadSingle();
                    this.BForward = reader.Read<Vector3>();
                    this.BLeft = reader.Read<Vector3>();
                    this.BUp = reader.Read<Vector3>();
                    this.BPosition = reader.Read<Vector3>();
                    this.EdgeIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(120, 4)]
        public sealed class BallAndSocketConstraintsBlock : AbideTagBlock
        {
            [FieldAttribute("constraint bodies*", typeof(ConstraintBodiesStructBlock))]
            public ConstraintBodiesStructBlock ConstraintBodies;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 120;
                }
            }
            public override void Initialize()
            {
                this.ConstraintBodies = new ConstraintBodiesStructBlock();
                this.EmptyString = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.ConstraintBodies = reader.ReadDataStructure<ConstraintBodiesStructBlock>();
                this.EmptyString = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(116, 4)]
            public sealed class ConstraintBodiesStructBlock : AbideTagBlock
            {
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("node a*", typeof(Int16))]
                public Int16 NodeA;
                [FieldAttribute("node b*", typeof(Int16))]
                public Int16 NodeB;
                [FieldAttribute("a scale*", typeof(Single))]
                public Single AScale;
                [FieldAttribute("a forward*", typeof(Vector3))]
                public Vector3 AForward;
                [FieldAttribute("a left*", typeof(Vector3))]
                public Vector3 ALeft;
                [FieldAttribute("a up*", typeof(Vector3))]
                public Vector3 AUp;
                [FieldAttribute("a position*", typeof(Vector3))]
                public Vector3 APosition;
                [FieldAttribute("b scale*", typeof(Single))]
                public Single BScale;
                [FieldAttribute("b forward*", typeof(Vector3))]
                public Vector3 BForward;
                [FieldAttribute("b left*", typeof(Vector3))]
                public Vector3 BLeft;
                [FieldAttribute("b up*", typeof(Vector3))]
                public Vector3 BUp;
                [FieldAttribute("b position*", typeof(Vector3))]
                public Vector3 BPosition;
                [FieldAttribute("edge index*", typeof(Int16))]
                public Int16 EdgeIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 116;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.NodeA = 0;
                    this.NodeB = 0;
                    this.AScale = 0;
                    this.AForward = Vector3.Zero;
                    this.ALeft = Vector3.Zero;
                    this.AUp = Vector3.Zero;
                    this.APosition = Vector3.Zero;
                    this.BScale = 0;
                    this.BForward = Vector3.Zero;
                    this.BLeft = Vector3.Zero;
                    this.BUp = Vector3.Zero;
                    this.BPosition = Vector3.Zero;
                    this.EdgeIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NodeA = reader.ReadInt16();
                    this.NodeB = reader.ReadInt16();
                    this.AScale = reader.ReadSingle();
                    this.AForward = reader.Read<Vector3>();
                    this.ALeft = reader.Read<Vector3>();
                    this.AUp = reader.Read<Vector3>();
                    this.APosition = reader.Read<Vector3>();
                    this.BScale = reader.ReadSingle();
                    this.BForward = reader.Read<Vector3>();
                    this.BLeft = reader.Read<Vector3>();
                    this.BUp = reader.Read<Vector3>();
                    this.BPosition = reader.Read<Vector3>();
                    this.EdgeIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(124, 4)]
        public sealed class StiffSpringConstraintsBlock : AbideTagBlock
        {
            [FieldAttribute("constraint bodies*", typeof(ConstraintBodiesStructBlock))]
            public ConstraintBodiesStructBlock ConstraintBodies;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("spring_length*", typeof(Single))]
            public Single SpringLength;
            public override int Size
            {
                get
                {
                    return 124;
                }
            }
            public override void Initialize()
            {
                this.ConstraintBodies = new ConstraintBodiesStructBlock();
                this.EmptyString = new byte[4];
                this.SpringLength = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.ConstraintBodies = reader.ReadDataStructure<ConstraintBodiesStructBlock>();
                this.EmptyString = reader.ReadBytes(4);
                this.SpringLength = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(116, 4)]
            public sealed class ConstraintBodiesStructBlock : AbideTagBlock
            {
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("node a*", typeof(Int16))]
                public Int16 NodeA;
                [FieldAttribute("node b*", typeof(Int16))]
                public Int16 NodeB;
                [FieldAttribute("a scale*", typeof(Single))]
                public Single AScale;
                [FieldAttribute("a forward*", typeof(Vector3))]
                public Vector3 AForward;
                [FieldAttribute("a left*", typeof(Vector3))]
                public Vector3 ALeft;
                [FieldAttribute("a up*", typeof(Vector3))]
                public Vector3 AUp;
                [FieldAttribute("a position*", typeof(Vector3))]
                public Vector3 APosition;
                [FieldAttribute("b scale*", typeof(Single))]
                public Single BScale;
                [FieldAttribute("b forward*", typeof(Vector3))]
                public Vector3 BForward;
                [FieldAttribute("b left*", typeof(Vector3))]
                public Vector3 BLeft;
                [FieldAttribute("b up*", typeof(Vector3))]
                public Vector3 BUp;
                [FieldAttribute("b position*", typeof(Vector3))]
                public Vector3 BPosition;
                [FieldAttribute("edge index*", typeof(Int16))]
                public Int16 EdgeIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 116;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.NodeA = 0;
                    this.NodeB = 0;
                    this.AScale = 0;
                    this.AForward = Vector3.Zero;
                    this.ALeft = Vector3.Zero;
                    this.AUp = Vector3.Zero;
                    this.APosition = Vector3.Zero;
                    this.BScale = 0;
                    this.BForward = Vector3.Zero;
                    this.BLeft = Vector3.Zero;
                    this.BUp = Vector3.Zero;
                    this.BPosition = Vector3.Zero;
                    this.EdgeIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NodeA = reader.ReadInt16();
                    this.NodeB = reader.ReadInt16();
                    this.AScale = reader.ReadSingle();
                    this.AForward = reader.Read<Vector3>();
                    this.ALeft = reader.Read<Vector3>();
                    this.AUp = reader.Read<Vector3>();
                    this.APosition = reader.Read<Vector3>();
                    this.BScale = reader.ReadSingle();
                    this.BForward = reader.Read<Vector3>();
                    this.BLeft = reader.Read<Vector3>();
                    this.BUp = reader.Read<Vector3>();
                    this.BPosition = reader.Read<Vector3>();
                    this.EdgeIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(132, 4)]
        public sealed class PrismaticConstraintsBlock : AbideTagBlock
        {
            [FieldAttribute("constraint bodies*", typeof(ConstraintBodiesStructBlock))]
            public ConstraintBodiesStructBlock ConstraintBodies;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("min_limit*", typeof(Single))]
            public Single MinLimit;
            [FieldAttribute("max_limit*", typeof(Single))]
            public Single MaxLimit;
            [FieldAttribute("max_friction_force*", typeof(Single))]
            public Single MaxFrictionForce;
            public override int Size
            {
                get
                {
                    return 132;
                }
            }
            public override void Initialize()
            {
                this.ConstraintBodies = new ConstraintBodiesStructBlock();
                this.EmptyString = new byte[4];
                this.MinLimit = 0;
                this.MaxLimit = 0;
                this.MaxFrictionForce = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.ConstraintBodies = reader.ReadDataStructure<ConstraintBodiesStructBlock>();
                this.EmptyString = reader.ReadBytes(4);
                this.MinLimit = reader.ReadSingle();
                this.MaxLimit = reader.ReadSingle();
                this.MaxFrictionForce = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(116, 4)]
            public sealed class ConstraintBodiesStructBlock : AbideTagBlock
            {
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("node a*", typeof(Int16))]
                public Int16 NodeA;
                [FieldAttribute("node b*", typeof(Int16))]
                public Int16 NodeB;
                [FieldAttribute("a scale*", typeof(Single))]
                public Single AScale;
                [FieldAttribute("a forward*", typeof(Vector3))]
                public Vector3 AForward;
                [FieldAttribute("a left*", typeof(Vector3))]
                public Vector3 ALeft;
                [FieldAttribute("a up*", typeof(Vector3))]
                public Vector3 AUp;
                [FieldAttribute("a position*", typeof(Vector3))]
                public Vector3 APosition;
                [FieldAttribute("b scale*", typeof(Single))]
                public Single BScale;
                [FieldAttribute("b forward*", typeof(Vector3))]
                public Vector3 BForward;
                [FieldAttribute("b left*", typeof(Vector3))]
                public Vector3 BLeft;
                [FieldAttribute("b up*", typeof(Vector3))]
                public Vector3 BUp;
                [FieldAttribute("b position*", typeof(Vector3))]
                public Vector3 BPosition;
                [FieldAttribute("edge index*", typeof(Int16))]
                public Int16 EdgeIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 116;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.NodeA = 0;
                    this.NodeB = 0;
                    this.AScale = 0;
                    this.AForward = Vector3.Zero;
                    this.ALeft = Vector3.Zero;
                    this.AUp = Vector3.Zero;
                    this.APosition = Vector3.Zero;
                    this.BScale = 0;
                    this.BForward = Vector3.Zero;
                    this.BLeft = Vector3.Zero;
                    this.BUp = Vector3.Zero;
                    this.BPosition = Vector3.Zero;
                    this.EdgeIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NodeA = reader.ReadInt16();
                    this.NodeB = reader.ReadInt16();
                    this.AScale = reader.ReadSingle();
                    this.AForward = reader.Read<Vector3>();
                    this.ALeft = reader.Read<Vector3>();
                    this.AUp = reader.Read<Vector3>();
                    this.APosition = reader.Read<Vector3>();
                    this.BScale = reader.ReadSingle();
                    this.BForward = reader.Read<Vector3>();
                    this.BLeft = reader.Read<Vector3>();
                    this.BUp = reader.Read<Vector3>();
                    this.BPosition = reader.Read<Vector3>();
                    this.EdgeIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(32, 4)]
        public sealed class PhantomsBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size1;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("size*", typeof(Int16))]
            public Int16 Size2;
            [FieldAttribute("count*", typeof(Int16))]
            public Int16 Count1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[4];
                this.Size1 = 0;
                this.Count = 0;
                this.EmptyString1 = new byte[4];
                this.EmptyString2 = new byte[4];
                this.EmptyString3 = new byte[4];
                this.EmptyString4 = new byte[4];
                this.Size2 = 0;
                this.Count1 = 0;
                this.EmptyString5 = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
                this.Size1 = reader.ReadInt16();
                this.Count = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(4);
                this.EmptyString2 = reader.ReadBytes(4);
                this.EmptyString3 = reader.ReadBytes(4);
                this.EmptyString4 = reader.ReadBytes(4);
                this.Size2 = reader.ReadInt16();
                this.Count1 = reader.ReadInt16();
                this.EmptyString5 = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        public enum FlagsOptions : Int32
        {
            Unused = 1,
        }
    }
}
#pragma warning restore CS1591
