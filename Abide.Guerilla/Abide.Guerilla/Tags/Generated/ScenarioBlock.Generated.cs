#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(1456, 4)]
    [TagGroupAttribute("scenario", 1935896178u, 4294967293u, typeof(ScenarioBlock))]
    public sealed class ScenarioBlock : AbideTagBlock
    {
        private DataList editorScenarioDataList = new DataList(65536);
        private DataList scriptSyntaxDataList = new DataList(737356);
        private DataList scriptStringDataList = new DataList(614400);
        private TagBlockList<ScenarioSkyReferenceBlock> skiesList = new TagBlockList<ScenarioSkyReferenceBlock>(32);
        private TagBlockList<ScenarioChildScenarioBlock> @childScenariosList = new TagBlockList<ScenarioChildScenarioBlock>(16);
        private TagBlockList<PredictedResourceBlock> predictedResourcesList = new TagBlockList<PredictedResourceBlock>(2048);
        private TagBlockList<ScenarioFunctionBlock> functionsList = new TagBlockList<ScenarioFunctionBlock>(32);
        private TagBlockList<EditorCommentBlock> commentsList = new TagBlockList<EditorCommentBlock>(65536);
        private TagBlockList<DontUseMeScenarioEnvironmentObjectBlock> list = new TagBlockList<DontUseMeScenarioEnvironmentObjectBlock>(4096);
        private TagBlockList<ScenarioObjectNamesBlock> objectNamesList = new TagBlockList<ScenarioObjectNamesBlock>(640);
        private TagBlockList<ScenarioSceneryBlock> sceneryList = new TagBlockList<ScenarioSceneryBlock>(2000);
        private TagBlockList<ScenarioSceneryPaletteBlock> sceneryPaletteList = new TagBlockList<ScenarioSceneryPaletteBlock>(256);
        private TagBlockList<ScenarioBipedBlock> bipedsList = new TagBlockList<ScenarioBipedBlock>(128);
        private TagBlockList<ScenarioBipedPaletteBlock> bipedPaletteList = new TagBlockList<ScenarioBipedPaletteBlock>(256);
        private TagBlockList<ScenarioVehicleBlock> vehiclesList = new TagBlockList<ScenarioVehicleBlock>(256);
        private TagBlockList<ScenarioVehiclePaletteBlock> vehiclePaletteList = new TagBlockList<ScenarioVehiclePaletteBlock>(256);
        private TagBlockList<ScenarioEquipmentBlock> equipmentList = new TagBlockList<ScenarioEquipmentBlock>(256);
        private TagBlockList<ScenarioEquipmentPaletteBlock> equipmentPaletteList = new TagBlockList<ScenarioEquipmentPaletteBlock>(256);
        private TagBlockList<ScenarioWeaponBlock> weaponsList = new TagBlockList<ScenarioWeaponBlock>(128);
        private TagBlockList<ScenarioWeaponPaletteBlock> weaponPaletteList = new TagBlockList<ScenarioWeaponPaletteBlock>(256);
        private TagBlockList<DeviceGroupBlock> deviceGroupsList = new TagBlockList<DeviceGroupBlock>(128);
        private TagBlockList<ScenarioMachineBlock> machinesList = new TagBlockList<ScenarioMachineBlock>(400);
        private TagBlockList<ScenarioMachinePaletteBlock> machinePaletteList = new TagBlockList<ScenarioMachinePaletteBlock>(256);
        private TagBlockList<ScenarioControlBlock> controlsList = new TagBlockList<ScenarioControlBlock>(100);
        private TagBlockList<ScenarioControlPaletteBlock> controlPaletteList = new TagBlockList<ScenarioControlPaletteBlock>(256);
        private TagBlockList<ScenarioLightFixtureBlock> lightFixturesList = new TagBlockList<ScenarioLightFixtureBlock>(500);
        private TagBlockList<ScenarioLightFixturePaletteBlock> lightFixturesPaletteList = new TagBlockList<ScenarioLightFixturePaletteBlock>(256);
        private TagBlockList<ScenarioSoundSceneryBlock> soundSceneryList = new TagBlockList<ScenarioSoundSceneryBlock>(256);
        private TagBlockList<ScenarioSoundSceneryPaletteBlock> soundSceneryPaletteList = new TagBlockList<ScenarioSoundSceneryPaletteBlock>(256);
        private TagBlockList<ScenarioLightBlock> lightVolumesList = new TagBlockList<ScenarioLightBlock>(500);
        private TagBlockList<ScenarioLightPaletteBlock> lightVolumesPaletteList = new TagBlockList<ScenarioLightPaletteBlock>(256);
        private TagBlockList<ScenarioProfilesBlock> playerStartingProfileList = new TagBlockList<ScenarioProfilesBlock>(256);
        private TagBlockList<ScenarioPlayersBlock> playerStartingLocationsList = new TagBlockList<ScenarioPlayersBlock>(256);
        private TagBlockList<ScenarioTriggerVolumeBlock> killTriggerVolumesList = new TagBlockList<ScenarioTriggerVolumeBlock>(256);
        private TagBlockList<RecordedAnimationBlock> recordedAnimationsList = new TagBlockList<RecordedAnimationBlock>(1024);
        private TagBlockList<ScenarioNetpointsBlock> netgameFlagsList = new TagBlockList<ScenarioNetpointsBlock>(200);
        private TagBlockList<ScenarioNetgameEquipmentBlock> netgameEquipmentList = new TagBlockList<ScenarioNetgameEquipmentBlock>(100);
        private TagBlockList<ScenarioStartingEquipmentBlock> startingEquipmentList = new TagBlockList<ScenarioStartingEquipmentBlock>(200);
        private TagBlockList<ScenarioBspSwitchTriggerVolumeBlock> bspSwitchTriggerVolumesList = new TagBlockList<ScenarioBspSwitchTriggerVolumeBlock>(256);
        private TagBlockList<ScenarioDecalsBlock> decalsList = new TagBlockList<ScenarioDecalsBlock>(65536);
        private TagBlockList<ScenarioDecalPaletteBlock> decalsPaletteList = new TagBlockList<ScenarioDecalPaletteBlock>(128);
        private TagBlockList<ScenarioDetailObjectCollectionPaletteBlock> detailObjectCollectionPaletteList = new TagBlockList<ScenarioDetailObjectCollectionPaletteBlock>(32);
        private TagBlockList<StylePaletteBlock> stylePaletteList = new TagBlockList<StylePaletteBlock>(50);
        private TagBlockList<SquadGroupsBlock> squadGroupsList = new TagBlockList<SquadGroupsBlock>(100);
        private TagBlockList<SquadsBlock> squadsList = new TagBlockList<SquadsBlock>(335);
        private TagBlockList<ZoneBlock> zonesList = new TagBlockList<ZoneBlock>(128);
        private TagBlockList<AiSceneBlock> missionScenesList = new TagBlockList<AiSceneBlock>(100);
        private TagBlockList<CharacterPaletteBlock> characterPaletteList = new TagBlockList<CharacterPaletteBlock>(64);
        private TagBlockList<PathfindingDataBlock> aiPathfindingDataList = new TagBlockList<PathfindingDataBlock>(16);
        private TagBlockList<AiAnimationReferenceBlock> aiAnimationReferencesList = new TagBlockList<AiAnimationReferenceBlock>(128);
        private TagBlockList<AiScriptReferenceBlock> aiScriptReferencesList = new TagBlockList<AiScriptReferenceBlock>(128);
        private TagBlockList<AiRecordingReferenceBlock> aiRecordingReferencesList = new TagBlockList<AiRecordingReferenceBlock>(128);
        private TagBlockList<AiConversationBlock> aiConversationsList = new TagBlockList<AiConversationBlock>(128);
        private TagBlockList<HsScriptsBlock> scriptsList = new TagBlockList<HsScriptsBlock>(1024);
        private TagBlockList<HsGlobalsBlock> globalsList = new TagBlockList<HsGlobalsBlock>(256);
        private TagBlockList<HsReferencesBlock> referencesList = new TagBlockList<HsReferencesBlock>(512);
        private TagBlockList<HsSourceFilesBlock> sourceFilesList = new TagBlockList<HsSourceFilesBlock>(8);
        private TagBlockList<CsScriptDataBlock> scriptingDataList = new TagBlockList<CsScriptDataBlock>(1);
        private TagBlockList<ScenarioCutsceneFlagBlock> cutsceneFlagsList = new TagBlockList<ScenarioCutsceneFlagBlock>(512);
        private TagBlockList<ScenarioCutsceneCameraPointBlock> cutsceneCameraPointsList = new TagBlockList<ScenarioCutsceneCameraPointBlock>(512);
        private TagBlockList<ScenarioCutsceneTitleBlock> cutsceneTitlesList = new TagBlockList<ScenarioCutsceneTitleBlock>(128);
        private TagBlockList<ScenarioStructureBspReferenceBlock> structureBspsList = new TagBlockList<ScenarioStructureBspReferenceBlock>(16);
        private TagBlockList<ScenarioResourcesBlock> scenarioResourcesList = new TagBlockList<ScenarioResourcesBlock>(1);
        private TagBlockList<OldUnusedStrucurePhysicsBlock> scenarioResourcesList1 = new TagBlockList<OldUnusedStrucurePhysicsBlock>(16);
        private TagBlockList<HsUnitSeatBlock> hsUnitSeatsList = new TagBlockList<HsUnitSeatBlock>(65536);
        private TagBlockList<ScenarioKillTriggerVolumesBlock> scenarioKillTriggersList = new TagBlockList<ScenarioKillTriggerVolumesBlock>(256);
        private TagBlockList<SyntaxDatumBlock> hsSyntaxDatumsList = new TagBlockList<SyntaxDatumBlock>(36864);
        private TagBlockList<OrdersBlock> ordersList = new TagBlockList<OrdersBlock>(300);
        private TagBlockList<TriggersBlock> triggersList = new TagBlockList<TriggersBlock>(256);
        private TagBlockList<StructureBspBackgroundSoundPaletteBlock> backgroundSoundPaletteList = new TagBlockList<StructureBspBackgroundSoundPaletteBlock>(64);
        private TagBlockList<StructureBspSoundEnvironmentPaletteBlock> soundEnvironmentPaletteList = new TagBlockList<StructureBspSoundEnvironmentPaletteBlock>(64);
        private TagBlockList<StructureBspWeatherPaletteBlock> weatherPaletteList = new TagBlockList<StructureBspWeatherPaletteBlock>(32);
        private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
        private TagBlockList<ScenarioClusterDataBlock> scenarioClusterDataList = new TagBlockList<ScenarioClusterDataBlock>(16);
        private TagBlockList<ScenarioSpawnDataBlock> spawnDataList = new TagBlockList<ScenarioSpawnDataBlock>(1);
        private TagBlockList<ScenarioCrateBlock> cratesList = new TagBlockList<ScenarioCrateBlock>(1024);
        private TagBlockList<ScenarioCratePaletteBlock> cratesPaletteList = new TagBlockList<ScenarioCratePaletteBlock>(256);
        private TagBlockList<ScenarioAtmosphericFogPalette> atmosphericFogPaletteList = new TagBlockList<ScenarioAtmosphericFogPalette>(127);
        private TagBlockList<ScenarioPlanarFogPalette> planarFogPaletteList = new TagBlockList<ScenarioPlanarFogPalette>(127);
        private TagBlockList<FlockDefinitionBlock> flocksList = new TagBlockList<FlockDefinitionBlock>(20);
        private TagBlockList<DecoratorPlacementDefinitionBlock> decoratorsList = new TagBlockList<DecoratorPlacementDefinitionBlock>(1);
        private TagBlockList<ScenarioCreatureBlock> creaturesList = new TagBlockList<ScenarioCreatureBlock>(128);
        private TagBlockList<ScenarioCreaturePaletteBlock> creaturesPaletteList = new TagBlockList<ScenarioCreaturePaletteBlock>(256);
        private TagBlockList<ScenarioDecoratorSetPaletteEntryBlock> decoratorsPaletteList = new TagBlockList<ScenarioDecoratorSetPaletteEntryBlock>(32);
        private TagBlockList<ScenarioBspSwitchTransitionVolumeBlock> bspTransitionVolumesList = new TagBlockList<ScenarioBspSwitchTransitionVolumeBlock>(256);
        private TagBlockList<ScenarioStructureBspSphericalHarmonicLightingBlock> structureBspLightingList = new TagBlockList<ScenarioStructureBspSphericalHarmonicLightingBlock>(16);
        private TagBlockList<GScenarioEditorFolderBlock> editorFoldersList = new TagBlockList<GScenarioEditorFolderBlock>(32767);
        private TagBlockList<ScenarioLevelDataBlock> levelDataList = new TagBlockList<ScenarioLevelDataBlock>(1);
        private TagBlockList<AiScenarioMissionDialogueBlock> missionDialogueList = new TagBlockList<AiScenarioMissionDialogueBlock>(1);
        private TagBlockList<ScenarioInterpolatorBlock> interpolatorsList = new TagBlockList<ScenarioInterpolatorBlock>(16);
        private TagBlockList<ScenarioScreenEffectReferenceBlock> screenEffectReferencesList = new TagBlockList<ScenarioScreenEffectReferenceBlock>(16);
        private TagBlockList<ScenarioSimulationDefinitionTableBlock> simulationDefinitionTableList = new TagBlockList<ScenarioSimulationDefinitionTableBlock>(512);
        [FieldAttribute("Do not use.", typeof(TagReference))]
        public TagReference DoNotUse;
        [FieldAttribute("Skies", typeof(TagBlock))]
        [BlockAttribute("scenario_sky_reference_block", 32, typeof(ScenarioSkyReferenceBlock))]
        public TagBlock Skies;
        [FieldAttribute("Type", typeof(TypeOptions))]
        [OptionsAttribute(typeof(TypeOptions), false)]
        public TypeOptions Type;
        [FieldAttribute("Flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("@child scenarios", typeof(TagBlock))]
        [BlockAttribute("scenario_child_scenario_block", 16, typeof(ScenarioChildScenarioBlock))]
        public TagBlock @childScenarios;
        [FieldAttribute("Local North", typeof(Single))]
        public Single LocalNorth;
        [FieldAttribute("Predicted Resources*", typeof(TagBlock))]
        [BlockAttribute("predicted_resource_block", 2048, typeof(PredictedResourceBlock))]
        public TagBlock PredictedResources;
        [FieldAttribute("Functions", typeof(TagBlock))]
        [BlockAttribute("scenario_function_block", 32, typeof(ScenarioFunctionBlock))]
        public TagBlock Functions;
        [FieldAttribute("Editor Scenario Data", typeof(TagBlock))]
        [DataAttribute(65536)]
        public TagBlock EditorScenarioData;
        [FieldAttribute("Comments", typeof(TagBlock))]
        [BlockAttribute("editor_comment_block", 65536, typeof(EditorCommentBlock))]
        public TagBlock Comments;
        [FieldAttribute("*", typeof(TagBlock))]
        [BlockAttribute("dont_use_me_scenario_environment_object_block", 4096, typeof(DontUseMeScenarioEnvironmentObjectBlock))]
        public TagBlock EmptyString;
        [FieldAttribute("Object Names*", typeof(TagBlock))]
        [BlockAttribute("scenario_object_names_block", 640, typeof(ScenarioObjectNamesBlock))]
        public TagBlock ObjectNames;
        [FieldAttribute("Scenery", typeof(TagBlock))]
        [BlockAttribute("scenario_scenery_block", 2000, typeof(ScenarioSceneryBlock))]
        public TagBlock Scenery;
        [FieldAttribute("Scenery Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_scenery_palette_block", 256, typeof(ScenarioSceneryPaletteBlock))]
        public TagBlock SceneryPalette;
        [FieldAttribute("Bipeds", typeof(TagBlock))]
        [BlockAttribute("scenario_biped_block", 128, typeof(ScenarioBipedBlock))]
        public TagBlock Bipeds;
        [FieldAttribute("Biped Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_biped_palette_block", 256, typeof(ScenarioBipedPaletteBlock))]
        public TagBlock BipedPalette;
        [FieldAttribute("Vehicles", typeof(TagBlock))]
        [BlockAttribute("scenario_vehicle_block", 256, typeof(ScenarioVehicleBlock))]
        public TagBlock Vehicles;
        [FieldAttribute("Vehicle Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_vehicle_palette_block", 256, typeof(ScenarioVehiclePaletteBlock))]
        public TagBlock VehiclePalette;
        [FieldAttribute("Equipment", typeof(TagBlock))]
        [BlockAttribute("scenario_equipment_block", 256, typeof(ScenarioEquipmentBlock))]
        public TagBlock Equipment;
        [FieldAttribute("Equipment Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_equipment_palette_block", 256, typeof(ScenarioEquipmentPaletteBlock))]
        public TagBlock EquipmentPalette;
        [FieldAttribute("Weapons", typeof(TagBlock))]
        [BlockAttribute("scenario_weapon_block", 128, typeof(ScenarioWeaponBlock))]
        public TagBlock Weapons;
        [FieldAttribute("Weapon Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_weapon_palette_block", 256, typeof(ScenarioWeaponPaletteBlock))]
        public TagBlock WeaponPalette;
        [FieldAttribute("Device Groups", typeof(TagBlock))]
        [BlockAttribute("device_group_block", 128, typeof(DeviceGroupBlock))]
        public TagBlock DeviceGroups;
        [FieldAttribute("Machines", typeof(TagBlock))]
        [BlockAttribute("scenario_machine_block", 400, typeof(ScenarioMachineBlock))]
        public TagBlock Machines;
        [FieldAttribute("Machine Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_machine_palette_block", 256, typeof(ScenarioMachinePaletteBlock))]
        public TagBlock MachinePalette;
        [FieldAttribute("Controls", typeof(TagBlock))]
        [BlockAttribute("scenario_control_block", 100, typeof(ScenarioControlBlock))]
        public TagBlock Controls;
        [FieldAttribute("Control Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_control_palette_block", 256, typeof(ScenarioControlPaletteBlock))]
        public TagBlock ControlPalette;
        [FieldAttribute("Light Fixtures", typeof(TagBlock))]
        [BlockAttribute("scenario_light_fixture_block", 500, typeof(ScenarioLightFixtureBlock))]
        public TagBlock LightFixtures;
        [FieldAttribute("Light Fixtures Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_light_fixture_palette_block", 256, typeof(ScenarioLightFixturePaletteBlock))]
        public TagBlock LightFixturesPalette;
        [FieldAttribute("Sound Scenery", typeof(TagBlock))]
        [BlockAttribute("scenario_sound_scenery_block", 256, typeof(ScenarioSoundSceneryBlock))]
        public TagBlock SoundScenery;
        [FieldAttribute("Sound Scenery Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_sound_scenery_palette_block", 256, typeof(ScenarioSoundSceneryPaletteBlock))]
        public TagBlock SoundSceneryPalette;
        [FieldAttribute("Light Volumes", typeof(TagBlock))]
        [BlockAttribute("scenario_light_block", 500, typeof(ScenarioLightBlock))]
        public TagBlock LightVolumes;
        [FieldAttribute("Light Volumes Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_light_palette_block", 256, typeof(ScenarioLightPaletteBlock))]
        public TagBlock LightVolumesPalette;
        [FieldAttribute("Player Starting Profile", typeof(TagBlock))]
        [BlockAttribute("scenario_profiles_block", 256, typeof(ScenarioProfilesBlock))]
        public TagBlock PlayerStartingProfile;
        [FieldAttribute("Player Starting Locations", typeof(TagBlock))]
        [BlockAttribute("scenario_players_block", 256, typeof(ScenarioPlayersBlock))]
        public TagBlock PlayerStartingLocations;
        [FieldAttribute("Kill Trigger Volumes", typeof(TagBlock))]
        [BlockAttribute("scenario_trigger_volume_block", 256, typeof(ScenarioTriggerVolumeBlock))]
        public TagBlock KillTriggerVolumes;
        [FieldAttribute("Recorded Animations", typeof(TagBlock))]
        [BlockAttribute("recorded_animation_block", 1024, typeof(RecordedAnimationBlock))]
        public TagBlock RecordedAnimations;
        [FieldAttribute("Netgame Flags", typeof(TagBlock))]
        [BlockAttribute("scenario_netpoints_block", 200, typeof(ScenarioNetpointsBlock))]
        public TagBlock NetgameFlags;
        [FieldAttribute("Netgame Equipment", typeof(TagBlock))]
        [BlockAttribute("scenario_netgame_equipment_block", 100, typeof(ScenarioNetgameEquipmentBlock))]
        public TagBlock NetgameEquipment;
        [FieldAttribute("Starting Equipment", typeof(TagBlock))]
        [BlockAttribute("scenario_starting_equipment_block", 200, typeof(ScenarioStartingEquipmentBlock))]
        public TagBlock StartingEquipment;
        [FieldAttribute("BSP Switch Trigger Volumes", typeof(TagBlock))]
        [BlockAttribute("scenario_bsp_switch_trigger_volume_block", 256, typeof(ScenarioBspSwitchTriggerVolumeBlock))]
        public TagBlock BspSwitchTriggerVolumes;
        [FieldAttribute("Decals", typeof(TagBlock))]
        [BlockAttribute("scenario_decals_block", 65536, typeof(ScenarioDecalsBlock))]
        public TagBlock Decals;
        [FieldAttribute("Decals Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_decal_palette_block", 128, typeof(ScenarioDecalPaletteBlock))]
        public TagBlock DecalsPalette;
        [FieldAttribute("Detail Object Collection Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_detail_object_collection_palette_block", 32, typeof(ScenarioDetailObjectCollectionPaletteBlock))]
        public TagBlock DetailObjectCollectionPalette;
        [FieldAttribute("Style Palette", typeof(TagBlock))]
        [BlockAttribute("style_palette_block", 50, typeof(StylePaletteBlock))]
        public TagBlock StylePalette;
        [FieldAttribute("Squad Groups", typeof(TagBlock))]
        [BlockAttribute("squad_groups_block", 100, typeof(SquadGroupsBlock))]
        public TagBlock SquadGroups;
        [FieldAttribute("Squads", typeof(TagBlock))]
        [BlockAttribute("squads_block", 335, typeof(SquadsBlock))]
        public TagBlock Squads;
        [FieldAttribute("Zones", typeof(TagBlock))]
        [BlockAttribute("zone_block", 128, typeof(ZoneBlock))]
        public TagBlock Zones;
        [FieldAttribute("Mission Scenes", typeof(TagBlock))]
        [BlockAttribute("ai_scene_block", 100, typeof(AiSceneBlock))]
        public TagBlock MissionScenes;
        [FieldAttribute("Character Palette", typeof(TagBlock))]
        [BlockAttribute("character_palette_block", 64, typeof(CharacterPaletteBlock))]
        public TagBlock CharacterPalette;
        [FieldAttribute("AI Pathfinding Data", typeof(TagBlock))]
        [BlockAttribute("pathfinding_data_block", 16, typeof(PathfindingDataBlock))]
        public TagBlock AiPathfindingData;
        [FieldAttribute("AI Animation References", typeof(TagBlock))]
        [BlockAttribute("ai_animation_reference_block", 128, typeof(AiAnimationReferenceBlock))]
        public TagBlock AiAnimationReferences;
        [FieldAttribute("AI Script References", typeof(TagBlock))]
        [BlockAttribute("ai_script_reference_block", 128, typeof(AiScriptReferenceBlock))]
        public TagBlock AiScriptReferences;
        [FieldAttribute("AI Recording References", typeof(TagBlock))]
        [BlockAttribute("ai_recording_reference_block", 128, typeof(AiRecordingReferenceBlock))]
        public TagBlock AiRecordingReferences;
        [FieldAttribute("AI Conversations", typeof(TagBlock))]
        [BlockAttribute("ai_conversation_block", 128, typeof(AiConversationBlock))]
        public TagBlock AiConversations;
        [FieldAttribute("Script Syntax Data", typeof(TagBlock))]
        [DataAttribute(737356)]
        public TagBlock ScriptSyntaxData;
        [FieldAttribute("Script String Data", typeof(TagBlock))]
        [DataAttribute(614400)]
        public TagBlock ScriptStringData;
        [FieldAttribute("Scripts*", typeof(TagBlock))]
        [BlockAttribute("hs_scripts_block", 1024, typeof(HsScriptsBlock))]
        public TagBlock Scripts;
        [FieldAttribute("Globals*", typeof(TagBlock))]
        [BlockAttribute("hs_globals_block", 256, typeof(HsGlobalsBlock))]
        public TagBlock Globals;
        [FieldAttribute("References*", typeof(TagBlock))]
        [BlockAttribute("hs_references_block", 512, typeof(HsReferencesBlock))]
        public TagBlock References;
        [FieldAttribute("Source Files*", typeof(TagBlock))]
        [BlockAttribute("hs_source_files_block", 8, typeof(HsSourceFilesBlock))]
        public TagBlock SourceFiles;
        [FieldAttribute("Scripting Data", typeof(TagBlock))]
        [BlockAttribute("cs_script_data_block", 1, typeof(CsScriptDataBlock))]
        public TagBlock ScriptingData;
        [FieldAttribute("Cutscene Flags", typeof(TagBlock))]
        [BlockAttribute("scenario_cutscene_flag_block", 512, typeof(ScenarioCutsceneFlagBlock))]
        public TagBlock CutsceneFlags;
        [FieldAttribute("Cutscene Camera Points", typeof(TagBlock))]
        [BlockAttribute("scenario_cutscene_camera_point_block", 512, typeof(ScenarioCutsceneCameraPointBlock))]
        public TagBlock CutsceneCameraPoints;
        [FieldAttribute("Cutscene Titles", typeof(TagBlock))]
        [BlockAttribute("scenario_cutscene_title_block", 128, typeof(ScenarioCutsceneTitleBlock))]
        public TagBlock CutsceneTitles;
        [FieldAttribute("Custom Object Names", typeof(TagReference))]
        public TagReference CustomObjectNames;
        [FieldAttribute("Chapter Title Text", typeof(TagReference))]
        public TagReference ChapterTitleText;
        [FieldAttribute("HUD Messages", typeof(TagReference))]
        public TagReference HudMessages;
        [FieldAttribute("Structure BSPs", typeof(TagBlock))]
        [BlockAttribute("scenario_structure_bsp_reference_block", 16, typeof(ScenarioStructureBspReferenceBlock))]
        public TagBlock StructureBsps;
        [FieldAttribute("Scenario Resources", typeof(TagBlock))]
        [BlockAttribute("scenario_resources_block", 1, typeof(ScenarioResourcesBlock))]
        public TagBlock ScenarioResources;
        [FieldAttribute("Scenario Resources", typeof(TagBlock))]
        [BlockAttribute("old_unused_strucure_physics_block", 16, typeof(OldUnusedStrucurePhysicsBlock))]
        public TagBlock ScenarioResources1;
        [FieldAttribute(")hs Unit Seats", typeof(TagBlock))]
        [BlockAttribute("hs_unit_seat_block", 65536, typeof(HsUnitSeatBlock))]
        public TagBlock HsUnitSeats;
        [FieldAttribute("Scenario Kill Triggers", typeof(TagBlock))]
        [BlockAttribute("scenario_kill_trigger_volumes_block", 256, typeof(ScenarioKillTriggerVolumesBlock))]
        public TagBlock ScenarioKillTriggers;
        [FieldAttribute("hs Syntax Datums*", typeof(TagBlock))]
        [BlockAttribute("syntax_datum_block", 36864, typeof(SyntaxDatumBlock))]
        public TagBlock HsSyntaxDatums;
        [FieldAttribute("Orders", typeof(TagBlock))]
        [BlockAttribute("orders_block", 300, typeof(OrdersBlock))]
        public TagBlock Orders;
        [FieldAttribute("Triggers", typeof(TagBlock))]
        [BlockAttribute("triggers_block", 256, typeof(TriggersBlock))]
        public TagBlock Triggers;
        [FieldAttribute("Background Sound Palette", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_background_sound_palette_block", 64, typeof(StructureBspBackgroundSoundPaletteBlock))]
        public TagBlock BackgroundSoundPalette;
        [FieldAttribute("Sound Environment Palette", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_sound_environment_palette_block", 64, typeof(StructureBspSoundEnvironmentPaletteBlock))]
        public TagBlock SoundEnvironmentPalette;
        [FieldAttribute("Weather Palette", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_weather_palette_block", 32, typeof(StructureBspWeatherPaletteBlock))]
        public TagBlock WeatherPalette;
        [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString1;
        [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString2;
        [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString3;
        [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString4;
        [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString5;
        [FieldAttribute("Scenario Cluster Data", typeof(TagBlock))]
        [BlockAttribute("scenario_cluster_data_block", 16, typeof(ScenarioClusterDataBlock))]
        public TagBlock ScenarioClusterData;
        [FieldAttribute("object_salts*", typeof(ObjectSaltsElement[]))]
        [ArrayAttribute(32, typeof(ObjectSaltsElement))]
        public ObjectSaltsElement[] ObjectSalts;
        [FieldAttribute("Spawn Data", typeof(TagBlock))]
        [BlockAttribute("scenario_spawn_data_block", 1, typeof(ScenarioSpawnDataBlock))]
        public TagBlock SpawnData;
        [FieldAttribute("Sound Effect Collection", typeof(TagReference))]
        public TagReference SoundEffectCollection;
        [FieldAttribute("Crates", typeof(TagBlock))]
        [BlockAttribute("scenario_crate_block", 1024, typeof(ScenarioCrateBlock))]
        public TagBlock Crates;
        [FieldAttribute("Crates Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_crate_palette_block", 256, typeof(ScenarioCratePaletteBlock))]
        public TagBlock CratesPalette;
        [FieldAttribute("Global Lighting", typeof(TagReference))]
        public TagReference GlobalLighting;
        [FieldAttribute("Atmospheric Fog Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_atmospheric_fog_palette", 127, typeof(ScenarioAtmosphericFogPalette))]
        public TagBlock AtmosphericFogPalette;
        [FieldAttribute("Planar Fog Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_planar_fog_palette", 127, typeof(ScenarioPlanarFogPalette))]
        public TagBlock PlanarFogPalette;
        [FieldAttribute("Flocks", typeof(TagBlock))]
        [BlockAttribute("flock_definition_block", 20, typeof(FlockDefinitionBlock))]
        public TagBlock Flocks;
        [FieldAttribute("Subtitles", typeof(TagReference))]
        public TagReference Subtitles;
        [FieldAttribute("Decorators", typeof(TagBlock))]
        [BlockAttribute("decorator_placement_definition_block", 1, typeof(DecoratorPlacementDefinitionBlock))]
        public TagBlock Decorators;
        [FieldAttribute("Creatures", typeof(TagBlock))]
        [BlockAttribute("scenario_creature_block", 128, typeof(ScenarioCreatureBlock))]
        public TagBlock Creatures;
        [FieldAttribute("Creatures Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_creature_palette_block", 256, typeof(ScenarioCreaturePaletteBlock))]
        public TagBlock CreaturesPalette;
        [FieldAttribute("Decorators Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_decorator_set_palette_entry_block", 32, typeof(ScenarioDecoratorSetPaletteEntryBlock))]
        public TagBlock DecoratorsPalette;
        [FieldAttribute(")BSP Transition Volumes", typeof(TagBlock))]
        [BlockAttribute("scenario_bsp_switch_transition_volume_block", 256, typeof(ScenarioBspSwitchTransitionVolumeBlock))]
        public TagBlock BspTransitionVolumes;
        [FieldAttribute("Structure BSP Lighting", typeof(TagBlock))]
        [BlockAttribute("scenario_structure_bsp_spherical_harmonic_lighting_block", 16, typeof(ScenarioStructureBspSphericalHarmonicLightingBlock))]
        public TagBlock StructureBspLighting;
        [FieldAttribute(")Editor Folders", typeof(TagBlock))]
        [BlockAttribute("g_scenario_editor_folder_block", 32767, typeof(GScenarioEditorFolderBlock))]
        public TagBlock EditorFolders;
        [FieldAttribute("Level Data", typeof(TagBlock))]
        [BlockAttribute("scenario_level_data_block", 1, typeof(ScenarioLevelDataBlock))]
        public TagBlock LevelData;
        [FieldAttribute("Territory Location Names", typeof(TagReference))]
        public TagReference TerritoryLocationNames;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(8)]
        public Byte[] EmptyString6;
        [FieldAttribute("Mission Dialogue", typeof(TagBlock))]
        [BlockAttribute("ai_scenario_mission_dialogue_block", 1, typeof(AiScenarioMissionDialogueBlock))]
        public TagBlock MissionDialogue;
        [FieldAttribute("Objectives", typeof(TagReference))]
        public TagReference Objectives;
        [FieldAttribute("Interpolators", typeof(TagBlock))]
        [BlockAttribute("interpolators", 16, typeof(ScenarioInterpolatorBlock))]
        public TagBlock Interpolators;
        [FieldAttribute("Shared References", typeof(TagBlock))]
        [BlockAttribute("hs_references_block", 512, typeof(HsReferencesBlock))]
        public TagBlock SharedReferences;
        [FieldAttribute("Screen Effect References", typeof(TagBlock))]
        [BlockAttribute("screen effect reference", 16, typeof(ScenarioScreenEffectReferenceBlock))]
        public TagBlock ScreenEffectReferences;
        [FieldAttribute("Simulation Definition Table", typeof(TagBlock))]
        [BlockAttribute("simulation definition table element", 512, typeof(ScenarioSimulationDefinitionTableBlock))]
        public TagBlock SimulationDefinitionTable;
        public DataList EditorScenarioDataList
        {
            get
            {
                return this.editorScenarioDataList;
            }
        }
        public DataList ScriptSyntaxDataList
        {
            get
            {
                return this.scriptSyntaxDataList;
            }
        }
        public DataList ScriptStringDataList
        {
            get
            {
                return this.scriptStringDataList;
            }
        }
        public TagBlockList<ScenarioSkyReferenceBlock> SkiesList
        {
            get
            {
                return this.skiesList;
            }
        }
        public TagBlockList<ScenarioChildScenarioBlock> @childScenariosList1
        {
            get
            {
                return this.@childScenariosList;
            }
        }
        public TagBlockList<PredictedResourceBlock> PredictedResourcesList
        {
            get
            {
                return this.predictedResourcesList;
            }
        }
        public TagBlockList<ScenarioFunctionBlock> FunctionsList
        {
            get
            {
                return this.functionsList;
            }
        }
        public TagBlockList<EditorCommentBlock> CommentsList
        {
            get
            {
                return this.commentsList;
            }
        }
        public TagBlockList<DontUseMeScenarioEnvironmentObjectBlock> List
        {
            get
            {
                return this.list;
            }
        }
        public TagBlockList<ScenarioObjectNamesBlock> ObjectNamesList
        {
            get
            {
                return this.objectNamesList;
            }
        }
        public TagBlockList<ScenarioSceneryBlock> SceneryList
        {
            get
            {
                return this.sceneryList;
            }
        }
        public TagBlockList<ScenarioSceneryPaletteBlock> SceneryPaletteList
        {
            get
            {
                return this.sceneryPaletteList;
            }
        }
        public TagBlockList<ScenarioBipedBlock> BipedsList
        {
            get
            {
                return this.bipedsList;
            }
        }
        public TagBlockList<ScenarioBipedPaletteBlock> BipedPaletteList
        {
            get
            {
                return this.bipedPaletteList;
            }
        }
        public TagBlockList<ScenarioVehicleBlock> VehiclesList
        {
            get
            {
                return this.vehiclesList;
            }
        }
        public TagBlockList<ScenarioVehiclePaletteBlock> VehiclePaletteList
        {
            get
            {
                return this.vehiclePaletteList;
            }
        }
        public TagBlockList<ScenarioEquipmentBlock> EquipmentList
        {
            get
            {
                return this.equipmentList;
            }
        }
        public TagBlockList<ScenarioEquipmentPaletteBlock> EquipmentPaletteList
        {
            get
            {
                return this.equipmentPaletteList;
            }
        }
        public TagBlockList<ScenarioWeaponBlock> WeaponsList
        {
            get
            {
                return this.weaponsList;
            }
        }
        public TagBlockList<ScenarioWeaponPaletteBlock> WeaponPaletteList
        {
            get
            {
                return this.weaponPaletteList;
            }
        }
        public TagBlockList<DeviceGroupBlock> DeviceGroupsList
        {
            get
            {
                return this.deviceGroupsList;
            }
        }
        public TagBlockList<ScenarioMachineBlock> MachinesList
        {
            get
            {
                return this.machinesList;
            }
        }
        public TagBlockList<ScenarioMachinePaletteBlock> MachinePaletteList
        {
            get
            {
                return this.machinePaletteList;
            }
        }
        public TagBlockList<ScenarioControlBlock> ControlsList
        {
            get
            {
                return this.controlsList;
            }
        }
        public TagBlockList<ScenarioControlPaletteBlock> ControlPaletteList
        {
            get
            {
                return this.controlPaletteList;
            }
        }
        public TagBlockList<ScenarioLightFixtureBlock> LightFixturesList
        {
            get
            {
                return this.lightFixturesList;
            }
        }
        public TagBlockList<ScenarioLightFixturePaletteBlock> LightFixturesPaletteList
        {
            get
            {
                return this.lightFixturesPaletteList;
            }
        }
        public TagBlockList<ScenarioSoundSceneryBlock> SoundSceneryList
        {
            get
            {
                return this.soundSceneryList;
            }
        }
        public TagBlockList<ScenarioSoundSceneryPaletteBlock> SoundSceneryPaletteList
        {
            get
            {
                return this.soundSceneryPaletteList;
            }
        }
        public TagBlockList<ScenarioLightBlock> LightVolumesList
        {
            get
            {
                return this.lightVolumesList;
            }
        }
        public TagBlockList<ScenarioLightPaletteBlock> LightVolumesPaletteList
        {
            get
            {
                return this.lightVolumesPaletteList;
            }
        }
        public TagBlockList<ScenarioProfilesBlock> PlayerStartingProfileList
        {
            get
            {
                return this.playerStartingProfileList;
            }
        }
        public TagBlockList<ScenarioPlayersBlock> PlayerStartingLocationsList
        {
            get
            {
                return this.playerStartingLocationsList;
            }
        }
        public TagBlockList<ScenarioTriggerVolumeBlock> KillTriggerVolumesList
        {
            get
            {
                return this.killTriggerVolumesList;
            }
        }
        public TagBlockList<RecordedAnimationBlock> RecordedAnimationsList
        {
            get
            {
                return this.recordedAnimationsList;
            }
        }
        public TagBlockList<ScenarioNetpointsBlock> NetgameFlagsList
        {
            get
            {
                return this.netgameFlagsList;
            }
        }
        public TagBlockList<ScenarioNetgameEquipmentBlock> NetgameEquipmentList
        {
            get
            {
                return this.netgameEquipmentList;
            }
        }
        public TagBlockList<ScenarioStartingEquipmentBlock> StartingEquipmentList
        {
            get
            {
                return this.startingEquipmentList;
            }
        }
        public TagBlockList<ScenarioBspSwitchTriggerVolumeBlock> BspSwitchTriggerVolumesList
        {
            get
            {
                return this.bspSwitchTriggerVolumesList;
            }
        }
        public TagBlockList<ScenarioDecalsBlock> DecalsList
        {
            get
            {
                return this.decalsList;
            }
        }
        public TagBlockList<ScenarioDecalPaletteBlock> DecalsPaletteList
        {
            get
            {
                return this.decalsPaletteList;
            }
        }
        public TagBlockList<ScenarioDetailObjectCollectionPaletteBlock> DetailObjectCollectionPaletteList
        {
            get
            {
                return this.detailObjectCollectionPaletteList;
            }
        }
        public TagBlockList<StylePaletteBlock> StylePaletteList
        {
            get
            {
                return this.stylePaletteList;
            }
        }
        public TagBlockList<SquadGroupsBlock> SquadGroupsList
        {
            get
            {
                return this.squadGroupsList;
            }
        }
        public TagBlockList<SquadsBlock> SquadsList
        {
            get
            {
                return this.squadsList;
            }
        }
        public TagBlockList<ZoneBlock> ZonesList
        {
            get
            {
                return this.zonesList;
            }
        }
        public TagBlockList<AiSceneBlock> MissionScenesList
        {
            get
            {
                return this.missionScenesList;
            }
        }
        public TagBlockList<CharacterPaletteBlock> CharacterPaletteList
        {
            get
            {
                return this.characterPaletteList;
            }
        }
        public TagBlockList<PathfindingDataBlock> AiPathfindingDataList
        {
            get
            {
                return this.aiPathfindingDataList;
            }
        }
        public TagBlockList<AiAnimationReferenceBlock> AiAnimationReferencesList
        {
            get
            {
                return this.aiAnimationReferencesList;
            }
        }
        public TagBlockList<AiScriptReferenceBlock> AiScriptReferencesList
        {
            get
            {
                return this.aiScriptReferencesList;
            }
        }
        public TagBlockList<AiRecordingReferenceBlock> AiRecordingReferencesList
        {
            get
            {
                return this.aiRecordingReferencesList;
            }
        }
        public TagBlockList<AiConversationBlock> AiConversationsList
        {
            get
            {
                return this.aiConversationsList;
            }
        }
        public TagBlockList<HsScriptsBlock> ScriptsList
        {
            get
            {
                return this.scriptsList;
            }
        }
        public TagBlockList<HsGlobalsBlock> GlobalsList
        {
            get
            {
                return this.globalsList;
            }
        }
        public TagBlockList<HsReferencesBlock> ReferencesList
        {
            get
            {
                return this.referencesList;
            }
        }
        public TagBlockList<HsSourceFilesBlock> SourceFilesList
        {
            get
            {
                return this.sourceFilesList;
            }
        }
        public TagBlockList<CsScriptDataBlock> ScriptingDataList
        {
            get
            {
                return this.scriptingDataList;
            }
        }
        public TagBlockList<ScenarioCutsceneFlagBlock> CutsceneFlagsList
        {
            get
            {
                return this.cutsceneFlagsList;
            }
        }
        public TagBlockList<ScenarioCutsceneCameraPointBlock> CutsceneCameraPointsList
        {
            get
            {
                return this.cutsceneCameraPointsList;
            }
        }
        public TagBlockList<ScenarioCutsceneTitleBlock> CutsceneTitlesList
        {
            get
            {
                return this.cutsceneTitlesList;
            }
        }
        public TagBlockList<ScenarioStructureBspReferenceBlock> StructureBspsList
        {
            get
            {
                return this.structureBspsList;
            }
        }
        public TagBlockList<ScenarioResourcesBlock> ScenarioResourcesList
        {
            get
            {
                return this.scenarioResourcesList;
            }
        }
        public TagBlockList<OldUnusedStrucurePhysicsBlock> ScenarioResourcesList1
        {
            get
            {
                return this.scenarioResourcesList1;
            }
        }
        public TagBlockList<HsUnitSeatBlock> HsUnitSeatsList
        {
            get
            {
                return this.hsUnitSeatsList;
            }
        }
        public TagBlockList<ScenarioKillTriggerVolumesBlock> ScenarioKillTriggersList
        {
            get
            {
                return this.scenarioKillTriggersList;
            }
        }
        public TagBlockList<SyntaxDatumBlock> HsSyntaxDatumsList
        {
            get
            {
                return this.hsSyntaxDatumsList;
            }
        }
        public TagBlockList<OrdersBlock> OrdersList
        {
            get
            {
                return this.ordersList;
            }
        }
        public TagBlockList<TriggersBlock> TriggersList
        {
            get
            {
                return this.triggersList;
            }
        }
        public TagBlockList<StructureBspBackgroundSoundPaletteBlock> BackgroundSoundPaletteList
        {
            get
            {
                return this.backgroundSoundPaletteList;
            }
        }
        public TagBlockList<StructureBspSoundEnvironmentPaletteBlock> SoundEnvironmentPaletteList
        {
            get
            {
                return this.soundEnvironmentPaletteList;
            }
        }
        public TagBlockList<StructureBspWeatherPaletteBlock> WeatherPaletteList
        {
            get
            {
                return this.weatherPaletteList;
            }
        }
        public TagBlockList<GNullBlock> EmptyStringList
        {
            get
            {
                return this.emptyStringList;
            }
        }
        public TagBlockList<ScenarioClusterDataBlock> ScenarioClusterDataList
        {
            get
            {
                return this.scenarioClusterDataList;
            }
        }
        public TagBlockList<ScenarioSpawnDataBlock> SpawnDataList
        {
            get
            {
                return this.spawnDataList;
            }
        }
        public TagBlockList<ScenarioCrateBlock> CratesList
        {
            get
            {
                return this.cratesList;
            }
        }
        public TagBlockList<ScenarioCratePaletteBlock> CratesPaletteList
        {
            get
            {
                return this.cratesPaletteList;
            }
        }
        public TagBlockList<ScenarioAtmosphericFogPalette> AtmosphericFogPaletteList
        {
            get
            {
                return this.atmosphericFogPaletteList;
            }
        }
        public TagBlockList<ScenarioPlanarFogPalette> PlanarFogPaletteList
        {
            get
            {
                return this.planarFogPaletteList;
            }
        }
        public TagBlockList<FlockDefinitionBlock> FlocksList
        {
            get
            {
                return this.flocksList;
            }
        }
        public TagBlockList<DecoratorPlacementDefinitionBlock> DecoratorsList
        {
            get
            {
                return this.decoratorsList;
            }
        }
        public TagBlockList<ScenarioCreatureBlock> CreaturesList
        {
            get
            {
                return this.creaturesList;
            }
        }
        public TagBlockList<ScenarioCreaturePaletteBlock> CreaturesPaletteList
        {
            get
            {
                return this.creaturesPaletteList;
            }
        }
        public TagBlockList<ScenarioDecoratorSetPaletteEntryBlock> DecoratorsPaletteList
        {
            get
            {
                return this.decoratorsPaletteList;
            }
        }
        public TagBlockList<ScenarioBspSwitchTransitionVolumeBlock> BspTransitionVolumesList
        {
            get
            {
                return this.bspTransitionVolumesList;
            }
        }
        public TagBlockList<ScenarioStructureBspSphericalHarmonicLightingBlock> StructureBspLightingList
        {
            get
            {
                return this.structureBspLightingList;
            }
        }
        public TagBlockList<GScenarioEditorFolderBlock> EditorFoldersList
        {
            get
            {
                return this.editorFoldersList;
            }
        }
        public TagBlockList<ScenarioLevelDataBlock> LevelDataList
        {
            get
            {
                return this.levelDataList;
            }
        }
        public TagBlockList<AiScenarioMissionDialogueBlock> MissionDialogueList
        {
            get
            {
                return this.missionDialogueList;
            }
        }
        public TagBlockList<ScenarioInterpolatorBlock> InterpolatorsList
        {
            get
            {
                return this.interpolatorsList;
            }
        }
        public TagBlockList<ScenarioScreenEffectReferenceBlock> ScreenEffectReferencesList
        {
            get
            {
                return this.screenEffectReferencesList;
            }
        }
        public TagBlockList<ScenarioSimulationDefinitionTableBlock> SimulationDefinitionTableList
        {
            get
            {
                return this.simulationDefinitionTableList;
            }
        }
        public override int Size
        {
            get
            {
                return 1456;
            }
        }
        public override void Initialize()
        {
            this.editorScenarioDataList.Clear();
            this.scriptSyntaxDataList.Clear();
            this.scriptStringDataList.Clear();
            this.skiesList.Clear();
            this.@childScenariosList.Clear();
            this.predictedResourcesList.Clear();
            this.functionsList.Clear();
            this.commentsList.Clear();
            this.list.Clear();
            this.objectNamesList.Clear();
            this.sceneryList.Clear();
            this.sceneryPaletteList.Clear();
            this.bipedsList.Clear();
            this.bipedPaletteList.Clear();
            this.vehiclesList.Clear();
            this.vehiclePaletteList.Clear();
            this.equipmentList.Clear();
            this.equipmentPaletteList.Clear();
            this.weaponsList.Clear();
            this.weaponPaletteList.Clear();
            this.deviceGroupsList.Clear();
            this.machinesList.Clear();
            this.machinePaletteList.Clear();
            this.controlsList.Clear();
            this.controlPaletteList.Clear();
            this.lightFixturesList.Clear();
            this.lightFixturesPaletteList.Clear();
            this.soundSceneryList.Clear();
            this.soundSceneryPaletteList.Clear();
            this.lightVolumesList.Clear();
            this.lightVolumesPaletteList.Clear();
            this.playerStartingProfileList.Clear();
            this.playerStartingLocationsList.Clear();
            this.killTriggerVolumesList.Clear();
            this.recordedAnimationsList.Clear();
            this.netgameFlagsList.Clear();
            this.netgameEquipmentList.Clear();
            this.startingEquipmentList.Clear();
            this.bspSwitchTriggerVolumesList.Clear();
            this.decalsList.Clear();
            this.decalsPaletteList.Clear();
            this.detailObjectCollectionPaletteList.Clear();
            this.stylePaletteList.Clear();
            this.squadGroupsList.Clear();
            this.squadsList.Clear();
            this.zonesList.Clear();
            this.missionScenesList.Clear();
            this.characterPaletteList.Clear();
            this.aiPathfindingDataList.Clear();
            this.aiAnimationReferencesList.Clear();
            this.aiScriptReferencesList.Clear();
            this.aiRecordingReferencesList.Clear();
            this.aiConversationsList.Clear();
            this.scriptsList.Clear();
            this.globalsList.Clear();
            this.referencesList.Clear();
            this.sourceFilesList.Clear();
            this.scriptingDataList.Clear();
            this.cutsceneFlagsList.Clear();
            this.cutsceneCameraPointsList.Clear();
            this.cutsceneTitlesList.Clear();
            this.structureBspsList.Clear();
            this.scenarioResourcesList.Clear();
            this.scenarioResourcesList1.Clear();
            this.hsUnitSeatsList.Clear();
            this.scenarioKillTriggersList.Clear();
            this.hsSyntaxDatumsList.Clear();
            this.ordersList.Clear();
            this.triggersList.Clear();
            this.backgroundSoundPaletteList.Clear();
            this.soundEnvironmentPaletteList.Clear();
            this.weatherPaletteList.Clear();
            this.emptyStringList.Clear();
            this.scenarioClusterDataList.Clear();
            this.spawnDataList.Clear();
            this.cratesList.Clear();
            this.cratesPaletteList.Clear();
            this.atmosphericFogPaletteList.Clear();
            this.planarFogPaletteList.Clear();
            this.flocksList.Clear();
            this.decoratorsList.Clear();
            this.creaturesList.Clear();
            this.creaturesPaletteList.Clear();
            this.decoratorsPaletteList.Clear();
            this.bspTransitionVolumesList.Clear();
            this.structureBspLightingList.Clear();
            this.editorFoldersList.Clear();
            this.levelDataList.Clear();
            this.missionDialogueList.Clear();
            this.interpolatorsList.Clear();
            this.screenEffectReferencesList.Clear();
            this.simulationDefinitionTableList.Clear();
            this.DoNotUse = TagReference.Null;
            this.Skies = TagBlock.Zero;
            this.Type = ((TypeOptions)(0));
            this.Flags = ((FlagsOptions)(0));
            this.@childScenarios = TagBlock.Zero;
            this.LocalNorth = 0;
            this.PredictedResources = TagBlock.Zero;
            this.Functions = TagBlock.Zero;
            this.EditorScenarioData = TagBlock.Zero;
            this.Comments = TagBlock.Zero;
            this.EmptyString = TagBlock.Zero;
            this.ObjectNames = TagBlock.Zero;
            this.Scenery = TagBlock.Zero;
            this.SceneryPalette = TagBlock.Zero;
            this.Bipeds = TagBlock.Zero;
            this.BipedPalette = TagBlock.Zero;
            this.Vehicles = TagBlock.Zero;
            this.VehiclePalette = TagBlock.Zero;
            this.Equipment = TagBlock.Zero;
            this.EquipmentPalette = TagBlock.Zero;
            this.Weapons = TagBlock.Zero;
            this.WeaponPalette = TagBlock.Zero;
            this.DeviceGroups = TagBlock.Zero;
            this.Machines = TagBlock.Zero;
            this.MachinePalette = TagBlock.Zero;
            this.Controls = TagBlock.Zero;
            this.ControlPalette = TagBlock.Zero;
            this.LightFixtures = TagBlock.Zero;
            this.LightFixturesPalette = TagBlock.Zero;
            this.SoundScenery = TagBlock.Zero;
            this.SoundSceneryPalette = TagBlock.Zero;
            this.LightVolumes = TagBlock.Zero;
            this.LightVolumesPalette = TagBlock.Zero;
            this.PlayerStartingProfile = TagBlock.Zero;
            this.PlayerStartingLocations = TagBlock.Zero;
            this.KillTriggerVolumes = TagBlock.Zero;
            this.RecordedAnimations = TagBlock.Zero;
            this.NetgameFlags = TagBlock.Zero;
            this.NetgameEquipment = TagBlock.Zero;
            this.StartingEquipment = TagBlock.Zero;
            this.BspSwitchTriggerVolumes = TagBlock.Zero;
            this.Decals = TagBlock.Zero;
            this.DecalsPalette = TagBlock.Zero;
            this.DetailObjectCollectionPalette = TagBlock.Zero;
            this.StylePalette = TagBlock.Zero;
            this.SquadGroups = TagBlock.Zero;
            this.Squads = TagBlock.Zero;
            this.Zones = TagBlock.Zero;
            this.MissionScenes = TagBlock.Zero;
            this.CharacterPalette = TagBlock.Zero;
            this.AiPathfindingData = TagBlock.Zero;
            this.AiAnimationReferences = TagBlock.Zero;
            this.AiScriptReferences = TagBlock.Zero;
            this.AiRecordingReferences = TagBlock.Zero;
            this.AiConversations = TagBlock.Zero;
            this.ScriptSyntaxData = TagBlock.Zero;
            this.ScriptStringData = TagBlock.Zero;
            this.Scripts = TagBlock.Zero;
            this.Globals = TagBlock.Zero;
            this.References = TagBlock.Zero;
            this.SourceFiles = TagBlock.Zero;
            this.ScriptingData = TagBlock.Zero;
            this.CutsceneFlags = TagBlock.Zero;
            this.CutsceneCameraPoints = TagBlock.Zero;
            this.CutsceneTitles = TagBlock.Zero;
            this.CustomObjectNames = TagReference.Null;
            this.ChapterTitleText = TagReference.Null;
            this.HudMessages = TagReference.Null;
            this.StructureBsps = TagBlock.Zero;
            this.ScenarioResources = TagBlock.Zero;
            this.ScenarioResources1 = TagBlock.Zero;
            this.HsUnitSeats = TagBlock.Zero;
            this.ScenarioKillTriggers = TagBlock.Zero;
            this.HsSyntaxDatums = TagBlock.Zero;
            this.Orders = TagBlock.Zero;
            this.Triggers = TagBlock.Zero;
            this.BackgroundSoundPalette = TagBlock.Zero;
            this.SoundEnvironmentPalette = TagBlock.Zero;
            this.WeatherPalette = TagBlock.Zero;
            this.EmptyString1 = TagBlock.Zero;
            this.EmptyString2 = TagBlock.Zero;
            this.EmptyString3 = TagBlock.Zero;
            this.EmptyString4 = TagBlock.Zero;
            this.EmptyString5 = TagBlock.Zero;
            this.ScenarioClusterData = TagBlock.Zero;
            this.ObjectSalts = new ObjectSaltsElement[32];
            this.SpawnData = TagBlock.Zero;
            this.SoundEffectCollection = TagReference.Null;
            this.Crates = TagBlock.Zero;
            this.CratesPalette = TagBlock.Zero;
            this.GlobalLighting = TagReference.Null;
            this.AtmosphericFogPalette = TagBlock.Zero;
            this.PlanarFogPalette = TagBlock.Zero;
            this.Flocks = TagBlock.Zero;
            this.Subtitles = TagReference.Null;
            this.Decorators = TagBlock.Zero;
            this.Creatures = TagBlock.Zero;
            this.CreaturesPalette = TagBlock.Zero;
            this.DecoratorsPalette = TagBlock.Zero;
            this.BspTransitionVolumes = TagBlock.Zero;
            this.StructureBspLighting = TagBlock.Zero;
            this.EditorFolders = TagBlock.Zero;
            this.LevelData = TagBlock.Zero;
            this.TerritoryLocationNames = TagReference.Null;
            this.EmptyString6 = new byte[8];
            this.MissionDialogue = TagBlock.Zero;
            this.Objectives = TagReference.Null;
            this.Interpolators = TagBlock.Zero;
            this.SharedReferences = TagBlock.Zero;
            this.ScreenEffectReferences = TagBlock.Zero;
            this.SimulationDefinitionTable = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.DoNotUse = reader.Read<TagReference>();
            this.Skies = reader.ReadInt64();
            this.skiesList.Read(reader, this.Skies);
            this.Type = ((TypeOptions)(reader.ReadInt16()));
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.@childScenarios = reader.ReadInt64();
            this.@childScenariosList.Read(reader, this.@childScenarios);
            this.LocalNorth = reader.ReadSingle();
            this.PredictedResources = reader.ReadInt64();
            this.predictedResourcesList.Read(reader, this.PredictedResources);
            this.Functions = reader.ReadInt64();
            this.functionsList.Read(reader, this.Functions);
            this.EditorScenarioData = reader.ReadInt64();
            this.editorScenarioDataList.Read(reader, this.EditorScenarioData);
            this.Comments = reader.ReadInt64();
            this.commentsList.Read(reader, this.Comments);
            this.EmptyString = reader.ReadInt64();
            this.list.Read(reader, this.EmptyString);
            this.ObjectNames = reader.ReadInt64();
            this.objectNamesList.Read(reader, this.ObjectNames);
            this.Scenery = reader.ReadInt64();
            this.sceneryList.Read(reader, this.Scenery);
            this.SceneryPalette = reader.ReadInt64();
            this.sceneryPaletteList.Read(reader, this.SceneryPalette);
            this.Bipeds = reader.ReadInt64();
            this.bipedsList.Read(reader, this.Bipeds);
            this.BipedPalette = reader.ReadInt64();
            this.bipedPaletteList.Read(reader, this.BipedPalette);
            this.Vehicles = reader.ReadInt64();
            this.vehiclesList.Read(reader, this.Vehicles);
            this.VehiclePalette = reader.ReadInt64();
            this.vehiclePaletteList.Read(reader, this.VehiclePalette);
            this.Equipment = reader.ReadInt64();
            this.equipmentList.Read(reader, this.Equipment);
            this.EquipmentPalette = reader.ReadInt64();
            this.equipmentPaletteList.Read(reader, this.EquipmentPalette);
            this.Weapons = reader.ReadInt64();
            this.weaponsList.Read(reader, this.Weapons);
            this.WeaponPalette = reader.ReadInt64();
            this.weaponPaletteList.Read(reader, this.WeaponPalette);
            this.DeviceGroups = reader.ReadInt64();
            this.deviceGroupsList.Read(reader, this.DeviceGroups);
            this.Machines = reader.ReadInt64();
            this.machinesList.Read(reader, this.Machines);
            this.MachinePalette = reader.ReadInt64();
            this.machinePaletteList.Read(reader, this.MachinePalette);
            this.Controls = reader.ReadInt64();
            this.controlsList.Read(reader, this.Controls);
            this.ControlPalette = reader.ReadInt64();
            this.controlPaletteList.Read(reader, this.ControlPalette);
            this.LightFixtures = reader.ReadInt64();
            this.lightFixturesList.Read(reader, this.LightFixtures);
            this.LightFixturesPalette = reader.ReadInt64();
            this.lightFixturesPaletteList.Read(reader, this.LightFixturesPalette);
            this.SoundScenery = reader.ReadInt64();
            this.soundSceneryList.Read(reader, this.SoundScenery);
            this.SoundSceneryPalette = reader.ReadInt64();
            this.soundSceneryPaletteList.Read(reader, this.SoundSceneryPalette);
            this.LightVolumes = reader.ReadInt64();
            this.lightVolumesList.Read(reader, this.LightVolumes);
            this.LightVolumesPalette = reader.ReadInt64();
            this.lightVolumesPaletteList.Read(reader, this.LightVolumesPalette);
            this.PlayerStartingProfile = reader.ReadInt64();
            this.playerStartingProfileList.Read(reader, this.PlayerStartingProfile);
            this.PlayerStartingLocations = reader.ReadInt64();
            this.playerStartingLocationsList.Read(reader, this.PlayerStartingLocations);
            this.KillTriggerVolumes = reader.ReadInt64();
            this.killTriggerVolumesList.Read(reader, this.KillTriggerVolumes);
            this.RecordedAnimations = reader.ReadInt64();
            this.recordedAnimationsList.Read(reader, this.RecordedAnimations);
            this.NetgameFlags = reader.ReadInt64();
            this.netgameFlagsList.Read(reader, this.NetgameFlags);
            this.NetgameEquipment = reader.ReadInt64();
            this.netgameEquipmentList.Read(reader, this.NetgameEquipment);
            this.StartingEquipment = reader.ReadInt64();
            this.startingEquipmentList.Read(reader, this.StartingEquipment);
            this.BspSwitchTriggerVolumes = reader.ReadInt64();
            this.bspSwitchTriggerVolumesList.Read(reader, this.BspSwitchTriggerVolumes);
            this.Decals = reader.ReadInt64();
            this.decalsList.Read(reader, this.Decals);
            this.DecalsPalette = reader.ReadInt64();
            this.decalsPaletteList.Read(reader, this.DecalsPalette);
            this.DetailObjectCollectionPalette = reader.ReadInt64();
            this.detailObjectCollectionPaletteList.Read(reader, this.DetailObjectCollectionPalette);
            this.StylePalette = reader.ReadInt64();
            this.stylePaletteList.Read(reader, this.StylePalette);
            this.SquadGroups = reader.ReadInt64();
            this.squadGroupsList.Read(reader, this.SquadGroups);
            this.Squads = reader.ReadInt64();
            this.squadsList.Read(reader, this.Squads);
            this.Zones = reader.ReadInt64();
            this.zonesList.Read(reader, this.Zones);
            this.MissionScenes = reader.ReadInt64();
            this.missionScenesList.Read(reader, this.MissionScenes);
            this.CharacterPalette = reader.ReadInt64();
            this.characterPaletteList.Read(reader, this.CharacterPalette);
            this.AiPathfindingData = reader.ReadInt64();
            this.aiPathfindingDataList.Read(reader, this.AiPathfindingData);
            this.AiAnimationReferences = reader.ReadInt64();
            this.aiAnimationReferencesList.Read(reader, this.AiAnimationReferences);
            this.AiScriptReferences = reader.ReadInt64();
            this.aiScriptReferencesList.Read(reader, this.AiScriptReferences);
            this.AiRecordingReferences = reader.ReadInt64();
            this.aiRecordingReferencesList.Read(reader, this.AiRecordingReferences);
            this.AiConversations = reader.ReadInt64();
            this.aiConversationsList.Read(reader, this.AiConversations);
            this.ScriptSyntaxData = reader.ReadInt64();
            this.scriptSyntaxDataList.Read(reader, this.ScriptSyntaxData);
            this.ScriptStringData = reader.ReadInt64();
            this.scriptStringDataList.Read(reader, this.ScriptStringData);
            this.Scripts = reader.ReadInt64();
            this.scriptsList.Read(reader, this.Scripts);
            this.Globals = reader.ReadInt64();
            this.globalsList.Read(reader, this.Globals);
            this.References = reader.ReadInt64();
            this.referencesList.Read(reader, this.References);
            this.SourceFiles = reader.ReadInt64();
            this.sourceFilesList.Read(reader, this.SourceFiles);
            this.ScriptingData = reader.ReadInt64();
            this.scriptingDataList.Read(reader, this.ScriptingData);
            this.CutsceneFlags = reader.ReadInt64();
            this.cutsceneFlagsList.Read(reader, this.CutsceneFlags);
            this.CutsceneCameraPoints = reader.ReadInt64();
            this.cutsceneCameraPointsList.Read(reader, this.CutsceneCameraPoints);
            this.CutsceneTitles = reader.ReadInt64();
            this.cutsceneTitlesList.Read(reader, this.CutsceneTitles);
            this.CustomObjectNames = reader.Read<TagReference>();
            this.ChapterTitleText = reader.Read<TagReference>();
            this.HudMessages = reader.Read<TagReference>();
            this.StructureBsps = reader.ReadInt64();
            this.structureBspsList.Read(reader, this.StructureBsps);
            this.ScenarioResources = reader.ReadInt64();
            this.scenarioResourcesList.Read(reader, this.ScenarioResources);
            this.ScenarioResources1 = reader.ReadInt64();
            this.scenarioResourcesList1.Read(reader, this.ScenarioResources1);
            this.HsUnitSeats = reader.ReadInt64();
            this.hsUnitSeatsList.Read(reader, this.HsUnitSeats);
            this.ScenarioKillTriggers = reader.ReadInt64();
            this.scenarioKillTriggersList.Read(reader, this.ScenarioKillTriggers);
            this.HsSyntaxDatums = reader.ReadInt64();
            this.hsSyntaxDatumsList.Read(reader, this.HsSyntaxDatums);
            this.Orders = reader.ReadInt64();
            this.ordersList.Read(reader, this.Orders);
            this.Triggers = reader.ReadInt64();
            this.triggersList.Read(reader, this.Triggers);
            this.BackgroundSoundPalette = reader.ReadInt64();
            this.backgroundSoundPaletteList.Read(reader, this.BackgroundSoundPalette);
            this.SoundEnvironmentPalette = reader.ReadInt64();
            this.soundEnvironmentPaletteList.Read(reader, this.SoundEnvironmentPalette);
            this.WeatherPalette = reader.ReadInt64();
            this.weatherPaletteList.Read(reader, this.WeatherPalette);
            this.EmptyString1 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString1);
            this.EmptyString2 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString2);
            this.EmptyString3 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString3);
            this.EmptyString4 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString4);
            this.EmptyString5 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString5);
            this.ScenarioClusterData = reader.ReadInt64();
            this.scenarioClusterDataList.Read(reader, this.ScenarioClusterData);
            this.SpawnData = reader.ReadInt64();
            this.spawnDataList.Read(reader, this.SpawnData);
            this.SoundEffectCollection = reader.Read<TagReference>();
            this.Crates = reader.ReadInt64();
            this.cratesList.Read(reader, this.Crates);
            this.CratesPalette = reader.ReadInt64();
            this.cratesPaletteList.Read(reader, this.CratesPalette);
            this.GlobalLighting = reader.Read<TagReference>();
            this.AtmosphericFogPalette = reader.ReadInt64();
            this.atmosphericFogPaletteList.Read(reader, this.AtmosphericFogPalette);
            this.PlanarFogPalette = reader.ReadInt64();
            this.planarFogPaletteList.Read(reader, this.PlanarFogPalette);
            this.Flocks = reader.ReadInt64();
            this.flocksList.Read(reader, this.Flocks);
            this.Subtitles = reader.Read<TagReference>();
            this.Decorators = reader.ReadInt64();
            this.decoratorsList.Read(reader, this.Decorators);
            this.Creatures = reader.ReadInt64();
            this.creaturesList.Read(reader, this.Creatures);
            this.CreaturesPalette = reader.ReadInt64();
            this.creaturesPaletteList.Read(reader, this.CreaturesPalette);
            this.DecoratorsPalette = reader.ReadInt64();
            this.decoratorsPaletteList.Read(reader, this.DecoratorsPalette);
            this.BspTransitionVolumes = reader.ReadInt64();
            this.bspTransitionVolumesList.Read(reader, this.BspTransitionVolumes);
            this.StructureBspLighting = reader.ReadInt64();
            this.structureBspLightingList.Read(reader, this.StructureBspLighting);
            this.EditorFolders = reader.ReadInt64();
            this.editorFoldersList.Read(reader, this.EditorFolders);
            this.LevelData = reader.ReadInt64();
            this.levelDataList.Read(reader, this.LevelData);
            this.TerritoryLocationNames = reader.Read<TagReference>();
            this.EmptyString6 = reader.ReadBytes(8);
            this.MissionDialogue = reader.ReadInt64();
            this.missionDialogueList.Read(reader, this.MissionDialogue);
            this.Objectives = reader.Read<TagReference>();
            this.Interpolators = reader.ReadInt64();
            this.interpolatorsList.Read(reader, this.Interpolators);
            this.SharedReferences = reader.ReadInt64();
            this.interpolatorsList.Read(reader, this.SharedReferences);
            this.ScreenEffectReferences = reader.ReadInt64();
            this.screenEffectReferencesList.Read(reader, this.ScreenEffectReferences);
            this.SimulationDefinitionTable = reader.ReadInt64();
            this.simulationDefinitionTableList.Read(reader, this.SimulationDefinitionTable);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ScenarioSkyReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("Sky", typeof(TagReference))]
            public TagReference Sky;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Sky = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Sky = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(32, 4)]
        public sealed class ScenarioChildScenarioBlock : AbideTagBlock
        {
            [FieldAttribute("Child Scenario", typeof(TagReference))]
            public TagReference ChildScenario;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.ChildScenario = TagReference.Null;
                this.EmptyString = new byte[16];
            }
            public override void Read(BinaryReader reader)
            {
                this.ChildScenario = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(16);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class PredictedResourceBlock : AbideTagBlock
        {
            [FieldAttribute("type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("resource index", typeof(Int16))]
            public Int16 ResourceIndex;
            [FieldAttribute("tag index", typeof(Int32))]
            public Int32 TagIndex;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.Type = ((TypeOptions)(0));
                this.ResourceIndex = 0;
                this.TagIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.ResourceIndex = reader.ReadInt16();
                this.TagIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TypeOptions : Int16
            {
                Bitmap = 0,
                Sound = 1,
                RenderModelGeometry = 2,
                ClusterGeometry = 3,
                ClusterInstancedGeometry = 4,
                LightmapGeometryObjectBuckets = 5,
                LightmapGeometryInstanceBuckets = 6,
                LightmapClusterBitmaps = 7,
                LightmapInstanceBitmaps = 8,
            }
        }
        [FieldSetAttribute(120, 4)]
        public sealed class ScenarioFunctionBlock : AbideTagBlock
        {
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Period:Seconds#Period for above function (lower values make function oscillate qu" +
                "ickly; higher values make it oscillate slowly).", typeof(Single))]
            public Single Period;
            [FieldAttribute("Scale Period By#Multiply this function by above period", typeof(Int16))]
            public Int16 ScalePeriodBy;
            [FieldAttribute("Function", typeof(FunctionOptions))]
            [OptionsAttribute(typeof(FunctionOptions), false)]
            public FunctionOptions Function;
            [FieldAttribute("Scale Function By#Multiply this function by result of above function.", typeof(Int16))]
            public Int16 ScaleFunctionBy;
            [FieldAttribute("Wobble Function#Curve used for wobble.", typeof(WobbleFunctionOptions))]
            [OptionsAttribute(typeof(WobbleFunctionOptions), false)]
            public WobbleFunctionOptions WobbleFunction;
            [FieldAttribute("Wobble Period:Seconds#Time it takes for magnitude of this function to complete a " +
                "wobble.", typeof(Single))]
            public Single WobblePeriod;
            [FieldAttribute("Wobble Magnitude:Percent#Amount of random wobble in the magnitude.", typeof(Single))]
            public Single WobbleMagnitude;
            [FieldAttribute("Square Wave Threshold#If non-zero, all values above square wave threshold are sna" +
                "pped to 1.0, and all values below it are snapped to 0.0 to create a square wave." +
                "", typeof(Single))]
            public Single SquareWaveThreshold;
            [FieldAttribute("Step Count#Number of discrete values to snap to (e.g., step count of 5 snaps func" +
                "tion to 0.00, 0.25, 0.50,0.75, or 1.00).", typeof(Int16))]
            public Int16 StepCount;
            [FieldAttribute("Map to", typeof(MapToOptions))]
            [OptionsAttribute(typeof(MapToOptions), false)]
            public MapToOptions MapTo;
            [FieldAttribute("Sawtooth Count#Number of times this function should repeat (e.g., sawtooth count " +
                "of 5 gives function value of 1.0 at each of 0.25, 0.50, and 0.75, as well as at " +
                "1.0).", typeof(Int16))]
            public Int16 SawtoothCount;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("Scale Result by#Multiply this function (e.g., from a weapon, vehicle) final resul" +
                "t of all of the above math.", typeof(Int16))]
            public Int16 ScaleResultBy;
            [FieldAttribute("Bounds Mode#Controls how bounds, below, are used.", typeof(BoundsModeOptions))]
            [OptionsAttribute(typeof(BoundsModeOptions), false)]
            public BoundsModeOptions BoundsMode;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("Turn Off with#If specified function is off, so is this function.", typeof(Int16))]
            public Int16 TurnOffWith;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString4;
            public override int Size
            {
                get
                {
                    return 120;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.Name = String32.Empty;
                this.Period = 0;
                this.ScalePeriodBy = 0;
                this.Function = ((FunctionOptions)(0));
                this.ScaleFunctionBy = 0;
                this.WobbleFunction = ((WobbleFunctionOptions)(0));
                this.WobblePeriod = 0;
                this.WobbleMagnitude = 0;
                this.SquareWaveThreshold = 0;
                this.StepCount = 0;
                this.MapTo = ((MapToOptions)(0));
                this.SawtoothCount = 0;
                this.EmptyString = new byte[2];
                this.ScaleResultBy = 0;
                this.BoundsMode = ((BoundsModeOptions)(0));
                this.EmptyString1 = new byte[4];
                this.EmptyString2 = new byte[2];
                this.TurnOffWith = 0;
                this.EmptyString3 = new byte[16];
                this.EmptyString4 = new byte[16];
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Name = reader.Read<String32>();
                this.Period = reader.ReadSingle();
                this.ScalePeriodBy = reader.ReadInt16();
                this.Function = ((FunctionOptions)(reader.ReadInt16()));
                this.ScaleFunctionBy = reader.ReadInt16();
                this.WobbleFunction = ((WobbleFunctionOptions)(reader.ReadInt16()));
                this.WobblePeriod = reader.ReadSingle();
                this.WobbleMagnitude = reader.ReadSingle();
                this.SquareWaveThreshold = reader.ReadSingle();
                this.StepCount = reader.ReadInt16();
                this.MapTo = ((MapToOptions)(reader.ReadInt16()));
                this.SawtoothCount = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.ScaleResultBy = reader.ReadInt16();
                this.BoundsMode = ((BoundsModeOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(4);
                this.EmptyString2 = reader.ReadBytes(2);
                this.TurnOffWith = reader.ReadInt16();
                this.EmptyString3 = reader.ReadBytes(16);
                this.EmptyString4 = reader.ReadBytes(16);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                Scripted = 1,
                Invert = 2,
                Additive = 4,
                AlwaysActive = 8,
            }
            public enum FunctionOptions : Int16
            {
                One = 0,
                Zero = 1,
                Cosine = 2,
                CosineVariablePeriod = 3,
                DiagonalWave = 4,
                DiagonalWaveVariablePeriod = 5,
                Slide = 6,
                SlideVariablePeriod = 7,
                Noise = 8,
                Jitter = 9,
                Wander = 10,
                Spark = 11,
            }
            public enum WobbleFunctionOptions : Int16
            {
                One = 0,
                Zero = 1,
                Cosine = 2,
                CosineVariablePeriod = 3,
                DiagonalWave = 4,
                DiagonalWaveVariablePeriod = 5,
                Slide = 6,
                SlideVariablePeriod = 7,
                Noise = 8,
                Jitter = 9,
                Wander = 10,
                Spark = 11,
            }
            public enum MapToOptions : Int16
            {
                Linear = 0,
                Early = 1,
                VeryEarly = 2,
                Late = 3,
                VeryLate = 4,
                Cosine = 5,
                One = 6,
                Zero = 7,
            }
            public enum BoundsModeOptions : Int16
            {
                Clip = 0,
                ClipAndNormalize = 1,
                ScaleToFit = 2,
            }
        }
        [FieldSetAttribute(304, 4)]
        public sealed class EditorCommentBlock : AbideTagBlock
        {
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute(")Type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Comment", typeof(String256))]
            public String256 Comment;
            public override int Size
            {
                get
                {
                    return 304;
                }
            }
            public override void Initialize()
            {
                this.Position = Vector3.Zero;
                this.Type = ((TypeOptions)(0));
                this.Name = String32.Empty;
                this.Comment = String256.Empty;
            }
            public override void Read(BinaryReader reader)
            {
                this.Position = reader.Read<Vector3>();
                this.Type = ((TypeOptions)(reader.ReadInt32()));
                this.Name = reader.Read<String32>();
                this.Comment = reader.Read<String256>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TypeOptions : Int32
            {
                Generic = 0,
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class DontUseMeScenarioEnvironmentObjectBlock : AbideTagBlock
        {
            [FieldAttribute("BSP*", typeof(Int16))]
            public Int16 Bsp;
            [FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString;
            [FieldAttribute("Unique ID*", typeof(Int32))]
            public Int32 UniqueId;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("Object Definition Tag*", typeof(Tag))]
            public Tag ObjectDefinitionTag;
            [FieldAttribute("Object*^", typeof(Int32))]
            public Int32 Object;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(44)]
            public Byte[] EmptyString2;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.Bsp = 0;
                this.EmptyString = 0;
                this.UniqueId = 0;
                this.EmptyString1 = new byte[4];
                this.ObjectDefinitionTag = "null";
                this.Object = 0;
                this.EmptyString2 = new byte[44];
            }
            public override void Read(BinaryReader reader)
            {
                this.Bsp = reader.ReadInt16();
                this.EmptyString = reader.ReadInt16();
                this.UniqueId = reader.ReadInt32();
                this.EmptyString1 = reader.ReadBytes(4);
                this.ObjectDefinitionTag = reader.Read<Tag>();
                this.Object = reader.ReadInt32();
                this.EmptyString2 = reader.ReadBytes(44);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class ScenarioObjectNamesBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString;
            [FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString1;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.EmptyString = 0;
                this.EmptyString1 = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.EmptyString = reader.ReadInt16();
                this.EmptyString1 = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(84, 4)]
        public sealed class ScenarioSceneryBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [FieldAttribute("Scenery Data", typeof(ScenarioSceneryDatumStructV4Block))]
            public ScenarioSceneryDatumStructV4Block SceneryData;
            public override int Size
            {
                get
                {
                    return 84;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.PermutationData = new ScenarioObjectPermutationStructBlock();
                this.SceneryData = new ScenarioSceneryDatumStructV4Block();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.PermutationData = reader.ReadDataStructure<ScenarioObjectPermutationStructBlock>();
                this.SceneryData = reader.ReadDataStructure<ScenarioSceneryDatumStructV4Block>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : AbideTagBlock
            {
                [FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [FieldAttribute("Active Change Colors", typeof(ActiveChangeColorsOptions))]
                [OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public ActiveChangeColorsOptions ActiveChangeColors;
                [FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.VariantName = StringId.Zero;
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(0));
                    this.PrimaryColor = ColorRgb.Zero;
                    this.SecondaryColor = ColorRgb.Zero;
                    this.TertiaryColor = ColorRgb.Zero;
                    this.QuaternaryColor = ColorRgb.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.VariantName = reader.ReadInt32();
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(reader.ReadInt32()));
                    this.PrimaryColor = reader.Read<ColorRgb>();
                    this.SecondaryColor = reader.Read<ColorRgb>();
                    this.TertiaryColor = reader.Read<ColorRgb>();
                    this.QuaternaryColor = reader.Read<ColorRgb>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions : Int32
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class ScenarioSceneryDatumStructV4Block : AbideTagBlock
            {
                private TagBlockList<PathfindingObjectIndexListBlock> pathfindingReferencesList = new TagBlockList<PathfindingObjectIndexListBlock>(16);
                [FieldAttribute("Pathfinding Policy", typeof(PathfindingPolicyOptions))]
                [OptionsAttribute(typeof(PathfindingPolicyOptions), false)]
                public PathfindingPolicyOptions PathfindingPolicy;
                [FieldAttribute("Lightmapping Policy", typeof(LightmappingPolicyOptions))]
                [OptionsAttribute(typeof(LightmappingPolicyOptions), false)]
                public LightmappingPolicyOptions LightmappingPolicy;
                [FieldAttribute("Pathfinding References*", typeof(TagBlock))]
                [BlockAttribute("pathfinding_object_index_list_block", 16, typeof(PathfindingObjectIndexListBlock))]
                public TagBlock PathfindingReferences;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("Valid Multiplayer Games", typeof(ValidMultiplayerGamesOptions))]
                [OptionsAttribute(typeof(ValidMultiplayerGamesOptions), true)]
                public ValidMultiplayerGamesOptions ValidMultiplayerGames;
                public TagBlockList<PathfindingObjectIndexListBlock> PathfindingReferencesList
                {
                    get
                    {
                        return this.pathfindingReferencesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.pathfindingReferencesList.Clear();
                    this.PathfindingPolicy = ((PathfindingPolicyOptions)(0));
                    this.LightmappingPolicy = ((LightmappingPolicyOptions)(0));
                    this.PathfindingReferences = TagBlock.Zero;
                    this.EmptyString = new byte[2];
                    this.ValidMultiplayerGames = ((ValidMultiplayerGamesOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PathfindingPolicy = ((PathfindingPolicyOptions)(reader.ReadInt16()));
                    this.LightmappingPolicy = ((LightmappingPolicyOptions)(reader.ReadInt16()));
                    this.PathfindingReferences = reader.ReadInt64();
                    this.pathfindingReferencesList.Read(reader, this.PathfindingReferences);
                    this.EmptyString = reader.ReadBytes(2);
                    this.ValidMultiplayerGames = ((ValidMultiplayerGamesOptions)(reader.ReadInt16()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class PathfindingObjectIndexListBlock : AbideTagBlock
                {
                    [FieldAttribute("BSP Index", typeof(Int16))]
                    public Int16 BspIndex;
                    [FieldAttribute("Pathfinding Object Index", typeof(Int16))]
                    public Int16 PathfindingObjectIndex;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.BspIndex = 0;
                        this.PathfindingObjectIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BspIndex = reader.ReadInt16();
                        this.PathfindingObjectIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum PathfindingPolicyOptions : Int16
                {
                    TagDefault = 0,
                    PathfindingDynamic = 1,
                    PathfindingCutOut = 2,
                    PathfindingStatic = 3,
                    PathfindingNone = 4,
                }
                public enum LightmappingPolicyOptions : Int16
                {
                    TagDefault = 0,
                    Dynamic = 1,
                    PerVertex = 2,
                }
                public enum ValidMultiplayerGamesOptions : Int16
                {
                    CaptureTheFlag = 1,
                    Slayer = 2,
                    Oddball = 4,
                    KingOfTheHill = 8,
                    Juggernaut = 16,
                    Territories = 32,
                    Assault = 64,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioSceneryPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(120, 4)]
        public sealed class ScenarioBipedBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [FieldAttribute("Unit Data", typeof(ScenarioUnitStructBlock))]
            public ScenarioUnitStructBlock UnitData;
            public override int Size
            {
                get
                {
                    return 120;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.PermutationData = new ScenarioObjectPermutationStructBlock();
                this.UnitData = new ScenarioUnitStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.PermutationData = reader.ReadDataStructure<ScenarioObjectPermutationStructBlock>();
                this.UnitData = reader.ReadDataStructure<ScenarioUnitStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : AbideTagBlock
            {
                [FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [FieldAttribute("Active Change Colors", typeof(ActiveChangeColorsOptions))]
                [OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public ActiveChangeColorsOptions ActiveChangeColors;
                [FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.VariantName = StringId.Zero;
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(0));
                    this.PrimaryColor = ColorRgb.Zero;
                    this.SecondaryColor = ColorRgb.Zero;
                    this.TertiaryColor = ColorRgb.Zero;
                    this.QuaternaryColor = ColorRgb.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.VariantName = reader.ReadInt32();
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(reader.ReadInt32()));
                    this.PrimaryColor = reader.Read<ColorRgb>();
                    this.SecondaryColor = reader.Read<ColorRgb>();
                    this.TertiaryColor = reader.Read<ColorRgb>();
                    this.QuaternaryColor = reader.Read<ColorRgb>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions : Int32
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioUnitStructBlock : AbideTagBlock
            {
                [FieldAttribute("Body Vitality:[0,1]", typeof(Single))]
                public Single BodyVitality;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.BodyVitality = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.BodyVitality = reader.ReadSingle();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    Dead = 1,
                    Closed = 2,
                    NotEnterableByPlayer = 4,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioBipedPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(120, 4)]
        public sealed class ScenarioVehicleBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [FieldAttribute("Unit Data", typeof(ScenarioUnitStructBlock))]
            public ScenarioUnitStructBlock UnitData;
            public override int Size
            {
                get
                {
                    return 120;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.PermutationData = new ScenarioObjectPermutationStructBlock();
                this.UnitData = new ScenarioUnitStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.PermutationData = reader.ReadDataStructure<ScenarioObjectPermutationStructBlock>();
                this.UnitData = reader.ReadDataStructure<ScenarioUnitStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : AbideTagBlock
            {
                [FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [FieldAttribute("Active Change Colors", typeof(ActiveChangeColorsOptions))]
                [OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public ActiveChangeColorsOptions ActiveChangeColors;
                [FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.VariantName = StringId.Zero;
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(0));
                    this.PrimaryColor = ColorRgb.Zero;
                    this.SecondaryColor = ColorRgb.Zero;
                    this.TertiaryColor = ColorRgb.Zero;
                    this.QuaternaryColor = ColorRgb.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.VariantName = reader.ReadInt32();
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(reader.ReadInt32()));
                    this.PrimaryColor = reader.Read<ColorRgb>();
                    this.SecondaryColor = reader.Read<ColorRgb>();
                    this.TertiaryColor = reader.Read<ColorRgb>();
                    this.QuaternaryColor = reader.Read<ColorRgb>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions : Int32
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioUnitStructBlock : AbideTagBlock
            {
                [FieldAttribute("Body Vitality:[0,1]", typeof(Single))]
                public Single BodyVitality;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.BodyVitality = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.BodyVitality = reader.ReadSingle();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    Dead = 1,
                    Closed = 2,
                    NotEnterableByPlayer = 4,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioVehiclePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class ScenarioEquipmentBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Equipment Data", typeof(ScenarioEquipmentDatumStructBlock))]
            public ScenarioEquipmentDatumStructBlock EquipmentData;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.EquipmentData = new ScenarioEquipmentDatumStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.EquipmentData = reader.ReadDataStructure<ScenarioEquipmentDatumStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioEquipmentDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Equipment Flags", typeof(EquipmentFlagsOptions))]
                [OptionsAttribute(typeof(EquipmentFlagsOptions), true)]
                public EquipmentFlagsOptions EquipmentFlags;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.EquipmentFlags = ((EquipmentFlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.EquipmentFlags = ((EquipmentFlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum EquipmentFlagsOptions : Int32
                {
                    InitiallyAtRestDoesNotFall = 1,
                    Obsolete = 2,
                    DoesAccelerateMovesDueToExplosions = 4,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioEquipmentPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(92, 4)]
        public sealed class ScenarioWeaponBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [FieldAttribute("Weapon Data", typeof(ScenarioWeaponDatumStructBlock))]
            public ScenarioWeaponDatumStructBlock WeaponData;
            public override int Size
            {
                get
                {
                    return 92;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.PermutationData = new ScenarioObjectPermutationStructBlock();
                this.WeaponData = new ScenarioWeaponDatumStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.PermutationData = reader.ReadDataStructure<ScenarioObjectPermutationStructBlock>();
                this.WeaponData = reader.ReadDataStructure<ScenarioWeaponDatumStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : AbideTagBlock
            {
                [FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [FieldAttribute("Active Change Colors", typeof(ActiveChangeColorsOptions))]
                [OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public ActiveChangeColorsOptions ActiveChangeColors;
                [FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.VariantName = StringId.Zero;
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(0));
                    this.PrimaryColor = ColorRgb.Zero;
                    this.SecondaryColor = ColorRgb.Zero;
                    this.TertiaryColor = ColorRgb.Zero;
                    this.QuaternaryColor = ColorRgb.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.VariantName = reader.ReadInt32();
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(reader.ReadInt32()));
                    this.PrimaryColor = reader.Read<ColorRgb>();
                    this.SecondaryColor = reader.Read<ColorRgb>();
                    this.TertiaryColor = reader.Read<ColorRgb>();
                    this.QuaternaryColor = reader.Read<ColorRgb>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions : Int32
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioWeaponDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Rounds Left", typeof(Int16))]
                public Int16 RoundsLeft;
                [FieldAttribute("Rounds Loaded", typeof(Int16))]
                public Int16 RoundsLoaded;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.RoundsLeft = 0;
                    this.RoundsLoaded = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.RoundsLeft = reader.ReadInt16();
                    this.RoundsLoaded = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyAtRestDoesNotFall = 1,
                    Obsolete = 2,
                    DoesAccelerateMovesDueToExplosions = 4,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioWeaponPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class DeviceGroupBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Initial Value:[0,1]", typeof(Single))]
            public Single InitialValue;
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.InitialValue = 0;
                this.Flags = ((FlagsOptions)(0));
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.InitialValue = reader.ReadSingle();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                CanChangeOnlyOnce = 1,
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class ScenarioMachineBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [FieldAttribute("Machine Data", typeof(ScenarioMachineStructV3Block))]
            public ScenarioMachineStructV3Block MachineData;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.DeviceData = new ScenarioDeviceStructBlock();
                this.MachineData = new ScenarioMachineStructV3Block();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.DeviceData = reader.ReadDataStructure<ScenarioDeviceStructBlock>();
                this.MachineData = reader.ReadDataStructure<ScenarioMachineStructV3Block>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : AbideTagBlock
            {
                [FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PowerGroup = 0;
                    this.PositionGroup = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PowerGroup = reader.ReadInt16();
                    this.PositionGroup = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class ScenarioMachineStructV3Block : AbideTagBlock
            {
                private TagBlockList<PathfindingObjectIndexListBlock> pathfindingReferencesList = new TagBlockList<PathfindingObjectIndexListBlock>(16);
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Pathfinding References*", typeof(TagBlock))]
                [BlockAttribute("pathfinding_object_index_list_block", 16, typeof(PathfindingObjectIndexListBlock))]
                public TagBlock PathfindingReferences;
                public TagBlockList<PathfindingObjectIndexListBlock> PathfindingReferencesList
                {
                    get
                    {
                        return this.pathfindingReferencesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.pathfindingReferencesList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.PathfindingReferences = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.PathfindingReferences = reader.ReadInt64();
                    this.pathfindingReferencesList.Read(reader, this.PathfindingReferences);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class PathfindingObjectIndexListBlock : AbideTagBlock
                {
                    [FieldAttribute("BSP Index", typeof(Int16))]
                    public Int16 BspIndex;
                    [FieldAttribute("Pathfinding Object Index", typeof(Int16))]
                    public Int16 PathfindingObjectIndex;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.BspIndex = 0;
                        this.PathfindingObjectIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BspIndex = reader.ReadInt16();
                        this.PathfindingObjectIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int32
                {
                    DoesNotOperateAutomatically = 1,
                    OneSided = 2,
                    NeverAppearsLocked = 4,
                    OpenedByMeleeAttack = 8,
                    OneSidedForPlayer = 16,
                    DoesNotCloseAutomatically = 32,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioMachinePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class ScenarioControlBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [FieldAttribute("Control Data", typeof(ScenarioControlStructBlock))]
            public ScenarioControlStructBlock ControlData;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.DeviceData = new ScenarioDeviceStructBlock();
                this.ControlData = new ScenarioControlStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.DeviceData = reader.ReadDataStructure<ScenarioDeviceStructBlock>();
                this.ControlData = reader.ReadDataStructure<ScenarioControlStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : AbideTagBlock
            {
                [FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PowerGroup = 0;
                    this.PositionGroup = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PowerGroup = reader.ReadInt16();
                    this.PositionGroup = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioControlStructBlock : AbideTagBlock
            {
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("*DON\'T TOUCH THIS", typeof(Int16))]
                public Int16 DontTouchThis;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = ((FlagsOptions)(0));
                    this.DontTouchThis = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.DontTouchThis = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    UsableFromBothSides = 1,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioControlPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(88, 4)]
        public sealed class ScenarioLightFixtureBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [FieldAttribute("light_fixture data", typeof(ScenarioLightFixtureStructBlock))]
            public ScenarioLightFixtureStructBlock LightFixtureData;
            public override int Size
            {
                get
                {
                    return 88;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.DeviceData = new ScenarioDeviceStructBlock();
                this.LightFixtureData = new ScenarioLightFixtureStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.DeviceData = reader.ReadDataStructure<ScenarioDeviceStructBlock>();
                this.LightFixtureData = reader.ReadDataStructure<ScenarioLightFixtureStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : AbideTagBlock
            {
                [FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PowerGroup = 0;
                    this.PositionGroup = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PowerGroup = reader.ReadInt16();
                    this.PositionGroup = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ScenarioLightFixtureStructBlock : AbideTagBlock
            {
                [FieldAttribute("Color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                [FieldAttribute("Intensity", typeof(Single))]
                public Single Intensity;
                [FieldAttribute("Falloff Angle:Degrees", typeof(Single))]
                public Single FalloffAngle;
                [FieldAttribute("Cutoff Angle:Degrees", typeof(Single))]
                public Single CutoffAngle;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.Color = ColorRgbF.Zero;
                    this.Intensity = 0;
                    this.FalloffAngle = 0;
                    this.CutoffAngle = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Color = reader.Read<ColorRgbF>();
                    this.Intensity = reader.ReadSingle();
                    this.FalloffAngle = reader.ReadSingle();
                    this.CutoffAngle = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioLightFixturePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class ScenarioSoundSceneryBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("sound_scenery", typeof(SoundSceneryDatumStructBlock))]
            public SoundSceneryDatumStructBlock SoundScenery;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.SoundScenery = new SoundSceneryDatumStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.SoundScenery = reader.ReadDataStructure<SoundSceneryDatumStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(28, 4)]
            public sealed class SoundSceneryDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Volume Type", typeof(VolumeTypeOptions))]
                [OptionsAttribute(typeof(VolumeTypeOptions), false)]
                public VolumeTypeOptions VolumeType;
                [FieldAttribute("Height", typeof(Single))]
                public Single Height;
                [FieldAttribute("Override Outer Cone Gain:dB", typeof(Single))]
                public Single OverrideOuterConeGain;
                public override int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public override void Initialize()
                {
                    this.VolumeType = ((VolumeTypeOptions)(0));
                    this.Height = 0;
                    this.OverrideOuterConeGain = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.VolumeType = ((VolumeTypeOptions)(reader.ReadInt32()));
                    this.Height = reader.ReadSingle();
                    this.OverrideOuterConeGain = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum VolumeTypeOptions : Int32
                {
                    Sphere = 0,
                    VerticalCylinder = 1,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioSoundSceneryPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(336, 4)]
        public sealed class ScenarioLightBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [FieldAttribute("Light Data", typeof(ScenarioLightStructBlock))]
            public ScenarioLightStructBlock LightData;
            public override int Size
            {
                get
                {
                    return 336;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.DeviceData = new ScenarioDeviceStructBlock();
                this.LightData = new ScenarioLightStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.DeviceData = reader.ReadDataStructure<ScenarioDeviceStructBlock>();
                this.LightData = reader.ReadDataStructure<ScenarioLightStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : AbideTagBlock
            {
                [FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PowerGroup = 0;
                    this.PositionGroup = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PowerGroup = reader.ReadInt16();
                    this.PositionGroup = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioLightStructBlock : AbideTagBlock
            {
                [FieldAttribute("Type", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Lightmap Type", typeof(LightmapTypeOptions))]
                [OptionsAttribute(typeof(LightmapTypeOptions), false)]
                public LightmapTypeOptions LightmapType;
                [FieldAttribute("Lightmap Flags", typeof(LightmapFlagsOptions))]
                [OptionsAttribute(typeof(LightmapFlagsOptions), true)]
                public LightmapFlagsOptions LightmapFlags;
                [FieldAttribute("Lightmap Half Life", typeof(Single))]
                public Single LightmapHalfLife;
                [FieldAttribute("Lightmap Light Scale", typeof(Single))]
                public Single LightmapLightScale;
                [FieldAttribute("Target Point*", typeof(Vector3))]
                public Vector3 TargetPoint;
                [FieldAttribute("Width:World Units*", typeof(Single))]
                public Single Width;
                [FieldAttribute("Height Scale:World Units*", typeof(Single))]
                public Single HeightScale;
                [FieldAttribute("Field of View:Degrees*", typeof(Single))]
                public Single FieldOfView;
                [FieldAttribute("Falloff Distance:World Units*", typeof(Single))]
                public Single FalloffDistance;
                [FieldAttribute("Cutoff Distance:World Units (from Far Plane)*", typeof(Single))]
                public Single CutoffDistance;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.Type = ((TypeOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.LightmapType = ((LightmapTypeOptions)(0));
                    this.LightmapFlags = ((LightmapFlagsOptions)(0));
                    this.LightmapHalfLife = 0;
                    this.LightmapLightScale = 0;
                    this.TargetPoint = Vector3.Zero;
                    this.Width = 0;
                    this.HeightScale = 0;
                    this.FieldOfView = 0;
                    this.FalloffDistance = 0;
                    this.CutoffDistance = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.LightmapType = ((LightmapTypeOptions)(reader.ReadInt16()));
                    this.LightmapFlags = ((LightmapFlagsOptions)(reader.ReadInt16()));
                    this.LightmapHalfLife = reader.ReadSingle();
                    this.LightmapLightScale = reader.ReadSingle();
                    this.TargetPoint = reader.Read<Vector3>();
                    this.Width = reader.ReadSingle();
                    this.HeightScale = reader.ReadSingle();
                    this.FieldOfView = reader.ReadSingle();
                    this.FalloffDistance = reader.ReadSingle();
                    this.CutoffDistance = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Int16
                {
                    Sphere = 0,
                    Orthogonal = 1,
                    Projective = 2,
                    Pyramid = 3,
                }
                public enum FlagsOptions : Int16
                {
                    CustomGeometry = 1,
                    Unused = 2,
                    CinematicOnly = 4,
                }
                public enum LightmapTypeOptions : Int16
                {
                    UseLightTagSetting = 0,
                    DynamicOnly = 1,
                    DynamicWithLightmaps = 2,
                    LightmapsOnly = 3,
                }
                public enum LightmapFlagsOptions : Int16
                {
                    Unused = 1,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioLightPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(84, 4)]
        public sealed class ScenarioProfilesBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Starting Health Damage:[0,1]", typeof(Single))]
            public Single StartingHealthDamage;
            [FieldAttribute("Starting Shield Damage:[0,1]", typeof(Single))]
            public Single StartingShieldDamage;
            [FieldAttribute("Primary Weapon", typeof(TagReference))]
            public TagReference PrimaryWeapon;
            [FieldAttribute("Rounds Loaded", typeof(Int16))]
            public Int16 RoundsLoaded;
            [FieldAttribute("Rounds Total", typeof(Int16))]
            public Int16 RoundsTotal;
            [FieldAttribute("Secondary Weapon", typeof(TagReference))]
            public TagReference SecondaryWeapon;
            [FieldAttribute("Rounds Loaded", typeof(Int16))]
            public Int16 RoundsLoaded1;
            [FieldAttribute("Rounds Total", typeof(Int16))]
            public Int16 RoundsTotal1;
            [FieldAttribute("Starting Fragmentation Grenade Count", typeof(Byte))]
            public Byte StartingFragmentationGrenadeCount;
            [FieldAttribute("Starting Plasma Grenade Count", typeof(Byte))]
            public Byte StartingPlasmaGrenadeCount;
            [FieldAttribute("Starting <unknown> Grenade Count", typeof(Byte))]
            public Byte StartingLessThanUnknownGreaterThanGrenadeCount;
            [FieldAttribute("Starting <unknown> Grenade Count", typeof(Byte))]
            public Byte StartingLessThanUnknownGreaterThanGrenadeCount1;
            public override int Size
            {
                get
                {
                    return 84;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.StartingHealthDamage = 0;
                this.StartingShieldDamage = 0;
                this.PrimaryWeapon = TagReference.Null;
                this.RoundsLoaded = 0;
                this.RoundsTotal = 0;
                this.SecondaryWeapon = TagReference.Null;
                this.RoundsLoaded1 = 0;
                this.RoundsTotal1 = 0;
                this.StartingFragmentationGrenadeCount = 0;
                this.StartingPlasmaGrenadeCount = 0;
                this.StartingLessThanUnknownGreaterThanGrenadeCount = 0;
                this.StartingLessThanUnknownGreaterThanGrenadeCount1 = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.StartingHealthDamage = reader.ReadSingle();
                this.StartingShieldDamage = reader.ReadSingle();
                this.PrimaryWeapon = reader.Read<TagReference>();
                this.RoundsLoaded = reader.ReadInt16();
                this.RoundsTotal = reader.ReadInt16();
                this.SecondaryWeapon = reader.Read<TagReference>();
                this.RoundsLoaded1 = reader.ReadInt16();
                this.RoundsTotal1 = reader.ReadInt16();
                this.StartingFragmentationGrenadeCount = reader.ReadByte();
                this.StartingPlasmaGrenadeCount = reader.ReadByte();
                this.StartingLessThanUnknownGreaterThanGrenadeCount = reader.ReadByte();
                this.StartingLessThanUnknownGreaterThanGrenadeCount1 = reader.ReadByte();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class ScenarioPlayersBlock : AbideTagBlock
        {
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("Facing:Degrees", typeof(Single))]
            public Single Facing;
            [FieldAttribute("Team Designator", typeof(TeamDesignatorOptions))]
            [OptionsAttribute(typeof(TeamDesignatorOptions), false)]
            public TeamDesignatorOptions TeamDesignator;
            [FieldAttribute("BSP Index", typeof(Int16))]
            public Int16 BspIndex;
            [FieldAttribute("Game Type 1", typeof(GameType1Options))]
            [OptionsAttribute(typeof(GameType1Options), false)]
            public GameType1Options GameType1;
            [FieldAttribute("Game Type 2", typeof(GameType2Options))]
            [OptionsAttribute(typeof(GameType2Options), false)]
            public GameType2Options GameType2;
            [FieldAttribute("Game Type 3", typeof(GameType3Options))]
            [OptionsAttribute(typeof(GameType3Options), false)]
            public GameType3Options GameType3;
            [FieldAttribute("Game Type 4", typeof(GameType4Options))]
            [OptionsAttribute(typeof(GameType4Options), false)]
            public GameType4Options GameType4;
            [FieldAttribute("Spawn Type 0", typeof(SpawnType0Options))]
            [OptionsAttribute(typeof(SpawnType0Options), false)]
            public SpawnType0Options SpawnType0;
            [FieldAttribute("Spawn Type 1", typeof(SpawnType1Options))]
            [OptionsAttribute(typeof(SpawnType1Options), false)]
            public SpawnType1Options SpawnType1;
            [FieldAttribute("Spawn Type 2", typeof(SpawnType2Options))]
            [OptionsAttribute(typeof(SpawnType2Options), false)]
            public SpawnType2Options SpawnType2;
            [FieldAttribute("Spawn Type 3", typeof(SpawnType3Options))]
            [OptionsAttribute(typeof(SpawnType3Options), false)]
            public SpawnType3Options SpawnType3;
            [FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString;
            [FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString1;
            [FieldAttribute("Campaign Player Type", typeof(CampaignPlayerTypeOptions))]
            [OptionsAttribute(typeof(CampaignPlayerTypeOptions), false)]
            public CampaignPlayerTypeOptions CampaignPlayerType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(6)]
            public Byte[] EmptyString2;
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.Position = Vector3.Zero;
                this.Facing = 0;
                this.TeamDesignator = ((TeamDesignatorOptions)(0));
                this.BspIndex = 0;
                this.GameType1 = ((GameType1Options)(0));
                this.GameType2 = ((GameType2Options)(0));
                this.GameType3 = ((GameType3Options)(0));
                this.GameType4 = ((GameType4Options)(0));
                this.SpawnType0 = ((SpawnType0Options)(0));
                this.SpawnType1 = ((SpawnType1Options)(0));
                this.SpawnType2 = ((SpawnType2Options)(0));
                this.SpawnType3 = ((SpawnType3Options)(0));
                this.EmptyString = StringId.Zero;
                this.EmptyString1 = StringId.Zero;
                this.CampaignPlayerType = ((CampaignPlayerTypeOptions)(0));
                this.EmptyString2 = new byte[6];
            }
            public override void Read(BinaryReader reader)
            {
                this.Position = reader.Read<Vector3>();
                this.Facing = reader.ReadSingle();
                this.TeamDesignator = ((TeamDesignatorOptions)(reader.ReadInt16()));
                this.BspIndex = reader.ReadInt16();
                this.GameType1 = ((GameType1Options)(reader.ReadInt16()));
                this.GameType2 = ((GameType2Options)(reader.ReadInt16()));
                this.GameType3 = ((GameType3Options)(reader.ReadInt16()));
                this.GameType4 = ((GameType4Options)(reader.ReadInt16()));
                this.SpawnType0 = ((SpawnType0Options)(reader.ReadInt16()));
                this.SpawnType1 = ((SpawnType1Options)(reader.ReadInt16()));
                this.SpawnType2 = ((SpawnType2Options)(reader.ReadInt16()));
                this.SpawnType3 = ((SpawnType3Options)(reader.ReadInt16()));
                this.EmptyString = reader.ReadInt32();
                this.EmptyString1 = reader.ReadInt32();
                this.CampaignPlayerType = ((CampaignPlayerTypeOptions)(reader.ReadInt16()));
                this.EmptyString2 = reader.ReadBytes(6);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TeamDesignatorOptions : Int16
            {
                RedAlpha = 0,
                BlueBravo = 1,
                YellowCharlie = 2,
                GreenDelta = 3,
                PurpleEcho = 4,
                OrangeFoxtrot = 5,
                BrownGolf = 6,
                PinkHotel = 7,
                Neutral = 8,
            }
            public enum GameType1Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType2Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType3Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType4Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum SpawnType0Options : Int16
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum SpawnType1Options : Int16
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum SpawnType2Options : Int16
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum SpawnType3Options : Int16
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum CampaignPlayerTypeOptions : Int16
            {
                Masterchief = 0,
                Dervish = 1,
                ChiefMultiplayer = 2,
                EliteMultiplayer = 3,
            }
        }
        [FieldSetAttribute(100, 4)]
        public sealed class ScenarioTriggerVolumeBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("Object Name", typeof(Int16))]
            public Int16 ObjectName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("Node Name", typeof(StringId))]
            public StringId NodeName;
            [FieldAttribute("EMPTY STRING", typeof(EmptyStringElement[]))]
            [ArrayAttribute(6, typeof(EmptyStringElement))]
            public EmptyStringElement[] EmptyString1;
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("Extents", typeof(Vector3))]
            public Vector3 Extents;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("~Kill Trigger Volume*", typeof(Int16))]
            public Int16 KillTriggerVolume;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            public override int Size
            {
                get
                {
                    return 100;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.ObjectName = 0;
                this.EmptyString = new byte[2];
                this.NodeName = StringId.Zero;
                this.EmptyString1 = new EmptyStringElement[6];
                this.Position = Vector3.Zero;
                this.Extents = Vector3.Zero;
                this.EmptyString2 = new byte[4];
                this.KillTriggerVolume = 0;
                this.EmptyString3 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.ObjectName = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.NodeName = reader.ReadInt32();
                this.Position = reader.Read<Vector3>();
                this.Extents = reader.Read<Vector3>();
                this.EmptyString2 = reader.ReadBytes(4);
                this.KillTriggerVolume = reader.ReadInt16();
                this.EmptyString3 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public sealed class EmptyStringElement : AbideTagBlock
            {
                [FieldAttribute("EMPTY STRING", typeof(Single))]
                public Single EmptyString;
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class RecordedAnimationBlock : AbideTagBlock
        {
            private DataList recordedAnimationEventStreamList = new DataList(2097152);
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("version*", typeof(Byte))]
            public Byte Version;
            [FieldAttribute("raw animation data*", typeof(Byte))]
            public Byte RawAnimationData;
            [FieldAttribute("unit control data version*", typeof(Byte))]
            public Byte UnitControlDataVersion;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(1)]
            public Byte[] EmptyString;
            [FieldAttribute("length of animation*:ticks", typeof(Int16))]
            public Int16 LengthOfAnimation;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("recorded animation event stream*", typeof(TagBlock))]
            [DataAttribute(2097152)]
            public TagBlock RecordedAnimationEventStream;
            public DataList RecordedAnimationEventStreamList
            {
                get
                {
                    return this.recordedAnimationEventStreamList;
                }
            }
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.recordedAnimationEventStreamList.Clear();
                this.Name = String32.Empty;
                this.Version = 0;
                this.RawAnimationData = 0;
                this.UnitControlDataVersion = 0;
                this.EmptyString = new byte[1];
                this.LengthOfAnimation = 0;
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[4];
                this.RecordedAnimationEventStream = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Version = reader.ReadByte();
                this.RawAnimationData = reader.ReadByte();
                this.UnitControlDataVersion = reader.ReadByte();
                this.EmptyString = reader.ReadBytes(1);
                this.LengthOfAnimation = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(4);
                this.RecordedAnimationEventStream = reader.ReadInt64();
                this.recordedAnimationEventStreamList.Read(reader, this.RecordedAnimationEventStream);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(148, 4)]
        public sealed class ScenarioNetpointsBlock : AbideTagBlock
        {
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("Facing:Degrees", typeof(Single))]
            public Single Facing;
            [FieldAttribute("Type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("Team Designator", typeof(TeamDesignatorOptions))]
            [OptionsAttribute(typeof(TeamDesignatorOptions), false)]
            public TeamDesignatorOptions TeamDesignator;
            [FieldAttribute("Identifier", typeof(Int16))]
            public Int16 Identifier;
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString;
            [FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString1;
            public override int Size
            {
                get
                {
                    return 148;
                }
            }
            public override void Initialize()
            {
                this.Position = Vector3.Zero;
                this.Facing = 0;
                this.Type = ((TypeOptions)(0));
                this.TeamDesignator = ((TeamDesignatorOptions)(0));
                this.Identifier = 0;
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = StringId.Zero;
                this.EmptyString1 = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Position = reader.Read<Vector3>();
                this.Facing = reader.ReadSingle();
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.TeamDesignator = ((TeamDesignatorOptions)(reader.ReadInt16()));
                this.Identifier = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadInt32();
                this.EmptyString1 = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TypeOptions : Int16
            {
                CtfFlagSpawn = 0,
                CtfFlagReturn = 1,
                AssaultBombSpawn = 2,
                AssaultBombReturn = 3,
                OddballSpawn = 4,
                Unused = 5,
                RaceCheckpoint = 6,
                TeleporterSrc = 7,
                TeleporterDest = 8,
                HeadhunterBin = 9,
                TerritoriesFlag = 10,
                KingHill0 = 11,
                KingHill1 = 12,
                KingHill2 = 13,
                KingHill3 = 14,
                KingHill4 = 15,
                KingHill5 = 16,
                KingHill6 = 17,
                KingHill7 = 18,
            }
            public enum TeamDesignatorOptions : Int16
            {
                RedAlpha = 0,
                BlueBravo = 1,
                YellowCharlie = 2,
                GreenDelta = 3,
                PurpleEcho = 4,
                OrangeFoxtrot = 5,
                BrownGolf = 6,
                PinkHotel = 7,
                Neutral = 8,
            }
            public enum FlagsOptions : Int16
            {
                MultipleFlagbomb = 1,
                SingleFlagbomb = 2,
                NeutralFlagbomb = 4,
            }
        }
        [FieldSetAttribute(152, 4)]
        public sealed class ScenarioNetgameEquipmentBlock : AbideTagBlock
        {
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Game Type 1", typeof(GameType1Options))]
            [OptionsAttribute(typeof(GameType1Options), false)]
            public GameType1Options GameType1;
            [FieldAttribute("Game Type 2", typeof(GameType2Options))]
            [OptionsAttribute(typeof(GameType2Options), false)]
            public GameType2Options GameType2;
            [FieldAttribute("Game Type 3", typeof(GameType3Options))]
            [OptionsAttribute(typeof(GameType3Options), false)]
            public GameType3Options GameType3;
            [FieldAttribute("Game Type 4", typeof(GameType4Options))]
            [OptionsAttribute(typeof(GameType4Options), false)]
            public GameType4Options GameType4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("Spawn Time (in seconds, 0 = default)", typeof(Int16))]
            public Int16 SpawnTimeInSeconds0EqualsDefault;
            [FieldAttribute("Respawn on Empty Time:seconds", typeof(Int16))]
            public Int16 RespawnOnEmptyTime;
            [FieldAttribute("Respawn Timer Starts", typeof(RespawnTimerStartsOptions))]
            [OptionsAttribute(typeof(RespawnTimerStartsOptions), false)]
            public RespawnTimerStartsOptions RespawnTimerStarts;
            [FieldAttribute("Classification", typeof(ClassificationOptions))]
            [OptionsAttribute(typeof(ClassificationOptions), false)]
            public ClassificationOptions Classification;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(3)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString2;
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("Orientation", typeof(ScenarioNetgameEquipmentOrientationStructBlock))]
            public ScenarioNetgameEquipmentOrientationStructBlock Orientation;
            [FieldAttribute("Item/Vehicle Collection", typeof(TagReference))]
            public TagReference ItemvehicleCollection;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(48)]
            public Byte[] EmptyString3;
            public override int Size
            {
                get
                {
                    return 152;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.GameType1 = ((GameType1Options)(0));
                this.GameType2 = ((GameType2Options)(0));
                this.GameType3 = ((GameType3Options)(0));
                this.GameType4 = ((GameType4Options)(0));
                this.EmptyString = new byte[2];
                this.SpawnTimeInSeconds0EqualsDefault = 0;
                this.RespawnOnEmptyTime = 0;
                this.RespawnTimerStarts = ((RespawnTimerStartsOptions)(0));
                this.Classification = ((ClassificationOptions)(0));
                this.EmptyString1 = new byte[3];
                this.EmptyString2 = new byte[40];
                this.Position = Vector3.Zero;
                this.Orientation = new ScenarioNetgameEquipmentOrientationStructBlock();
                this.ItemvehicleCollection = TagReference.Null;
                this.EmptyString3 = new byte[48];
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.GameType1 = ((GameType1Options)(reader.ReadInt16()));
                this.GameType2 = ((GameType2Options)(reader.ReadInt16()));
                this.GameType3 = ((GameType3Options)(reader.ReadInt16()));
                this.GameType4 = ((GameType4Options)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.SpawnTimeInSeconds0EqualsDefault = reader.ReadInt16();
                this.RespawnOnEmptyTime = reader.ReadInt16();
                this.RespawnTimerStarts = ((RespawnTimerStartsOptions)(reader.ReadInt16()));
                this.Classification = ((ClassificationOptions)(reader.ReadByte()));
                this.EmptyString1 = reader.ReadBytes(3);
                this.EmptyString2 = reader.ReadBytes(40);
                this.Position = reader.Read<Vector3>();
                this.Orientation = reader.ReadDataStructure<ScenarioNetgameEquipmentOrientationStructBlock>();
                this.ItemvehicleCollection = reader.Read<TagReference>();
                this.EmptyString3 = reader.ReadBytes(48);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScenarioNetgameEquipmentOrientationStructBlock : AbideTagBlock
            {
                [FieldAttribute("Orientation", typeof(Vector3))]
                public Vector3 Orientation;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Orientation = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Orientation = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int32
            {
                Levitate = 1,
                DestroyExistingOnNewSpawn = 2,
            }
            public enum GameType1Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType2Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType3Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType4Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum RespawnTimerStartsOptions : Int16
            {
                OnPickUp = 0,
                OnBodyDepletion = 1,
            }
            public enum ClassificationOptions : Byte
            {
                Weapon = 0,
                PrimaryLightLand = 1,
                SecondaryLightLand = 2,
                PrimaryHeavyLand = 3,
                PrimaryFlying = 4,
                SecondaryHeavyLand = 5,
                PrimaryTurret = 6,
                SecondaryTurret = 7,
                Grenade = 8,
                Powerup = 9,
            }
        }
        [FieldSetAttribute(204, 4)]
        public sealed class ScenarioStartingEquipmentBlock : AbideTagBlock
        {
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Game Type 1", typeof(GameType1Options))]
            [OptionsAttribute(typeof(GameType1Options), false)]
            public GameType1Options GameType1;
            [FieldAttribute("Game Type 2", typeof(GameType2Options))]
            [OptionsAttribute(typeof(GameType2Options), false)]
            public GameType2Options GameType2;
            [FieldAttribute("Game Type 3", typeof(GameType3Options))]
            [OptionsAttribute(typeof(GameType3Options), false)]
            public GameType3Options GameType3;
            [FieldAttribute("Game Type 4", typeof(GameType4Options))]
            [OptionsAttribute(typeof(GameType4Options), false)]
            public GameType4Options GameType4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(48)]
            public Byte[] EmptyString;
            [FieldAttribute("Item Collection 1", typeof(TagReference))]
            public TagReference ItemCollection1;
            [FieldAttribute("Item Collection 2", typeof(TagReference))]
            public TagReference ItemCollection2;
            [FieldAttribute("Item Collection 3", typeof(TagReference))]
            public TagReference ItemCollection3;
            [FieldAttribute("Item Collection 4", typeof(TagReference))]
            public TagReference ItemCollection4;
            [FieldAttribute("Item Collection 5", typeof(TagReference))]
            public TagReference ItemCollection5;
            [FieldAttribute("Item Collection 6", typeof(TagReference))]
            public TagReference ItemCollection6;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(48)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 204;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.GameType1 = ((GameType1Options)(0));
                this.GameType2 = ((GameType2Options)(0));
                this.GameType3 = ((GameType3Options)(0));
                this.GameType4 = ((GameType4Options)(0));
                this.EmptyString = new byte[48];
                this.ItemCollection1 = TagReference.Null;
                this.ItemCollection2 = TagReference.Null;
                this.ItemCollection3 = TagReference.Null;
                this.ItemCollection4 = TagReference.Null;
                this.ItemCollection5 = TagReference.Null;
                this.ItemCollection6 = TagReference.Null;
                this.EmptyString1 = new byte[48];
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.GameType1 = ((GameType1Options)(reader.ReadInt16()));
                this.GameType2 = ((GameType2Options)(reader.ReadInt16()));
                this.GameType3 = ((GameType3Options)(reader.ReadInt16()));
                this.GameType4 = ((GameType4Options)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(48);
                this.ItemCollection1 = reader.Read<TagReference>();
                this.ItemCollection2 = reader.Read<TagReference>();
                this.ItemCollection3 = reader.Read<TagReference>();
                this.ItemCollection4 = reader.Read<TagReference>();
                this.ItemCollection5 = reader.Read<TagReference>();
                this.ItemCollection6 = reader.Read<TagReference>();
                this.EmptyString1 = reader.ReadBytes(48);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                NoGrenades = 1,
                PlasmaGrenades = 2,
            }
            public enum GameType1Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType2Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType3Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType4Options : Int16
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
        }
        [FieldSetAttribute(14, 4)]
        public sealed class ScenarioBspSwitchTriggerVolumeBlock : AbideTagBlock
        {
            [FieldAttribute("Trigger Volume", typeof(Int16))]
            public Int16 TriggerVolume;
            [FieldAttribute("Source", typeof(Int16))]
            public Int16 Source;
            [FieldAttribute("Destination", typeof(Int16))]
            public Int16 Destination;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            public override int Size
            {
                get
                {
                    return 14;
                }
            }
            public override void Initialize()
            {
                this.TriggerVolume = 0;
                this.Source = 0;
                this.Destination = 0;
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[2];
                this.EmptyString3 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.TriggerVolume = reader.ReadInt16();
                this.Source = reader.ReadInt16();
                this.Destination = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(2);
                this.EmptyString3 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ScenarioDecalsBlock : AbideTagBlock
        {
            [FieldAttribute("Decal Type^", typeof(Int16))]
            public Int16 DecalType;
            [FieldAttribute("Yaw[-127,127]*", typeof(Byte))]
            public Byte Yaw127127;
            [FieldAttribute("Pitch[-127,127]*", typeof(Byte))]
            public Byte Pitch127127;
            [FieldAttribute("Position*", typeof(Vector3))]
            public Vector3 Position;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.DecalType = 0;
                this.Yaw127127 = 0;
                this.Pitch127127 = 0;
                this.Position = Vector3.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.DecalType = reader.ReadInt16();
                this.Yaw127127 = reader.ReadByte();
                this.Pitch127127 = reader.ReadByte();
                this.Position = reader.Read<Vector3>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ScenarioDecalPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Reference^", typeof(TagReference))]
            public TagReference Reference;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Reference = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Reference = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioDetailObjectCollectionPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class StylePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("reference^", typeof(TagReference))]
            public TagReference Reference;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Reference = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Reference = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class SquadGroupsBlock : AbideTagBlock
        {
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("parent", typeof(Int16))]
            public Int16 Parent;
            [FieldAttribute("initial orders", typeof(Int16))]
            public Int16 InitialOrders;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.Parent = 0;
                this.InitialOrders = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Parent = reader.ReadInt16();
                this.InitialOrders = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(232, 4)]
        public sealed class SquadsBlock : AbideTagBlock
        {
            private TagBlockList<ActorStartingLocationsBlock> startingLocationsList = new TagBlockList<ActorStartingLocationsBlock>(32);
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("team", typeof(TeamOptions))]
            [OptionsAttribute(typeof(TeamOptions), false)]
            public TeamOptions Team;
            [FieldAttribute("parent", typeof(Int16))]
            public Int16 Parent;
            [FieldAttribute("squad delay time:seconds", typeof(Single))]
            public Single SquadDelayTime;
            [FieldAttribute("normal diff count#initial number of actors on normal difficulty", typeof(Int16))]
            public Int16 NormalDiffCount;
            [FieldAttribute("insane diff count#initial number of actors on insane difficulty (hard difficulty " +
                "is midway between normal and insane)", typeof(Int16))]
            public Int16 InsaneDiffCount;
            [FieldAttribute("major upgrade", typeof(MajorUpgradeOptions))]
            [OptionsAttribute(typeof(MajorUpgradeOptions), false)]
            public MajorUpgradeOptions MajorUpgrade;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("vehicle type", typeof(Int16))]
            public Int16 VehicleType;
            [FieldAttribute("character type", typeof(Int16))]
            public Int16 CharacterType;
            [FieldAttribute("initial zone", typeof(Int16))]
            public Int16 InitialZone;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("initial weapon", typeof(Int16))]
            public Int16 InitialWeapon;
            [FieldAttribute("initial secondary weapon", typeof(Int16))]
            public Int16 InitialSecondaryWeapon;
            [FieldAttribute("grenade type", typeof(GrenadeTypeOptions))]
            [OptionsAttribute(typeof(GrenadeTypeOptions), false)]
            public GrenadeTypeOptions GrenadeType;
            [FieldAttribute("initial order", typeof(Int16))]
            public Int16 InitialOrder;
            [FieldAttribute("vehicle variant", typeof(StringId))]
            public StringId VehicleVariant;
            [FieldAttribute("starting locations", typeof(TagBlock))]
            [BlockAttribute("actor_starting_locations_block", 32, typeof(ActorStartingLocationsBlock))]
            public TagBlock StartingLocations;
            [FieldAttribute("Placement script", typeof(String32))]
            public String32 PlacementScript;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            public TagBlockList<ActorStartingLocationsBlock> StartingLocationsList
            {
                get
                {
                    return this.startingLocationsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 232;
                }
            }
            public override void Initialize()
            {
                this.startingLocationsList.Clear();
                this.Name = String32.Empty;
                this.Flags = ((FlagsOptions)(0));
                this.Team = ((TeamOptions)(0));
                this.Parent = 0;
                this.SquadDelayTime = 0;
                this.NormalDiffCount = 0;
                this.InsaneDiffCount = 0;
                this.MajorUpgrade = ((MajorUpgradeOptions)(0));
                this.EmptyString = new byte[2];
                this.VehicleType = 0;
                this.CharacterType = 0;
                this.InitialZone = 0;
                this.EmptyString1 = new byte[2];
                this.InitialWeapon = 0;
                this.InitialSecondaryWeapon = 0;
                this.GrenadeType = ((GrenadeTypeOptions)(0));
                this.InitialOrder = 0;
                this.VehicleVariant = StringId.Zero;
                this.StartingLocations = TagBlock.Zero;
                this.PlacementScript = String32.Empty;
                this.EmptyString2 = new byte[2];
                this.EmptyString3 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Team = ((TeamOptions)(reader.ReadInt16()));
                this.Parent = reader.ReadInt16();
                this.SquadDelayTime = reader.ReadSingle();
                this.NormalDiffCount = reader.ReadInt16();
                this.InsaneDiffCount = reader.ReadInt16();
                this.MajorUpgrade = ((MajorUpgradeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.VehicleType = reader.ReadInt16();
                this.CharacterType = reader.ReadInt16();
                this.InitialZone = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(2);
                this.InitialWeapon = reader.ReadInt16();
                this.InitialSecondaryWeapon = reader.ReadInt16();
                this.GrenadeType = ((GrenadeTypeOptions)(reader.ReadInt16()));
                this.InitialOrder = reader.ReadInt16();
                this.VehicleVariant = reader.ReadInt32();
                this.StartingLocations = reader.ReadInt64();
                this.startingLocationsList.Read(reader, this.StartingLocations);
                this.PlacementScript = reader.Read<String32>();
                this.EmptyString2 = reader.ReadBytes(2);
                this.EmptyString3 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(72, 4)]
            public sealed class ActorStartingLocationsBlock : AbideTagBlock
            {
                [FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("reference frame*", typeof(Int16))]
                public Int16 ReferenceFrame;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("facing (yaw, pitch):degrees", typeof(Vector2))]
                public Vector2 FacingYawPitch;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("character type", typeof(Int16))]
                public Int16 CharacterType;
                [FieldAttribute("initial weapon", typeof(Int16))]
                public Int16 InitialWeapon;
                [FieldAttribute("initial secondary weapon", typeof(Int16))]
                public Int16 InitialSecondaryWeapon;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("vehicle type", typeof(Int16))]
                public Int16 VehicleType;
                [FieldAttribute("seat type", typeof(SeatTypeOptions))]
                [OptionsAttribute(typeof(SeatTypeOptions), false)]
                public SeatTypeOptions SeatType;
                [FieldAttribute("grenade type", typeof(GrenadeTypeOptions))]
                [OptionsAttribute(typeof(GrenadeTypeOptions), false)]
                public GrenadeTypeOptions GrenadeType;
                [FieldAttribute("swarm count#number of cretures in swarm if a swarm is spawned at this location", typeof(Int16))]
                public Int16 SwarmCount;
                [FieldAttribute("actor variant name", typeof(StringId))]
                public StringId ActorVariantName;
                [FieldAttribute("vehicle variant name", typeof(StringId))]
                public StringId VehicleVariantName;
                [FieldAttribute("initial movement distance#before doing anything else, the actor will travel the g" +
                    "iven distance in its forward direction", typeof(Single))]
                public Single InitialMovementDistance;
                [FieldAttribute("emitter vehicle", typeof(Int16))]
                public Int16 EmitterVehicle;
                [FieldAttribute("initial movement mode", typeof(InitialMovementModeOptions))]
                [OptionsAttribute(typeof(InitialMovementModeOptions), false)]
                public InitialMovementModeOptions InitialMovementMode;
                [FieldAttribute("Placement script", typeof(String32))]
                public String32 PlacementScript;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString3;
                public override int Size
                {
                    get
                    {
                        return 72;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.Position = Vector3.Zero;
                    this.ReferenceFrame = 0;
                    this.EmptyString = new byte[2];
                    this.FacingYawPitch = Vector2.Zero;
                    this.Flags = ((FlagsOptions)(0));
                    this.CharacterType = 0;
                    this.InitialWeapon = 0;
                    this.InitialSecondaryWeapon = 0;
                    this.EmptyString1 = new byte[2];
                    this.VehicleType = 0;
                    this.SeatType = ((SeatTypeOptions)(0));
                    this.GrenadeType = ((GrenadeTypeOptions)(0));
                    this.SwarmCount = 0;
                    this.ActorVariantName = StringId.Zero;
                    this.VehicleVariantName = StringId.Zero;
                    this.InitialMovementDistance = 0;
                    this.EmitterVehicle = 0;
                    this.InitialMovementMode = ((InitialMovementModeOptions)(0));
                    this.PlacementScript = String32.Empty;
                    this.EmptyString2 = new byte[2];
                    this.EmptyString3 = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.Position = reader.Read<Vector3>();
                    this.ReferenceFrame = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.FacingYawPitch = reader.Read<Vector2>();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.CharacterType = reader.ReadInt16();
                    this.InitialWeapon = reader.ReadInt16();
                    this.InitialSecondaryWeapon = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.VehicleType = reader.ReadInt16();
                    this.SeatType = ((SeatTypeOptions)(reader.ReadInt16()));
                    this.GrenadeType = ((GrenadeTypeOptions)(reader.ReadInt16()));
                    this.SwarmCount = reader.ReadInt16();
                    this.ActorVariantName = reader.ReadInt32();
                    this.VehicleVariantName = reader.ReadInt32();
                    this.InitialMovementDistance = reader.ReadSingle();
                    this.EmitterVehicle = reader.ReadInt16();
                    this.InitialMovementMode = ((InitialMovementModeOptions)(reader.ReadInt16()));
                    this.PlacementScript = reader.Read<String32>();
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.EmptyString3 = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyAsleep = 1,
                    InfectionFormExplode = 2,
                    Na = 4,
                    AlwaysPlace = 8,
                    InitiallyHidden = 16,
                }
                public enum SeatTypeOptions : Int16
                {
                    Default = 0,
                    Passenger = 1,
                    Gunner = 2,
                    Driver = 3,
                    SmallCargo = 4,
                    LargeCargo = 5,
                    NoDriver = 6,
                    NoVehicle = 7,
                }
                public enum GrenadeTypeOptions : Int16
                {
                    None = 0,
                    HumanGrenade = 1,
                    CovenantPlasma = 2,
                }
                public enum InitialMovementModeOptions : Int16
                {
                    Default = 0,
                    Climbing = 1,
                    Flying = 2,
                }
            }
            public enum FlagsOptions : Int32
            {
                Unused = 1,
                NeverSearch = 2,
                StartTimerImmediately = 4,
                NoTimerDelayForever = 8,
                MagicSightAfterTimer = 16,
                AutomaticMigration = 32,
                Deprecated = 64,
                RespawnEnabled = 128,
                Blind = 256,
                Deaf = 512,
                Braindead = 1024,
                _3dFiringPositions = 2048,
                InitiallyPlaced = 4096,
                UnitsNotEnterableByPlayer = 8192,
            }
            public enum TeamOptions : Int16
            {
                Default = 0,
                Player = 1,
                Human = 2,
                Covenant = 3,
                Flood = 4,
                Sentinel = 5,
                Heretic = 6,
                Prophet = 7,
                Unused8 = 8,
                Unused9 = 9,
                Unused10 = 10,
                Unused11 = 11,
                Unused12 = 12,
                Unused13 = 13,
                Unused14 = 14,
                Unused15 = 15,
            }
            public enum MajorUpgradeOptions : Int16
            {
                Normal = 0,
                Few = 1,
                Many = 2,
                None = 3,
                All = 4,
            }
            public enum GrenadeTypeOptions : Int16
            {
                None = 0,
                HumanGrenade = 1,
                CovenantPlasma = 2,
            }
        }
        [FieldSetAttribute(228, 4)]
        public sealed class ZoneBlock : AbideTagBlock
        {
            private TagBlockList<FiringPositionsBlock> firingPositionsList = new TagBlockList<FiringPositionsBlock>(512);
            private TagBlockList<AreasBlock> areasList = new TagBlockList<AreasBlock>(64);
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("manual bsp", typeof(Int16))]
            public Int16 ManualBsp;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("firing positions", typeof(TagBlock))]
            [BlockAttribute("firing_positions_block", 512, typeof(FiringPositionsBlock))]
            public TagBlock FiringPositions;
            [FieldAttribute("areas", typeof(TagBlock))]
            [BlockAttribute("areas_block", 64, typeof(AreasBlock))]
            public TagBlock Areas;
            public TagBlockList<FiringPositionsBlock> FiringPositionsList
            {
                get
                {
                    return this.firingPositionsList;
                }
            }
            public TagBlockList<AreasBlock> AreasList
            {
                get
                {
                    return this.areasList;
                }
            }
            public override int Size
            {
                get
                {
                    return 228;
                }
            }
            public override void Initialize()
            {
                this.firingPositionsList.Clear();
                this.areasList.Clear();
                this.Name = String32.Empty;
                this.Flags = ((FlagsOptions)(0));
                this.ManualBsp = 0;
                this.EmptyString = new byte[2];
                this.FiringPositions = TagBlock.Zero;
                this.Areas = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.ManualBsp = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.FiringPositions = reader.ReadInt64();
                this.firingPositionsList.Read(reader, this.FiringPositions);
                this.Areas = reader.ReadInt64();
                this.areasList.Read(reader, this.Areas);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(44, 4)]
            public sealed class FiringPositionsBlock : AbideTagBlock
            {
                [FieldAttribute("position (local)", typeof(Vector3))]
                public Vector3 PositionLocal;
                [FieldAttribute("reference frame", typeof(Int16))]
                public Int16 ReferenceFrame;
                [FieldAttribute("flags*", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                [FieldAttribute("cluster index*", typeof(Int16))]
                public Int16 ClusterIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("normal", typeof(Vector2))]
                public Vector2 Normal;
                public override int Size
                {
                    get
                    {
                        return 44;
                    }
                }
                public override void Initialize()
                {
                    this.PositionLocal = Vector3.Zero;
                    this.ReferenceFrame = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.Area = 0;
                    this.ClusterIndex = 0;
                    this.EmptyString = new byte[4];
                    this.Normal = Vector2.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PositionLocal = reader.Read<Vector3>();
                    this.ReferenceFrame = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.Area = reader.ReadInt16();
                    this.ClusterIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(4);
                    this.Normal = reader.Read<Vector2>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    Open = 1,
                    Partial = 2,
                    Closed = 4,
                    Mobile = 8,
                    WallLean = 16,
                    Perch = 32,
                    GroundPoint = 64,
                    DynamicCoverPoint = 128,
                }
            }
            [FieldSetAttribute(196, 4)]
            public sealed class AreasBlock : AbideTagBlock
            {
                private TagBlockList<FlightReferenceBlock> flightHintsList = new TagBlockList<FlightReferenceBlock>(10);
                [FieldAttribute("name^`", typeof(String32))]
                public String32 Name;
                [FieldAttribute("area flags", typeof(AreaFlagsOptions))]
                [OptionsAttribute(typeof(AreaFlagsOptions), true)]
                public AreaFlagsOptions AreaFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(20)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(64)]
                public Byte[] EmptyString2;
                [FieldAttribute("manual reference frame", typeof(Int16))]
                public Int16 ManualReferenceFrame;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [FieldAttribute("flight_hints", typeof(TagBlock))]
                [BlockAttribute("flight_reference_block", 10, typeof(FlightReferenceBlock))]
                public TagBlock FlightHints;
                public TagBlockList<FlightReferenceBlock> FlightHintsList
                {
                    get
                    {
                        return this.flightHintsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 196;
                    }
                }
                public override void Initialize()
                {
                    this.flightHintsList.Clear();
                    this.Name = String32.Empty;
                    this.AreaFlags = ((AreaFlagsOptions)(0));
                    this.EmptyString = new byte[20];
                    this.EmptyString1 = new byte[4];
                    this.EmptyString2 = new byte[64];
                    this.ManualReferenceFrame = 0;
                    this.EmptyString3 = new byte[2];
                    this.FlightHints = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.Read<String32>();
                    this.AreaFlags = ((AreaFlagsOptions)(reader.ReadInt32()));
                    this.EmptyString = reader.ReadBytes(20);
                    this.EmptyString1 = reader.ReadBytes(4);
                    this.EmptyString2 = reader.ReadBytes(64);
                    this.ManualReferenceFrame = reader.ReadInt16();
                    this.EmptyString3 = reader.ReadBytes(2);
                    this.FlightHints = reader.ReadInt64();
                    this.flightHintsList.Read(reader, this.FlightHints);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class FlightReferenceBlock : AbideTagBlock
                {
                    [FieldAttribute("flight hint index", typeof(Int16))]
                    public Int16 FlightHintIndex;
                    [FieldAttribute("poit index", typeof(Int16))]
                    public Int16 PoitIndex;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.FlightHintIndex = 0;
                        this.PoitIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.FlightHintIndex = reader.ReadInt16();
                        this.PoitIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum AreaFlagsOptions : Int32
                {
                    VehicleArea = 1,
                    Perch = 2,
                    ManualReferenceFrame = 4,
                }
            }
            public enum FlagsOptions : Int32
            {
                ManualBspIndex = 1,
            }
        }
        [FieldSetAttribute(32, 4)]
        public sealed class AiSceneBlock : AbideTagBlock
        {
            private TagBlockList<AiSceneTriggerBlock> triggerConditionsList = new TagBlockList<AiSceneTriggerBlock>(1);
            private TagBlockList<AiSceneRoleBlock> rolesList = new TagBlockList<AiSceneRoleBlock>(10);
            [FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("trigger conditions", typeof(TagBlock))]
            [BlockAttribute("ai_scene_trigger_block", 1, typeof(AiSceneTriggerBlock))]
            public TagBlock TriggerConditions;
            [FieldAttribute("roles", typeof(TagBlock))]
            [BlockAttribute("ai_scene_role_block", 10, typeof(AiSceneRoleBlock))]
            public TagBlock Roles;
            public TagBlockList<AiSceneTriggerBlock> TriggerConditionsList
            {
                get
                {
                    return this.triggerConditionsList;
                }
            }
            public TagBlockList<AiSceneRoleBlock> RolesList
            {
                get
                {
                    return this.rolesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.triggerConditionsList.Clear();
                this.rolesList.Clear();
                this.Name = StringId.Zero;
                this.Flags = ((FlagsOptions)(0));
                this.TriggerConditions = TagBlock.Zero;
                this.Roles = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.TriggerConditions = reader.ReadInt64();
                this.triggerConditionsList.Read(reader, this.TriggerConditions);
                this.Roles = reader.ReadInt64();
                this.rolesList.Read(reader, this.Roles);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class AiSceneTriggerBlock : AbideTagBlock
            {
                private TagBlockList<TriggerReferences> triggersList = new TagBlockList<TriggerReferences>(10);
                [FieldAttribute("combination rule", typeof(CombinationRuleOptions))]
                [OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public CombinationRuleOptions CombinationRule;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("triggers", typeof(TagBlock))]
                [BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public TagBlockList<TriggerReferences> TriggersList
                {
                    get
                    {
                        return this.triggersList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.triggersList.Clear();
                    this.CombinationRule = ((CombinationRuleOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Triggers = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.CombinationRule = ((CombinationRuleOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Triggers = reader.ReadInt64();
                    this.triggersList.Read(reader, this.Triggers);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : AbideTagBlock
                {
                    [FieldAttribute("Trigger flags", typeof(TriggerFlagsOptions))]
                    [OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public TriggerFlagsOptions TriggerFlags;
                    [FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.TriggerFlags = ((TriggerFlagsOptions)(0));
                        this.Trigger = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.TriggerFlags = ((TriggerFlagsOptions)(reader.ReadInt32()));
                        this.Trigger = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions : Int32
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions : Int16
                {
                    Or = 0,
                    And = 1,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class AiSceneRoleBlock : AbideTagBlock
            {
                private TagBlockList<AiSceneRoleVariantsBlock> roleVariantsList = new TagBlockList<AiSceneRoleVariantsBlock>(10);
                [FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("group", typeof(GroupOptions))]
                [OptionsAttribute(typeof(GroupOptions), false)]
                public GroupOptions Group;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("role variants", typeof(TagBlock))]
                [BlockAttribute("ai_scene_role_variants_block", 10, typeof(AiSceneRoleVariantsBlock))]
                public TagBlock RoleVariants;
                public TagBlockList<AiSceneRoleVariantsBlock> RoleVariantsList
                {
                    get
                    {
                        return this.roleVariantsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.roleVariantsList.Clear();
                    this.Name = StringId.Zero;
                    this.Group = ((GroupOptions)(0));
                    this.EmptyString = new byte[2];
                    this.RoleVariants = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.Group = ((GroupOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.RoleVariants = reader.ReadInt64();
                    this.roleVariantsList.Read(reader, this.RoleVariants);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class AiSceneRoleVariantsBlock : AbideTagBlock
                {
                    [FieldAttribute("variant designation^", typeof(StringId))]
                    public StringId VariantDesignation;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.VariantDesignation = StringId.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.VariantDesignation = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum GroupOptions : Int16
                {
                    Group1 = 0,
                    Group2 = 1,
                    Group3 = 2,
                }
            }
            public enum FlagsOptions : Int32
            {
                SceneCanPlayMultipleTimes = 1,
                EnableCombatDialogue = 2,
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class CharacterPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("reference^", typeof(TagReference))]
            public TagReference Reference;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Reference = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Reference = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(156, 4)]
        public sealed class PathfindingDataBlock : AbideTagBlock
        {
            private TagBlockList<SectorBlock> sectorsList = new TagBlockList<SectorBlock>(65534);
            private TagBlockList<SectorLinkBlock> linksList = new TagBlockList<SectorLinkBlock>(262144);
            private TagBlockList<RefBlock> refsList = new TagBlockList<RefBlock>(131072);
            private TagBlockList<SectorBsp2dNodesBlock> bsp2dNodesList = new TagBlockList<SectorBsp2dNodesBlock>(131072);
            private TagBlockList<SurfaceFlagsBlock> surfaceFlagsList = new TagBlockList<SurfaceFlagsBlock>(4096);
            private TagBlockList<SectorVertexBlock> verticesList = new TagBlockList<SectorVertexBlock>(65535);
            private TagBlockList<EnvironmentObjectRefs> objectRefsList = new TagBlockList<EnvironmentObjectRefs>(2000);
            private TagBlockList<PathfindingHintsBlock> pathfindingHintsList = new TagBlockList<PathfindingHintsBlock>(32767);
            private TagBlockList<InstancedGeometryReferenceBlock> instancedGeometryRefsList = new TagBlockList<InstancedGeometryReferenceBlock>(1024);
            private TagBlockList<UserHintBlock> userPlacedHintsList = new TagBlockList<UserHintBlock>(1);
            [FieldAttribute("sectors", typeof(TagBlock))]
            [BlockAttribute("sector_block", 65534, typeof(SectorBlock))]
            public TagBlock Sectors;
            [FieldAttribute("links", typeof(TagBlock))]
            [BlockAttribute("sector_link_block", 262144, typeof(SectorLinkBlock))]
            public TagBlock Links;
            [FieldAttribute("refs", typeof(TagBlock))]
            [BlockAttribute("ref_block", 131072, typeof(RefBlock))]
            public TagBlock Refs;
            [FieldAttribute("bsp2d nodes", typeof(TagBlock))]
            [BlockAttribute("sector_bsp2d_nodes_block", 131072, typeof(SectorBsp2dNodesBlock))]
            public TagBlock Bsp2dNodes;
            [FieldAttribute("surface flags", typeof(TagBlock))]
            [BlockAttribute("surface_flags_block", 4096, typeof(SurfaceFlagsBlock))]
            public TagBlock SurfaceFlags;
            [FieldAttribute("vertices", typeof(TagBlock))]
            [BlockAttribute("sector_vertex_block", 65535, typeof(SectorVertexBlock))]
            public TagBlock Vertices;
            [FieldAttribute("object refs", typeof(TagBlock))]
            [BlockAttribute("environment_object_refs", 2000, typeof(EnvironmentObjectRefs))]
            public TagBlock ObjectRefs;
            [FieldAttribute("pathfinding hints", typeof(TagBlock))]
            [BlockAttribute("pathfinding_hints_block", 32767, typeof(PathfindingHintsBlock))]
            public TagBlock PathfindingHints;
            [FieldAttribute("instanced geometry refs", typeof(TagBlock))]
            [BlockAttribute("instanced_geometry_reference_block", 1024, typeof(InstancedGeometryReferenceBlock))]
            public TagBlock InstancedGeometryRefs;
            [FieldAttribute("structure checksum*", typeof(Int32))]
            public Int32 StructureChecksum;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            [FieldAttribute("user-placed hints", typeof(TagBlock))]
            [BlockAttribute("user_hint_block", 1, typeof(UserHintBlock))]
            public TagBlock UserPlacedHints;
            public TagBlockList<SectorBlock> SectorsList
            {
                get
                {
                    return this.sectorsList;
                }
            }
            public TagBlockList<SectorLinkBlock> LinksList
            {
                get
                {
                    return this.linksList;
                }
            }
            public TagBlockList<RefBlock> RefsList
            {
                get
                {
                    return this.refsList;
                }
            }
            public TagBlockList<SectorBsp2dNodesBlock> Bsp2dNodesList
            {
                get
                {
                    return this.bsp2dNodesList;
                }
            }
            public TagBlockList<SurfaceFlagsBlock> SurfaceFlagsList
            {
                get
                {
                    return this.surfaceFlagsList;
                }
            }
            public TagBlockList<SectorVertexBlock> VerticesList
            {
                get
                {
                    return this.verticesList;
                }
            }
            public TagBlockList<EnvironmentObjectRefs> ObjectRefsList
            {
                get
                {
                    return this.objectRefsList;
                }
            }
            public TagBlockList<PathfindingHintsBlock> PathfindingHintsList
            {
                get
                {
                    return this.pathfindingHintsList;
                }
            }
            public TagBlockList<InstancedGeometryReferenceBlock> InstancedGeometryRefsList
            {
                get
                {
                    return this.instancedGeometryRefsList;
                }
            }
            public TagBlockList<UserHintBlock> UserPlacedHintsList
            {
                get
                {
                    return this.userPlacedHintsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 156;
                }
            }
            public override void Initialize()
            {
                this.sectorsList.Clear();
                this.linksList.Clear();
                this.refsList.Clear();
                this.bsp2dNodesList.Clear();
                this.surfaceFlagsList.Clear();
                this.verticesList.Clear();
                this.objectRefsList.Clear();
                this.pathfindingHintsList.Clear();
                this.instancedGeometryRefsList.Clear();
                this.userPlacedHintsList.Clear();
                this.Sectors = TagBlock.Zero;
                this.Links = TagBlock.Zero;
                this.Refs = TagBlock.Zero;
                this.Bsp2dNodes = TagBlock.Zero;
                this.SurfaceFlags = TagBlock.Zero;
                this.Vertices = TagBlock.Zero;
                this.ObjectRefs = TagBlock.Zero;
                this.PathfindingHints = TagBlock.Zero;
                this.InstancedGeometryRefs = TagBlock.Zero;
                this.StructureChecksum = 0;
                this.EmptyString = new byte[32];
                this.UserPlacedHints = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Sectors = reader.ReadInt64();
                this.sectorsList.Read(reader, this.Sectors);
                this.Links = reader.ReadInt64();
                this.linksList.Read(reader, this.Links);
                this.Refs = reader.ReadInt64();
                this.refsList.Read(reader, this.Refs);
                this.Bsp2dNodes = reader.ReadInt64();
                this.bsp2dNodesList.Read(reader, this.Bsp2dNodes);
                this.SurfaceFlags = reader.ReadInt64();
                this.surfaceFlagsList.Read(reader, this.SurfaceFlags);
                this.Vertices = reader.ReadInt64();
                this.verticesList.Read(reader, this.Vertices);
                this.ObjectRefs = reader.ReadInt64();
                this.objectRefsList.Read(reader, this.ObjectRefs);
                this.PathfindingHints = reader.ReadInt64();
                this.pathfindingHintsList.Read(reader, this.PathfindingHints);
                this.InstancedGeometryRefs = reader.ReadInt64();
                this.instancedGeometryRefsList.Read(reader, this.InstancedGeometryRefs);
                this.StructureChecksum = reader.ReadInt32();
                this.EmptyString = reader.ReadBytes(32);
                this.UserPlacedHints = reader.ReadInt64();
                this.userPlacedHintsList.Read(reader, this.UserPlacedHints);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class SectorBlock : AbideTagBlock
            {
                [FieldAttribute("Path-finding sector flags", typeof(PathFindingSectorFlagsOptions))]
                [OptionsAttribute(typeof(PathFindingSectorFlagsOptions), true)]
                public PathFindingSectorFlagsOptions PathFindingSectorFlags;
                [FieldAttribute("hint index", typeof(Int16))]
                public Int16 HintIndex;
                [FieldAttribute("first link (do not set manually)", typeof(Int32))]
                public Int32 FirstLinkDoNotSetManually;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.PathFindingSectorFlags = ((PathFindingSectorFlagsOptions)(0));
                    this.HintIndex = 0;
                    this.FirstLinkDoNotSetManually = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PathFindingSectorFlags = ((PathFindingSectorFlagsOptions)(reader.ReadInt16()));
                    this.HintIndex = reader.ReadInt16();
                    this.FirstLinkDoNotSetManually = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum PathFindingSectorFlagsOptions : Int16
                {
                    SectorWalkable = 1,
                    SectorBreakable = 2,
                    SectorMobile = 4,
                    SectorBspSource = 8,
                    Floor = 16,
                    Ceiling = 32,
                    WallNorth = 64,
                    WallSouth = 128,
                    WallEast = 256,
                    WallWest = 512,
                    Crouchable = 1024,
                    Aligned = 2048,
                    SectorStep = 4096,
                    SectorInterior = 8192,
                }
            }
            [FieldSetAttribute(28, 4)]
            public sealed class SectorLinkBlock : AbideTagBlock
            {
                [FieldAttribute("vertex 1", typeof(Int16))]
                public Int16 Vertex1;
                [FieldAttribute("vertex 2", typeof(Int16))]
                public Int16 Vertex2;
                [FieldAttribute("link flags", typeof(LinkFlagsOptions))]
                [OptionsAttribute(typeof(LinkFlagsOptions), true)]
                public LinkFlagsOptions LinkFlags;
                [FieldAttribute("hint index", typeof(Int16))]
                public Int16 HintIndex;
                [FieldAttribute("forward link", typeof(Int16))]
                public Int16 ForwardLink;
                [FieldAttribute("reverse link", typeof(Int16))]
                public Int16 ReverseLink;
                [FieldAttribute("left sector", typeof(Int16))]
                public Int16 LeftSector;
                [FieldAttribute("right sector", typeof(Int16))]
                public Int16 RightSector;
                public override int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public override void Initialize()
                {
                    this.Vertex1 = 0;
                    this.Vertex2 = 0;
                    this.LinkFlags = ((LinkFlagsOptions)(0));
                    this.HintIndex = 0;
                    this.ForwardLink = 0;
                    this.ReverseLink = 0;
                    this.LeftSector = 0;
                    this.RightSector = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Vertex1 = reader.ReadInt16();
                    this.Vertex2 = reader.ReadInt16();
                    this.LinkFlags = ((LinkFlagsOptions)(reader.ReadInt16()));
                    this.HintIndex = reader.ReadInt16();
                    this.ForwardLink = reader.ReadInt16();
                    this.ReverseLink = reader.ReadInt16();
                    this.LeftSector = reader.ReadInt16();
                    this.RightSector = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum LinkFlagsOptions : Int16
                {
                    SectorLinkFromCollisionEdge = 1,
                    SectorIntersectionLink = 2,
                    SectorLinkBsp2dCreationError = 4,
                    SectorLinkTopologyError = 8,
                    SectorLinkChainError = 16,
                    SectorLinkBothSectorsWalkable = 32,
                    SectorLinkMagicHangingLink = 64,
                    SectorLinkThreshold = 128,
                    SectorLinkCrouchable = 256,
                    SectorLinkWallBase = 512,
                    SectorLinkLedge = 1024,
                    SectorLinkLeanable = 2048,
                    SectorLinkStartCorner = 4096,
                    SectorLinkEndCorner = 8192,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class RefBlock : AbideTagBlock
            {
                [FieldAttribute("node ref or sector ref", typeof(Int32))]
                public Int32 NodeRefOrSectorRef;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.NodeRefOrSectorRef = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.NodeRefOrSectorRef = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class SectorBsp2dNodesBlock : AbideTagBlock
            {
                [FieldAttribute("plane*", typeof(Vector3))]
                public Vector3 Plane;
                [FieldAttribute("left child*", typeof(Int32))]
                public Int32 LeftChild;
                [FieldAttribute("right child*", typeof(Int32))]
                public Int32 RightChild;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.Plane = Vector3.Zero;
                    this.LeftChild = 0;
                    this.RightChild = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Plane = reader.Read<Vector3>();
                    this.LeftChild = reader.ReadInt32();
                    this.RightChild = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class SurfaceFlagsBlock : AbideTagBlock
            {
                [FieldAttribute("flags*", typeof(Int32))]
                public Int32 Flags;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class SectorVertexBlock : AbideTagBlock
            {
                [FieldAttribute("point*", typeof(Vector3))]
                public Vector3 Point;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Point = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Point = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(132, 4)]
            public sealed class EnvironmentObjectRefs : AbideTagBlock
            {
                private TagBlockList<EnvironmentObjectBspRefs> bspsList = new TagBlockList<EnvironmentObjectBspRefs>(1024);
                private TagBlockList<EnvironmentObjectNodes> nodesList = new TagBlockList<EnvironmentObjectNodes>(255);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("first sector*", typeof(Int32))]
                public Int32 FirstSector;
                [FieldAttribute("last sector*", typeof(Int32))]
                public Int32 LastSector;
                [FieldAttribute("bsps*", typeof(TagBlock))]
                [BlockAttribute("environment_object_bsp_refs", 1024, typeof(EnvironmentObjectBspRefs))]
                public TagBlock Bsps;
                [FieldAttribute("nodes*", typeof(TagBlock))]
                [BlockAttribute("environment_object_nodes", 255, typeof(EnvironmentObjectNodes))]
                public TagBlock Nodes;
                public TagBlockList<EnvironmentObjectBspRefs> BspsList
                {
                    get
                    {
                        return this.bspsList;
                    }
                }
                public TagBlockList<EnvironmentObjectNodes> NodesList
                {
                    get
                    {
                        return this.nodesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 132;
                    }
                }
                public override void Initialize()
                {
                    this.bspsList.Clear();
                    this.nodesList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.FirstSector = 0;
                    this.LastSector = 0;
                    this.Bsps = TagBlock.Zero;
                    this.Nodes = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.FirstSector = reader.ReadInt32();
                    this.LastSector = reader.ReadInt32();
                    this.Bsps = reader.ReadInt64();
                    this.bspsList.Read(reader, this.Bsps);
                    this.Nodes = reader.ReadInt64();
                    this.nodesList.Read(reader, this.Nodes);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(72, 4)]
                public sealed class EnvironmentObjectBspRefs : AbideTagBlock
                {
                    [FieldAttribute("bsp reference*", typeof(Int32))]
                    public Int32 BspReference;
                    [FieldAttribute("first sector*", typeof(Int32))]
                    public Int32 FirstSector;
                    [FieldAttribute("last sector*", typeof(Int32))]
                    public Int32 LastSector;
                    [FieldAttribute("node_index*", typeof(Int16))]
                    public Int16 NodeIndex;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 72;
                        }
                    }
                    public override void Initialize()
                    {
                        this.BspReference = 0;
                        this.FirstSector = 0;
                        this.LastSector = 0;
                        this.NodeIndex = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BspReference = reader.ReadInt32();
                        this.FirstSector = reader.ReadInt32();
                        this.LastSector = reader.ReadInt32();
                        this.NodeIndex = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(16, 4)]
                public sealed class EnvironmentObjectNodes : AbideTagBlock
                {
                    [FieldAttribute("reference frame index", typeof(Int16))]
                    public Int16 ReferenceFrameIndex;
                    [FieldAttribute("projection axis", typeof(Byte))]
                    public Byte ProjectionAxis;
                    [FieldAttribute("projection sign", typeof(ProjectionSignOptions))]
                    [OptionsAttribute(typeof(ProjectionSignOptions), true)]
                    public ProjectionSignOptions ProjectionSign;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.ReferenceFrameIndex = 0;
                        this.ProjectionAxis = 0;
                        this.ProjectionSign = ((ProjectionSignOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.ReferenceFrameIndex = reader.ReadInt16();
                        this.ProjectionAxis = reader.ReadByte();
                        this.ProjectionSign = ((ProjectionSignOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum ProjectionSignOptions : Byte
                    {
                        ProjectionSign = 1,
                    }
                }
                public enum FlagsOptions : Int16
                {
                    Mobile = 1,
                }
            }
            [FieldSetAttribute(92, 4)]
            public sealed class PathfindingHintsBlock : AbideTagBlock
            {
                [FieldAttribute("hint type", typeof(HintTypeOptions))]
                [OptionsAttribute(typeof(HintTypeOptions), false)]
                public HintTypeOptions HintType;
                [FieldAttribute("Next hint index", typeof(Int16))]
                public Int16 NextHintIndex;
                [FieldAttribute("hint data 0*", typeof(Int16))]
                public Int16 HintData0;
                [FieldAttribute("hint data 1*", typeof(Int16))]
                public Int16 HintData1;
                [FieldAttribute("hint data 2*", typeof(Int16))]
                public Int16 HintData2;
                [FieldAttribute("hint data 3*", typeof(Int16))]
                public Int16 HintData3;
                [FieldAttribute("hint data 4*", typeof(Int16))]
                public Int16 HintData4;
                [FieldAttribute("hint data 5*", typeof(Int16))]
                public Int16 HintData5;
                [FieldAttribute("hint data 6*", typeof(Int16))]
                public Int16 HintData6;
                [FieldAttribute("hint data 7*", typeof(Int16))]
                public Int16 HintData7;
                public override int Size
                {
                    get
                    {
                        return 92;
                    }
                }
                public override void Initialize()
                {
                    this.HintType = ((HintTypeOptions)(0));
                    this.NextHintIndex = 0;
                    this.HintData0 = 0;
                    this.HintData1 = 0;
                    this.HintData2 = 0;
                    this.HintData3 = 0;
                    this.HintData4 = 0;
                    this.HintData5 = 0;
                    this.HintData6 = 0;
                    this.HintData7 = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.HintType = ((HintTypeOptions)(reader.ReadInt16()));
                    this.NextHintIndex = reader.ReadInt16();
                    this.HintData0 = reader.ReadInt16();
                    this.HintData1 = reader.ReadInt16();
                    this.HintData2 = reader.ReadInt16();
                    this.HintData3 = reader.ReadInt16();
                    this.HintData4 = reader.ReadInt16();
                    this.HintData5 = reader.ReadInt16();
                    this.HintData6 = reader.ReadInt16();
                    this.HintData7 = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum HintTypeOptions : Int16
                {
                    IntersectionLink = 0,
                    JumpLink = 1,
                    ClimbLink = 2,
                    VaultLink = 3,
                    MountLink = 4,
                    HoistLink = 5,
                    WallJumpLink = 6,
                    BreakableFloor = 7,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class InstancedGeometryReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("pathfinding object_index", typeof(Int16))]
                public Int16 PathfindingObjectIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.PathfindingObjectIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.PathfindingObjectIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(108, 4)]
            public sealed class UserHintBlock : AbideTagBlock
            {
                private TagBlockList<UserHintPointBlock> pointGeometryList = new TagBlockList<UserHintPointBlock>(200);
                private TagBlockList<UserHintRayBlock> rayGeometryList = new TagBlockList<UserHintRayBlock>(200);
                private TagBlockList<UserHintLineSegmentBlock> lineSegmentGeometryList = new TagBlockList<UserHintLineSegmentBlock>(200);
                private TagBlockList<UserHintParallelogramBlock> parallelogramGeometryList = new TagBlockList<UserHintParallelogramBlock>(200);
                private TagBlockList<UserHintPolygonBlock> polygonGeometryList = new TagBlockList<UserHintPolygonBlock>(200);
                private TagBlockList<UserHintJumpBlock> jumpHintsList = new TagBlockList<UserHintJumpBlock>(200);
                private TagBlockList<UserHintClimbBlock> climbHintsList = new TagBlockList<UserHintClimbBlock>(200);
                private TagBlockList<UserHintWellBlock> wellHintsList = new TagBlockList<UserHintWellBlock>(200);
                private TagBlockList<UserHintFlightBlock> flightHintsList = new TagBlockList<UserHintFlightBlock>(50);
                [FieldAttribute("point geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_point_block", 200, typeof(UserHintPointBlock))]
                public TagBlock PointGeometry;
                [FieldAttribute("ray geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_ray_block", 200, typeof(UserHintRayBlock))]
                public TagBlock RayGeometry;
                [FieldAttribute("line segment geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_line_segment_block", 200, typeof(UserHintLineSegmentBlock))]
                public TagBlock LineSegmentGeometry;
                [FieldAttribute("parallelogram geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_parallelogram_block", 200, typeof(UserHintParallelogramBlock))]
                public TagBlock ParallelogramGeometry;
                [FieldAttribute("polygon geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_polygon_block", 200, typeof(UserHintPolygonBlock))]
                public TagBlock PolygonGeometry;
                [FieldAttribute("jump hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_jump_block", 200, typeof(UserHintJumpBlock))]
                public TagBlock JumpHints;
                [FieldAttribute("climb hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_climb_block", 200, typeof(UserHintClimbBlock))]
                public TagBlock ClimbHints;
                [FieldAttribute("well hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_well_block", 200, typeof(UserHintWellBlock))]
                public TagBlock WellHints;
                [FieldAttribute("flight hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_flight_block", 50, typeof(UserHintFlightBlock))]
                public TagBlock FlightHints;
                public TagBlockList<UserHintPointBlock> PointGeometryList
                {
                    get
                    {
                        return this.pointGeometryList;
                    }
                }
                public TagBlockList<UserHintRayBlock> RayGeometryList
                {
                    get
                    {
                        return this.rayGeometryList;
                    }
                }
                public TagBlockList<UserHintLineSegmentBlock> LineSegmentGeometryList
                {
                    get
                    {
                        return this.lineSegmentGeometryList;
                    }
                }
                public TagBlockList<UserHintParallelogramBlock> ParallelogramGeometryList
                {
                    get
                    {
                        return this.parallelogramGeometryList;
                    }
                }
                public TagBlockList<UserHintPolygonBlock> PolygonGeometryList
                {
                    get
                    {
                        return this.polygonGeometryList;
                    }
                }
                public TagBlockList<UserHintJumpBlock> JumpHintsList
                {
                    get
                    {
                        return this.jumpHintsList;
                    }
                }
                public TagBlockList<UserHintClimbBlock> ClimbHintsList
                {
                    get
                    {
                        return this.climbHintsList;
                    }
                }
                public TagBlockList<UserHintWellBlock> WellHintsList
                {
                    get
                    {
                        return this.wellHintsList;
                    }
                }
                public TagBlockList<UserHintFlightBlock> FlightHintsList
                {
                    get
                    {
                        return this.flightHintsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public override void Initialize()
                {
                    this.pointGeometryList.Clear();
                    this.rayGeometryList.Clear();
                    this.lineSegmentGeometryList.Clear();
                    this.parallelogramGeometryList.Clear();
                    this.polygonGeometryList.Clear();
                    this.jumpHintsList.Clear();
                    this.climbHintsList.Clear();
                    this.wellHintsList.Clear();
                    this.flightHintsList.Clear();
                    this.PointGeometry = TagBlock.Zero;
                    this.RayGeometry = TagBlock.Zero;
                    this.LineSegmentGeometry = TagBlock.Zero;
                    this.ParallelogramGeometry = TagBlock.Zero;
                    this.PolygonGeometry = TagBlock.Zero;
                    this.JumpHints = TagBlock.Zero;
                    this.ClimbHints = TagBlock.Zero;
                    this.WellHints = TagBlock.Zero;
                    this.FlightHints = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PointGeometry = reader.ReadInt64();
                    this.pointGeometryList.Read(reader, this.PointGeometry);
                    this.RayGeometry = reader.ReadInt64();
                    this.rayGeometryList.Read(reader, this.RayGeometry);
                    this.LineSegmentGeometry = reader.ReadInt64();
                    this.lineSegmentGeometryList.Read(reader, this.LineSegmentGeometry);
                    this.ParallelogramGeometry = reader.ReadInt64();
                    this.parallelogramGeometryList.Read(reader, this.ParallelogramGeometry);
                    this.PolygonGeometry = reader.ReadInt64();
                    this.polygonGeometryList.Read(reader, this.PolygonGeometry);
                    this.JumpHints = reader.ReadInt64();
                    this.jumpHintsList.Read(reader, this.JumpHints);
                    this.ClimbHints = reader.ReadInt64();
                    this.climbHintsList.Read(reader, this.ClimbHints);
                    this.WellHints = reader.ReadInt64();
                    this.wellHintsList.Read(reader, this.WellHints);
                    this.FlightHints = reader.ReadInt64();
                    this.flightHintsList.Read(reader, this.FlightHints);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class UserHintPointBlock : AbideTagBlock
                {
                    [FieldAttribute("Point", typeof(Vector3))]
                    public Vector3 Point;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Point = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Point = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(24, 4)]
                public sealed class UserHintRayBlock : AbideTagBlock
                {
                    [FieldAttribute("Point", typeof(Vector3))]
                    public Vector3 Point;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Vector", typeof(Vector3))]
                    public Vector3 Vector;
                    public override int Size
                    {
                        get
                        {
                            return 24;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Point = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                        this.Vector = Vector3.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Point = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Vector = reader.Read<Vector3>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(28, 4)]
                public sealed class UserHintLineSegmentBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("Point 0", typeof(Vector3))]
                    public Vector3 Point0;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Point 1", typeof(Vector3))]
                    public Vector3 Point1;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    public override int Size
                    {
                        get
                        {
                            return 28;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.Point0 = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                        this.Point1 = Vector3.Zero;
                        this.ReferenceFrame1 = 0;
                        this.EmptyString1 = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Point0 = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Point1 = reader.Read<Vector3>();
                        this.ReferenceFrame1 = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(52, 4)]
                public sealed class UserHintParallelogramBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("Point 0", typeof(Vector3))]
                    public Vector3 Point0;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Point 1", typeof(Vector3))]
                    public Vector3 Point1;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("Point 2", typeof(Vector3))]
                    public Vector3 Point2;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame2;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString2;
                    [FieldAttribute("Point 3", typeof(Vector3))]
                    public Vector3 Point3;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame3;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString3;
                    public override int Size
                    {
                        get
                        {
                            return 52;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.Point0 = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                        this.Point1 = Vector3.Zero;
                        this.ReferenceFrame1 = 0;
                        this.EmptyString1 = new byte[2];
                        this.Point2 = Vector3.Zero;
                        this.ReferenceFrame2 = 0;
                        this.EmptyString2 = new byte[2];
                        this.Point3 = Vector3.Zero;
                        this.ReferenceFrame3 = 0;
                        this.EmptyString3 = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Point0 = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Point1 = reader.Read<Vector3>();
                        this.ReferenceFrame1 = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.Point2 = reader.Read<Vector3>();
                        this.ReferenceFrame2 = reader.ReadInt16();
                        this.EmptyString2 = reader.ReadBytes(2);
                        this.Point3 = reader.Read<Vector3>();
                        this.ReferenceFrame3 = reader.ReadInt16();
                        this.EmptyString3 = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(16, 4)]
                public sealed class UserHintPolygonBlock : AbideTagBlock
                {
                    private TagBlockList<UserHintPointBlock> pointsList = new TagBlockList<UserHintPointBlock>(200);
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("Points", typeof(TagBlock))]
                    [BlockAttribute("user_hint_point_block", 200, typeof(UserHintPointBlock))]
                    public TagBlock Points;
                    public TagBlockList<UserHintPointBlock> PointsList
                    {
                        get
                        {
                            return this.pointsList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.pointsList.Clear();
                        this.Flags = ((FlagsOptions)(0));
                        this.Points = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Points = reader.ReadInt64();
                        this.pointsList.Read(reader, this.Points);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class UserHintPointBlock : AbideTagBlock
                    {
                        [FieldAttribute("Point", typeof(Vector3))]
                        public Vector3 Point;
                        [FieldAttribute("reference frame*", typeof(Int16))]
                        public Int16 ReferenceFrame;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(2)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Point = Vector3.Zero;
                            this.ReferenceFrame = 0;
                            this.EmptyString = new byte[2];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Point = reader.Read<Vector3>();
                            this.ReferenceFrame = reader.ReadInt16();
                            this.EmptyString = reader.ReadBytes(2);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(8, 4)]
                public sealed class UserHintJumpBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("geometry index*", typeof(Int16))]
                    public Int16 GeometryIndex;
                    [FieldAttribute("force jump height", typeof(ForceJumpHeightOptions))]
                    [OptionsAttribute(typeof(ForceJumpHeightOptions), false)]
                    public ForceJumpHeightOptions ForceJumpHeight;
                    [FieldAttribute("control flags", typeof(ControlFlagsOptions))]
                    [OptionsAttribute(typeof(ControlFlagsOptions), true)]
                    public ControlFlagsOptions ControlFlags;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.GeometryIndex = 0;
                        this.ForceJumpHeight = ((ForceJumpHeightOptions)(0));
                        this.ControlFlags = ((ControlFlagsOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                        this.GeometryIndex = reader.ReadInt16();
                        this.ForceJumpHeight = ((ForceJumpHeightOptions)(reader.ReadInt16()));
                        this.ControlFlags = ((ControlFlagsOptions)(reader.ReadInt16()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int16
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                    public enum ForceJumpHeightOptions : Int16
                    {
                        None = 0,
                        Down = 1,
                        Step = 2,
                        Crouch = 3,
                        Stand = 4,
                        Storey = 5,
                        Tower = 6,
                        Infinite = 7,
                    }
                    public enum ControlFlagsOptions : Int16
                    {
                        MagicLift = 1,
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class UserHintClimbBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("geometry index*", typeof(Int16))]
                    public Int16 GeometryIndex;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.GeometryIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                        this.GeometryIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int16
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(16, 4)]
                public sealed class UserHintWellBlock : AbideTagBlock
                {
                    private TagBlockList<UserHintWellPointBlock> pointsList = new TagBlockList<UserHintWellPointBlock>(200);
                    [FieldAttribute("flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("points", typeof(TagBlock))]
                    [BlockAttribute("user_hint_well_point_block", 200, typeof(UserHintWellPointBlock))]
                    public TagBlock Points;
                    public TagBlockList<UserHintWellPointBlock> PointsList
                    {
                        get
                        {
                            return this.pointsList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.pointsList.Clear();
                        this.Flags = ((FlagsOptions)(0));
                        this.Points = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Points = reader.ReadInt64();
                        this.pointsList.Read(reader, this.Points);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class UserHintWellPointBlock : AbideTagBlock
                    {
                        [FieldAttribute("type", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(2)]
                        public Byte[] EmptyString;
                        [FieldAttribute("point", typeof(Vector3))]
                        public Vector3 Point;
                        [FieldAttribute("reference frame", typeof(Int16))]
                        public Int16 ReferenceFrame;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(2)]
                        public Byte[] EmptyString1;
                        [FieldAttribute("sector index", typeof(Int32))]
                        public Int32 SectorIndex;
                        [FieldAttribute("normal", typeof(Vector2))]
                        public Vector2 Normal;
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.EmptyString = new byte[2];
                            this.Point = Vector3.Zero;
                            this.ReferenceFrame = 0;
                            this.EmptyString1 = new byte[2];
                            this.SectorIndex = 0;
                            this.Normal = Vector2.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadInt16()));
                            this.EmptyString = reader.ReadBytes(2);
                            this.Point = reader.Read<Vector3>();
                            this.ReferenceFrame = reader.ReadInt16();
                            this.EmptyString1 = reader.ReadBytes(2);
                            this.SectorIndex = reader.ReadInt32();
                            this.Normal = reader.Read<Vector2>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions : Int16
                        {
                            Jump = 0,
                            Climb = 1,
                            Hoist = 2,
                        }
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                    }
                }
                [FieldSetAttribute(12, 4)]
                public sealed class UserHintFlightBlock : AbideTagBlock
                {
                    private TagBlockList<UserHintFlightPointBlock> pointsList = new TagBlockList<UserHintFlightPointBlock>(10);
                    [FieldAttribute("points", typeof(TagBlock))]
                    [BlockAttribute("user_hint_flight_point_block", 10, typeof(UserHintFlightPointBlock))]
                    public TagBlock Points;
                    public TagBlockList<UserHintFlightPointBlock> PointsList
                    {
                        get
                        {
                            return this.pointsList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.pointsList.Clear();
                        this.Points = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Points = reader.ReadInt64();
                        this.pointsList.Read(reader, this.Points);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class UserHintFlightPointBlock : AbideTagBlock
                    {
                        [FieldAttribute("point", typeof(Vector3))]
                        public Vector3 Point;
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Point = Vector3.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Point = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        [FieldSetAttribute(60, 4)]
        public sealed class AiAnimationReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("animation name^", typeof(String32))]
            public String32 AnimationName;
            [FieldAttribute("animation graph#leave this blank to use the unit\'s normal animation graph", typeof(TagReference))]
            public TagReference AnimationGraph;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 60;
                }
            }
            public override void Initialize()
            {
                this.AnimationName = String32.Empty;
                this.AnimationGraph = TagReference.Null;
                this.EmptyString = new byte[12];
            }
            public override void Read(BinaryReader reader)
            {
                this.AnimationName = reader.Read<String32>();
                this.AnimationGraph = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(12);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class AiScriptReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("script name^", typeof(String32))]
            public String32 ScriptName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.ScriptName = String32.Empty;
                this.EmptyString = new byte[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.ScriptName = reader.Read<String32>();
                this.EmptyString = reader.ReadBytes(8);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class AiRecordingReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("recording name^", typeof(String32))]
            public String32 RecordingName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.RecordingName = String32.Empty;
                this.EmptyString = new byte[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.RecordingName = reader.Read<String32>();
                this.EmptyString = reader.ReadBytes(8);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(116, 4)]
        public sealed class AiConversationBlock : AbideTagBlock
        {
            private TagBlockList<AiConversationParticipantBlock> participantsList = new TagBlockList<AiConversationParticipantBlock>(8);
            private TagBlockList<AiConversationLineBlock> linesList = new TagBlockList<AiConversationLineBlock>(32);
            private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("trigger distance:world units#distance the player must enter before the conversati" +
                "on can trigger", typeof(Single))]
            public Single TriggerDistance;
            [FieldAttribute("run-to-player dist:world units#if the \'involves player\' flag is set, when trigger" +
                "ed the conversation\'s participant(s) will run to within this distance of the pla" +
                "yer", typeof(Single))]
            public Single RunToPlayerDist;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(36)]
            public Byte[] EmptyString1;
            [FieldAttribute("participants", typeof(TagBlock))]
            [BlockAttribute("ai_conversation_participant_block", 8, typeof(AiConversationParticipantBlock))]
            public TagBlock Participants;
            [FieldAttribute("lines", typeof(TagBlock))]
            [BlockAttribute("ai_conversation_line_block", 32, typeof(AiConversationLineBlock))]
            public TagBlock Lines;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString2;
            public TagBlockList<AiConversationParticipantBlock> ParticipantsList
            {
                get
                {
                    return this.participantsList;
                }
            }
            public TagBlockList<AiConversationLineBlock> LinesList
            {
                get
                {
                    return this.linesList;
                }
            }
            public TagBlockList<GNullBlock> EmptyStringList
            {
                get
                {
                    return this.emptyStringList;
                }
            }
            public override int Size
            {
                get
                {
                    return 116;
                }
            }
            public override void Initialize()
            {
                this.participantsList.Clear();
                this.linesList.Clear();
                this.emptyStringList.Clear();
                this.Name = String32.Empty;
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = new byte[2];
                this.TriggerDistance = 0;
                this.RunToPlayerDist = 0;
                this.EmptyString1 = new byte[36];
                this.Participants = TagBlock.Zero;
                this.Lines = TagBlock.Zero;
                this.EmptyString2 = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.TriggerDistance = reader.ReadSingle();
                this.RunToPlayerDist = reader.ReadSingle();
                this.EmptyString1 = reader.ReadBytes(36);
                this.Participants = reader.ReadInt64();
                this.participantsList.Read(reader, this.Participants);
                this.Lines = reader.ReadInt64();
                this.linesList.Read(reader, this.Lines);
                this.EmptyString2 = reader.ReadInt64();
                this.emptyStringList.Read(reader, this.EmptyString2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(84, 4)]
            public sealed class AiConversationParticipantBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString;
                [FieldAttribute("use this object#if a unit with this name exists, we try to pick them to start the" +
                    " conversation", typeof(Int16))]
                public Int16 UseThisObject;
                [FieldAttribute("set new name#once we pick a unit, we name it this", typeof(Int16))]
                public Int16 SetNewName;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString2;
                [FieldAttribute("encounter name", typeof(String32))]
                public String32 EncounterName;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString3;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString4;
                public override int Size
                {
                    get
                    {
                        return 84;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[8];
                    this.UseThisObject = 0;
                    this.SetNewName = 0;
                    this.EmptyString1 = new byte[12];
                    this.EmptyString2 = new byte[12];
                    this.EncounterName = String32.Empty;
                    this.EmptyString3 = new byte[4];
                    this.EmptyString4 = new byte[12];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(8);
                    this.UseThisObject = reader.ReadInt16();
                    this.SetNewName = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(12);
                    this.EmptyString2 = reader.ReadBytes(12);
                    this.EncounterName = reader.Read<String32>();
                    this.EmptyString3 = reader.ReadBytes(4);
                    this.EmptyString4 = reader.ReadBytes(12);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(124, 4)]
            public sealed class AiConversationLineBlock : AbideTagBlock
            {
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("participant", typeof(Int16))]
                public Int16 Participant;
                [FieldAttribute("addressee", typeof(AddresseeOptions))]
                [OptionsAttribute(typeof(AddresseeOptions), false)]
                public AddresseeOptions Addressee;
                [FieldAttribute("addressee participant#this field is only used if the addressee type is \'participa" +
                    "nt\'", typeof(Int16))]
                public Int16 AddresseeParticipant;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("line delay time", typeof(Single))]
                public Single LineDelayTime;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString1;
                [FieldAttribute("variant 1", typeof(TagReference))]
                public TagReference Variant1;
                [FieldAttribute("variant 2", typeof(TagReference))]
                public TagReference Variant2;
                [FieldAttribute("variant 3", typeof(TagReference))]
                public TagReference Variant3;
                [FieldAttribute("variant 4", typeof(TagReference))]
                public TagReference Variant4;
                [FieldAttribute("variant 5", typeof(TagReference))]
                public TagReference Variant5;
                [FieldAttribute("variant 6", typeof(TagReference))]
                public TagReference Variant6;
                public override int Size
                {
                    get
                    {
                        return 124;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = ((FlagsOptions)(0));
                    this.Participant = 0;
                    this.Addressee = ((AddresseeOptions)(0));
                    this.AddresseeParticipant = 0;
                    this.EmptyString = new byte[4];
                    this.LineDelayTime = 0;
                    this.EmptyString1 = new byte[12];
                    this.Variant1 = TagReference.Null;
                    this.Variant2 = TagReference.Null;
                    this.Variant3 = TagReference.Null;
                    this.Variant4 = TagReference.Null;
                    this.Variant5 = TagReference.Null;
                    this.Variant6 = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.Participant = reader.ReadInt16();
                    this.Addressee = ((AddresseeOptions)(reader.ReadInt16()));
                    this.AddresseeParticipant = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(4);
                    this.LineDelayTime = reader.ReadSingle();
                    this.EmptyString1 = reader.ReadBytes(12);
                    this.Variant1 = reader.Read<TagReference>();
                    this.Variant2 = reader.Read<TagReference>();
                    this.Variant3 = reader.Read<TagReference>();
                    this.Variant4 = reader.Read<TagReference>();
                    this.Variant5 = reader.Read<TagReference>();
                    this.Variant6 = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    AddresseeLookAtSpeaker = 1,
                    EveryoneLookAtSpeaker = 2,
                    EveryoneLookAtAddressee = 4,
                    WaitAfterUntilToldToAdvance = 8,
                    WaitUntilSpeakerNearby = 16,
                    WaitUntilEveryoneNearby = 32,
                }
                public enum AddresseeOptions : Int16
                {
                    None = 0,
                    Player = 1,
                    Participant = 2,
                }
            }
            [FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : AbideTagBlock
            {
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int16
            {
                StopIfDeath = 1,
                StopIfDamaged = 2,
                StopIfVisibleEnemy = 4,
                StopIfAlertedToEnemy = 8,
                PlayerMustBeVisible = 16,
                StopOtherActions = 32,
                KeepTryingToPlay = 64,
                PlayerMustBeLooking = 128,
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class HsScriptsBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(String32))]
            public String32 Name;
            [FieldAttribute("script type*", typeof(ScriptTypeOptions))]
            [OptionsAttribute(typeof(ScriptTypeOptions), false)]
            public ScriptTypeOptions ScriptType;
            [FieldAttribute("return type*", typeof(ReturnTypeOptions))]
            [OptionsAttribute(typeof(ReturnTypeOptions), false)]
            public ReturnTypeOptions ReturnType;
            [FieldAttribute("root expression index*", typeof(Int32))]
            public Int32 RootExpressionIndex;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.ScriptType = ((ScriptTypeOptions)(0));
                this.ReturnType = ((ReturnTypeOptions)(0));
                this.RootExpressionIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.ScriptType = ((ScriptTypeOptions)(reader.ReadInt16()));
                this.ReturnType = ((ReturnTypeOptions)(reader.ReadInt16()));
                this.RootExpressionIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum ScriptTypeOptions : Int16
            {
                Startup = 0,
                Dormant = 1,
                Continuous = 2,
                Static = 3,
                Stub = 4,
                CommandScript = 5,
            }
            public enum ReturnTypeOptions : Int16
            {
                Unparsed = 0,
                SpecialForm = 1,
                FunctionName = 2,
                Passthrough = 3,
                Void = 4,
                Boolean = 5,
                Real = 6,
                Short = 7,
                Long = 8,
                String = 9,
                Script = 10,
                StringId = 11,
                UnitSeatMapping = 12,
                TriggerVolume = 13,
                CutsceneFlag = 14,
                CutsceneCameraPoint = 15,
                CutsceneTitle = 16,
                CutsceneRecording = 17,
                DeviceGroup = 18,
                Ai = 19,
                AiCommandList = 20,
                AiCommandScript = 21,
                AiBehavior = 22,
                AiOrders = 23,
                StartingProfile = 24,
                Conversation = 25,
                StructureBsp = 26,
                Navpoint = 27,
                PointReference = 28,
                Style = 29,
                HudMessage = 30,
                ObjectList = 31,
                Sound = 32,
                Effect = 33,
                Damage = 34,
                LoopingSound = 35,
                AnimationGraph = 36,
                DamageEffect = 37,
                ObjectDefinition = 38,
                Bitmap = 39,
                Shader = 40,
                RenderModel = 41,
                StructureDefinition = 42,
                LightmapDefinition = 43,
                GameDifficulty = 44,
                Team = 45,
                ActorType = 46,
                HudCorner = 47,
                ModelState = 48,
                NetworkEvent = 49,
                Object = 50,
                Unit = 51,
                Vehicle = 52,
                Weapon = 53,
                Device = 54,
                Scenery = 55,
                ObjectName = 56,
                UnitName = 57,
                VehicleName = 58,
                WeaponName = 59,
                DeviceName = 60,
                SceneryName = 61,
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class HsGlobalsBlock : AbideTagBlock
        {
            [FieldAttribute("name*", typeof(String32))]
            public String32 Name;
            [FieldAttribute("type*", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("initialization expression index*", typeof(Int32))]
            public Int32 InitializationExpressionIndex;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.Type = ((TypeOptions)(0));
                this.EmptyString = new byte[2];
                this.InitializationExpressionIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.InitializationExpressionIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TypeOptions : Int16
            {
                Unparsed = 0,
                SpecialForm = 1,
                FunctionName = 2,
                Passthrough = 3,
                Void = 4,
                Boolean = 5,
                Real = 6,
                Short = 7,
                Long = 8,
                String = 9,
                Script = 10,
                StringId = 11,
                UnitSeatMapping = 12,
                TriggerVolume = 13,
                CutsceneFlag = 14,
                CutsceneCameraPoint = 15,
                CutsceneTitle = 16,
                CutsceneRecording = 17,
                DeviceGroup = 18,
                Ai = 19,
                AiCommandList = 20,
                AiCommandScript = 21,
                AiBehavior = 22,
                AiOrders = 23,
                StartingProfile = 24,
                Conversation = 25,
                StructureBsp = 26,
                Navpoint = 27,
                PointReference = 28,
                Style = 29,
                HudMessage = 30,
                ObjectList = 31,
                Sound = 32,
                Effect = 33,
                Damage = 34,
                LoopingSound = 35,
                AnimationGraph = 36,
                DamageEffect = 37,
                ObjectDefinition = 38,
                Bitmap = 39,
                Shader = 40,
                RenderModel = 41,
                StructureDefinition = 42,
                LightmapDefinition = 43,
                GameDifficulty = 44,
                Team = 45,
                ActorType = 46,
                HudCorner = 47,
                ModelState = 48,
                NetworkEvent = 49,
                Object = 50,
                Unit = 51,
                Vehicle = 52,
                Weapon = 53,
                Device = 54,
                Scenery = 55,
                ObjectName = 56,
                UnitName = 57,
                VehicleName = 58,
                WeaponName = 59,
                DeviceName = 60,
                SceneryName = 61,
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class HsReferencesBlock : AbideTagBlock
        {
            [FieldAttribute("reference*^", typeof(TagReference))]
            public TagReference Reference;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Reference = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Reference = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class HsSourceFilesBlock : AbideTagBlock
        {
            private DataList sourceList = new DataList(262144);
            [FieldAttribute("name*", typeof(String32))]
            public String32 Name;
            [FieldAttribute("source*", typeof(TagBlock))]
            [DataAttribute(262144)]
            public TagBlock Source;
            public DataList SourceList
            {
                get
                {
                    return this.sourceList;
                }
            }
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.sourceList.Clear();
                this.Name = String32.Empty;
                this.Source = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Source = reader.ReadInt64();
                this.sourceList.Read(reader, this.Source);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(132, 4)]
        public sealed class CsScriptDataBlock : AbideTagBlock
        {
            private TagBlockList<CsPointSetBlock> pointSetsList = new TagBlockList<CsPointSetBlock>(200);
            [FieldAttribute("point sets", typeof(TagBlock))]
            [BlockAttribute("cs_point_set_block", 200, typeof(CsPointSetBlock))]
            public TagBlock PointSets;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(120)]
            public Byte[] EmptyString;
            public TagBlockList<CsPointSetBlock> PointSetsList
            {
                get
                {
                    return this.pointSetsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 132;
                }
            }
            public override void Initialize()
            {
                this.pointSetsList.Clear();
                this.PointSets = TagBlock.Zero;
                this.EmptyString = new byte[120];
            }
            public override void Read(BinaryReader reader)
            {
                this.PointSets = reader.ReadInt64();
                this.pointSetsList.Read(reader, this.PointSets);
                this.EmptyString = reader.ReadBytes(120);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(140, 4)]
            public sealed class CsPointSetBlock : AbideTagBlock
            {
                private TagBlockList<CsPointBlock> pointsList = new TagBlockList<CsPointBlock>(20);
                [FieldAttribute("name^", typeof(String32))]
                public String32 Name;
                [FieldAttribute("points", typeof(TagBlock))]
                [BlockAttribute("cs_point_block", 20, typeof(CsPointBlock))]
                public TagBlock Points;
                [FieldAttribute("bsp index", typeof(Int16))]
                public Int16 BspIndex;
                [FieldAttribute("manual reference frame", typeof(Int16))]
                public Int16 ManualReferenceFrame;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public TagBlockList<CsPointBlock> PointsList
                {
                    get
                    {
                        return this.pointsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 140;
                    }
                }
                public override void Initialize()
                {
                    this.pointsList.Clear();
                    this.Name = String32.Empty;
                    this.Points = TagBlock.Zero;
                    this.BspIndex = 0;
                    this.ManualReferenceFrame = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.Read<String32>();
                    this.Points = reader.ReadInt64();
                    this.pointsList.Read(reader, this.Points);
                    this.BspIndex = reader.ReadInt16();
                    this.ManualReferenceFrame = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(56, 4)]
                public sealed class CsPointBlock : AbideTagBlock
                {
                    [FieldAttribute("name^", typeof(String32))]
                    public String32 Name;
                    [FieldAttribute("position", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("surface index", typeof(Int32))]
                    public Int32 SurfaceIndex;
                    [FieldAttribute("facing direction", typeof(Vector2))]
                    public Vector2 FacingDirection;
                    public override int Size
                    {
                        get
                        {
                            return 56;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Name = String32.Empty;
                        this.Position = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                        this.SurfaceIndex = 0;
                        this.FacingDirection = Vector2.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Name = reader.Read<String32>();
                        this.Position = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.SurfaceIndex = reader.ReadInt32();
                        this.FacingDirection = reader.Read<Vector2>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int32
                {
                    ManualReferenceFrame = 1,
                    TurretDeployment = 2,
                }
            }
        }
        [FieldSetAttribute(56, 4)]
        public sealed class ScenarioCutsceneFlagBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("Facing", typeof(Vector2))]
            public Vector2 Facing;
            public override int Size
            {
                get
                {
                    return 56;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[4];
                this.Name = String32.Empty;
                this.Position = Vector3.Zero;
                this.Facing = Vector2.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
                this.Name = reader.Read<String32>();
                this.Position = reader.Read<Vector3>();
                this.Facing = reader.Read<Vector2>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class ScenarioCutsceneCameraPointBlock : AbideTagBlock
        {
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("Orientation", typeof(Vector3))]
            public Vector3 Orientation;
            [FieldAttribute(")Unused", typeof(Single))]
            public Single Unused;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.Type = ((TypeOptions)(0));
                this.Name = String32.Empty;
                this.Position = Vector3.Zero;
                this.Orientation = Vector3.Zero;
                this.Unused = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.Name = reader.Read<String32>();
                this.Position = reader.Read<Vector3>();
                this.Orientation = reader.Read<Vector3>();
                this.Unused = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                EditAsRelative = 1,
            }
            public enum TypeOptions : Int16
            {
                Normal = 0,
                IgnoreTargetOrientation = 1,
                Dolly = 2,
                IgnoreTargetUpdates = 3,
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class ScenarioCutsceneTitleBlock : AbideTagBlock
        {
            [FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("text bounds (on screen)", typeof(Vector2))]
            public Vector2 TextBoundsOnScreen;
            [FieldAttribute("justification", typeof(JustificationOptions))]
            [OptionsAttribute(typeof(JustificationOptions), false)]
            public JustificationOptions Justification;
            [FieldAttribute("font", typeof(FontOptions))]
            [OptionsAttribute(typeof(FontOptions), false)]
            public FontOptions Font;
            [FieldAttribute("text color", typeof(ColorRgb))]
            public ColorRgb TextColor;
            [FieldAttribute("shadow color", typeof(ColorRgb))]
            public ColorRgb ShadowColor;
            [FieldAttribute("fade in time [seconds]", typeof(Single))]
            public Single FadeInTimeSeconds;
            [FieldAttribute("up time [seconds]", typeof(Single))]
            public Single UpTimeSeconds;
            [FieldAttribute("fade out time [seconds]", typeof(Single))]
            public Single FadeOutTimeSeconds;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.TextBoundsOnScreen = Vector2.Zero;
                this.Justification = ((JustificationOptions)(0));
                this.Font = ((FontOptions)(0));
                this.TextColor = ColorRgb.Zero;
                this.ShadowColor = ColorRgb.Zero;
                this.FadeInTimeSeconds = 0;
                this.UpTimeSeconds = 0;
                this.FadeOutTimeSeconds = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.TextBoundsOnScreen = reader.Read<Vector2>();
                this.Justification = ((JustificationOptions)(reader.ReadInt16()));
                this.Font = ((FontOptions)(reader.ReadInt16()));
                this.TextColor = reader.Read<ColorRgb>();
                this.ShadowColor = reader.Read<ColorRgb>();
                this.FadeInTimeSeconds = reader.ReadSingle();
                this.UpTimeSeconds = reader.ReadSingle();
                this.FadeOutTimeSeconds = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum JustificationOptions : Int16
            {
                Left = 0,
                Right = 1,
                Center = 2,
                CustomTextEntry = 3,
            }
            public enum FontOptions : Int16
            {
                TerminalFont = 0,
                BodyTextFont = 1,
                TitleFont = 2,
                SuperLargeFont = 3,
                LargeBodyTextFont = 4,
                SplitScreenHudMessageFont = 5,
                FullScreenHudMessageFont = 6,
                EnglishBodyTextFont = 7,
                HudNumberFont = 8,
                SubtitleFont = 9,
                MainMenuFont = 10,
                TextChatFont = 11,
            }
        }
        [FieldSetAttribute(32, 4)]
        public sealed class ScenarioStructureBspReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            [FieldAttribute("Structure BSP^", typeof(TagReference))]
            public TagReference StructureBsp;
            [FieldAttribute("Structure Lightmap^", typeof(TagReference))]
            public TagReference StructureLightmap;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("UNUSED radiance est. search distance", typeof(Single))]
            public Single UnusedRadianceEstSearchDistance;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("UNUSED luminels per world unit", typeof(Single))]
            public Single UnusedLuminelsPerWorldUnit;
            [FieldAttribute("UNUSED output white reference", typeof(Single))]
            public Single UnusedOutputWhiteReference;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString3;
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString4;
            [FieldAttribute("Default Sky", typeof(Int16))]
            public Int16 DefaultSky;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString5;
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[16];
                this.StructureBsp = TagReference.Null;
                this.StructureLightmap = TagReference.Null;
                this.EmptyString1 = new byte[4];
                this.UnusedRadianceEstSearchDistance = 0;
                this.EmptyString2 = new byte[4];
                this.UnusedLuminelsPerWorldUnit = 0;
                this.UnusedOutputWhiteReference = 0;
                this.EmptyString3 = new byte[8];
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString4 = new byte[2];
                this.DefaultSky = 0;
                this.EmptyString5 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(16);
                this.StructureBsp = reader.Read<TagReference>();
                this.StructureLightmap = reader.Read<TagReference>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.UnusedRadianceEstSearchDistance = reader.ReadSingle();
                this.EmptyString2 = reader.ReadBytes(4);
                this.UnusedLuminelsPerWorldUnit = reader.ReadSingle();
                this.UnusedOutputWhiteReference = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(8);
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString4 = reader.ReadBytes(2);
                this.DefaultSky = reader.ReadInt16();
                this.EmptyString5 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                DefaultSkyEnabled = 1,
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class ScenarioResourcesBlock : AbideTagBlock
        {
            private TagBlockList<ScenarioResourceReferenceBlock> referencesList = new TagBlockList<ScenarioResourceReferenceBlock>(16);
            private TagBlockList<ScenarioHsSourceReferenceBlock> scriptSourceList = new TagBlockList<ScenarioHsSourceReferenceBlock>(8);
            private TagBlockList<ScenarioAiResourceReferenceBlock> aiResourcesList = new TagBlockList<ScenarioAiResourceReferenceBlock>(2);
            [FieldAttribute("References*", typeof(TagBlock))]
            [BlockAttribute("scenario_resource_reference_block", 16, typeof(ScenarioResourceReferenceBlock))]
            public TagBlock References;
            [FieldAttribute("Script Source*", typeof(TagBlock))]
            [BlockAttribute("scenario_hs_source_reference_block", 8, typeof(ScenarioHsSourceReferenceBlock))]
            public TagBlock ScriptSource;
            [FieldAttribute("AI Resources*", typeof(TagBlock))]
            [BlockAttribute("scenario_ai_resource_reference_block", 2, typeof(ScenarioAiResourceReferenceBlock))]
            public TagBlock AiResources;
            public TagBlockList<ScenarioResourceReferenceBlock> ReferencesList
            {
                get
                {
                    return this.referencesList;
                }
            }
            public TagBlockList<ScenarioHsSourceReferenceBlock> ScriptSourceList
            {
                get
                {
                    return this.scriptSourceList;
                }
            }
            public TagBlockList<ScenarioAiResourceReferenceBlock> AiResourcesList
            {
                get
                {
                    return this.aiResourcesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.referencesList.Clear();
                this.scriptSourceList.Clear();
                this.aiResourcesList.Clear();
                this.References = TagBlock.Zero;
                this.ScriptSource = TagBlock.Zero;
                this.AiResources = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.References = reader.ReadInt64();
                this.referencesList.Read(reader, this.References);
                this.ScriptSource = reader.ReadInt64();
                this.scriptSourceList.Read(reader, this.ScriptSource);
                this.AiResources = reader.ReadInt64();
                this.aiResourcesList.Read(reader, this.AiResources);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class ScenarioResourceReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("Reference*", typeof(TagReference))]
                public TagReference Reference;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Reference = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Reference = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class ScenarioHsSourceReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("Reference*", typeof(TagReference))]
                public TagReference Reference;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Reference = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Reference = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class ScenarioAiResourceReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("Reference*", typeof(TagReference))]
                public TagReference Reference;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Reference = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Reference = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(60, 4)]
        public sealed class OldUnusedStrucurePhysicsBlock : AbideTagBlock
        {
            private DataList moppCodeList = new DataList(1048576);
            private TagBlockList<OldUnusedObjectIdentifiersBlock> evironmentObjectIdentifiersList = new TagBlockList<OldUnusedObjectIdentifiersBlock>(2048);
            [FieldAttribute("*mopp code", typeof(TagBlock))]
            [DataAttribute(1048576)]
            public TagBlock MoppCode;
            [FieldAttribute("*Evironment Object Identifiers", typeof(TagBlock))]
            [BlockAttribute("old_unused_object_identifiers_block", 2048, typeof(OldUnusedObjectIdentifiersBlock))]
            public TagBlock EvironmentObjectIdentifiers;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("mopp Bounds Min*", typeof(Vector3))]
            public Vector3 MoppBoundsMin;
            [FieldAttribute("mopp Bounds Max*", typeof(Vector3))]
            public Vector3 MoppBoundsMax;
            public DataList MoppCodeList
            {
                get
                {
                    return this.moppCodeList;
                }
            }
            public TagBlockList<OldUnusedObjectIdentifiersBlock> EvironmentObjectIdentifiersList
            {
                get
                {
                    return this.evironmentObjectIdentifiersList;
                }
            }
            public override int Size
            {
                get
                {
                    return 60;
                }
            }
            public override void Initialize()
            {
                this.moppCodeList.Clear();
                this.evironmentObjectIdentifiersList.Clear();
                this.MoppCode = TagBlock.Zero;
                this.EvironmentObjectIdentifiers = TagBlock.Zero;
                this.EmptyString = new byte[4];
                this.MoppBoundsMin = Vector3.Zero;
                this.MoppBoundsMax = Vector3.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.MoppCode = reader.ReadInt64();
                this.moppCodeList.Read(reader, this.MoppCode);
                this.EvironmentObjectIdentifiers = reader.ReadInt64();
                this.evironmentObjectIdentifiersList.Read(reader, this.EvironmentObjectIdentifiers);
                this.EmptyString = reader.ReadBytes(4);
                this.MoppBoundsMin = reader.Read<Vector3>();
                this.MoppBoundsMax = reader.Read<Vector3>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class OldUnusedObjectIdentifiersBlock : AbideTagBlock
            {
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class HsUnitSeatBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Int32))]
            public Int32 EmptyString;
            [FieldAttribute("", typeof(Int32))]
            public Int32 EmptyString1;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = 0;
                this.EmptyString1 = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadInt32();
                this.EmptyString1 = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(2, 4)]
        public sealed class ScenarioKillTriggerVolumesBlock : AbideTagBlock
        {
            [FieldAttribute("Trigger Volume", typeof(Int16))]
            public Int16 TriggerVolume;
            public override int Size
            {
                get
                {
                    return 2;
                }
            }
            public override void Initialize()
            {
                this.TriggerVolume = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.TriggerVolume = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class SyntaxDatumBlock : AbideTagBlock
        {
            [FieldAttribute("Datum Header", typeof(Int16))]
            public Int16 DatumHeader;
            [FieldAttribute("Script Index/Function Index/Constant Type Union", typeof(Int16))]
            public Int16 ScriptIndexfunctionIndexconstantTypeUnion;
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Flags", typeof(Int16))]
            public Int16 Flags;
            [FieldAttribute("Next Node Index", typeof(Int32))]
            public Int32 NextNodeIndex;
            [FieldAttribute("Data", typeof(Int32))]
            public Int32 Data;
            [FieldAttribute("source_offset", typeof(Int32))]
            public Int32 SourceOffset;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.DatumHeader = 0;
                this.ScriptIndexfunctionIndexconstantTypeUnion = 0;
                this.Type = 0;
                this.Flags = 0;
                this.NextNodeIndex = 0;
                this.Data = 0;
                this.SourceOffset = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.DatumHeader = reader.ReadInt16();
                this.ScriptIndexfunctionIndexconstantTypeUnion = reader.ReadInt16();
                this.Type = reader.ReadInt16();
                this.Flags = reader.ReadInt16();
                this.NextNodeIndex = reader.ReadInt32();
                this.Data = reader.ReadInt32();
                this.SourceOffset = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(224, 4)]
        public sealed class OrdersBlock : AbideTagBlock
        {
            private TagBlockList<ZoneSetBlock> primaryAreaSetList = new TagBlockList<ZoneSetBlock>(32);
            private TagBlockList<SecondaryZoneSetBlock> secondaryAreaSetList = new TagBlockList<SecondaryZoneSetBlock>(32);
            private TagBlockList<SecondarySetTriggerBlock> secondarySetTriggerList = new TagBlockList<SecondarySetTriggerBlock>(1);
            private TagBlockList<SpecialMovementBlock> specialMovementList = new TagBlockList<SpecialMovementBlock>(1);
            private TagBlockList<OrderEndingBlock> orderEndingsList = new TagBlockList<OrderEndingBlock>(12);
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Style", typeof(Int16))]
            public Int16 Style;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Force combat status", typeof(ForceCombatStatusOptions))]
            [OptionsAttribute(typeof(ForceCombatStatusOptions), false)]
            public ForceCombatStatusOptions ForceCombatStatus;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("Entry Script", typeof(String32))]
            public String32 EntryScript;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("Follow squad", typeof(Int16))]
            public Int16 FollowSquad;
            [FieldAttribute("follow radius", typeof(Single))]
            public Single FollowRadius;
            [FieldAttribute("Primary area set", typeof(TagBlock))]
            [BlockAttribute("zone_set_block", 32, typeof(ZoneSetBlock))]
            public TagBlock PrimaryAreaSet;
            [FieldAttribute("Secondary area set", typeof(TagBlock))]
            [BlockAttribute("secondary_zone_set_block", 32, typeof(SecondaryZoneSetBlock))]
            public TagBlock SecondaryAreaSet;
            [FieldAttribute("Secondary set trigger", typeof(TagBlock))]
            [BlockAttribute("secondary_set_trigger_block", 1, typeof(SecondarySetTriggerBlock))]
            public TagBlock SecondarySetTrigger;
            [FieldAttribute("Special movement", typeof(TagBlock))]
            [BlockAttribute("special_movement_block", 1, typeof(SpecialMovementBlock))]
            public TagBlock SpecialMovement;
            [FieldAttribute("Order endings", typeof(TagBlock))]
            [BlockAttribute("order_ending_block", 12, typeof(OrderEndingBlock))]
            public TagBlock OrderEndings;
            public TagBlockList<ZoneSetBlock> PrimaryAreaSetList
            {
                get
                {
                    return this.primaryAreaSetList;
                }
            }
            public TagBlockList<SecondaryZoneSetBlock> SecondaryAreaSetList
            {
                get
                {
                    return this.secondaryAreaSetList;
                }
            }
            public TagBlockList<SecondarySetTriggerBlock> SecondarySetTriggerList
            {
                get
                {
                    return this.secondarySetTriggerList;
                }
            }
            public TagBlockList<SpecialMovementBlock> SpecialMovementList
            {
                get
                {
                    return this.specialMovementList;
                }
            }
            public TagBlockList<OrderEndingBlock> OrderEndingsList
            {
                get
                {
                    return this.orderEndingsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 224;
                }
            }
            public override void Initialize()
            {
                this.primaryAreaSetList.Clear();
                this.secondaryAreaSetList.Clear();
                this.secondarySetTriggerList.Clear();
                this.specialMovementList.Clear();
                this.orderEndingsList.Clear();
                this.Name = String32.Empty;
                this.Style = 0;
                this.EmptyString = new byte[2];
                this.Flags = ((FlagsOptions)(0));
                this.ForceCombatStatus = ((ForceCombatStatusOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EntryScript = String32.Empty;
                this.EmptyString2 = new byte[2];
                this.FollowSquad = 0;
                this.FollowRadius = 0;
                this.PrimaryAreaSet = TagBlock.Zero;
                this.SecondaryAreaSet = TagBlock.Zero;
                this.SecondarySetTrigger = TagBlock.Zero;
                this.SpecialMovement = TagBlock.Zero;
                this.OrderEndings = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Style = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.ForceCombatStatus = ((ForceCombatStatusOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EntryScript = reader.Read<String32>();
                this.EmptyString2 = reader.ReadBytes(2);
                this.FollowSquad = reader.ReadInt16();
                this.FollowRadius = reader.ReadSingle();
                this.PrimaryAreaSet = reader.ReadInt64();
                this.primaryAreaSetList.Read(reader, this.PrimaryAreaSet);
                this.SecondaryAreaSet = reader.ReadInt64();
                this.secondaryAreaSetList.Read(reader, this.SecondaryAreaSet);
                this.SecondarySetTrigger = reader.ReadInt64();
                this.secondarySetTriggerList.Read(reader, this.SecondarySetTrigger);
                this.SpecialMovement = reader.ReadInt64();
                this.specialMovementList.Read(reader, this.SpecialMovement);
                this.OrderEndings = reader.ReadInt64();
                this.orderEndingsList.Read(reader, this.OrderEndings);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ZoneSetBlock : AbideTagBlock
            {
                [FieldAttribute("area type", typeof(AreaTypeOptions))]
                [OptionsAttribute(typeof(AreaTypeOptions), false)]
                public AreaTypeOptions AreaType;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("zone^", typeof(Int16))]
                public Int16 Zone;
                [FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.AreaType = ((AreaTypeOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Zone = 0;
                    this.Area = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.AreaType = ((AreaTypeOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Zone = reader.ReadInt16();
                    this.Area = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum AreaTypeOptions : Int16
                {
                    Deault = 0,
                    Search = 1,
                    Goal = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class SecondaryZoneSetBlock : AbideTagBlock
            {
                [FieldAttribute("area type", typeof(AreaTypeOptions))]
                [OptionsAttribute(typeof(AreaTypeOptions), false)]
                public AreaTypeOptions AreaType;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("zone^", typeof(Int16))]
                public Int16 Zone;
                [FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.AreaType = ((AreaTypeOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Zone = 0;
                    this.Area = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.AreaType = ((AreaTypeOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Zone = reader.ReadInt16();
                    this.Area = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum AreaTypeOptions : Int16
                {
                    Deault = 0,
                    Search = 1,
                    Goal = 2,
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class SecondarySetTriggerBlock : AbideTagBlock
            {
                private TagBlockList<TriggerReferences> triggersList = new TagBlockList<TriggerReferences>(10);
                [FieldAttribute("combination rule", typeof(CombinationRuleOptions))]
                [OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public CombinationRuleOptions CombinationRule;
                [FieldAttribute("dialogue type#when this ending is triggered, launch a dialogue event of the given" +
                    " type", typeof(DialogueTypeOptions))]
                [OptionsAttribute(typeof(DialogueTypeOptions), false)]
                public DialogueTypeOptions DialogueType;
                [FieldAttribute("triggers", typeof(TagBlock))]
                [BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public TagBlockList<TriggerReferences> TriggersList
                {
                    get
                    {
                        return this.triggersList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.triggersList.Clear();
                    this.CombinationRule = ((CombinationRuleOptions)(0));
                    this.DialogueType = ((DialogueTypeOptions)(0));
                    this.Triggers = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.CombinationRule = ((CombinationRuleOptions)(reader.ReadInt16()));
                    this.DialogueType = ((DialogueTypeOptions)(reader.ReadInt16()));
                    this.Triggers = reader.ReadInt64();
                    this.triggersList.Read(reader, this.Triggers);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : AbideTagBlock
                {
                    [FieldAttribute("Trigger flags", typeof(TriggerFlagsOptions))]
                    [OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public TriggerFlagsOptions TriggerFlags;
                    [FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.TriggerFlags = ((TriggerFlagsOptions)(0));
                        this.Trigger = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.TriggerFlags = ((TriggerFlagsOptions)(reader.ReadInt32()));
                        this.Trigger = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions : Int32
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions : Int16
                {
                    Or = 0,
                    And = 1,
                }
                public enum DialogueTypeOptions : Int16
                {
                    None = 0,
                    Advance = 1,
                    Charge = 2,
                    FallBack = 3,
                    Retreat = 4,
                    Moveone = 5,
                    Arrival = 6,
                    EnterVehicle = 7,
                    ExitVehicle = 8,
                    FollowPlayer = 9,
                    LeavePlayer = 10,
                    Support = 11,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class SpecialMovementBlock : AbideTagBlock
            {
                [FieldAttribute("Special movement 1", typeof(SpecialMovement1Options))]
                [OptionsAttribute(typeof(SpecialMovement1Options), true)]
                public SpecialMovement1Options SpecialMovement1;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.SpecialMovement1 = ((SpecialMovement1Options)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.SpecialMovement1 = ((SpecialMovement1Options)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum SpecialMovement1Options : Int32
                {
                    Jump = 1,
                    Climb = 2,
                    Vault = 4,
                    Mount = 8,
                    Hoist = 16,
                    WallJump = 32,
                    Na = 64,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class OrderEndingBlock : AbideTagBlock
            {
                private TagBlockList<TriggerReferences> triggersList = new TagBlockList<TriggerReferences>(10);
                [FieldAttribute("next order^", typeof(Int16))]
                public Int16 NextOrder;
                [FieldAttribute("combination rule", typeof(CombinationRuleOptions))]
                [OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public CombinationRuleOptions CombinationRule;
                [FieldAttribute("delay time", typeof(Single))]
                public Single DelayTime;
                [FieldAttribute("dialogue type#when this ending is triggered, launch a dialogue event of the given" +
                    " type", typeof(DialogueTypeOptions))]
                [OptionsAttribute(typeof(DialogueTypeOptions), false)]
                public DialogueTypeOptions DialogueType;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("triggers", typeof(TagBlock))]
                [BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public TagBlockList<TriggerReferences> TriggersList
                {
                    get
                    {
                        return this.triggersList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.triggersList.Clear();
                    this.NextOrder = 0;
                    this.CombinationRule = ((CombinationRuleOptions)(0));
                    this.DelayTime = 0;
                    this.DialogueType = ((DialogueTypeOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Triggers = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.NextOrder = reader.ReadInt16();
                    this.CombinationRule = ((CombinationRuleOptions)(reader.ReadInt16()));
                    this.DelayTime = reader.ReadSingle();
                    this.DialogueType = ((DialogueTypeOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Triggers = reader.ReadInt64();
                    this.triggersList.Read(reader, this.Triggers);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : AbideTagBlock
                {
                    [FieldAttribute("Trigger flags", typeof(TriggerFlagsOptions))]
                    [OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public TriggerFlagsOptions TriggerFlags;
                    [FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.TriggerFlags = ((TriggerFlagsOptions)(0));
                        this.Trigger = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.TriggerFlags = ((TriggerFlagsOptions)(reader.ReadInt32()));
                        this.Trigger = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions : Int32
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions : Int16
                {
                    Or = 0,
                    And = 1,
                }
                public enum DialogueTypeOptions : Int16
                {
                    None = 0,
                    Advance = 1,
                    Charge = 2,
                    FallBack = 3,
                    Retreat = 4,
                    Moveone = 5,
                    Arrival = 6,
                    EnterVehicle = 7,
                    ExitVehicle = 8,
                    FollowPlayer = 9,
                    LeavePlayer = 10,
                    Support = 11,
                }
            }
            public enum FlagsOptions : Int32
            {
                Locked = 1,
                AlwaysActive = 2,
                DebugOn = 4,
                StrictAreaDef = 8,
                FollowClosestPlayer = 16,
                FollowSquad = 32,
                ActiveCamo = 64,
                SuppressCombatUntilEngaged = 128,
                InhibitVehicleUse = 256,
            }
            public enum ForceCombatStatusOptions : Int16
            {
                None = 0,
                Asleep = 1,
                Idle = 2,
                Alert = 3,
                Combat = 4,
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class TriggersBlock : AbideTagBlock
        {
            private TagBlockList<OrderCompletionCondition> conditionsList = new TagBlockList<OrderCompletionCondition>(5);
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("trigger flags", typeof(TriggerFlagsOptions))]
            [OptionsAttribute(typeof(TriggerFlagsOptions), true)]
            public TriggerFlagsOptions TriggerFlags;
            [FieldAttribute("combination rule", typeof(CombinationRuleOptions))]
            [OptionsAttribute(typeof(CombinationRuleOptions), false)]
            public CombinationRuleOptions CombinationRule;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("conditions", typeof(TagBlock))]
            [BlockAttribute("order_completion_condition", 5, typeof(OrderCompletionCondition))]
            public TagBlock Conditions;
            public TagBlockList<OrderCompletionCondition> ConditionsList
            {
                get
                {
                    return this.conditionsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.conditionsList.Clear();
                this.Name = String32.Empty;
                this.TriggerFlags = ((TriggerFlagsOptions)(0));
                this.CombinationRule = ((CombinationRuleOptions)(0));
                this.EmptyString = new byte[2];
                this.Conditions = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.TriggerFlags = ((TriggerFlagsOptions)(reader.ReadInt32()));
                this.CombinationRule = ((CombinationRuleOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.Conditions = reader.ReadInt64();
                this.conditionsList.Read(reader, this.Conditions);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(56, 4)]
            public sealed class OrderCompletionCondition : AbideTagBlock
            {
                [FieldAttribute("rule type^", typeof(RuleTypeOptions))]
                [OptionsAttribute(typeof(RuleTypeOptions), false)]
                public RuleTypeOptions RuleType;
                [FieldAttribute("squad", typeof(Int16))]
                public Int16 Squad;
                [FieldAttribute("squad group", typeof(Int16))]
                public Int16 SquadGroup;
                [FieldAttribute("a", typeof(Int16))]
                public Int16 A;
                [FieldAttribute("x", typeof(Single))]
                public Single X;
                [FieldAttribute("trigger volume", typeof(Int16))]
                public Int16 TriggerVolume;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("Exit condition script", typeof(String32))]
                public String32 ExitConditionScript;
                [FieldAttribute("", typeof(Int16))]
                public Int16 EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 56;
                    }
                }
                public override void Initialize()
                {
                    this.RuleType = ((RuleTypeOptions)(0));
                    this.Squad = 0;
                    this.SquadGroup = 0;
                    this.A = 0;
                    this.X = 0;
                    this.TriggerVolume = 0;
                    this.EmptyString = new byte[2];
                    this.ExitConditionScript = String32.Empty;
                    this.EmptyString1 = 0;
                    this.EmptyString2 = new byte[2];
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.RuleType = ((RuleTypeOptions)(reader.ReadInt16()));
                    this.Squad = reader.ReadInt16();
                    this.SquadGroup = reader.ReadInt16();
                    this.A = reader.ReadInt16();
                    this.X = reader.ReadSingle();
                    this.TriggerVolume = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.ExitConditionScript = reader.Read<String32>();
                    this.EmptyString1 = reader.ReadInt16();
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum RuleTypeOptions : Int16
                {
                    AOrGreaterAlive = 0,
                    AOrFewerAlive = 1,
                    XOrGreaterStrength = 2,
                    XOrLessStrength = 3,
                    IfEnemySighted = 4,
                    AfterATicks = 5,
                    IfAlertedBySquadA = 6,
                    ScriptRefTrue = 7,
                    ScriptRefFalse = 8,
                    IfPlayerInTriggerVolume = 9,
                    IfAllPlayersInTriggerVolume = 10,
                    CombatStatusAOrMore = 11,
                    CombatStatusAOrLess = 12,
                    Arrived = 13,
                    InVehicle = 14,
                    SightedPlayer = 15,
                    AOrGreaterFighting = 16,
                    AOrFewerFighting = 17,
                    PlayerWithinXWorldUnits = 18,
                    PlayerShotMoreThanXSecondsAgo = 19,
                    GameSafeToSave = 20,
                }
                public enum FlagsOptions : Int32
                {
                    Not = 1,
                }
            }
            public enum TriggerFlagsOptions : Int32
            {
                LatchOnWhenTriggered = 1,
            }
            public enum CombinationRuleOptions : Int16
            {
                Or = 0,
                And = 1,
            }
        }
        [FieldSetAttribute(116, 4)]
        public sealed class StructureBspBackgroundSoundPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Background Sound", typeof(TagReference))]
            public TagReference BackgroundSound;
            [FieldAttribute("Inside Cluster Sound#Play only when player is inside cluster.", typeof(TagReference))]
            public TagReference InsideClusterSound;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString;
            [FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [FieldAttribute("Scale Flags", typeof(ScaleFlagsOptions))]
            [OptionsAttribute(typeof(ScaleFlagsOptions), true)]
            public ScaleFlagsOptions ScaleFlags;
            [FieldAttribute("Interior Scale", typeof(Single))]
            public Single InteriorScale;
            [FieldAttribute("Portal Scale", typeof(Single))]
            public Single PortalScale;
            [FieldAttribute("Exterior Scale", typeof(Single))]
            public Single ExteriorScale;
            [FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 116;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.BackgroundSound = TagReference.Null;
                this.InsideClusterSound = TagReference.Null;
                this.EmptyString = new byte[20];
                this.CutoffDistance = 0;
                this.ScaleFlags = ((ScaleFlagsOptions)(0));
                this.InteriorScale = 0;
                this.PortalScale = 0;
                this.ExteriorScale = 0;
                this.InterpolationSpeed = 0;
                this.EmptyString1 = new byte[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.BackgroundSound = reader.Read<TagReference>();
                this.InsideClusterSound = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(20);
                this.CutoffDistance = reader.ReadSingle();
                this.ScaleFlags = ((ScaleFlagsOptions)(reader.ReadInt32()));
                this.InteriorScale = reader.ReadSingle();
                this.PortalScale = reader.ReadSingle();
                this.ExteriorScale = reader.ReadSingle();
                this.InterpolationSpeed = reader.ReadSingle();
                this.EmptyString1 = reader.ReadBytes(8);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum ScaleFlagsOptions : Int32
            {
                OverrideDefaultScale = 1,
                UseAdjacentClusterAsPortalScale = 2,
                UseAdjacentClusterAsExteriorScale = 4,
                ScaleWithWeatherIntensity = 8,
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class StructureBspSoundEnvironmentPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Sound Environment", typeof(TagReference))]
            public TagReference SoundEnvironment;
            [FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.SoundEnvironment = TagReference.Null;
                this.CutoffDistance = 0;
                this.InterpolationSpeed = 0;
                this.EmptyString = new byte[24];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.SoundEnvironment = reader.Read<TagReference>();
                this.CutoffDistance = reader.ReadSingle();
                this.InterpolationSpeed = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(24);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(152, 4)]
        public sealed class StructureBspWeatherPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Weather System", typeof(TagReference))]
            public TagReference WeatherSystem;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString2;
            [FieldAttribute("Wind", typeof(TagReference))]
            public TagReference Wind;
            [FieldAttribute("Wind Direction", typeof(Vector3))]
            public Vector3 WindDirection;
            [FieldAttribute("Wind Magnitude", typeof(Single))]
            public Single WindMagnitude;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("Wind Scale Function", typeof(String32))]
            public String32 WindScaleFunction;
            public override int Size
            {
                get
                {
                    return 152;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.WeatherSystem = TagReference.Null;
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[32];
                this.Wind = TagReference.Null;
                this.WindDirection = Vector3.Zero;
                this.WindMagnitude = 0;
                this.EmptyString3 = new byte[4];
                this.WindScaleFunction = String32.Empty;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.WeatherSystem = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(32);
                this.Wind = reader.Read<TagReference>();
                this.WindDirection = reader.Read<Vector3>();
                this.WindMagnitude = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(4);
                this.WindScaleFunction = reader.Read<String32>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(0, 4)]
        public sealed class GNullBlock : AbideTagBlock
        {
            public override int Size
            {
                get
                {
                    return 0;
                }
            }
            public override void Initialize()
            {
            }
            public override void Read(BinaryReader reader)
            {
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class ScenarioClusterDataBlock : AbideTagBlock
        {
            private TagBlockList<ScenarioClusterBackgroundSoundsBlock> backgroundSoundsList = new TagBlockList<ScenarioClusterBackgroundSoundsBlock>(512);
            private TagBlockList<ScenarioClusterSoundEnvironmentsBlock> soundEnvironmentsList = new TagBlockList<ScenarioClusterSoundEnvironmentsBlock>(512);
            private TagBlockList<ScenarioClusterPointsBlock> clusterCentroidsList = new TagBlockList<ScenarioClusterPointsBlock>(512);
            private TagBlockList<ScenarioClusterWeatherPropertiesBlock> weatherPropertiesList = new TagBlockList<ScenarioClusterWeatherPropertiesBlock>(512);
            private TagBlockList<ScenarioClusterAtmosphericFogPropertiesBlock> atmosphericFogPropertiesList = new TagBlockList<ScenarioClusterAtmosphericFogPropertiesBlock>(512);
            [FieldAttribute("BSP*", typeof(TagReference))]
            public TagReference Bsp;
            [FieldAttribute("Background Sounds*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_background_sounds_block", 512, typeof(ScenarioClusterBackgroundSoundsBlock))]
            public TagBlock BackgroundSounds;
            [FieldAttribute("Sound Environments*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_sound_environments_block", 512, typeof(ScenarioClusterSoundEnvironmentsBlock))]
            public TagBlock SoundEnvironments;
            [FieldAttribute("BSP Checksum*", typeof(Int32))]
            public Int32 BspChecksum;
            [FieldAttribute("Cluster Centroids*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_points_block", 512, typeof(ScenarioClusterPointsBlock))]
            public TagBlock ClusterCentroids;
            [FieldAttribute("Weather Properties*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_weather_properties_block", 512, typeof(ScenarioClusterWeatherPropertiesBlock))]
            public TagBlock WeatherProperties;
            [FieldAttribute("Atmospheric Fog Properties*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_atmospheric_fog_properties_block", 512, typeof(ScenarioClusterAtmosphericFogPropertiesBlock))]
            public TagBlock AtmosphericFogProperties;
            public TagBlockList<ScenarioClusterBackgroundSoundsBlock> BackgroundSoundsList
            {
                get
                {
                    return this.backgroundSoundsList;
                }
            }
            public TagBlockList<ScenarioClusterSoundEnvironmentsBlock> SoundEnvironmentsList
            {
                get
                {
                    return this.soundEnvironmentsList;
                }
            }
            public TagBlockList<ScenarioClusterPointsBlock> ClusterCentroidsList
            {
                get
                {
                    return this.clusterCentroidsList;
                }
            }
            public TagBlockList<ScenarioClusterWeatherPropertiesBlock> WeatherPropertiesList
            {
                get
                {
                    return this.weatherPropertiesList;
                }
            }
            public TagBlockList<ScenarioClusterAtmosphericFogPropertiesBlock> AtmosphericFogPropertiesList
            {
                get
                {
                    return this.atmosphericFogPropertiesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.backgroundSoundsList.Clear();
                this.soundEnvironmentsList.Clear();
                this.clusterCentroidsList.Clear();
                this.weatherPropertiesList.Clear();
                this.atmosphericFogPropertiesList.Clear();
                this.Bsp = TagReference.Null;
                this.BackgroundSounds = TagBlock.Zero;
                this.SoundEnvironments = TagBlock.Zero;
                this.BspChecksum = 0;
                this.ClusterCentroids = TagBlock.Zero;
                this.WeatherProperties = TagBlock.Zero;
                this.AtmosphericFogProperties = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Bsp = reader.Read<TagReference>();
                this.BackgroundSounds = reader.ReadInt64();
                this.backgroundSoundsList.Read(reader, this.BackgroundSounds);
                this.SoundEnvironments = reader.ReadInt64();
                this.soundEnvironmentsList.Read(reader, this.SoundEnvironments);
                this.BspChecksum = reader.ReadInt32();
                this.ClusterCentroids = reader.ReadInt64();
                this.clusterCentroidsList.Read(reader, this.ClusterCentroids);
                this.WeatherProperties = reader.ReadInt64();
                this.weatherPropertiesList.Read(reader, this.WeatherProperties);
                this.AtmosphericFogProperties = reader.ReadInt64();
                this.atmosphericFogPropertiesList.Read(reader, this.AtmosphericFogProperties);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterBackgroundSoundsBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterSoundEnvironmentsBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScenarioClusterPointsBlock : AbideTagBlock
            {
                [FieldAttribute("Centroid*", typeof(Vector3))]
                public Vector3 Centroid;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Centroid = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Centroid = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterWeatherPropertiesBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterAtmosphericFogPropertiesBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(108, 4)]
        public sealed class ScenarioSpawnDataBlock : AbideTagBlock
        {
            private TagBlockList<DynamicSpawnZoneOverloadBlock> dynamicSpawnOverloadsList = new TagBlockList<DynamicSpawnZoneOverloadBlock>(32);
            private TagBlockList<StaticSpawnZoneBlock> staticRespawnZonesList = new TagBlockList<StaticSpawnZoneBlock>(128);
            [FieldAttribute("Dynamic Spawn Lower Height", typeof(Single))]
            public Single DynamicSpawnLowerHeight;
            [FieldAttribute("Dynamic Spawn Upper Height", typeof(Single))]
            public Single DynamicSpawnUpperHeight;
            [FieldAttribute("Game Object Reset Height", typeof(Single))]
            public Single GameObjectResetHeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(60)]
            public Byte[] EmptyString;
            [FieldAttribute("Dynamic Spawn Overloads", typeof(TagBlock))]
            [BlockAttribute("dynamic_spawn_zone_overload_block", 32, typeof(DynamicSpawnZoneOverloadBlock))]
            public TagBlock DynamicSpawnOverloads;
            [FieldAttribute("Static Respawn Zones", typeof(TagBlock))]
            [BlockAttribute("static_spawn_zone_block", 128, typeof(StaticSpawnZoneBlock))]
            public TagBlock StaticRespawnZones;
            [FieldAttribute("Static Initial Spawn Zones", typeof(TagBlock))]
            [BlockAttribute("static_spawn_zone_block", 128, typeof(StaticSpawnZoneBlock))]
            public TagBlock StaticInitialSpawnZones;
            public TagBlockList<DynamicSpawnZoneOverloadBlock> DynamicSpawnOverloadsList
            {
                get
                {
                    return this.dynamicSpawnOverloadsList;
                }
            }
            public TagBlockList<StaticSpawnZoneBlock> StaticRespawnZonesList
            {
                get
                {
                    return this.staticRespawnZonesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 108;
                }
            }
            public override void Initialize()
            {
                this.dynamicSpawnOverloadsList.Clear();
                this.staticRespawnZonesList.Clear();
                this.DynamicSpawnLowerHeight = 0;
                this.DynamicSpawnUpperHeight = 0;
                this.GameObjectResetHeight = 0;
                this.EmptyString = new byte[60];
                this.DynamicSpawnOverloads = TagBlock.Zero;
                this.StaticRespawnZones = TagBlock.Zero;
                this.StaticInitialSpawnZones = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.DynamicSpawnLowerHeight = reader.ReadSingle();
                this.DynamicSpawnUpperHeight = reader.ReadSingle();
                this.GameObjectResetHeight = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(60);
                this.DynamicSpawnOverloads = reader.ReadInt64();
                this.dynamicSpawnOverloadsList.Read(reader, this.DynamicSpawnOverloads);
                this.StaticRespawnZones = reader.ReadInt64();
                this.staticRespawnZonesList.Read(reader, this.StaticRespawnZones);
                this.StaticInitialSpawnZones = reader.ReadInt64();
                this.staticRespawnZonesList.Read(reader, this.StaticInitialSpawnZones);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class DynamicSpawnZoneOverloadBlock : AbideTagBlock
            {
                [FieldAttribute("Overload Type", typeof(OverloadTypeOptions))]
                [OptionsAttribute(typeof(OverloadTypeOptions), false)]
                public OverloadTypeOptions OverloadType;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("Inner Radius", typeof(Single))]
                public Single InnerRadius;
                [FieldAttribute("Outer Radius", typeof(Single))]
                public Single OuterRadius;
                [FieldAttribute("Weight", typeof(Single))]
                public Single Weight;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.OverloadType = ((OverloadTypeOptions)(0));
                    this.EmptyString = new byte[2];
                    this.InnerRadius = 0;
                    this.OuterRadius = 0;
                    this.Weight = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.OverloadType = ((OverloadTypeOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.InnerRadius = reader.ReadSingle();
                    this.OuterRadius = reader.ReadSingle();
                    this.Weight = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum OverloadTypeOptions : Int16
                {
                    Enemy = 0,
                    Friend = 1,
                    EnemyVehicle = 2,
                    FriendlyVehicle = 3,
                    EmptyVehicle = 4,
                    OddballInclusion = 5,
                    OddballExclusion = 6,
                    HillInclusion = 7,
                    HillExclusion = 8,
                    LastRaceFlag = 9,
                    DeadAlly = 10,
                    ControlledTerritory = 11,
                }
            }
            [FieldSetAttribute(48, 4)]
            public sealed class StaticSpawnZoneBlock : AbideTagBlock
            {
                [FieldAttribute("Data", typeof(StaticSpawnZoneDataStructBlock))]
                public StaticSpawnZoneDataStructBlock Data;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Lower Height", typeof(Single))]
                public Single LowerHeight;
                [FieldAttribute("Upper Height", typeof(Single))]
                public Single UpperHeight;
                [FieldAttribute("Inner Radius", typeof(Single))]
                public Single InnerRadius;
                [FieldAttribute("Outer Radius", typeof(Single))]
                public Single OuterRadius;
                [FieldAttribute("Weight", typeof(Single))]
                public Single Weight;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.Data = new StaticSpawnZoneDataStructBlock();
                    this.Position = Vector3.Zero;
                    this.LowerHeight = 0;
                    this.UpperHeight = 0;
                    this.InnerRadius = 0;
                    this.OuterRadius = 0;
                    this.Weight = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Data = reader.ReadDataStructure<StaticSpawnZoneDataStructBlock>();
                    this.Position = reader.Read<Vector3>();
                    this.LowerHeight = reader.ReadSingle();
                    this.UpperHeight = reader.ReadSingle();
                    this.InnerRadius = reader.ReadSingle();
                    this.OuterRadius = reader.ReadSingle();
                    this.Weight = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class StaticSpawnZoneDataStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Name", typeof(StringId))]
                    public StringId Name;
                    [FieldAttribute("Relevant Team", typeof(RelevantTeamOptions))]
                    [OptionsAttribute(typeof(RelevantTeamOptions), true)]
                    public RelevantTeamOptions RelevantTeam;
                    [FieldAttribute("Relevant Games", typeof(RelevantGamesOptions))]
                    [OptionsAttribute(typeof(RelevantGamesOptions), true)]
                    public RelevantGamesOptions RelevantGames;
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Name = StringId.Zero;
                        this.RelevantTeam = ((RelevantTeamOptions)(0));
                        this.RelevantGames = ((RelevantGamesOptions)(0));
                        this.Flags = ((FlagsOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Name = reader.ReadInt32();
                        this.RelevantTeam = ((RelevantTeamOptions)(reader.ReadInt32()));
                        this.RelevantGames = ((RelevantGamesOptions)(reader.ReadInt32()));
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum RelevantTeamOptions : Int32
                    {
                        RedAlpha = 1,
                        BlueBravo = 2,
                        YellowCharlie = 4,
                        GreenDelta = 8,
                        PurpleEcho = 16,
                        OrangeFoxtrot = 32,
                        BrownGolf = 64,
                        PinkHotel = 128,
                        Neutral = 256,
                    }
                    public enum RelevantGamesOptions : Int32
                    {
                        Slayer = 1,
                        Oddball = 2,
                        KingOfTheHill = 4,
                        CaptureTheFlag = 8,
                        Race = 16,
                        Headhunter = 32,
                        Juggernaut = 64,
                        Territories = 128,
                    }
                    public enum FlagsOptions : Int32
                    {
                        DisabledIfFlagHome = 1,
                        DisabledIfFlagAway = 2,
                        DisabledIfBombHome = 4,
                        DisabledIfBombAway = 8,
                    }
                }
            }
        }
        [FieldSetAttribute(76, 4)]
        public sealed class ScenarioCrateBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            public override int Size
            {
                get
                {
                    return 76;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.PermutationData = new ScenarioObjectPermutationStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.PermutationData = reader.ReadDataStructure<ScenarioObjectPermutationStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : AbideTagBlock
            {
                [FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [FieldAttribute("Active Change Colors", typeof(ActiveChangeColorsOptions))]
                [OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public ActiveChangeColorsOptions ActiveChangeColors;
                [FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.VariantName = StringId.Zero;
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(0));
                    this.PrimaryColor = ColorRgb.Zero;
                    this.SecondaryColor = ColorRgb.Zero;
                    this.TertiaryColor = ColorRgb.Zero;
                    this.QuaternaryColor = ColorRgb.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.VariantName = reader.ReadInt32();
                    this.ActiveChangeColors = ((ActiveChangeColorsOptions)(reader.ReadInt32()));
                    this.PrimaryColor = reader.Read<ColorRgb>();
                    this.SecondaryColor = reader.Read<ColorRgb>();
                    this.TertiaryColor = reader.Read<ColorRgb>();
                    this.QuaternaryColor = reader.Read<ColorRgb>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions : Int32
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioCratePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(256, 4)]
        public sealed class ScenarioAtmosphericFogPalette : AbideTagBlock
        {
            private TagBlockList<ScenarioAtmosphericFogMixerBlock> mixersList = new TagBlockList<ScenarioAtmosphericFogMixerBlock>(2);
            [FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("Color", typeof(ColorRgbF))]
            public ColorRgbF Color;
            [FieldAttribute("Spread Distance:World Units#How far fog spreads into adjacent clusters: 0 default" +
                "s to 1.", typeof(Single))]
            public Single SpreadDistance;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("Maximum Density:[0,1]#Fog density clamps to this value.", typeof(Single))]
            public Single MaximumDensity;
            [FieldAttribute("Start Distance:World Units#Before this distance, there is no fog.", typeof(Single))]
            public Single StartDistance;
            [FieldAttribute("Opaque Distance:World Units#Fog becomes opaque (maximum density) at this distance" +
                " from viewer.", typeof(Single))]
            public Single OpaqueDistance;
            [FieldAttribute("Color", typeof(ColorRgbF))]
            public ColorRgbF Color1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("Maximum Density:[0,1]#Fog density clamps to this value.", typeof(Single))]
            public Single MaximumDensity1;
            [FieldAttribute("Start Distance:World Units#Before this distance, there is no fog.", typeof(Single))]
            public Single StartDistance1;
            [FieldAttribute("Opaque Distance:World Units#Fog becomes opaque (maximum density) at this distance" +
                " from viewer.", typeof(Single))]
            public Single OpaqueDistance1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("Planar Color", typeof(ColorRgbF))]
            public ColorRgbF PlanarColor;
            [FieldAttribute("Planar Max Density:[0,1]", typeof(Single))]
            public Single PlanarMaxDensity;
            [FieldAttribute("Planar Override Amount:[0,1]", typeof(Single))]
            public Single PlanarOverrideAmount;
            [FieldAttribute("Planar Min Distance Bias:World Units#Don\'t ask.", typeof(Single))]
            public Single PlanarMinDistanceBias;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(44)]
            public Byte[] EmptyString3;
            [FieldAttribute("Patchy Color", typeof(ColorRgbF))]
            public ColorRgbF PatchyColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString5;
            [FieldAttribute("Patchy Fog", typeof(TagReference))]
            public TagReference PatchyFog;
            [FieldAttribute("Mixers", typeof(TagBlock))]
            [BlockAttribute("mixers", 2, typeof(ScenarioAtmosphericFogMixerBlock))]
            public TagBlock Mixers;
            [FieldAttribute("Amount:[0,1]", typeof(Single))]
            public Single Amount;
            [FieldAttribute("Threshold:[0,1]", typeof(Single))]
            public Single Threshold;
            [FieldAttribute("Brightness:[0,1]", typeof(Single))]
            public Single Brightness;
            [FieldAttribute("Gamma Power", typeof(Single))]
            public Single GammaPower;
            [FieldAttribute("Camera Immersion Flags", typeof(CameraImmersionFlagsOptions))]
            [OptionsAttribute(typeof(CameraImmersionFlagsOptions), true)]
            public CameraImmersionFlagsOptions CameraImmersionFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString6;
            public TagBlockList<ScenarioAtmosphericFogMixerBlock> MixersList
            {
                get
                {
                    return this.mixersList;
                }
            }
            public override int Size
            {
                get
                {
                    return 256;
                }
            }
            public override void Initialize()
            {
                this.mixersList.Clear();
                this.Name = StringId.Zero;
                this.Color = ColorRgbF.Zero;
                this.SpreadDistance = 0;
                this.EmptyString = new byte[4];
                this.MaximumDensity = 0;
                this.StartDistance = 0;
                this.OpaqueDistance = 0;
                this.Color1 = ColorRgbF.Zero;
                this.EmptyString1 = new byte[4];
                this.MaximumDensity1 = 0;
                this.StartDistance1 = 0;
                this.OpaqueDistance1 = 0;
                this.EmptyString2 = new byte[4];
                this.PlanarColor = ColorRgbF.Zero;
                this.PlanarMaxDensity = 0;
                this.PlanarOverrideAmount = 0;
                this.PlanarMinDistanceBias = 0;
                this.EmptyString3 = new byte[44];
                this.PatchyColor = ColorRgbF.Zero;
                this.EmptyString4 = new byte[12];
                this.EmptyString5 = new byte[32];
                this.PatchyFog = TagReference.Null;
                this.Mixers = TagBlock.Zero;
                this.Amount = 0;
                this.Threshold = 0;
                this.Brightness = 0;
                this.GammaPower = 0;
                this.CameraImmersionFlags = ((CameraImmersionFlagsOptions)(0));
                this.EmptyString6 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Color = reader.Read<ColorRgbF>();
                this.SpreadDistance = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(4);
                this.MaximumDensity = reader.ReadSingle();
                this.StartDistance = reader.ReadSingle();
                this.OpaqueDistance = reader.ReadSingle();
                this.Color1 = reader.Read<ColorRgbF>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.MaximumDensity1 = reader.ReadSingle();
                this.StartDistance1 = reader.ReadSingle();
                this.OpaqueDistance1 = reader.ReadSingle();
                this.EmptyString2 = reader.ReadBytes(4);
                this.PlanarColor = reader.Read<ColorRgbF>();
                this.PlanarMaxDensity = reader.ReadSingle();
                this.PlanarOverrideAmount = reader.ReadSingle();
                this.PlanarMinDistanceBias = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(44);
                this.PatchyColor = reader.Read<ColorRgbF>();
                this.EmptyString4 = reader.ReadBytes(12);
                this.EmptyString5 = reader.ReadBytes(32);
                this.PatchyFog = reader.Read<TagReference>();
                this.Mixers = reader.ReadInt64();
                this.mixersList.Read(reader, this.Mixers);
                this.Amount = reader.ReadSingle();
                this.Threshold = reader.ReadSingle();
                this.Brightness = reader.ReadSingle();
                this.GammaPower = reader.ReadSingle();
                this.CameraImmersionFlags = ((CameraImmersionFlagsOptions)(reader.ReadInt16()));
                this.EmptyString6 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class ScenarioAtmosphericFogMixerBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Atmospheric Fog Source:From Scenario Atmospheric Fog Palette", typeof(StringId))]
                public StringId AtmosphericFogSource;
                [FieldAttribute("Interpolator:From Scenario Interpolators", typeof(StringId))]
                public StringId Interpolator;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[4];
                    this.AtmosphericFogSource = StringId.Zero;
                    this.Interpolator = StringId.Zero;
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(4);
                    this.AtmosphericFogSource = reader.ReadInt32();
                    this.Interpolator = reader.ReadInt32();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum CameraImmersionFlagsOptions : Int16
            {
                DisableAtmosphericFog = 1,
                DisableSecondaryFog = 2,
                DisablePlanarFog = 4,
                InvertPlanarFogPriorities = 8,
                DisableWater = 16,
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class ScenarioPlanarFogPalette : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("Planar Fog", typeof(TagReference))]
            public TagReference PlanarFog;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.PlanarFog = TagReference.Null;
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.PlanarFog = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(148, 4)]
        public sealed class FlockDefinitionBlock : AbideTagBlock
        {
            private TagBlockList<FlockSourceBlock> sourcesList = new TagBlockList<FlockSourceBlock>(10);
            private TagBlockList<FlockSinkBlock> sinksList = new TagBlockList<FlockSinkBlock>(10);
            [FieldAttribute("bsp", typeof(Int16))]
            public Int16 Bsp;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("bounding volume", typeof(Int16))]
            public Int16 BoundingVolume;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("ecology margin:wus#distance from ecology boundary that creature begins to be repu" +
                "lsed", typeof(Single))]
            public Single EcologyMargin;
            [FieldAttribute("sources", typeof(TagBlock))]
            [BlockAttribute("flock_source_block", 10, typeof(FlockSourceBlock))]
            public TagBlock Sources;
            [FieldAttribute("sinks", typeof(TagBlock))]
            [BlockAttribute("flock_sink_block", 10, typeof(FlockSinkBlock))]
            public TagBlock Sinks;
            [FieldAttribute("production frequency:boids/sec#How frequently boids are produced at one of the so" +
                "urces (limited by the max boid count)", typeof(Single))]
            public Single ProductionFrequency;
            [FieldAttribute("creature^", typeof(TagReference))]
            public TagReference Creature;
            [FieldAttribute("neighborhood radius:world units#distance within which one boid is affected by ano" +
                "ther", typeof(Single))]
            public Single NeighborhoodRadius;
            [FieldAttribute("avoidance radius:world units#distance that a boid tries to maintain from another", typeof(Single))]
            public Single AvoidanceRadius;
            [FieldAttribute("forward scale:[0..1]#weight given to boid\'s desire to fly straight ahead", typeof(Single))]
            public Single ForwardScale;
            [FieldAttribute("alignment scale:[0..1]#weight given to boid\'s desire to align itself with neighbo" +
                "ring boids", typeof(Single))]
            public Single AlignmentScale;
            [FieldAttribute("avoidance scale:[0..1]#weight given to boid\'s desire to avoid collisions with oth" +
                "er boids, when within the avoidance radius", typeof(Single))]
            public Single AvoidanceScale;
            [FieldAttribute("leveling force scale:[0..1]#weight given to boids desire to fly level", typeof(Single))]
            public Single LevelingForceScale;
            [FieldAttribute("sink scale:[0..1]#weight given to boid\'s desire to fly towards its sinks", typeof(Single))]
            public Single SinkScale;
            [FieldAttribute("perception angle:degrees#angle-from-forward within which one boid can perceive an" +
                "d react to another", typeof(Single))]
            public Single PerceptionAngle;
            [FieldAttribute("average throttle:[0..1]#throttle at which boids will naturally fly", typeof(Single))]
            public Single AverageThrottle;
            [FieldAttribute("maximum throttle:[0..1]#maximum throttle applicable", typeof(Single))]
            public Single MaximumThrottle;
            [FieldAttribute("position scale:[0..1]#weight given to boid\'s desire to be near flock center", typeof(Single))]
            public Single PositionScale;
            [FieldAttribute("position min radius:wus#distance to flock center beyond which an attracting force" +
                " is applied", typeof(Single))]
            public Single PositionMinRadius;
            [FieldAttribute("position max radius:wus#distance to flock center at which the maximum attracting " +
                "force is applied", typeof(Single))]
            public Single PositionMaxRadius;
            [FieldAttribute("movement weight threshold#The threshold of accumulated weight over which movement" +
                " occurs", typeof(Single))]
            public Single MovementWeightThreshold;
            [FieldAttribute("danger radius:wus#distance within which boids will avoid a dangerous object (e.g." +
                " the player)", typeof(Single))]
            public Single DangerRadius;
            [FieldAttribute("danger scale#weight given to boid\'s desire to avoid danger", typeof(Single))]
            public Single DangerScale;
            [FieldAttribute("random offset scale:[0..1]#weight given to boid\'s random heading offset", typeof(Single))]
            public Single RandomOffsetScale;
            [FieldAttribute("flock name", typeof(StringId))]
            public StringId FlockName;
            public TagBlockList<FlockSourceBlock> SourcesList
            {
                get
                {
                    return this.sourcesList;
                }
            }
            public TagBlockList<FlockSinkBlock> SinksList
            {
                get
                {
                    return this.sinksList;
                }
            }
            public override int Size
            {
                get
                {
                    return 148;
                }
            }
            public override void Initialize()
            {
                this.sourcesList.Clear();
                this.sinksList.Clear();
                this.Bsp = 0;
                this.EmptyString = new byte[2];
                this.BoundingVolume = 0;
                this.Flags = ((FlagsOptions)(0));
                this.EcologyMargin = 0;
                this.Sources = TagBlock.Zero;
                this.Sinks = TagBlock.Zero;
                this.ProductionFrequency = 0;
                this.Creature = TagReference.Null;
                this.NeighborhoodRadius = 0;
                this.AvoidanceRadius = 0;
                this.ForwardScale = 0;
                this.AlignmentScale = 0;
                this.AvoidanceScale = 0;
                this.LevelingForceScale = 0;
                this.SinkScale = 0;
                this.PerceptionAngle = 0;
                this.AverageThrottle = 0;
                this.MaximumThrottle = 0;
                this.PositionScale = 0;
                this.PositionMinRadius = 0;
                this.PositionMaxRadius = 0;
                this.MovementWeightThreshold = 0;
                this.DangerRadius = 0;
                this.DangerScale = 0;
                this.RandomOffsetScale = 0;
                this.FlockName = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Bsp = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.BoundingVolume = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EcologyMargin = reader.ReadSingle();
                this.Sources = reader.ReadInt64();
                this.sourcesList.Read(reader, this.Sources);
                this.Sinks = reader.ReadInt64();
                this.sinksList.Read(reader, this.Sinks);
                this.ProductionFrequency = reader.ReadSingle();
                this.Creature = reader.Read<TagReference>();
                this.NeighborhoodRadius = reader.ReadSingle();
                this.AvoidanceRadius = reader.ReadSingle();
                this.ForwardScale = reader.ReadSingle();
                this.AlignmentScale = reader.ReadSingle();
                this.AvoidanceScale = reader.ReadSingle();
                this.LevelingForceScale = reader.ReadSingle();
                this.SinkScale = reader.ReadSingle();
                this.PerceptionAngle = reader.ReadSingle();
                this.AverageThrottle = reader.ReadSingle();
                this.MaximumThrottle = reader.ReadSingle();
                this.PositionScale = reader.ReadSingle();
                this.PositionMinRadius = reader.ReadSingle();
                this.PositionMaxRadius = reader.ReadSingle();
                this.MovementWeightThreshold = reader.ReadSingle();
                this.DangerRadius = reader.ReadSingle();
                this.DangerScale = reader.ReadSingle();
                this.RandomOffsetScale = reader.ReadSingle();
                this.FlockName = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(28, 4)]
            public sealed class FlockSourceBlock : AbideTagBlock
            {
                [FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("starting yaw, pitch:degrees", typeof(Vector2))]
                public Vector2 StartingYawPitch;
                [FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                [FieldAttribute("weight#probability of producing at this source", typeof(Single))]
                public Single Weight;
                public override int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public override void Initialize()
                {
                    this.Position = Vector3.Zero;
                    this.StartingYawPitch = Vector2.Zero;
                    this.Radius = 0;
                    this.Weight = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Position = reader.Read<Vector3>();
                    this.StartingYawPitch = reader.Read<Vector2>();
                    this.Radius = reader.ReadSingle();
                    this.Weight = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class FlockSinkBlock : AbideTagBlock
            {
                [FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Position = Vector3.Zero;
                    this.Radius = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Position = reader.Read<Vector3>();
                    this.Radius = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int16
            {
                HardBoundariesOnVolume = 1,
                FlockInitiallyStopped = 2,
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class DecoratorPlacementDefinitionBlock : AbideTagBlock
        {
            private TagBlockList<DecoratorCacheBlockBlock> cacheBlocksList = new TagBlockList<DecoratorCacheBlockBlock>(4096);
            private TagBlockList<DecoratorGroupBlock> groupsList = new TagBlockList<DecoratorGroupBlock>(131072);
            private TagBlockList<DecoratorCellCollectionBlock> cellsList = new TagBlockList<DecoratorCellCollectionBlock>(65535);
            private TagBlockList<DecoratorProjectedDecalBlock> decalsList = new TagBlockList<DecoratorProjectedDecalBlock>(32768);
            [FieldAttribute("Grid Origin", typeof(Vector3))]
            public Vector3 GridOrigin;
            [FieldAttribute("Cell Count per Dimension", typeof(Int32))]
            public Int32 CellCountPerDimension;
            [FieldAttribute("Cache Blocks", typeof(TagBlock))]
            [BlockAttribute("decorator_cache_block_block", 4096, typeof(DecoratorCacheBlockBlock))]
            public TagBlock CacheBlocks;
            [FieldAttribute("Groups", typeof(TagBlock))]
            [BlockAttribute("decorator_group_block", 131072, typeof(DecoratorGroupBlock))]
            public TagBlock Groups;
            [FieldAttribute("Cells", typeof(TagBlock))]
            [BlockAttribute("decorator_cell_collection_block", 65535, typeof(DecoratorCellCollectionBlock))]
            public TagBlock Cells;
            [FieldAttribute("Decals", typeof(TagBlock))]
            [BlockAttribute("decorator_projected_decal_block", 32768, typeof(DecoratorProjectedDecalBlock))]
            public TagBlock Decals;
            public TagBlockList<DecoratorCacheBlockBlock> CacheBlocksList
            {
                get
                {
                    return this.cacheBlocksList;
                }
            }
            public TagBlockList<DecoratorGroupBlock> GroupsList
            {
                get
                {
                    return this.groupsList;
                }
            }
            public TagBlockList<DecoratorCellCollectionBlock> CellsList
            {
                get
                {
                    return this.cellsList;
                }
            }
            public TagBlockList<DecoratorProjectedDecalBlock> DecalsList
            {
                get
                {
                    return this.decalsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.cacheBlocksList.Clear();
                this.groupsList.Clear();
                this.cellsList.Clear();
                this.decalsList.Clear();
                this.GridOrigin = Vector3.Zero;
                this.CellCountPerDimension = 0;
                this.CacheBlocks = TagBlock.Zero;
                this.Groups = TagBlock.Zero;
                this.Cells = TagBlock.Zero;
                this.Decals = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.GridOrigin = reader.Read<Vector3>();
                this.CellCountPerDimension = reader.ReadInt32();
                this.CacheBlocks = reader.ReadInt64();
                this.cacheBlocksList.Read(reader, this.CacheBlocks);
                this.Groups = reader.ReadInt64();
                this.groupsList.Read(reader, this.Groups);
                this.Cells = reader.ReadInt64();
                this.cellsList.Read(reader, this.Cells);
                this.Decals = reader.ReadInt64();
                this.decalsList.Read(reader, this.Decals);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(60, 4)]
            public sealed class DecoratorCacheBlockBlock : AbideTagBlock
            {
                private TagBlockList<DecoratorCacheBlockDataBlock> cacheBlockDataList = new TagBlockList<DecoratorCacheBlockDataBlock>(1);
                [FieldAttribute("Geometry Block Info*", typeof(GlobalGeometryBlockInfoStructBlock))]
                public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
                [FieldAttribute("Cache Block Data*", typeof(TagBlock))]
                [BlockAttribute("decorator_cache_block_data_block", 1, typeof(DecoratorCacheBlockDataBlock))]
                public TagBlock CacheBlockData;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                public TagBlockList<DecoratorCacheBlockDataBlock> CacheBlockDataList
                {
                    get
                    {
                        return this.cacheBlockDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 60;
                    }
                }
                public override void Initialize()
                {
                    this.cacheBlockDataList.Clear();
                    this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
                    this.CacheBlockData = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                    this.EmptyString1 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
                    this.CacheBlockData = reader.ReadInt64();
                    this.cacheBlockDataList.Read(reader, this.CacheBlockData);
                    this.EmptyString = reader.ReadBytes(4);
                    this.EmptyString1 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(76, 4)]
                public sealed class DecoratorCacheBlockDataBlock : AbideTagBlock
                {
                    private TagBlockList<DecoratorPlacementBlock> placementsList = new TagBlockList<DecoratorPlacementBlock>(32768);
                    private TagBlockList<DecalVerticesBlock> decalVerticesList = new TagBlockList<DecalVerticesBlock>(65536);
                    private TagBlockList<IndicesBlock> decalIndicesList = new TagBlockList<IndicesBlock>(65536);
                    private TagBlockList<SpriteVerticesBlock> spriteVerticesList = new TagBlockList<SpriteVerticesBlock>(65536);
                    [FieldAttribute("Placements*", typeof(TagBlock))]
                    [BlockAttribute("decorator_placement_block", 32768, typeof(DecoratorPlacementBlock))]
                    public TagBlock Placements;
                    [FieldAttribute("Decal Vertices*", typeof(TagBlock))]
                    [BlockAttribute("decal_vertices_block", 65536, typeof(DecalVerticesBlock))]
                    public TagBlock DecalVertices;
                    [FieldAttribute("Decal Indices*", typeof(TagBlock))]
                    [BlockAttribute("indices_block", 65536, typeof(IndicesBlock))]
                    public TagBlock DecalIndices;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(16)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Sprite Vertices*", typeof(TagBlock))]
                    [BlockAttribute("sprite_vertices_block", 65536, typeof(SpriteVerticesBlock))]
                    public TagBlock SpriteVertices;
                    [FieldAttribute("Sprite Indices*", typeof(TagBlock))]
                    [BlockAttribute("indices_block", 65536, typeof(IndicesBlock))]
                    public TagBlock SpriteIndices;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(16)]
                    public Byte[] EmptyString1;
                    public TagBlockList<DecoratorPlacementBlock> PlacementsList
                    {
                        get
                        {
                            return this.placementsList;
                        }
                    }
                    public TagBlockList<DecalVerticesBlock> DecalVerticesList
                    {
                        get
                        {
                            return this.decalVerticesList;
                        }
                    }
                    public TagBlockList<IndicesBlock> DecalIndicesList
                    {
                        get
                        {
                            return this.decalIndicesList;
                        }
                    }
                    public TagBlockList<SpriteVerticesBlock> SpriteVerticesList
                    {
                        get
                        {
                            return this.spriteVerticesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 76;
                        }
                    }
                    public override void Initialize()
                    {
                        this.placementsList.Clear();
                        this.decalVerticesList.Clear();
                        this.decalIndicesList.Clear();
                        this.spriteVerticesList.Clear();
                        this.Placements = TagBlock.Zero;
                        this.DecalVertices = TagBlock.Zero;
                        this.DecalIndices = TagBlock.Zero;
                        this.EmptyString = new byte[16];
                        this.SpriteVertices = TagBlock.Zero;
                        this.SpriteIndices = TagBlock.Zero;
                        this.EmptyString1 = new byte[16];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Placements = reader.ReadInt64();
                        this.placementsList.Read(reader, this.Placements);
                        this.DecalVertices = reader.ReadInt64();
                        this.decalVerticesList.Read(reader, this.DecalVertices);
                        this.DecalIndices = reader.ReadInt64();
                        this.decalIndicesList.Read(reader, this.DecalIndices);
                        this.EmptyString = reader.ReadBytes(16);
                        this.SpriteVertices = reader.ReadInt64();
                        this.spriteVerticesList.Read(reader, this.SpriteVertices);
                        this.SpriteIndices = reader.ReadInt64();
                        this.spriteVerticesList.Read(reader, this.SpriteIndices);
                        this.EmptyString1 = reader.ReadBytes(16);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(24, 4)]
                    public sealed class DecoratorPlacementBlock : AbideTagBlock
                    {
                        [FieldAttribute("Internal Data 1", typeof(Int32))]
                        public Int32 InternalData1;
                        [FieldAttribute("Compressed Position", typeof(Int32))]
                        public Int32 CompressedPosition;
                        [FieldAttribute("Tint Color", typeof(ColorRgb))]
                        public ColorRgb TintColor;
                        [FieldAttribute("Lightmap Color", typeof(ColorRgb))]
                        public ColorRgb LightmapColor;
                        [FieldAttribute("Compressed Light Direction", typeof(Int32))]
                        public Int32 CompressedLightDirection;
                        [FieldAttribute("Compressed Light 2 Direction", typeof(Int32))]
                        public Int32 CompressedLight2Direction;
                        public override int Size
                        {
                            get
                            {
                                return 24;
                            }
                        }
                        public override void Initialize()
                        {
                            this.InternalData1 = 0;
                            this.CompressedPosition = 0;
                            this.TintColor = ColorRgb.Zero;
                            this.LightmapColor = ColorRgb.Zero;
                            this.CompressedLightDirection = 0;
                            this.CompressedLight2Direction = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.InternalData1 = reader.ReadInt32();
                            this.CompressedPosition = reader.ReadInt32();
                            this.TintColor = reader.Read<ColorRgb>();
                            this.LightmapColor = reader.Read<ColorRgb>();
                            this.CompressedLightDirection = reader.ReadInt32();
                            this.CompressedLight2Direction = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class DecalVerticesBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("texcoord 0*", typeof(Vector2))]
                        public Vector2 Texcoord0;
                        [FieldAttribute("texcoord 1*", typeof(Vector2))]
                        public Vector2 Texcoord1;
                        [FieldAttribute("Color*", typeof(ColorRgb))]
                        public ColorRgb Color;
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.Texcoord0 = Vector2.Zero;
                            this.Texcoord1 = Vector2.Zero;
                            this.Color = ColorRgb.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.Texcoord0 = reader.Read<Vector2>();
                            this.Texcoord1 = reader.Read<Vector2>();
                            this.Color = reader.Read<ColorRgb>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(2, 4)]
                    public sealed class IndicesBlock : AbideTagBlock
                    {
                        [FieldAttribute("Index*", typeof(Int16))]
                        public Int16 Index;
                        public override int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Index = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Index = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(48, 4)]
                    public sealed class SpriteVerticesBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Offset*", typeof(Vector3))]
                        public Vector3 Offset;
                        [FieldAttribute("Axis*", typeof(Vector3))]
                        public Vector3 Axis;
                        [FieldAttribute("texcoord*", typeof(Vector2))]
                        public Vector2 Texcoord;
                        [FieldAttribute("Color*", typeof(ColorRgb))]
                        public ColorRgb Color;
                        public override int Size
                        {
                            get
                            {
                                return 48;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.Offset = Vector3.Zero;
                            this.Axis = Vector3.Zero;
                            this.Texcoord = Vector2.Zero;
                            this.Color = ColorRgb.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.Offset = reader.Read<Vector3>();
                            this.Axis = reader.Read<Vector3>();
                            this.Texcoord = reader.Read<Vector2>();
                            this.Color = reader.Read<ColorRgb>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(40, 4)]
                public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                    [FieldAttribute("Block Offset*", typeof(Int32))]
                    public Int32 BlockOffset;
                    [FieldAttribute("Block Size*", typeof(Int32))]
                    public Int32 BlockSize;
                    [FieldAttribute("Section Data Size*", typeof(Int32))]
                    public Int32 SectionDataSize;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resources*", typeof(TagBlock))]
                    [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                    public TagBlock Resources;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                    public Int16 OwnerTagSectionOffset;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString2;
                    public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                    {
                        get
                        {
                            return this.resourcesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 40;
                        }
                    }
                    public override void Initialize()
                    {
                        this.resourcesList.Clear();
                        this.BlockOffset = 0;
                        this.BlockSize = 0;
                        this.SectionDataSize = 0;
                        this.ResourceDataSize = 0;
                        this.Resources = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                        this.OwnerTagSectionOffset = 0;
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BlockOffset = reader.ReadInt32();
                        this.BlockSize = reader.ReadInt32();
                        this.SectionDataSize = reader.ReadInt32();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.Resources = reader.ReadInt64();
                        this.resourcesList.Read(reader, this.Resources);
                        this.EmptyString = reader.ReadBytes(4);
                        this.OwnerTagSectionOffset = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        [FieldAttribute("Primary Locator*", typeof(Int16))]
                        public Int16 PrimaryLocator;
                        [FieldAttribute("Secondary Locator*", typeof(Int16))]
                        public Int16 SecondaryLocator;
                        [FieldAttribute("Resource Data Size*", typeof(Int32))]
                        public Int32 ResourceDataSize;
                        [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                        public Int32 ResourceDataOffset;
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.EmptyString = new byte[3];
                            this.PrimaryLocator = 0;
                            this.SecondaryLocator = 0;
                            this.ResourceDataSize = 0;
                            this.ResourceDataOffset = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadByte()));
                            this.EmptyString = reader.ReadBytes(3);
                            this.PrimaryLocator = reader.ReadInt16();
                            this.SecondaryLocator = reader.ReadInt16();
                            this.ResourceDataSize = reader.ReadInt32();
                            this.ResourceDataOffset = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions : Byte
                        {
                            TagBlock = 0,
                            TagData = 1,
                            VertexBuffer = 2,
                        }
                    }
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class DecoratorGroupBlock : AbideTagBlock
            {
                [FieldAttribute("Decorator Set*", typeof(Byte))]
                public Byte DecoratorSet;
                [FieldAttribute("Decorator Type", typeof(DecoratorTypeOptions))]
                [OptionsAttribute(typeof(DecoratorTypeOptions), false)]
                public DecoratorTypeOptions DecoratorType;
                [FieldAttribute("Shader Index*", typeof(Byte))]
                public Byte ShaderIndex;
                [FieldAttribute("Compressed Radius*", typeof(Byte))]
                public Byte CompressedRadius;
                [FieldAttribute("Cluster*", typeof(Int16))]
                public Int16 Cluster;
                [FieldAttribute("Cache Block*", typeof(Int16))]
                public Int16 CacheBlock;
                [FieldAttribute("Decorator Start Index*", typeof(Int16))]
                public Int16 DecoratorStartIndex;
                [FieldAttribute("Decorator Count*", typeof(Int16))]
                public Int16 DecoratorCount;
                [FieldAttribute("Vertex Start Offset*", typeof(Int16))]
                public Int16 VertexStartOffset;
                [FieldAttribute("Vertex Count*", typeof(Int16))]
                public Int16 VertexCount;
                [FieldAttribute("Index Start Offset*", typeof(Int16))]
                public Int16 IndexStartOffset;
                [FieldAttribute("Index Count*", typeof(Int16))]
                public Int16 IndexCount;
                [FieldAttribute("Compressed Bounding Center*", typeof(Int32))]
                public Int32 CompressedBoundingCenter;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.DecoratorSet = 0;
                    this.DecoratorType = ((DecoratorTypeOptions)(0));
                    this.ShaderIndex = 0;
                    this.CompressedRadius = 0;
                    this.Cluster = 0;
                    this.CacheBlock = 0;
                    this.DecoratorStartIndex = 0;
                    this.DecoratorCount = 0;
                    this.VertexStartOffset = 0;
                    this.VertexCount = 0;
                    this.IndexStartOffset = 0;
                    this.IndexCount = 0;
                    this.CompressedBoundingCenter = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.DecoratorSet = reader.ReadByte();
                    this.DecoratorType = ((DecoratorTypeOptions)(reader.ReadByte()));
                    this.ShaderIndex = reader.ReadByte();
                    this.CompressedRadius = reader.ReadByte();
                    this.Cluster = reader.ReadInt16();
                    this.CacheBlock = reader.ReadInt16();
                    this.DecoratorStartIndex = reader.ReadInt16();
                    this.DecoratorCount = reader.ReadInt16();
                    this.VertexStartOffset = reader.ReadInt16();
                    this.VertexCount = reader.ReadInt16();
                    this.IndexStartOffset = reader.ReadInt16();
                    this.IndexCount = reader.ReadInt16();
                    this.CompressedBoundingCenter = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum DecoratorTypeOptions : Byte
                {
                    Model = 0,
                    FloatingDecal = 1,
                    ProjectedDecal = 2,
                    ScreenFacingQuad = 3,
                    AxisRotatingQuad = 4,
                    CrossQuad = 5,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class DecoratorCellCollectionBlock : AbideTagBlock
            {
                [FieldAttribute("Child Indices", typeof(ChildIndicesElement[]))]
                [ArrayAttribute(8, typeof(ChildIndicesElement))]
                public ChildIndicesElement[] ChildIndices;
                [FieldAttribute("Cache Block Index", typeof(Int16))]
                public Int16 CacheBlockIndex;
                [FieldAttribute("Group Count", typeof(Int16))]
                public Int16 GroupCount;
                [FieldAttribute("Group Start Index", typeof(Int32))]
                public Int32 GroupStartIndex;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.ChildIndices = new ChildIndicesElement[8];
                    this.CacheBlockIndex = 0;
                    this.GroupCount = 0;
                    this.GroupStartIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.CacheBlockIndex = reader.ReadInt16();
                    this.GroupCount = reader.ReadInt16();
                    this.GroupStartIndex = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public sealed class ChildIndicesElement : AbideTagBlock
                {
                    [FieldAttribute("Child Index", typeof(Int16))]
                    public Int16 ChildIndex;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.ChildIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.ChildIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(64, 4)]
            public sealed class DecoratorProjectedDecalBlock : AbideTagBlock
            {
                [FieldAttribute("Decorator Set", typeof(Byte))]
                public Byte DecoratorSet;
                [FieldAttribute("Decorator Class", typeof(Byte))]
                public Byte DecoratorClass;
                [FieldAttribute("Decorator Permutation", typeof(Byte))]
                public Byte DecoratorPermutation;
                [FieldAttribute("Sprite Index", typeof(Byte))]
                public Byte SpriteIndex;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Left", typeof(Vector3))]
                public Vector3 Left;
                [FieldAttribute("Up", typeof(Vector3))]
                public Vector3 Up;
                [FieldAttribute("Extents", typeof(Vector3))]
                public Vector3 Extents;
                [FieldAttribute("Previous Position", typeof(Vector3))]
                public Vector3 PreviousPosition;
                public override int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public override void Initialize()
                {
                    this.DecoratorSet = 0;
                    this.DecoratorClass = 0;
                    this.DecoratorPermutation = 0;
                    this.SpriteIndex = 0;
                    this.Position = Vector3.Zero;
                    this.Left = Vector3.Zero;
                    this.Up = Vector3.Zero;
                    this.Extents = Vector3.Zero;
                    this.PreviousPosition = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.DecoratorSet = reader.ReadByte();
                    this.DecoratorClass = reader.ReadByte();
                    this.DecoratorPermutation = reader.ReadByte();
                    this.SpriteIndex = reader.ReadByte();
                    this.Position = reader.Read<Vector3>();
                    this.Left = reader.Read<Vector3>();
                    this.Up = reader.Read<Vector3>();
                    this.Extents = reader.Read<Vector3>();
                    this.PreviousPosition = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class ScenarioCreatureBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioCreaturePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ScenarioDecoratorSetPaletteEntryBlock : AbideTagBlock
        {
            [FieldAttribute("Decorator Set^", typeof(TagReference))]
            public TagReference DecoratorSet;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.DecoratorSet = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.DecoratorSet = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class ScenarioBspSwitchTransitionVolumeBlock : AbideTagBlock
        {
            [FieldAttribute("BSP Index Key", typeof(Int32))]
            public Int32 BspIndexKey;
            [FieldAttribute("Trigger Volume^", typeof(Int16))]
            public Int16 TriggerVolume;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.BspIndexKey = 0;
                this.TriggerVolume = 0;
                this.EmptyString = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.BspIndexKey = reader.ReadInt32();
                this.TriggerVolume = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(28, 4)]
        public sealed class ScenarioStructureBspSphericalHarmonicLightingBlock : AbideTagBlock
        {
            private TagBlockList<ScenarioSphericalHarmonicLightingPoint> lightingPointsList = new TagBlockList<ScenarioSphericalHarmonicLightingPoint>(32768);
            [FieldAttribute("BSP*", typeof(TagReference))]
            public TagReference Bsp;
            [FieldAttribute("Lighting Points", typeof(TagBlock))]
            [BlockAttribute("scenario_spherical_harmonic_lighting_point", 32768, typeof(ScenarioSphericalHarmonicLightingPoint))]
            public TagBlock LightingPoints;
            public TagBlockList<ScenarioSphericalHarmonicLightingPoint> LightingPointsList
            {
                get
                {
                    return this.lightingPointsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 28;
                }
            }
            public override void Initialize()
            {
                this.lightingPointsList.Clear();
                this.Bsp = TagReference.Null;
                this.LightingPoints = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Bsp = reader.Read<TagReference>();
                this.LightingPoints = reader.ReadInt64();
                this.lightingPointsList.Read(reader, this.LightingPoints);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScenarioSphericalHarmonicLightingPoint : AbideTagBlock
            {
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Position = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Position = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(260, 4)]
        public sealed class GScenarioEditorFolderBlock : AbideTagBlock
        {
            [FieldAttribute("parent folder", typeof(Int32))]
            public Int32 ParentFolder;
            [FieldAttribute("name^", typeof(String256))]
            public String256 Name;
            public override int Size
            {
                get
                {
                    return 260;
                }
            }
            public override void Initialize()
            {
                this.ParentFolder = 0;
                this.Name = String256.Empty;
            }
            public override void Read(BinaryReader reader)
            {
                this.ParentFolder = reader.ReadInt32();
                this.Name = reader.Read<String256>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class ScenarioLevelDataBlock : AbideTagBlock
        {
            private TagBlockList<GlobalUiCampaignLevelBlock> campaignLevelDataList = new TagBlockList<GlobalUiCampaignLevelBlock>(20);
            private TagBlockList<GlobalUiMultiplayerLevelBlock> multiplayerList = new TagBlockList<GlobalUiMultiplayerLevelBlock>(50);
            [FieldAttribute("Level Description", typeof(TagReference))]
            public TagReference LevelDescription;
            [FieldAttribute("Campaign Level Data", typeof(TagBlock))]
            [BlockAttribute("global_ui_campaign_level_block", 20, typeof(GlobalUiCampaignLevelBlock))]
            public TagBlock CampaignLevelData;
            [FieldAttribute("Multiplayer", typeof(TagBlock))]
            [BlockAttribute("global_ui_multiplayer_level_block", 50, typeof(GlobalUiMultiplayerLevelBlock))]
            public TagBlock Multiplayer;
            public TagBlockList<GlobalUiCampaignLevelBlock> CampaignLevelDataList
            {
                get
                {
                    return this.campaignLevelDataList;
                }
            }
            public TagBlockList<GlobalUiMultiplayerLevelBlock> MultiplayerList
            {
                get
                {
                    return this.multiplayerList;
                }
            }
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.campaignLevelDataList.Clear();
                this.multiplayerList.Clear();
                this.LevelDescription = TagReference.Null;
                this.CampaignLevelData = TagBlock.Zero;
                this.Multiplayer = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.LevelDescription = reader.Read<TagReference>();
                this.CampaignLevelData = reader.ReadInt64();
                this.campaignLevelDataList.Read(reader, this.CampaignLevelData);
                this.Multiplayer = reader.ReadInt64();
                this.multiplayerList.Read(reader, this.Multiplayer);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(2904, 4)]
            public sealed class GlobalUiCampaignLevelBlock : AbideTagBlock
            {
                [FieldAttribute("Campaign ID", typeof(Int32))]
                public Int32 CampaignId;
                [FieldAttribute("Map ID", typeof(Int32))]
                public Int32 MapId;
                [FieldAttribute("Bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(576)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2304)]
                public Byte[] EmptyString1;
                public override int Size
                {
                    get
                    {
                        return 2904;
                    }
                }
                public override void Initialize()
                {
                    this.CampaignId = 0;
                    this.MapId = 0;
                    this.Bitmap = TagReference.Null;
                    this.EmptyString = new byte[576];
                    this.EmptyString1 = new byte[2304];
                }
                public override void Read(BinaryReader reader)
                {
                    this.CampaignId = reader.ReadInt32();
                    this.MapId = reader.ReadInt32();
                    this.Bitmap = reader.Read<TagReference>();
                    this.EmptyString = reader.ReadBytes(576);
                    this.EmptyString1 = reader.ReadBytes(2304);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(3180, 4)]
            public sealed class GlobalUiMultiplayerLevelBlock : AbideTagBlock
            {
                [FieldAttribute("Map ID", typeof(Int32))]
                public Int32 MapId;
                [FieldAttribute("Bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(576)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2304)]
                public Byte[] EmptyString1;
                [FieldAttribute("Path", typeof(String256))]
                public String256 Path;
                [FieldAttribute("Sort Order", typeof(Int32))]
                public Int32 SortOrder;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(3)]
                public Byte[] EmptyString2;
                [FieldAttribute("Max Teams None", typeof(Byte))]
                public Byte MaxTeamsNone;
                [FieldAttribute("Max Teams CTF", typeof(Byte))]
                public Byte MaxTeamsCtf;
                [FieldAttribute("Max Teams Slayer", typeof(Byte))]
                public Byte MaxTeamsSlayer;
                [FieldAttribute("Max Teams Oddball", typeof(Byte))]
                public Byte MaxTeamsOddball;
                [FieldAttribute("Max Teams KOTH", typeof(Byte))]
                public Byte MaxTeamsKoth;
                [FieldAttribute("Max Teams Race", typeof(Byte))]
                public Byte MaxTeamsRace;
                [FieldAttribute("Max Teams Headhunter", typeof(Byte))]
                public Byte MaxTeamsHeadhunter;
                [FieldAttribute("Max Teams Juggernaut", typeof(Byte))]
                public Byte MaxTeamsJuggernaut;
                [FieldAttribute("Max Teams Territories", typeof(Byte))]
                public Byte MaxTeamsTerritories;
                [FieldAttribute("Max Teams Assault", typeof(Byte))]
                public Byte MaxTeamsAssault;
                [FieldAttribute("Max Teams Stub 10", typeof(Byte))]
                public Byte MaxTeamsStub10;
                [FieldAttribute("Max Teams Stub 11", typeof(Byte))]
                public Byte MaxTeamsStub11;
                [FieldAttribute("Max Teams Stub 12", typeof(Byte))]
                public Byte MaxTeamsStub12;
                [FieldAttribute("Max Teams Stub 13", typeof(Byte))]
                public Byte MaxTeamsStub13;
                [FieldAttribute("Max Teams Stub 14", typeof(Byte))]
                public Byte MaxTeamsStub14;
                [FieldAttribute("Max Teams Stub 15", typeof(Byte))]
                public Byte MaxTeamsStub15;
                public override int Size
                {
                    get
                    {
                        return 3180;
                    }
                }
                public override void Initialize()
                {
                    this.MapId = 0;
                    this.Bitmap = TagReference.Null;
                    this.EmptyString = new byte[576];
                    this.EmptyString1 = new byte[2304];
                    this.Path = String256.Empty;
                    this.SortOrder = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString2 = new byte[3];
                    this.MaxTeamsNone = 0;
                    this.MaxTeamsCtf = 0;
                    this.MaxTeamsSlayer = 0;
                    this.MaxTeamsOddball = 0;
                    this.MaxTeamsKoth = 0;
                    this.MaxTeamsRace = 0;
                    this.MaxTeamsHeadhunter = 0;
                    this.MaxTeamsJuggernaut = 0;
                    this.MaxTeamsTerritories = 0;
                    this.MaxTeamsAssault = 0;
                    this.MaxTeamsStub10 = 0;
                    this.MaxTeamsStub11 = 0;
                    this.MaxTeamsStub12 = 0;
                    this.MaxTeamsStub13 = 0;
                    this.MaxTeamsStub14 = 0;
                    this.MaxTeamsStub15 = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.MapId = reader.ReadInt32();
                    this.Bitmap = reader.Read<TagReference>();
                    this.EmptyString = reader.ReadBytes(576);
                    this.EmptyString1 = reader.ReadBytes(2304);
                    this.Path = reader.Read<String256>();
                    this.SortOrder = reader.ReadInt32();
                    this.Flags = ((FlagsOptions)(reader.ReadByte()));
                    this.EmptyString2 = reader.ReadBytes(3);
                    this.MaxTeamsNone = reader.ReadByte();
                    this.MaxTeamsCtf = reader.ReadByte();
                    this.MaxTeamsSlayer = reader.ReadByte();
                    this.MaxTeamsOddball = reader.ReadByte();
                    this.MaxTeamsKoth = reader.ReadByte();
                    this.MaxTeamsRace = reader.ReadByte();
                    this.MaxTeamsHeadhunter = reader.ReadByte();
                    this.MaxTeamsJuggernaut = reader.ReadByte();
                    this.MaxTeamsTerritories = reader.ReadByte();
                    this.MaxTeamsAssault = reader.ReadByte();
                    this.MaxTeamsStub10 = reader.ReadByte();
                    this.MaxTeamsStub11 = reader.ReadByte();
                    this.MaxTeamsStub12 = reader.ReadByte();
                    this.MaxTeamsStub13 = reader.ReadByte();
                    this.MaxTeamsStub14 = reader.ReadByte();
                    this.MaxTeamsStub15 = reader.ReadByte();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Byte
                {
                    Unlockable = 1,
                }
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class AiScenarioMissionDialogueBlock : AbideTagBlock
        {
            [FieldAttribute("mission dialogue", typeof(TagReference))]
            public TagReference MissionDialogue;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.MissionDialogue = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.MissionDialogue = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(28, 4)]
        public sealed class ScenarioInterpolatorBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("Accelerator Name:Interpolator", typeof(StringId))]
            public StringId AcceleratorName;
            [FieldAttribute("Multiplier Name:Interpolator", typeof(StringId))]
            public StringId MultiplierName;
            [FieldAttribute("Function", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock Function;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 28;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.AcceleratorName = StringId.Zero;
                this.MultiplierName = StringId.Zero;
                this.Function = new ScalarFunctionStructBlock();
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.AcceleratorName = reader.ReadInt32();
                this.MultiplierName = reader.ReadInt32();
                this.Function = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScalarFunctionStructBlock : AbideTagBlock
            {
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(32, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 32;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        [FieldSetAttribute(44, 4)]
        public sealed class ScenarioScreenEffectReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            [FieldAttribute("Screen Effect", typeof(TagReference))]
            public TagReference ScreenEffect;
            [FieldAttribute("Primary Input:Interpolator", typeof(StringId))]
            public StringId PrimaryInput;
            [FieldAttribute("Secondary Input:Interpolator", typeof(StringId))]
            public StringId SecondaryInput;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            public override int Size
            {
                get
                {
                    return 44;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[16];
                this.ScreenEffect = TagReference.Null;
                this.PrimaryInput = StringId.Zero;
                this.SecondaryInput = StringId.Zero;
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(16);
                this.ScreenEffect = reader.Read<TagReference>();
                this.PrimaryInput = reader.ReadInt32();
                this.SecondaryInput = reader.ReadInt32();
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class ScenarioSimulationDefinitionTableBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        public sealed class ObjectSaltsElement : AbideTagBlock
        {
            [FieldAttribute("EMPTY STRING", typeof(Int32))]
            public Int32 EmptyString;
            public override int Size
            {
                get
                {
                    return 0;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        public enum TypeOptions : Int16
        {
            EmptyString = 0,
            Multiplayer = 1,
            EmptyString1 = 2,
            EmptyString2 = 3,
            EmptyString3 = 4,
        }
        public enum FlagsOptions : Int16
        {
            CortanaHack = 1,
            AlwaysDrawSky = 2,
            DontStripPathfinding = 4,
            SymmetricMultiplayerMap = 8,
            QuickLoadingCinematicOnlyScenario = 16,
            CharactersUsePreviousMissionWeapons = 32,
            LightmapsSmoothPalettesWithNeighbors = 64,
            SnapToWhiteAtStart = 128,
        }
    }
}
#pragma warning restore CS1591
