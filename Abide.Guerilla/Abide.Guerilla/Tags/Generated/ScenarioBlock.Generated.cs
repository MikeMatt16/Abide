#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(1476, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("scenario", 1935896178u, 4294967293u, typeof(ScenarioBlock))]
    public sealed class ScenarioBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("Do not use.", typeof(TagReference))]
        public TagReference DoNotUse;
        [Abide.Guerilla.Tags.FieldAttribute("Skies", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_sky_reference_block", 32, typeof(ScenarioSkyReferenceBlock))]
        public TagBlock Skies;
        [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
        public Int16 Type;
        [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int16 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("@child scenarios", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_child_scenario_block", 16, typeof(ScenarioChildScenarioBlock))]
        public TagBlock @childScenarios;
        [Abide.Guerilla.Tags.FieldAttribute("Local North", typeof(Single))]
        public Single LocalNorth;
        [Abide.Guerilla.Tags.FieldAttribute("Predicted Resources*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("predicted_resource_block", 2048, typeof(PredictedResourceBlock))]
        public TagBlock PredictedResources;
        [Abide.Guerilla.Tags.FieldAttribute("Functions", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_function_block", 32, typeof(ScenarioFunctionBlock))]
        public TagBlock Functions;
        [Abide.Guerilla.Tags.FieldAttribute("Comments", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("editor_comment_block", 65536, typeof(EditorCommentBlock))]
        public TagBlock Comments;
        [Abide.Guerilla.Tags.FieldAttribute("*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("dont_use_me_scenario_environment_object_block", 4096, typeof(DontUseMeScenarioEnvironmentObjectBlock))]
        public TagBlock EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("Object Names*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_object_names_block", 640, typeof(ScenarioObjectNamesBlock))]
        public TagBlock ObjectNames;
        [Abide.Guerilla.Tags.FieldAttribute("Scenery", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_scenery_block", 2000, typeof(ScenarioSceneryBlock))]
        public TagBlock Scenery;
        [Abide.Guerilla.Tags.FieldAttribute("Scenery Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_scenery_palette_block", 256, typeof(ScenarioSceneryPaletteBlock))]
        public TagBlock SceneryPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Bipeds", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_biped_block", 128, typeof(ScenarioBipedBlock))]
        public TagBlock Bipeds;
        [Abide.Guerilla.Tags.FieldAttribute("Biped Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_biped_palette_block", 256, typeof(ScenarioBipedPaletteBlock))]
        public TagBlock BipedPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Vehicles", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_vehicle_block", 256, typeof(ScenarioVehicleBlock))]
        public TagBlock Vehicles;
        [Abide.Guerilla.Tags.FieldAttribute("Vehicle Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_vehicle_palette_block", 256, typeof(ScenarioVehiclePaletteBlock))]
        public TagBlock VehiclePalette;
        [Abide.Guerilla.Tags.FieldAttribute("Equipment", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_equipment_block", 256, typeof(ScenarioEquipmentBlock))]
        public TagBlock Equipment;
        [Abide.Guerilla.Tags.FieldAttribute("Equipment Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_equipment_palette_block", 256, typeof(ScenarioEquipmentPaletteBlock))]
        public TagBlock EquipmentPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Weapons", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_weapon_block", 128, typeof(ScenarioWeaponBlock))]
        public TagBlock Weapons;
        [Abide.Guerilla.Tags.FieldAttribute("Weapon Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_weapon_palette_block", 256, typeof(ScenarioWeaponPaletteBlock))]
        public TagBlock WeaponPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Device Groups", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("device_group_block", 128, typeof(DeviceGroupBlock))]
        public TagBlock DeviceGroups;
        [Abide.Guerilla.Tags.FieldAttribute("Machines", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_machine_block", 400, typeof(ScenarioMachineBlock))]
        public TagBlock Machines;
        [Abide.Guerilla.Tags.FieldAttribute("Machine Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_machine_palette_block", 256, typeof(ScenarioMachinePaletteBlock))]
        public TagBlock MachinePalette;
        [Abide.Guerilla.Tags.FieldAttribute("Controls", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_control_block", 100, typeof(ScenarioControlBlock))]
        public TagBlock Controls;
        [Abide.Guerilla.Tags.FieldAttribute("Control Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_control_palette_block", 256, typeof(ScenarioControlPaletteBlock))]
        public TagBlock ControlPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Light Fixtures", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_light_fixture_block", 500, typeof(ScenarioLightFixtureBlock))]
        public TagBlock LightFixtures;
        [Abide.Guerilla.Tags.FieldAttribute("Light Fixtures Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_light_fixture_palette_block", 256, typeof(ScenarioLightFixturePaletteBlock))]
        public TagBlock LightFixturesPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Sound Scenery", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_sound_scenery_block", 256, typeof(ScenarioSoundSceneryBlock))]
        public TagBlock SoundScenery;
        [Abide.Guerilla.Tags.FieldAttribute("Sound Scenery Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_sound_scenery_palette_block", 256, typeof(ScenarioSoundSceneryPaletteBlock))]
        public TagBlock SoundSceneryPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Light Volumes", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_light_block", 500, typeof(ScenarioLightBlock))]
        public TagBlock LightVolumes;
        [Abide.Guerilla.Tags.FieldAttribute("Light Volumes Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_light_palette_block", 256, typeof(ScenarioLightPaletteBlock))]
        public TagBlock LightVolumesPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Player Starting Profile", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_profiles_block", 256, typeof(ScenarioProfilesBlock))]
        public TagBlock PlayerStartingProfile;
        [Abide.Guerilla.Tags.FieldAttribute("Player Starting Locations", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_players_block", 256, typeof(ScenarioPlayersBlock))]
        public TagBlock PlayerStartingLocations;
        [Abide.Guerilla.Tags.FieldAttribute("Kill Trigger Volumes", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_trigger_volume_block", 256, typeof(ScenarioTriggerVolumeBlock))]
        public TagBlock KillTriggerVolumes;
        [Abide.Guerilla.Tags.FieldAttribute("Recorded Animations", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("recorded_animation_block", 1024, typeof(RecordedAnimationBlock))]
        public TagBlock RecordedAnimations;
        [Abide.Guerilla.Tags.FieldAttribute("Netgame Flags", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_netpoints_block", 200, typeof(ScenarioNetpointsBlock))]
        public TagBlock NetgameFlags;
        [Abide.Guerilla.Tags.FieldAttribute("Netgame Equipment", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_netgame_equipment_block", 100, typeof(ScenarioNetgameEquipmentBlock))]
        public TagBlock NetgameEquipment;
        [Abide.Guerilla.Tags.FieldAttribute("Starting Equipment", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_starting_equipment_block", 200, typeof(ScenarioStartingEquipmentBlock))]
        public TagBlock StartingEquipment;
        [Abide.Guerilla.Tags.FieldAttribute("BSP Switch Trigger Volumes", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_bsp_switch_trigger_volume_block", 256, typeof(ScenarioBspSwitchTriggerVolumeBlock))]
        public TagBlock BspSwitchTriggerVolumes;
        [Abide.Guerilla.Tags.FieldAttribute("Decals", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_decals_block", 65536, typeof(ScenarioDecalsBlock))]
        public TagBlock Decals;
        [Abide.Guerilla.Tags.FieldAttribute("Decals Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_decal_palette_block", 128, typeof(ScenarioDecalPaletteBlock))]
        public TagBlock DecalsPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Detail Object Collection Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_detail_object_collection_palette_block", 32, typeof(ScenarioDetailObjectCollectionPaletteBlock))]
        public TagBlock DetailObjectCollectionPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Style Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("style_palette_block", 50, typeof(StylePaletteBlock))]
        public TagBlock StylePalette;
        [Abide.Guerilla.Tags.FieldAttribute("Squad Groups", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("squad_groups_block", 100, typeof(SquadGroupsBlock))]
        public TagBlock SquadGroups;
        [Abide.Guerilla.Tags.FieldAttribute("Squads", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("squads_block", 335, typeof(SquadsBlock))]
        public TagBlock Squads;
        [Abide.Guerilla.Tags.FieldAttribute("Zones", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("zone_block", 128, typeof(ZoneBlock))]
        public TagBlock Zones;
        [Abide.Guerilla.Tags.FieldAttribute("Mission Scenes", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_scene_block", 100, typeof(AiSceneBlock))]
        public TagBlock MissionScenes;
        [Abide.Guerilla.Tags.FieldAttribute("Character Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_palette_block", 64, typeof(CharacterPaletteBlock))]
        public TagBlock CharacterPalette;
        [Abide.Guerilla.Tags.FieldAttribute("AI Pathfinding Data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("pathfinding_data_block", 16, typeof(PathfindingDataBlock))]
        public TagBlock AiPathfindingData;
        [Abide.Guerilla.Tags.FieldAttribute("AI Animation References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_animation_reference_block", 128, typeof(AiAnimationReferenceBlock))]
        public TagBlock AiAnimationReferences;
        [Abide.Guerilla.Tags.FieldAttribute("AI Script References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_script_reference_block", 128, typeof(AiScriptReferenceBlock))]
        public TagBlock AiScriptReferences;
        [Abide.Guerilla.Tags.FieldAttribute("AI Recording References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_recording_reference_block", 128, typeof(AiRecordingReferenceBlock))]
        public TagBlock AiRecordingReferences;
        [Abide.Guerilla.Tags.FieldAttribute("AI Conversations", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_conversation_block", 128, typeof(AiConversationBlock))]
        public TagBlock AiConversations;
        [Abide.Guerilla.Tags.FieldAttribute("Scripts*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hs_scripts_block", 1024, typeof(HsScriptsBlock))]
        public TagBlock Scripts;
        [Abide.Guerilla.Tags.FieldAttribute("Globals*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hs_globals_block", 256, typeof(HsGlobalsBlock))]
        public TagBlock Globals;
        [Abide.Guerilla.Tags.FieldAttribute("References*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hs_references_block", 512, typeof(HsReferencesBlock))]
        public TagBlock References;
        [Abide.Guerilla.Tags.FieldAttribute("Source Files*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hs_source_files_block", 8, typeof(HsSourceFilesBlock))]
        public TagBlock SourceFiles;
        [Abide.Guerilla.Tags.FieldAttribute("Scripting Data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("cs_script_data_block", 1, typeof(CsScriptDataBlock))]
        public TagBlock ScriptingData;
        [Abide.Guerilla.Tags.FieldAttribute("Cutscene Flags", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_cutscene_flag_block", 512, typeof(ScenarioCutsceneFlagBlock))]
        public TagBlock CutsceneFlags;
        [Abide.Guerilla.Tags.FieldAttribute("Cutscene Camera Points", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_cutscene_camera_point_block", 512, typeof(ScenarioCutsceneCameraPointBlock))]
        public TagBlock CutsceneCameraPoints;
        [Abide.Guerilla.Tags.FieldAttribute("Cutscene Titles", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_cutscene_title_block", 128, typeof(ScenarioCutsceneTitleBlock))]
        public TagBlock CutsceneTitles;
        [Abide.Guerilla.Tags.FieldAttribute("Custom Object Names", typeof(TagReference))]
        public TagReference CustomObjectNames;
        [Abide.Guerilla.Tags.FieldAttribute("Chapter Title Text", typeof(TagReference))]
        public TagReference ChapterTitleText;
        [Abide.Guerilla.Tags.FieldAttribute("HUD Messages", typeof(TagReference))]
        public TagReference HudMessages;
        [Abide.Guerilla.Tags.FieldAttribute("Structure BSPs", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_structure_bsp_reference_block", 16, typeof(ScenarioStructureBspReferenceBlock))]
        public TagBlock StructureBsps;
        [Abide.Guerilla.Tags.FieldAttribute("Scenario Resources", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_resources_block", 1, typeof(ScenarioResourcesBlock))]
        public TagBlock ScenarioResources;
        [Abide.Guerilla.Tags.FieldAttribute("Scenario Resources", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("old_unused_strucure_physics_block", 16, typeof(OldUnusedStrucurePhysicsBlock))]
        public TagBlock ScenarioResources1;
        [Abide.Guerilla.Tags.FieldAttribute(")hs Unit Seats", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hs_unit_seat_block", 65536, typeof(HsUnitSeatBlock))]
        public TagBlock HsUnitSeats;
        [Abide.Guerilla.Tags.FieldAttribute("Scenario Kill Triggers", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_kill_trigger_volumes_block", 256, typeof(ScenarioKillTriggerVolumesBlock))]
        public TagBlock ScenarioKillTriggers;
        [Abide.Guerilla.Tags.FieldAttribute("hs Syntax Datums*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("syntax_datum_block", 36864, typeof(SyntaxDatumBlock))]
        public TagBlock HsSyntaxDatums;
        [Abide.Guerilla.Tags.FieldAttribute("Orders", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("orders_block", 300, typeof(OrdersBlock))]
        public TagBlock Orders;
        [Abide.Guerilla.Tags.FieldAttribute("Triggers", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("triggers_block", 256, typeof(TriggersBlock))]
        public TagBlock Triggers;
        [Abide.Guerilla.Tags.FieldAttribute("Background Sound Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("structure_bsp_background_sound_palette_block", 64, typeof(StructureBspBackgroundSoundPaletteBlock))]
        public TagBlock BackgroundSoundPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Sound Environment Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("structure_bsp_sound_environment_palette_block", 64, typeof(StructureBspSoundEnvironmentPaletteBlock))]
        public TagBlock SoundEnvironmentPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Weather Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("structure_bsp_weather_palette_block", 32, typeof(StructureBspWeatherPaletteBlock))]
        public TagBlock WeatherPalette;
        [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString2;
        [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString3;
        [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString4;
        [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString5;
        [Abide.Guerilla.Tags.FieldAttribute("Scenario Cluster Data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_cluster_data_block", 16, typeof(ScenarioClusterDataBlock))]
        public TagBlock ScenarioClusterData;
        [Abide.Guerilla.Tags.FieldAttribute("object_salts*", typeof(ObjectSaltsElement[]))]
        [Abide.Guerilla.Tags.ArrayAttribute(32, typeof(ObjectSaltsElement))]
        public ObjectSaltsElement[] ObjectSalts;
        [Abide.Guerilla.Tags.FieldAttribute("Spawn Data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_spawn_data_block", 1, typeof(ScenarioSpawnDataBlock))]
        public TagBlock SpawnData;
        [Abide.Guerilla.Tags.FieldAttribute("Sound Effect Collection", typeof(TagReference))]
        public TagReference SoundEffectCollection;
        [Abide.Guerilla.Tags.FieldAttribute("Crates", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_crate_block", 1024, typeof(ScenarioCrateBlock))]
        public TagBlock Crates;
        [Abide.Guerilla.Tags.FieldAttribute("Crates Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_crate_palette_block", 256, typeof(ScenarioCratePaletteBlock))]
        public TagBlock CratesPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Global Lighting", typeof(TagReference))]
        public TagReference GlobalLighting;
        [Abide.Guerilla.Tags.FieldAttribute("Atmospheric Fog Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_atmospheric_fog_palette", 127, typeof(ScenarioAtmosphericFogPalette))]
        public TagBlock AtmosphericFogPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Planar Fog Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_planar_fog_palette", 127, typeof(ScenarioPlanarFogPalette))]
        public TagBlock PlanarFogPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Flocks", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("flock_definition_block", 20, typeof(FlockDefinitionBlock))]
        public TagBlock Flocks;
        [Abide.Guerilla.Tags.FieldAttribute("Subtitles", typeof(TagReference))]
        public TagReference Subtitles;
        [Abide.Guerilla.Tags.FieldAttribute("Decorators", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("decorator_placement_definition_block", 1, typeof(DecoratorPlacementDefinitionBlock))]
        public TagBlock Decorators;
        [Abide.Guerilla.Tags.FieldAttribute("Creatures", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_creature_block", 128, typeof(ScenarioCreatureBlock))]
        public TagBlock Creatures;
        [Abide.Guerilla.Tags.FieldAttribute("Creatures Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_creature_palette_block", 256, typeof(ScenarioCreaturePaletteBlock))]
        public TagBlock CreaturesPalette;
        [Abide.Guerilla.Tags.FieldAttribute("Decorators Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_decorator_set_palette_entry_block", 32, typeof(ScenarioDecoratorSetPaletteEntryBlock))]
        public TagBlock DecoratorsPalette;
        [Abide.Guerilla.Tags.FieldAttribute(")BSP Transition Volumes", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_bsp_switch_transition_volume_block", 256, typeof(ScenarioBspSwitchTransitionVolumeBlock))]
        public TagBlock BspTransitionVolumes;
        [Abide.Guerilla.Tags.FieldAttribute("Structure BSP Lighting", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_structure_bsp_spherical_harmonic_lighting_block", 16, typeof(ScenarioStructureBspSphericalHarmonicLightingBlock))]
        public TagBlock StructureBspLighting;
        [Abide.Guerilla.Tags.FieldAttribute(")Editor Folders", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_scenario_editor_folder_block", 32767, typeof(GScenarioEditorFolderBlock))]
        public TagBlock EditorFolders;
        [Abide.Guerilla.Tags.FieldAttribute("Level Data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_level_data_block", 1, typeof(ScenarioLevelDataBlock))]
        public TagBlock LevelData;
        [Abide.Guerilla.Tags.FieldAttribute("Territory Location Names", typeof(TagReference))]
        public TagReference TerritoryLocationNames;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(8)]
        public Byte[] EmptyString6;
        [Abide.Guerilla.Tags.FieldAttribute("Mission Dialogue", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_scenario_mission_dialogue_block", 1, typeof(AiScenarioMissionDialogueBlock))]
        public TagBlock MissionDialogue;
        [Abide.Guerilla.Tags.FieldAttribute("Objectives", typeof(TagReference))]
        public TagReference Objectives;
        [Abide.Guerilla.Tags.FieldAttribute("Interpolators", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("interpolators", 16, typeof(ScenarioInterpolatorBlock))]
        public TagBlock Interpolators;
        [Abide.Guerilla.Tags.FieldAttribute("Shared References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hs_references_block", 512, typeof(HsReferencesBlock))]
        public TagBlock SharedReferences;
        [Abide.Guerilla.Tags.FieldAttribute("Screen Effect References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("screen effect reference", 16, typeof(ScenarioScreenEffectReferenceBlock))]
        public TagBlock ScreenEffectReferences;
        [Abide.Guerilla.Tags.FieldAttribute("Simulation Definition Table", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("simulation definition table element", 512, typeof(ScenarioSimulationDefinitionTableBlock))]
        public TagBlock SimulationDefinitionTable;
        public int Size
        {
            get
            {
                return 1476;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ScenarioSkyReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Sky", typeof(TagReference))]
            public TagReference Sky;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
        public sealed class ScenarioChildScenarioBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Child Scenario", typeof(TagReference))]
            public TagReference ChildScenario;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 32;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class PredictedResourceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("resource index", typeof(Int16))]
            public Int16 ResourceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("tag index", typeof(Int32))]
            public Int32 TagIndex;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum TypeOptions
            {
                Bitmap = 0,
                Sound = 1,
                RenderModelGeometry = 2,
                ClusterGeometry = 3,
                ClusterInstancedGeometry = 4,
                LightmapGeometryObjectBuckets = 5,
                LightmapGeometryInstanceBuckets = 6,
                LightmapClusterBitmaps = 7,
                LightmapInstanceBitmaps = 8,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(120, 4)]
        public sealed class ScenarioFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Period:Seconds#Period for above function (lower values make function oscillate qu" +
                "ickly; higher values make it oscillate slowly).", typeof(Single))]
            public Single Period;
            [Abide.Guerilla.Tags.FieldAttribute("Scale Period By#Multiply this function by above period", typeof(Int16))]
            public Int16 ScalePeriodBy;
            [Abide.Guerilla.Tags.FieldAttribute("Function", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FunctionOptions), false)]
            public Int16 Function;
            [Abide.Guerilla.Tags.FieldAttribute("Scale Function By#Multiply this function by result of above function.", typeof(Int16))]
            public Int16 ScaleFunctionBy;
            [Abide.Guerilla.Tags.FieldAttribute("Wobble Function#Curve used for wobble.", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(WobbleFunctionOptions), false)]
            public Int16 WobbleFunction;
            [Abide.Guerilla.Tags.FieldAttribute("Wobble Period:Seconds#Time it takes for magnitude of this function to complete a " +
                "wobble.", typeof(Single))]
            public Single WobblePeriod;
            [Abide.Guerilla.Tags.FieldAttribute("Wobble Magnitude:Percent#Amount of random wobble in the magnitude.", typeof(Single))]
            public Single WobbleMagnitude;
            [Abide.Guerilla.Tags.FieldAttribute("Square Wave Threshold#If non-zero, all values above square wave threshold are sna" +
                "pped to 1.0, and all values below it are snapped to 0.0 to create a square wave." +
                "", typeof(Single))]
            public Single SquareWaveThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Step Count#Number of discrete values to snap to (e.g., step count of 5 snaps func" +
                "tion to 0.00, 0.25, 0.50,0.75, or 1.00).", typeof(Int16))]
            public Int16 StepCount;
            [Abide.Guerilla.Tags.FieldAttribute("Map to", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(MapToOptions), false)]
            public Int16 MapTo;
            [Abide.Guerilla.Tags.FieldAttribute("Sawtooth Count#Number of times this function should repeat (e.g., sawtooth count " +
                "of 5 gives function value of 1.0 at each of 0.25, 0.50, and 0.75, as well as at " +
                "1.0).", typeof(Int16))]
            public Int16 SawtoothCount;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Scale Result by#Multiply this function (e.g., from a weapon, vehicle) final resul" +
                "t of all of the above math.", typeof(Int16))]
            public Int16 ScaleResultBy;
            [Abide.Guerilla.Tags.FieldAttribute("Bounds Mode#Controls how bounds, below, are used.", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(BoundsModeOptions), false)]
            public Int16 BoundsMode;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Turn Off with#If specified function is off, so is this function.", typeof(Int16))]
            public Int16 TurnOffWith;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString4;
            public int Size
            {
                get
                {
                    return 120;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                Scripted = 1,
                Invert = 2,
                Additive = 4,
                AlwaysActive = 8,
            }
            public enum FunctionOptions
            {
                One = 0,
                Zero = 1,
                Cosine = 2,
                CosineVariablePeriod = 3,
                DiagonalWave = 4,
                DiagonalWaveVariablePeriod = 5,
                Slide = 6,
                SlideVariablePeriod = 7,
                Noise = 8,
                Jitter = 9,
                Wander = 10,
                Spark = 11,
            }
            public enum WobbleFunctionOptions
            {
                One = 0,
                Zero = 1,
                Cosine = 2,
                CosineVariablePeriod = 3,
                DiagonalWave = 4,
                DiagonalWaveVariablePeriod = 5,
                Slide = 6,
                SlideVariablePeriod = 7,
                Noise = 8,
                Jitter = 9,
                Wander = 10,
                Spark = 11,
            }
            public enum MapToOptions
            {
                Linear = 0,
                Early = 1,
                VeryEarly = 2,
                Late = 3,
                VeryLate = 4,
                Cosine = 5,
                One = 6,
                Zero = 7,
            }
            public enum BoundsModeOptions
            {
                Clip = 0,
                ClipAndNormalize = 1,
                ScaleToFit = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(304, 4)]
        public sealed class EditorCommentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute(")Type", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int32 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Comment", typeof(String256))]
            public String256 Comment;
            public int Size
            {
                get
                {
                    return 304;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum TypeOptions
            {
                Generic = 0,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class DontUseMeScenarioEnvironmentObjectBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("BSP*", typeof(Int16))]
            public Int16 Bsp;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
            public Int32 UniqueId;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Object Definition Tag*", typeof(Tag))]
            public Tag ObjectDefinitionTag;
            [Abide.Guerilla.Tags.FieldAttribute("Object*^", typeof(Int32))]
            public Int32 Object;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(44)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class ScenarioObjectNamesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString1;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(96, 4)]
        public sealed class ScenarioSceneryBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [Abide.Guerilla.Tags.FieldAttribute("Scenery Data", typeof(ScenarioSceneryDatumStructV4Block))]
            public ScenarioSceneryDatumStructV4Block SceneryData;
            public int Size
            {
                get
                {
                    return 96;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [Abide.Guerilla.Tags.FieldAttribute("Active Change Colors", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public Int32 ActiveChangeColors;
                [Abide.Guerilla.Tags.FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class ScenarioSceneryDatumStructV4Block : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Pathfinding Policy", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PathfindingPolicyOptions), false)]
                public Int16 PathfindingPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("Lightmapping Policy", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(LightmappingPolicyOptions), false)]
                public Int16 LightmappingPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("Pathfinding References*", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pathfinding_object_index_list_block", 16, typeof(PathfindingObjectIndexListBlock))]
                public TagBlock PathfindingReferences;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Valid Multiplayer Games", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ValidMultiplayerGamesOptions), true)]
                public Int16 ValidMultiplayerGames;
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class PathfindingObjectIndexListBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("BSP Index", typeof(Int16))]
                    public Int16 BspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Pathfinding Object Index", typeof(Int16))]
                    public Int16 PathfindingObjectIndex;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum PathfindingPolicyOptions
                {
                    TagDefault = 0,
                    PathfindingDynamic = 1,
                    PathfindingCutOut = 2,
                    PathfindingStatic = 3,
                    PathfindingNone = 4,
                }
                public enum LightmappingPolicyOptions
                {
                    TagDefault = 0,
                    Dynamic = 1,
                    PerVertex = 2,
                }
                public enum ValidMultiplayerGamesOptions
                {
                    CaptureTheFlag = 1,
                    Slayer = 2,
                    Oddball = 4,
                    KingOfTheHill = 8,
                    Juggernaut = 16,
                    Territories = 32,
                    Assault = 64,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioSceneryPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioBipedBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [Abide.Guerilla.Tags.FieldAttribute("Unit Data", typeof(ScenarioUnitStructBlock))]
            public ScenarioUnitStructBlock UnitData;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [Abide.Guerilla.Tags.FieldAttribute("Active Change Colors", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public Int32 ActiveChangeColors;
                [Abide.Guerilla.Tags.FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioUnitStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Body Vitality:[0,1]", typeof(Single))]
                public Single BodyVitality;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Dead = 1,
                    Closed = 2,
                    NotEnterableByPlayer = 4,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioBipedPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioVehicleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [Abide.Guerilla.Tags.FieldAttribute("Unit Data", typeof(ScenarioUnitStructBlock))]
            public ScenarioUnitStructBlock UnitData;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [Abide.Guerilla.Tags.FieldAttribute("Active Change Colors", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public Int32 ActiveChangeColors;
                [Abide.Guerilla.Tags.FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioUnitStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Body Vitality:[0,1]", typeof(Single))]
                public Single BodyVitality;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Dead = 1,
                    Closed = 2,
                    NotEnterableByPlayer = 4,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioVehiclePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(56, 4)]
        public sealed class ScenarioEquipmentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Equipment Data", typeof(ScenarioEquipmentDatumStructBlock))]
            public ScenarioEquipmentDatumStructBlock EquipmentData;
            public int Size
            {
                get
                {
                    return 56;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ScenarioEquipmentDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Equipment Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EquipmentFlagsOptions), true)]
                public Int32 EquipmentFlags;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum EquipmentFlagsOptions
                {
                    InitiallyAtRestDoesNotFall = 1,
                    Obsolete = 2,
                    DoesAccelerateMovesDueToExplosions = 4,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioEquipmentPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioWeaponBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [Abide.Guerilla.Tags.FieldAttribute("Weapon Data", typeof(ScenarioWeaponDatumStructBlock))]
            public ScenarioWeaponDatumStructBlock WeaponData;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [Abide.Guerilla.Tags.FieldAttribute("Active Change Colors", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public Int32 ActiveChangeColors;
                [Abide.Guerilla.Tags.FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioWeaponDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Rounds Left", typeof(Int16))]
                public Int16 RoundsLeft;
                [Abide.Guerilla.Tags.FieldAttribute("Rounds Loaded", typeof(Int16))]
                public Int16 RoundsLoaded;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    InitiallyAtRestDoesNotFall = 1,
                    Obsolete = 2,
                    DoesAccelerateMovesDueToExplosions = 4,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioWeaponPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class DeviceGroupBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Initial Value:[0,1]", typeof(Single))]
            public Single InitialValue;
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                CanChangeOnlyOnce = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(76, 4)]
        public sealed class ScenarioMachineBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [Abide.Guerilla.Tags.FieldAttribute("Machine Data", typeof(ScenarioMachineStructV3Block))]
            public ScenarioMachineStructV3Block MachineData;
            public int Size
            {
                get
                {
                    return 76;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class ScenarioMachineStructV3Block : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("Pathfinding References*", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pathfinding_object_index_list_block", 16, typeof(PathfindingObjectIndexListBlock))]
                public TagBlock PathfindingReferences;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class PathfindingObjectIndexListBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("BSP Index", typeof(Int16))]
                    public Int16 BspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Pathfinding Object Index", typeof(Int16))]
                    public Int16 PathfindingObjectIndex;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    DoesNotOperateAutomatically = 1,
                    OneSided = 2,
                    NeverAppearsLocked = 4,
                    OpenedByMeleeAttack = 8,
                    OneSidedForPlayer = 16,
                    DoesNotCloseAutomatically = 32,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioMachinePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
        public sealed class ScenarioControlBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [Abide.Guerilla.Tags.FieldAttribute("Control Data", typeof(ScenarioControlStructBlock))]
            public ScenarioControlStructBlock ControlData;
            public int Size
            {
                get
                {
                    return 68;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioControlStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("*DON\'T TOUCH THIS", typeof(Int16))]
                public Int16 DontTouchThis;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    UsableFromBothSides = 1,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioControlPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioLightFixtureBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [Abide.Guerilla.Tags.FieldAttribute("light_fixture data", typeof(ScenarioLightFixtureStructBlock))]
            public ScenarioLightFixtureStructBlock LightFixtureData;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ScenarioLightFixtureStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                [Abide.Guerilla.Tags.FieldAttribute("Intensity", typeof(Single))]
                public Single Intensity;
                [Abide.Guerilla.Tags.FieldAttribute("Falloff Angle:Degrees", typeof(Single))]
                public Single FalloffAngle;
                [Abide.Guerilla.Tags.FieldAttribute("Cutoff Angle:Degrees", typeof(Single))]
                public Single CutoffAngle;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioLightFixturePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
        public sealed class ScenarioSoundSceneryBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("sound_scenery", typeof(SoundSceneryDatumStructBlock))]
            public SoundSceneryDatumStructBlock SoundScenery;
            public int Size
            {
                get
                {
                    return 80;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
            public sealed class SoundSceneryDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Volume Type", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(VolumeTypeOptions), false)]
                public Int32 VolumeType;
                [Abide.Guerilla.Tags.FieldAttribute("Height", typeof(Single))]
                public Single Height;
                [Abide.Guerilla.Tags.FieldAttribute("Override Outer Cone Gain:dB", typeof(Single))]
                public Single OverrideOuterConeGain;
                public int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum VolumeTypeOptions
                {
                    Sphere = 0,
                    VerticalCylinder = 1,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioSoundSceneryPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(108, 4)]
        public sealed class ScenarioLightBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [Abide.Guerilla.Tags.FieldAttribute("Light Data", typeof(ScenarioLightStructBlock))]
            public ScenarioLightStructBlock LightData;
            public int Size
            {
                get
                {
                    return 108;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioLightStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("Lightmap Type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(LightmapTypeOptions), false)]
                public Int16 LightmapType;
                [Abide.Guerilla.Tags.FieldAttribute("Lightmap Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(LightmapFlagsOptions), true)]
                public Int16 LightmapFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Lightmap Half Life", typeof(Single))]
                public Single LightmapHalfLife;
                [Abide.Guerilla.Tags.FieldAttribute("Lightmap Light Scale", typeof(Single))]
                public Single LightmapLightScale;
                [Abide.Guerilla.Tags.FieldAttribute("Target Point*", typeof(Vector3))]
                public Vector3 TargetPoint;
                [Abide.Guerilla.Tags.FieldAttribute("Width:World Units*", typeof(Single))]
                public Single Width;
                [Abide.Guerilla.Tags.FieldAttribute("Height Scale:World Units*", typeof(Single))]
                public Single HeightScale;
                [Abide.Guerilla.Tags.FieldAttribute("Field of View:Degrees*", typeof(Single))]
                public Single FieldOfView;
                [Abide.Guerilla.Tags.FieldAttribute("Falloff Distance:World Units*", typeof(Single))]
                public Single FalloffDistance;
                [Abide.Guerilla.Tags.FieldAttribute("Cutoff Distance:World Units (from Far Plane)*", typeof(Single))]
                public Single CutoffDistance;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum TypeOptions
                {
                    Sphere = 0,
                    Orthogonal = 1,
                    Projective = 2,
                    Pyramid = 3,
                }
                public enum FlagsOptions
                {
                    CustomGeometry = 1,
                    Unused = 2,
                    CinematicOnly = 4,
                }
                public enum LightmapTypeOptions
                {
                    UseLightTagSetting = 0,
                    DynamicOnly = 1,
                    DynamicWithLightmaps = 2,
                    LightmapsOnly = 3,
                }
                public enum LightmapFlagsOptions
                {
                    Unused = 1,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioLightPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioProfilesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Starting Health Damage:[0,1]", typeof(Single))]
            public Single StartingHealthDamage;
            [Abide.Guerilla.Tags.FieldAttribute("Starting Shield Damage:[0,1]", typeof(Single))]
            public Single StartingShieldDamage;
            [Abide.Guerilla.Tags.FieldAttribute("Primary Weapon", typeof(TagReference))]
            public TagReference PrimaryWeapon;
            [Abide.Guerilla.Tags.FieldAttribute("Rounds Loaded", typeof(Int16))]
            public Int16 RoundsLoaded;
            [Abide.Guerilla.Tags.FieldAttribute("Rounds Total", typeof(Int16))]
            public Int16 RoundsTotal;
            [Abide.Guerilla.Tags.FieldAttribute("Secondary Weapon", typeof(TagReference))]
            public TagReference SecondaryWeapon;
            [Abide.Guerilla.Tags.FieldAttribute("Rounds Loaded", typeof(Int16))]
            public Int16 RoundsLoaded1;
            [Abide.Guerilla.Tags.FieldAttribute("Rounds Total", typeof(Int16))]
            public Int16 RoundsTotal1;
            [Abide.Guerilla.Tags.FieldAttribute("Starting Fragmentation Grenade Count", typeof(Byte))]
            public Byte StartingFragmentationGrenadeCount;
            [Abide.Guerilla.Tags.FieldAttribute("Starting Plasma Grenade Count", typeof(Byte))]
            public Byte StartingPlasmaGrenadeCount;
            [Abide.Guerilla.Tags.FieldAttribute("Starting <unknown> Grenade Count", typeof(Byte))]
            public Byte StartingLessThanUnknownGreaterThanGrenadeCount;
            [Abide.Guerilla.Tags.FieldAttribute("Starting <unknown> Grenade Count", typeof(Byte))]
            public Byte StartingLessThanUnknownGreaterThanGrenadeCount1;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class ScenarioPlayersBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("Facing:Degrees", typeof(Single))]
            public Single Facing;
            [Abide.Guerilla.Tags.FieldAttribute("Team Designator", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TeamDesignatorOptions), false)]
            public Int16 TeamDesignator;
            [Abide.Guerilla.Tags.FieldAttribute("BSP Index", typeof(Int16))]
            public Int16 BspIndex;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 1", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType1Options), false)]
            public Int16 GameType1;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 2", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType2Options), false)]
            public Int16 GameType2;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 3", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType3Options), false)]
            public Int16 GameType3;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 4", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType4Options), false)]
            public Int16 GameType4;
            [Abide.Guerilla.Tags.FieldAttribute("Spawn Type 0", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpawnType0Options), false)]
            public Int16 SpawnType0;
            [Abide.Guerilla.Tags.FieldAttribute("Spawn Type 1", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpawnType1Options), false)]
            public Int16 SpawnType1;
            [Abide.Guerilla.Tags.FieldAttribute("Spawn Type 2", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpawnType2Options), false)]
            public Int16 SpawnType2;
            [Abide.Guerilla.Tags.FieldAttribute("Spawn Type 3", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpawnType3Options), false)]
            public Int16 SpawnType3;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Campaign Player Type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CampaignPlayerTypeOptions), false)]
            public Int16 CampaignPlayerType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(6)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum TeamDesignatorOptions
            {
                RedAlpha = 0,
                BlueBravo = 1,
                YellowCharlie = 2,
                GreenDelta = 3,
                PurpleEcho = 4,
                OrangeFoxtrot = 5,
                BrownGolf = 6,
                PinkHotel = 7,
                Neutral = 8,
            }
            public enum GameType1Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType2Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType3Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType4Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum SpawnType0Options
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum SpawnType1Options
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum SpawnType2Options
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum SpawnType3Options
            {
                Both = 0,
                InitialSpawnOnly = 1,
                RespawnOnly = 2,
            }
            public enum CampaignPlayerTypeOptions
            {
                Masterchief = 0,
                Dervish = 1,
                ChiefMultiplayer = 2,
                EliteMultiplayer = 3,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
        public sealed class ScenarioTriggerVolumeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Name", typeof(Int16))]
            public Int16 ObjectName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Node Name", typeof(StringId))]
            public StringId NodeName;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(EmptyStringElement[]))]
            [Abide.Guerilla.Tags.ArrayAttribute(6, typeof(EmptyStringElement))]
            public EmptyStringElement[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("Extents", typeof(Vector3))]
            public Vector3 Extents;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("~Kill Trigger Volume*", typeof(Int16))]
            public Int16 KillTriggerVolume;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 68;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public sealed class EmptyStringElement : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Single))]
                public Single EmptyString;
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class RecordedAnimationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("version*", typeof(Byte))]
            public Byte Version;
            [Abide.Guerilla.Tags.FieldAttribute("raw animation data*", typeof(Byte))]
            public Byte RawAnimationData;
            [Abide.Guerilla.Tags.FieldAttribute("unit control data version*", typeof(Byte))]
            public Byte UnitControlDataVersion;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(1)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("length of animation*:ticks", typeof(Int16))]
            public Int16 LengthOfAnimation;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
        public sealed class ScenarioNetpointsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("Facing:Degrees", typeof(Single))]
            public Single Facing;
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Team Designator", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TeamDesignatorOptions), false)]
            public Int16 TeamDesignator;
            [Abide.Guerilla.Tags.FieldAttribute("Identifier", typeof(Int16))]
            public Int16 Identifier;
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(StringId))]
            public StringId EmptyString2;
            public int Size
            {
                get
                {
                    return 32;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum TypeOptions
            {
                CtfFlagSpawn = 0,
                CtfFlagReturn = 1,
                AssaultBombSpawn = 2,
                AssaultBombReturn = 3,
                OddballSpawn = 4,
                Unused = 5,
                RaceCheckpoint = 6,
                TeleporterSrc = 7,
                TeleporterDest = 8,
                HeadhunterBin = 9,
                TerritoriesFlag = 10,
                KingHill0 = 11,
                KingHill1 = 12,
                KingHill2 = 13,
                KingHill3 = 14,
                KingHill4 = 15,
                KingHill5 = 16,
                KingHill6 = 17,
                KingHill7 = 18,
            }
            public enum TeamDesignatorOptions
            {
                RedAlpha = 0,
                BlueBravo = 1,
                YellowCharlie = 2,
                GreenDelta = 3,
                PurpleEcho = 4,
                OrangeFoxtrot = 5,
                BrownGolf = 6,
                PinkHotel = 7,
                Neutral = 8,
            }
            public enum FlagsOptions
            {
                MultipleFlagbomb = 1,
                SingleFlagbomb = 2,
                NeutralFlagbomb = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
        public sealed class ScenarioNetgameEquipmentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 1", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType1Options), false)]
            public Int16 GameType1;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 2", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType2Options), false)]
            public Int16 GameType2;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 3", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType3Options), false)]
            public Int16 GameType3;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 4", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType4Options), false)]
            public Int16 GameType4;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Spawn Time (in seconds, 0 = default)", typeof(Int16))]
            public Int16 SpawnTimeInSeconds0EqualsDefault;
            [Abide.Guerilla.Tags.FieldAttribute("Respawn on Empty Time:seconds", typeof(Int16))]
            public Int16 RespawnOnEmptyTime;
            [Abide.Guerilla.Tags.FieldAttribute("Respawn Timer Starts", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(RespawnTimerStartsOptions), false)]
            public Int16 RespawnTimerStarts;
            [Abide.Guerilla.Tags.FieldAttribute("Classification", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ClassificationOptions), false)]
            public Byte Classification;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(3)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("Orientation", typeof(ScenarioNetgameEquipmentOrientationStructBlock))]
            public ScenarioNetgameEquipmentOrientationStructBlock Orientation;
            [Abide.Guerilla.Tags.FieldAttribute("Item/Vehicle Collection", typeof(TagReference))]
            public TagReference ItemvehicleCollection;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(48)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 152;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ScenarioNetgameEquipmentOrientationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Orientation", typeof(Vector3))]
                public Vector3 Orientation;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions
            {
                Levitate = 1,
                DestroyExistingOnNewSpawn = 2,
            }
            public enum GameType1Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType2Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType3Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType4Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum RespawnTimerStartsOptions
            {
                OnPickUp = 0,
                OnBodyDepletion = 1,
            }
            public enum ClassificationOptions
            {
                Weapon = 0,
                PrimaryLightLand = 1,
                SecondaryLightLand = 2,
                PrimaryHeavyLand = 3,
                PrimaryFlying = 4,
                SecondaryHeavyLand = 5,
                PrimaryTurret = 6,
                SecondaryTurret = 7,
                Grenade = 8,
                Powerup = 9,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(204, 4)]
        public sealed class ScenarioStartingEquipmentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 1", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType1Options), false)]
            public Int16 GameType1;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 2", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType2Options), false)]
            public Int16 GameType2;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 3", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType3Options), false)]
            public Int16 GameType3;
            [Abide.Guerilla.Tags.FieldAttribute("Game Type 4", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GameType4Options), false)]
            public Int16 GameType4;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(48)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Item Collection 1", typeof(TagReference))]
            public TagReference ItemCollection1;
            [Abide.Guerilla.Tags.FieldAttribute("Item Collection 2", typeof(TagReference))]
            public TagReference ItemCollection2;
            [Abide.Guerilla.Tags.FieldAttribute("Item Collection 3", typeof(TagReference))]
            public TagReference ItemCollection3;
            [Abide.Guerilla.Tags.FieldAttribute("Item Collection 4", typeof(TagReference))]
            public TagReference ItemCollection4;
            [Abide.Guerilla.Tags.FieldAttribute("Item Collection 5", typeof(TagReference))]
            public TagReference ItemCollection5;
            [Abide.Guerilla.Tags.FieldAttribute("Item Collection 6", typeof(TagReference))]
            public TagReference ItemCollection6;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(48)]
            public Byte[] EmptyString1;
            public int Size
            {
                get
                {
                    return 204;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                NoGrenades = 1,
                PlasmaGrenades = 2,
            }
            public enum GameType1Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType2Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType3Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
            public enum GameType4Options
            {
                None = 0,
                CaptureTheFlag = 1,
                Slayer = 2,
                Oddball = 3,
                KingOfTheHill = 4,
                Race = 5,
                Headhunter = 6,
                Juggernaut = 7,
                Territories = 8,
                Stub = 9,
                Ignored3 = 10,
                Ignored4 = 11,
                AllGameTypes = 12,
                AllExceptCtf = 13,
                AllExceptCtfAndRace = 14,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(14, 4)]
        public sealed class ScenarioBspSwitchTriggerVolumeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Trigger Volume", typeof(Int16))]
            public Int16 TriggerVolume;
            [Abide.Guerilla.Tags.FieldAttribute("Source", typeof(Int16))]
            public Int16 Source;
            [Abide.Guerilla.Tags.FieldAttribute("Destination", typeof(Int16))]
            public Int16 Destination;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 14;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ScenarioDecalsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Decal Type^", typeof(Int16))]
            public Int16 DecalType;
            [Abide.Guerilla.Tags.FieldAttribute("Yaw[-127,127]*", typeof(Byte))]
            public Byte Yaw127127;
            [Abide.Guerilla.Tags.FieldAttribute("Pitch[-127,127]*", typeof(Byte))]
            public Byte Pitch127127;
            [Abide.Guerilla.Tags.FieldAttribute("Position*", typeof(Vector3))]
            public Vector3 Position;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ScenarioDecalPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Reference^", typeof(TagReference))]
            public TagReference Reference;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioDetailObjectCollectionPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class StylePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("reference^", typeof(TagReference))]
            public TagReference Reference;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class SquadGroupsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("parent", typeof(Int16))]
            public Int16 Parent;
            [Abide.Guerilla.Tags.FieldAttribute("initial orders", typeof(Int16))]
            public Int16 InitialOrders;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(120, 4)]
        public sealed class SquadsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("team", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TeamOptions), false)]
            public Int16 Team;
            [Abide.Guerilla.Tags.FieldAttribute("parent", typeof(Int16))]
            public Int16 Parent;
            [Abide.Guerilla.Tags.FieldAttribute("squad delay time:seconds", typeof(Single))]
            public Single SquadDelayTime;
            [Abide.Guerilla.Tags.FieldAttribute("normal diff count#initial number of actors on normal difficulty", typeof(Int16))]
            public Int16 NormalDiffCount;
            [Abide.Guerilla.Tags.FieldAttribute("insane diff count#initial number of actors on insane difficulty (hard difficulty " +
                "is midway between normal and insane)", typeof(Int16))]
            public Int16 InsaneDiffCount;
            [Abide.Guerilla.Tags.FieldAttribute("major upgrade", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(MajorUpgradeOptions), false)]
            public Int16 MajorUpgrade;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle type", typeof(Int16))]
            public Int16 VehicleType;
            [Abide.Guerilla.Tags.FieldAttribute("character type", typeof(Int16))]
            public Int16 CharacterType;
            [Abide.Guerilla.Tags.FieldAttribute("initial zone", typeof(Int16))]
            public Int16 InitialZone;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("initial weapon", typeof(Int16))]
            public Int16 InitialWeapon;
            [Abide.Guerilla.Tags.FieldAttribute("initial secondary weapon", typeof(Int16))]
            public Int16 InitialSecondaryWeapon;
            [Abide.Guerilla.Tags.FieldAttribute("grenade type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GrenadeTypeOptions), false)]
            public Int16 GrenadeType;
            [Abide.Guerilla.Tags.FieldAttribute("initial order", typeof(Int16))]
            public Int16 InitialOrder;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle variant", typeof(StringId))]
            public StringId VehicleVariant;
            [Abide.Guerilla.Tags.FieldAttribute("starting locations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("actor_starting_locations_block", 32, typeof(ActorStartingLocationsBlock))]
            public TagBlock StartingLocations;
            [Abide.Guerilla.Tags.FieldAttribute("Placement script", typeof(String32))]
            public String32 PlacementScript;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString6;
            public int Size
            {
                get
                {
                    return 120;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(100, 4)]
            public sealed class ActorStartingLocationsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                public Int16 ReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("facing (yaw, pitch):degrees", typeof(Vector2))]
                public Vector2 FacingYawPitch;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("character type", typeof(Int16))]
                public Int16 CharacterType;
                [Abide.Guerilla.Tags.FieldAttribute("initial weapon", typeof(Int16))]
                public Int16 InitialWeapon;
                [Abide.Guerilla.Tags.FieldAttribute("initial secondary weapon", typeof(Int16))]
                public Int16 InitialSecondaryWeapon;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle type", typeof(Int16))]
                public Int16 VehicleType;
                [Abide.Guerilla.Tags.FieldAttribute("seat type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SeatTypeOptions), false)]
                public Int16 SeatType;
                [Abide.Guerilla.Tags.FieldAttribute("grenade type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(GrenadeTypeOptions), false)]
                public Int16 GrenadeType;
                [Abide.Guerilla.Tags.FieldAttribute("swarm count#number of cretures in swarm if a swarm is spawned at this location", typeof(Int16))]
                public Int16 SwarmCount;
                [Abide.Guerilla.Tags.FieldAttribute("actor variant name", typeof(StringId))]
                public StringId ActorVariantName;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle variant name", typeof(StringId))]
                public StringId VehicleVariantName;
                [Abide.Guerilla.Tags.FieldAttribute("initial movement distance#before doing anything else, the actor will travel the g" +
                    "iven distance in its forward direction", typeof(Single))]
                public Single InitialMovementDistance;
                [Abide.Guerilla.Tags.FieldAttribute("emitter vehicle", typeof(Int16))]
                public Int16 EmitterVehicle;
                [Abide.Guerilla.Tags.FieldAttribute("initial movement mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(InitialMovementModeOptions), false)]
                public Int16 InitialMovementMode;
                [Abide.Guerilla.Tags.FieldAttribute("Placement script", typeof(String32))]
                public String32 PlacementScript;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                public int Size
                {
                    get
                    {
                        return 100;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    InitiallyAsleep = 1,
                    InfectionFormExplode = 2,
                    Na = 4,
                    AlwaysPlace = 8,
                    InitiallyHidden = 16,
                }
                public enum SeatTypeOptions
                {
                    Default = 0,
                    Passenger = 1,
                    Gunner = 2,
                    Driver = 3,
                    SmallCargo = 4,
                    LargeCargo = 5,
                    NoDriver = 6,
                    NoVehicle = 7,
                }
                public enum GrenadeTypeOptions
                {
                    None = 0,
                    HumanGrenade = 1,
                    CovenantPlasma = 2,
                }
                public enum InitialMovementModeOptions
                {
                    Default = 0,
                    Climbing = 1,
                    Flying = 2,
                }
            }
            public enum FlagsOptions
            {
                Unused = 1,
                NeverSearch = 2,
                StartTimerImmediately = 4,
                NoTimerDelayForever = 8,
                MagicSightAfterTimer = 16,
                AutomaticMigration = 32,
                Deprecated = 64,
                RespawnEnabled = 128,
                Blind = 256,
                Deaf = 512,
                Braindead = 1024,
                _3dFiringPositions = 2048,
                InitiallyPlaced = 4096,
                UnitsNotEnterableByPlayer = 8192,
            }
            public enum TeamOptions
            {
                Default = 0,
                Player = 1,
                Human = 2,
                Covenant = 3,
                Flood = 4,
                Sentinel = 5,
                Heretic = 6,
                Prophet = 7,
                Unused8 = 8,
                Unused9 = 9,
                Unused10 = 10,
                Unused11 = 11,
                Unused12 = 12,
                Unused13 = 13,
                Unused14 = 14,
                Unused15 = 15,
            }
            public enum MajorUpgradeOptions
            {
                Normal = 0,
                Few = 1,
                Many = 2,
                None = 3,
                All = 4,
            }
            public enum GrenadeTypeOptions
            {
                None = 0,
                HumanGrenade = 1,
                CovenantPlasma = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class ZoneBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("manual bsp", typeof(Int16))]
            public Int16 ManualBsp;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("firing positions", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("firing_positions_block", 512, typeof(FiringPositionsBlock))]
            public TagBlock FiringPositions;
            [Abide.Guerilla.Tags.FieldAttribute("areas", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("areas_block", 64, typeof(AreasBlock))]
            public TagBlock Areas;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class FiringPositionsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("position (local)", typeof(Vector3))]
                public Vector3 PositionLocal;
                [Abide.Guerilla.Tags.FieldAttribute("reference frame", typeof(Int16))]
                public Int16 ReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("flags*", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                [Abide.Guerilla.Tags.FieldAttribute("cluster index*", typeof(Int16))]
                public Int16 ClusterIndex;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("normal", typeof(Vector2))]
                public Vector2 Normal;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Open = 1,
                    Partial = 2,
                    Closed = 4,
                    Mobile = 8,
                    WallLean = 16,
                    Perch = 32,
                    GroundPoint = 64,
                    DynamicCoverPoint = 128,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(140, 4)]
            public sealed class AreasBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^`", typeof(String32))]
                public String32 Name;
                [Abide.Guerilla.Tags.FieldAttribute("area flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AreaFlagsOptions), true)]
                public Int32 AreaFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(20)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(64)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("manual reference frame", typeof(Int16))]
                public Int16 ManualReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("flight_hints", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("flight_reference_block", 10, typeof(FlightReferenceBlock))]
                public TagBlock FlightHints;
                public int Size
                {
                    get
                    {
                        return 140;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class FlightReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("flight hint index", typeof(Int16))]
                    public Int16 FlightHintIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("poit index", typeof(Int16))]
                    public Int16 PoitIndex;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum AreaFlagsOptions
                {
                    VehicleArea = 1,
                    Perch = 2,
                    ManualReferenceFrame = 4,
                }
            }
            public enum FlagsOptions
            {
                ManualBspIndex = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
        public sealed class AiSceneBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("trigger conditions", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_scene_trigger_block", 1, typeof(AiSceneTriggerBlock))]
            public TagBlock TriggerConditions;
            [Abide.Guerilla.Tags.FieldAttribute("roles", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_scene_role_block", 10, typeof(AiSceneRoleBlock))]
            public TagBlock Roles;
            public int Size
            {
                get
                {
                    return 32;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class AiSceneTriggerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public Int16 CombinationRule;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("triggers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Trigger flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public Int32 TriggerFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions
                {
                    Or = 0,
                    And = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class AiSceneRoleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("group", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(GroupOptions), false)]
                public Int16 Group;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("role variants", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("ai_scene_role_variants_block", 10, typeof(AiSceneRoleVariantsBlock))]
                public TagBlock RoleVariants;
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class AiSceneRoleVariantsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("variant designation^", typeof(StringId))]
                    public StringId VariantDesignation;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum GroupOptions
                {
                    Group1 = 0,
                    Group2 = 1,
                    Group3 = 2,
                }
            }
            public enum FlagsOptions
            {
                SceneCanPlayMultipleTimes = 1,
                EnableCombatDialogue = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class CharacterPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("reference^", typeof(TagReference))]
            public TagReference Reference;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(156, 4)]
        public sealed class PathfindingDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("sectors", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sector_block", 65534, typeof(SectorBlock))]
            public TagBlock Sectors;
            [Abide.Guerilla.Tags.FieldAttribute("links", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sector_link_block", 262144, typeof(SectorLinkBlock))]
            public TagBlock Links;
            [Abide.Guerilla.Tags.FieldAttribute("refs", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ref_block", 131072, typeof(RefBlock))]
            public TagBlock Refs;
            [Abide.Guerilla.Tags.FieldAttribute("bsp2d nodes", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sector_bsp2d_nodes_block", 131072, typeof(SectorBsp2dNodesBlock))]
            public TagBlock Bsp2dNodes;
            [Abide.Guerilla.Tags.FieldAttribute("surface flags", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("surface_flags_block", 4096, typeof(SurfaceFlagsBlock))]
            public TagBlock SurfaceFlags;
            [Abide.Guerilla.Tags.FieldAttribute("vertices", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sector_vertex_block", 65535, typeof(SectorVertexBlock))]
            public TagBlock Vertices;
            [Abide.Guerilla.Tags.FieldAttribute("object refs", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("environment_object_refs", 2000, typeof(EnvironmentObjectRefs))]
            public TagBlock ObjectRefs;
            [Abide.Guerilla.Tags.FieldAttribute("pathfinding hints", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("pathfinding_hints_block", 32767, typeof(PathfindingHintsBlock))]
            public TagBlock PathfindingHints;
            [Abide.Guerilla.Tags.FieldAttribute("instanced geometry refs", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("instanced_geometry_reference_block", 1024, typeof(InstancedGeometryReferenceBlock))]
            public TagBlock InstancedGeometryRefs;
            [Abide.Guerilla.Tags.FieldAttribute("structure checksum*", typeof(Int32))]
            public Int32 StructureChecksum;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("user-placed hints", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("user_hint_block", 1, typeof(UserHintBlock))]
            public TagBlock UserPlacedHints;
            public int Size
            {
                get
                {
                    return 156;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class SectorBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Path-finding sector flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PathFindingSectorFlagsOptions), true)]
                public Int16 PathFindingSectorFlags;
                [Abide.Guerilla.Tags.FieldAttribute("hint index", typeof(Int16))]
                public Int16 HintIndex;
                [Abide.Guerilla.Tags.FieldAttribute("first link (do not set manually)", typeof(Int32))]
                public Int32 FirstLinkDoNotSetManually;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum PathFindingSectorFlagsOptions
                {
                    SectorWalkable = 1,
                    SectorBreakable = 2,
                    SectorMobile = 4,
                    SectorBspSource = 8,
                    Floor = 16,
                    Ceiling = 32,
                    WallNorth = 64,
                    WallSouth = 128,
                    WallEast = 256,
                    WallWest = 512,
                    Crouchable = 1024,
                    Aligned = 2048,
                    SectorStep = 4096,
                    SectorInterior = 8192,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class SectorLinkBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("vertex 1", typeof(Int16))]
                public Int16 Vertex1;
                [Abide.Guerilla.Tags.FieldAttribute("vertex 2", typeof(Int16))]
                public Int16 Vertex2;
                [Abide.Guerilla.Tags.FieldAttribute("link flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(LinkFlagsOptions), true)]
                public Int16 LinkFlags;
                [Abide.Guerilla.Tags.FieldAttribute("hint index", typeof(Int16))]
                public Int16 HintIndex;
                [Abide.Guerilla.Tags.FieldAttribute("forward link", typeof(Int16))]
                public Int16 ForwardLink;
                [Abide.Guerilla.Tags.FieldAttribute("reverse link", typeof(Int16))]
                public Int16 ReverseLink;
                [Abide.Guerilla.Tags.FieldAttribute("left sector", typeof(Int16))]
                public Int16 LeftSector;
                [Abide.Guerilla.Tags.FieldAttribute("right sector", typeof(Int16))]
                public Int16 RightSector;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum LinkFlagsOptions
                {
                    SectorLinkFromCollisionEdge = 1,
                    SectorIntersectionLink = 2,
                    SectorLinkBsp2dCreationError = 4,
                    SectorLinkTopologyError = 8,
                    SectorLinkChainError = 16,
                    SectorLinkBothSectorsWalkable = 32,
                    SectorLinkMagicHangingLink = 64,
                    SectorLinkThreshold = 128,
                    SectorLinkCrouchable = 256,
                    SectorLinkWallBase = 512,
                    SectorLinkLedge = 1024,
                    SectorLinkLeanable = 2048,
                    SectorLinkStartCorner = 4096,
                    SectorLinkEndCorner = 8192,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class RefBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("node ref or sector ref", typeof(Int32))]
                public Int32 NodeRefOrSectorRef;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class SectorBsp2dNodesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("plane*", typeof(Vector3))]
                public Vector3 Plane;
                [Abide.Guerilla.Tags.FieldAttribute("left child*", typeof(Int32))]
                public Int32 LeftChild;
                [Abide.Guerilla.Tags.FieldAttribute("right child*", typeof(Int32))]
                public Int32 RightChild;
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class SurfaceFlagsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags*", typeof(Int32))]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class SectorVertexBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("point*", typeof(Vector3))]
                public Vector3 Point;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
            public sealed class EnvironmentObjectRefs : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("first sector*", typeof(Int32))]
                public Int32 FirstSector;
                [Abide.Guerilla.Tags.FieldAttribute("last sector*", typeof(Int32))]
                public Int32 LastSector;
                [Abide.Guerilla.Tags.FieldAttribute("bsps*", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("environment_object_bsp_refs", 1024, typeof(EnvironmentObjectBspRefs))]
                public TagBlock Bsps;
                [Abide.Guerilla.Tags.FieldAttribute("nodes*", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("environment_object_nodes", 255, typeof(EnvironmentObjectNodes))]
                public TagBlock Nodes;
                public int Size
                {
                    get
                    {
                        return 36;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class EnvironmentObjectBspRefs : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("bsp reference*", typeof(Int32))]
                    public Int32 BspReference;
                    [Abide.Guerilla.Tags.FieldAttribute("first sector*", typeof(Int32))]
                    public Int32 FirstSector;
                    [Abide.Guerilla.Tags.FieldAttribute("last sector*", typeof(Int32))]
                    public Int32 LastSector;
                    [Abide.Guerilla.Tags.FieldAttribute("node_index*", typeof(Int16))]
                    public Int16 NodeIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class EnvironmentObjectNodes : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame index", typeof(Int16))]
                    public Int16 ReferenceFrameIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("projection axis", typeof(Byte))]
                    public Byte ProjectionAxis;
                    [Abide.Guerilla.Tags.FieldAttribute("projection sign", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ProjectionSignOptions), true)]
                    public Byte ProjectionSign;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum ProjectionSignOptions
                    {
                        ProjectionSign = 1,
                    }
                }
                public enum FlagsOptions
                {
                    Mobile = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class PathfindingHintsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("hint type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(HintTypeOptions), false)]
                public Int16 HintType;
                [Abide.Guerilla.Tags.FieldAttribute("Next hint index", typeof(Int16))]
                public Int16 NextHintIndex;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 0*", typeof(Int16))]
                public Int16 HintData0;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 1*", typeof(Int16))]
                public Int16 HintData1;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 2*", typeof(Int16))]
                public Int16 HintData2;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 3*", typeof(Int16))]
                public Int16 HintData3;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 4*", typeof(Int16))]
                public Int16 HintData4;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 5*", typeof(Int16))]
                public Int16 HintData5;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 6*", typeof(Int16))]
                public Int16 HintData6;
                [Abide.Guerilla.Tags.FieldAttribute("hint data 7*", typeof(Int16))]
                public Int16 HintData7;
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum HintTypeOptions
                {
                    IntersectionLink = 0,
                    JumpLink = 1,
                    ClimbLink = 2,
                    VaultLink = 3,
                    MountLink = 4,
                    HoistLink = 5,
                    WallJumpLink = 6,
                    BreakableFloor = 7,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class InstancedGeometryReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("pathfinding object_index", typeof(Int16))]
                public Int16 PathfindingObjectIndex;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(108, 4)]
            public sealed class UserHintBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("point geometry", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_point_block", 200, typeof(UserHintPointBlock))]
                public TagBlock PointGeometry;
                [Abide.Guerilla.Tags.FieldAttribute("ray geometry", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_ray_block", 200, typeof(UserHintRayBlock))]
                public TagBlock RayGeometry;
                [Abide.Guerilla.Tags.FieldAttribute("line segment geometry", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_line_segment_block", 200, typeof(UserHintLineSegmentBlock))]
                public TagBlock LineSegmentGeometry;
                [Abide.Guerilla.Tags.FieldAttribute("parallelogram geometry", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_parallelogram_block", 200, typeof(UserHintParallelogramBlock))]
                public TagBlock ParallelogramGeometry;
                [Abide.Guerilla.Tags.FieldAttribute("polygon geometry", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_polygon_block", 200, typeof(UserHintPolygonBlock))]
                public TagBlock PolygonGeometry;
                [Abide.Guerilla.Tags.FieldAttribute("jump hints", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_jump_block", 200, typeof(UserHintJumpBlock))]
                public TagBlock JumpHints;
                [Abide.Guerilla.Tags.FieldAttribute("climb hints", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_climb_block", 200, typeof(UserHintClimbBlock))]
                public TagBlock ClimbHints;
                [Abide.Guerilla.Tags.FieldAttribute("well hints", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_well_block", 200, typeof(UserHintWellBlock))]
                public TagBlock WellHints;
                [Abide.Guerilla.Tags.FieldAttribute("flight hints", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("user_hint_flight_block", 50, typeof(UserHintFlightBlock))]
                public TagBlock FlightHints;
                public int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class UserHintPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Point", typeof(Vector3))]
                    public Vector3 Point;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
                public sealed class UserHintRayBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Point", typeof(Vector3))]
                    public Vector3 Point;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("Vector", typeof(Vector3))]
                    public Vector3 Vector;
                    public int Size
                    {
                        get
                        {
                            return 28;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
                public sealed class UserHintLineSegmentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int32 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("Point 0", typeof(Vector3))]
                    public Vector3 Point0;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("Point 1", typeof(Vector3))]
                    public Vector3 Point1;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame1;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    public int Size
                    {
                        get
                        {
                            return 36;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
                public sealed class UserHintParallelogramBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int32 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("Point 0", typeof(Vector3))]
                    public Vector3 Point0;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("Point 1", typeof(Vector3))]
                    public Vector3 Point1;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame1;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("Point 2", typeof(Vector3))]
                    public Vector3 Point2;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame2;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString2;
                    [Abide.Guerilla.Tags.FieldAttribute("Point 3", typeof(Vector3))]
                    public Vector3 Point3;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame3;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString3;
                    public int Size
                    {
                        get
                        {
                            return 68;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class UserHintPolygonBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int32 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("Points", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("user_hint_point_block", 200, typeof(UserHintPointBlock))]
                    public TagBlock Points;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                    public sealed class UserHintPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Point", typeof(Vector3))]
                        public Vector3 Point;
                        [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                        public Int16 ReferenceFrame;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                        [Abide.Guerilla.Tags.PaddingAttribute(2)]
                        public Byte[] EmptyString;
                        public int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum FlagsOptions
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class UserHintJumpBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int16 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("geometry index*", typeof(Int16))]
                    public Int16 GeometryIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("force jump height", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ForceJumpHeightOptions), false)]
                    public Int16 ForceJumpHeight;
                    [Abide.Guerilla.Tags.FieldAttribute("control flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ControlFlagsOptions), true)]
                    public Int16 ControlFlags;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                    public enum ForceJumpHeightOptions
                    {
                        None = 0,
                        Down = 1,
                        Step = 2,
                        Crouch = 3,
                        Stand = 4,
                        Storey = 5,
                        Tower = 6,
                        Infinite = 7,
                    }
                    public enum ControlFlagsOptions
                    {
                        MagicLift = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class UserHintClimbBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int16 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("geometry index*", typeof(Int16))]
                    public Int16 GeometryIndex;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class UserHintWellBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int32 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("points", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("user_hint_well_point_block", 200, typeof(UserHintWellPointBlock))]
                    public TagBlock Points;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
                    public sealed class UserHintWellPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("type", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                        public Int16 Type;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                        [Abide.Guerilla.Tags.PaddingAttribute(2)]
                        public Byte[] EmptyString;
                        [Abide.Guerilla.Tags.FieldAttribute("point", typeof(Vector3))]
                        public Vector3 Point;
                        [Abide.Guerilla.Tags.FieldAttribute("reference frame", typeof(Int16))]
                        public Int16 ReferenceFrame;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                        [Abide.Guerilla.Tags.PaddingAttribute(2)]
                        public Byte[] EmptyString1;
                        [Abide.Guerilla.Tags.FieldAttribute("sector index", typeof(Int32))]
                        public Int32 SectorIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("normal", typeof(Vector2))]
                        public Vector2 Normal;
                        public int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions
                        {
                            Jump = 0,
                            Climb = 1,
                            Hoist = 2,
                        }
                    }
                    public enum FlagsOptions
                    {
                        Bidirectional = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class UserHintFlightBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("points", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("user_hint_flight_point_block", 10, typeof(UserHintFlightPointBlock))]
                    public TagBlock Points;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class UserHintFlightPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("point", typeof(Vector3))]
                        public Vector3 Point;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
        public sealed class AiAnimationReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("animation name^", typeof(String32))]
            public String32 AnimationName;
            [Abide.Guerilla.Tags.FieldAttribute("animation graph#leave this blank to use the unit\'s normal animation graph", typeof(TagReference))]
            public TagReference AnimationGraph;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 60;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class AiScriptReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("script name^", typeof(String32))]
            public String32 ScriptName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class AiRecordingReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("recording name^", typeof(String32))]
            public String32 RecordingName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(116, 4)]
        public sealed class AiConversationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("trigger distance:world units#distance the player must enter before the conversati" +
                "on can trigger", typeof(Single))]
            public Single TriggerDistance;
            [Abide.Guerilla.Tags.FieldAttribute("run-to-player dist:world units#if the \'involves player\' flag is set, when trigger" +
                "ed the conversation\'s participant(s) will run to within this distance of the pla" +
                "yer", typeof(Single))]
            public Single RunToPlayerDist;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(36)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("participants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_conversation_participant_block", 8, typeof(AiConversationParticipantBlock))]
            public TagBlock Participants;
            [Abide.Guerilla.Tags.FieldAttribute("lines", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_conversation_line_block", 32, typeof(AiConversationLineBlock))]
            public TagBlock Lines;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString2;
            public int Size
            {
                get
                {
                    return 116;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
            public sealed class AiConversationParticipantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("use this object#if a unit with this name exists, we try to pick them to start the" +
                    " conversation", typeof(Int16))]
                public Int16 UseThisObject;
                [Abide.Guerilla.Tags.FieldAttribute("set new name#once we pick a unit, we name it this", typeof(Int16))]
                public Int16 SetNewName;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("encounter name", typeof(String32))]
                public String32 EncounterName;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString4;
                public int Size
                {
                    get
                    {
                        return 84;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(124, 4)]
            public sealed class AiConversationLineBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("participant", typeof(Int16))]
                public Int16 Participant;
                [Abide.Guerilla.Tags.FieldAttribute("addressee", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AddresseeOptions), false)]
                public Int16 Addressee;
                [Abide.Guerilla.Tags.FieldAttribute("addressee participant#this field is only used if the addressee type is \'participa" +
                    "nt\'", typeof(Int16))]
                public Int16 AddresseeParticipant;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("line delay time", typeof(Single))]
                public Single LineDelayTime;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("variant 1", typeof(TagReference))]
                public TagReference Variant1;
                [Abide.Guerilla.Tags.FieldAttribute("variant 2", typeof(TagReference))]
                public TagReference Variant2;
                [Abide.Guerilla.Tags.FieldAttribute("variant 3", typeof(TagReference))]
                public TagReference Variant3;
                [Abide.Guerilla.Tags.FieldAttribute("variant 4", typeof(TagReference))]
                public TagReference Variant4;
                [Abide.Guerilla.Tags.FieldAttribute("variant 5", typeof(TagReference))]
                public TagReference Variant5;
                [Abide.Guerilla.Tags.FieldAttribute("variant 6", typeof(TagReference))]
                public TagReference Variant6;
                public int Size
                {
                    get
                    {
                        return 124;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    AddresseeLookAtSpeaker = 1,
                    EveryoneLookAtSpeaker = 2,
                    EveryoneLookAtAddressee = 4,
                    WaitAfterUntilToldToAdvance = 8,
                    WaitUntilSpeakerNearby = 16,
                    WaitUntilEveryoneNearby = 32,
                }
                public enum AddresseeOptions
                {
                    None = 0,
                    Player = 1,
                    Participant = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions
            {
                StopIfDeath = 1,
                StopIfDamaged = 2,
                StopIfVisibleEnemy = 4,
                StopIfAlertedToEnemy = 8,
                PlayerMustBeVisible = 16,
                StopOtherActions = 32,
                KeepTryingToPlay = 64,
                PlayerMustBeLooking = 128,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class HsScriptsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^*", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("script type*", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScriptTypeOptions), false)]
            public Int16 ScriptType;
            [Abide.Guerilla.Tags.FieldAttribute("return type*", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ReturnTypeOptions), false)]
            public Int16 ReturnType;
            [Abide.Guerilla.Tags.FieldAttribute("root expression index*", typeof(Int32))]
            public Int32 RootExpressionIndex;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum ScriptTypeOptions
            {
                Startup = 0,
                Dormant = 1,
                Continuous = 2,
                Static = 3,
                Stub = 4,
                CommandScript = 5,
            }
            public enum ReturnTypeOptions
            {
                Unparsed = 0,
                SpecialForm = 1,
                FunctionName = 2,
                Passthrough = 3,
                Void = 4,
                Boolean = 5,
                Real = 6,
                Short = 7,
                Long = 8,
                String = 9,
                Script = 10,
                StringId = 11,
                UnitSeatMapping = 12,
                TriggerVolume = 13,
                CutsceneFlag = 14,
                CutsceneCameraPoint = 15,
                CutsceneTitle = 16,
                CutsceneRecording = 17,
                DeviceGroup = 18,
                Ai = 19,
                AiCommandList = 20,
                AiCommandScript = 21,
                AiBehavior = 22,
                AiOrders = 23,
                StartingProfile = 24,
                Conversation = 25,
                StructureBsp = 26,
                Navpoint = 27,
                PointReference = 28,
                Style = 29,
                HudMessage = 30,
                ObjectList = 31,
                Sound = 32,
                Effect = 33,
                Damage = 34,
                LoopingSound = 35,
                AnimationGraph = 36,
                DamageEffect = 37,
                ObjectDefinition = 38,
                Bitmap = 39,
                Shader = 40,
                RenderModel = 41,
                StructureDefinition = 42,
                LightmapDefinition = 43,
                GameDifficulty = 44,
                Team = 45,
                ActorType = 46,
                HudCorner = 47,
                ModelState = 48,
                NetworkEvent = 49,
                Object = 50,
                Unit = 51,
                Vehicle = 52,
                Weapon = 53,
                Device = 54,
                Scenery = 55,
                ObjectName = 56,
                UnitName = 57,
                VehicleName = 58,
                WeaponName = 59,
                DeviceName = 60,
                SceneryName = 61,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class HsGlobalsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name*", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("type*", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("initialization expression index*", typeof(Int32))]
            public Int32 InitializationExpressionIndex;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum TypeOptions
            {
                Unparsed = 0,
                SpecialForm = 1,
                FunctionName = 2,
                Passthrough = 3,
                Void = 4,
                Boolean = 5,
                Real = 6,
                Short = 7,
                Long = 8,
                String = 9,
                Script = 10,
                StringId = 11,
                UnitSeatMapping = 12,
                TriggerVolume = 13,
                CutsceneFlag = 14,
                CutsceneCameraPoint = 15,
                CutsceneTitle = 16,
                CutsceneRecording = 17,
                DeviceGroup = 18,
                Ai = 19,
                AiCommandList = 20,
                AiCommandScript = 21,
                AiBehavior = 22,
                AiOrders = 23,
                StartingProfile = 24,
                Conversation = 25,
                StructureBsp = 26,
                Navpoint = 27,
                PointReference = 28,
                Style = 29,
                HudMessage = 30,
                ObjectList = 31,
                Sound = 32,
                Effect = 33,
                Damage = 34,
                LoopingSound = 35,
                AnimationGraph = 36,
                DamageEffect = 37,
                ObjectDefinition = 38,
                Bitmap = 39,
                Shader = 40,
                RenderModel = 41,
                StructureDefinition = 42,
                LightmapDefinition = 43,
                GameDifficulty = 44,
                Team = 45,
                ActorType = 46,
                HudCorner = 47,
                ModelState = 48,
                NetworkEvent = 49,
                Object = 50,
                Unit = 51,
                Vehicle = 52,
                Weapon = 53,
                Device = 54,
                Scenery = 55,
                ObjectName = 56,
                UnitName = 57,
                VehicleName = 58,
                WeaponName = 59,
                DeviceName = 60,
                SceneryName = 61,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class HsReferencesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("reference*^", typeof(TagReference))]
            public TagReference Reference;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class HsSourceFilesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name*", typeof(String32))]
            public String32 Name;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(132, 4)]
        public sealed class CsScriptDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("point sets", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("cs_point_set_block", 200, typeof(CsPointSetBlock))]
            public TagBlock PointSets;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(120)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 132;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
            public sealed class CsPointSetBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
                public String32 Name;
                [Abide.Guerilla.Tags.FieldAttribute("points", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("cs_point_block", 20, typeof(CsPointBlock))]
                public TagBlock Points;
                [Abide.Guerilla.Tags.FieldAttribute("bsp index", typeof(Int16))]
                public Int16 BspIndex;
                [Abide.Guerilla.Tags.FieldAttribute("manual reference frame", typeof(Int16))]
                public Int16 ManualReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 52;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
                public sealed class CsPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
                    public String32 Name;
                    [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                    public Vector3 Position;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("surface index", typeof(Int32))]
                    public Int32 SurfaceIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("facing direction", typeof(Vector2))]
                    public Vector2 FacingDirection;
                    public int Size
                    {
                        get
                        {
                            return 60;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    ManualReferenceFrame = 1,
                    TurretDeployment = 2,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(56, 4)]
        public sealed class ScenarioCutsceneFlagBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("Facing", typeof(Vector2))]
            public Vector2 Facing;
            public int Size
            {
                get
                {
                    return 56;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class ScenarioCutsceneCameraPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("Orientation", typeof(Vector3))]
            public Vector3 Orientation;
            [Abide.Guerilla.Tags.FieldAttribute(")Unused", typeof(Single))]
            public Single Unused;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                EditAsRelative = 1,
            }
            public enum TypeOptions
            {
                Normal = 0,
                IgnoreTargetOrientation = 1,
                Dolly = 2,
                IgnoreTargetUpdates = 3,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class ScenarioCutsceneTitleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("text bounds (on screen)", typeof(Vector2))]
            public Vector2 TextBoundsOnScreen;
            [Abide.Guerilla.Tags.FieldAttribute("justification", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(JustificationOptions), false)]
            public Int16 Justification;
            [Abide.Guerilla.Tags.FieldAttribute("font", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FontOptions), false)]
            public Int16 Font;
            [Abide.Guerilla.Tags.FieldAttribute("text color", typeof(ColorRgb))]
            public ColorRgb TextColor;
            [Abide.Guerilla.Tags.FieldAttribute("shadow color", typeof(ColorRgb))]
            public ColorRgb ShadowColor;
            [Abide.Guerilla.Tags.FieldAttribute("fade in time [seconds]", typeof(Single))]
            public Single FadeInTimeSeconds;
            [Abide.Guerilla.Tags.FieldAttribute("up time [seconds]", typeof(Single))]
            public Single UpTimeSeconds;
            [Abide.Guerilla.Tags.FieldAttribute("fade out time [seconds]", typeof(Single))]
            public Single FadeOutTimeSeconds;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum JustificationOptions
            {
                Left = 0,
                Right = 1,
                Center = 2,
                CustomTextEntry = 3,
            }
            public enum FontOptions
            {
                TerminalFont = 0,
                BodyTextFont = 1,
                TitleFont = 2,
                SuperLargeFont = 3,
                LargeBodyTextFont = 4,
                SplitScreenHudMessageFont = 5,
                FullScreenHudMessageFont = 6,
                EnglishBodyTextFont = 7,
                HudNumberFont = 8,
                SubtitleFont = 9,
                MainMenuFont = 10,
                TextChatFont = 11,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioStructureBspReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Structure BSP^", typeof(TagReference))]
            public TagReference StructureBsp;
            [Abide.Guerilla.Tags.FieldAttribute("Structure Lightmap^", typeof(TagReference))]
            public TagReference StructureLightmap;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED radiance est. search distance", typeof(Single))]
            public Single UnusedRadianceEstSearchDistance;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED luminels per world unit", typeof(Single))]
            public Single UnusedLuminelsPerWorldUnit;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED output white reference", typeof(Single))]
            public Single UnusedOutputWhiteReference;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("Default Sky", typeof(Int16))]
            public Int16 DefaultSky;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString5;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                DefaultSkyEnabled = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class ScenarioResourcesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("References*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_resource_reference_block", 16, typeof(ScenarioResourceReferenceBlock))]
            public TagBlock References;
            [Abide.Guerilla.Tags.FieldAttribute("Script Source*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_hs_source_reference_block", 8, typeof(ScenarioHsSourceReferenceBlock))]
            public TagBlock ScriptSource;
            [Abide.Guerilla.Tags.FieldAttribute("AI Resources*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_ai_resource_reference_block", 2, typeof(ScenarioAiResourceReferenceBlock))]
            public TagBlock AiResources;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class ScenarioResourceReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Reference*", typeof(TagReference))]
                public TagReference Reference;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class ScenarioHsSourceReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Reference*", typeof(TagReference))]
                public TagReference Reference;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class ScenarioAiResourceReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Reference*", typeof(TagReference))]
                public TagReference Reference;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
        public sealed class OldUnusedStrucurePhysicsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("*Evironment Object Identifiers", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("old_unused_object_identifiers_block", 2048, typeof(OldUnusedObjectIdentifiersBlock))]
            public TagBlock EvironmentObjectIdentifiers;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("mopp Bounds Min*", typeof(Vector3))]
            public Vector3 MoppBoundsMin;
            [Abide.Guerilla.Tags.FieldAttribute("mopp Bounds Max*", typeof(Vector3))]
            public Vector3 MoppBoundsMax;
            public int Size
            {
                get
                {
                    return 60;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class OldUnusedObjectIdentifiersBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class HsUnitSeatBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int32))]
            public Int32 EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int32))]
            public Int32 EmptyString1;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
        public sealed class ScenarioKillTriggerVolumesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Trigger Volume", typeof(Int16))]
            public Int16 TriggerVolume;
            public int Size
            {
                get
                {
                    return 2;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class SyntaxDatumBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Datum Header", typeof(Int16))]
            public Int16 DatumHeader;
            [Abide.Guerilla.Tags.FieldAttribute("Script Index/Function Index/Constant Type Union", typeof(Int16))]
            public Int16 ScriptIndexfunctionIndexconstantTypeUnion;
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Next Node Index", typeof(Int32))]
            public Int32 NextNodeIndex;
            [Abide.Guerilla.Tags.FieldAttribute("Data", typeof(Int32))]
            public Int32 Data;
            [Abide.Guerilla.Tags.FieldAttribute("source_offset", typeof(Int32))]
            public Int32 SourceOffset;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(144, 4)]
        public sealed class OrdersBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Style", typeof(Int16))]
            public Int16 Style;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Force combat status", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ForceCombatStatusOptions), false)]
            public Int16 ForceCombatStatus;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Entry Script", typeof(String32))]
            public String32 EntryScript;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("Follow squad", typeof(Int16))]
            public Int16 FollowSquad;
            [Abide.Guerilla.Tags.FieldAttribute("follow radius", typeof(Single))]
            public Single FollowRadius;
            [Abide.Guerilla.Tags.FieldAttribute("Primary area set", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("zone_set_block", 32, typeof(ZoneSetBlock))]
            public TagBlock PrimaryAreaSet;
            [Abide.Guerilla.Tags.FieldAttribute("Secondary area set", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("secondary_zone_set_block", 32, typeof(SecondaryZoneSetBlock))]
            public TagBlock SecondaryAreaSet;
            [Abide.Guerilla.Tags.FieldAttribute("Secondary set trigger", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("secondary_set_trigger_block", 1, typeof(SecondarySetTriggerBlock))]
            public TagBlock SecondarySetTrigger;
            [Abide.Guerilla.Tags.FieldAttribute("Special movement", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("special_movement_block", 1, typeof(SpecialMovementBlock))]
            public TagBlock SpecialMovement;
            [Abide.Guerilla.Tags.FieldAttribute("Order endings", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("order_ending_block", 12, typeof(OrderEndingBlock))]
            public TagBlock OrderEndings;
            public int Size
            {
                get
                {
                    return 144;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ZoneSetBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("area type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AreaTypeOptions), false)]
                public Int16 AreaType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("zone^", typeof(Int16))]
                public Int16 Zone;
                [Abide.Guerilla.Tags.FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum AreaTypeOptions
                {
                    Deault = 0,
                    Search = 1,
                    Goal = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class SecondaryZoneSetBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("area type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AreaTypeOptions), false)]
                public Int16 AreaType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("zone^", typeof(Int16))]
                public Int16 Zone;
                [Abide.Guerilla.Tags.FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum AreaTypeOptions
                {
                    Deault = 0,
                    Search = 1,
                    Goal = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class SecondarySetTriggerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public Int16 CombinationRule;
                [Abide.Guerilla.Tags.FieldAttribute("dialogue type#when this ending is triggered, launch a dialogue event of the given" +
                    " type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DialogueTypeOptions), false)]
                public Int16 DialogueType;
                [Abide.Guerilla.Tags.FieldAttribute("triggers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Trigger flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public Int32 TriggerFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions
                {
                    Or = 0,
                    And = 1,
                }
                public enum DialogueTypeOptions
                {
                    None = 0,
                    Advance = 1,
                    Charge = 2,
                    FallBack = 3,
                    Retreat = 4,
                    Moveone = 5,
                    Arrival = 6,
                    EnterVehicle = 7,
                    ExitVehicle = 8,
                    FollowPlayer = 9,
                    LeavePlayer = 10,
                    Support = 11,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class SpecialMovementBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Special movement 1", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpecialMovement1Options), true)]
                public Int32 SpecialMovement1;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum SpecialMovement1Options
                {
                    Jump = 1,
                    Climb = 2,
                    Vault = 4,
                    Mount = 8,
                    Hoist = 16,
                    WallJump = 32,
                    Na = 64,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class OrderEndingBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("next order^", typeof(Int16))]
                public Int16 NextOrder;
                [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public Int16 CombinationRule;
                [Abide.Guerilla.Tags.FieldAttribute("delay time", typeof(Single))]
                public Single DelayTime;
                [Abide.Guerilla.Tags.FieldAttribute("dialogue type#when this ending is triggered, launch a dialogue event of the given" +
                    " type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DialogueTypeOptions), false)]
                public Int16 DialogueType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("triggers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Trigger flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public Int32 TriggerFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions
                {
                    Or = 0,
                    And = 1,
                }
                public enum DialogueTypeOptions
                {
                    None = 0,
                    Advance = 1,
                    Charge = 2,
                    FallBack = 3,
                    Retreat = 4,
                    Moveone = 5,
                    Arrival = 6,
                    EnterVehicle = 7,
                    ExitVehicle = 8,
                    FollowPlayer = 9,
                    LeavePlayer = 10,
                    Support = 11,
                }
            }
            public enum FlagsOptions
            {
                Locked = 1,
                AlwaysActive = 2,
                DebugOn = 4,
                StrictAreaDef = 8,
                FollowClosestPlayer = 16,
                FollowSquad = 32,
                ActiveCamo = 64,
                SuppressCombatUntilEngaged = 128,
                InhibitVehicleUse = 256,
            }
            public enum ForceCombatStatusOptions
            {
                None = 0,
                Asleep = 1,
                Idle = 2,
                Alert = 3,
                Combat = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class TriggersBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("trigger flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
            public Int32 TriggerFlags;
            [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
            public Int16 CombinationRule;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("conditions", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("order_completion_condition", 5, typeof(OrderCompletionCondition))]
            public TagBlock Conditions;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(56, 4)]
            public sealed class OrderCompletionCondition : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("rule type^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RuleTypeOptions), false)]
                public Int16 RuleType;
                [Abide.Guerilla.Tags.FieldAttribute("squad", typeof(Int16))]
                public Int16 Squad;
                [Abide.Guerilla.Tags.FieldAttribute("squad group", typeof(Int16))]
                public Int16 SquadGroup;
                [Abide.Guerilla.Tags.FieldAttribute("a", typeof(Int16))]
                public Int16 A;
                [Abide.Guerilla.Tags.FieldAttribute("x", typeof(Single))]
                public Single X;
                [Abide.Guerilla.Tags.FieldAttribute("trigger volume", typeof(Int16))]
                public Int16 TriggerVolume;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("Exit condition script", typeof(String32))]
                public String32 ExitConditionScript;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int16))]
                public Int16 EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 56;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum RuleTypeOptions
                {
                    AOrGreaterAlive = 0,
                    AOrFewerAlive = 1,
                    XOrGreaterStrength = 2,
                    XOrLessStrength = 3,
                    IfEnemySighted = 4,
                    AfterATicks = 5,
                    IfAlertedBySquadA = 6,
                    ScriptRefTrue = 7,
                    ScriptRefFalse = 8,
                    IfPlayerInTriggerVolume = 9,
                    IfAllPlayersInTriggerVolume = 10,
                    CombatStatusAOrMore = 11,
                    CombatStatusAOrLess = 12,
                    Arrived = 13,
                    InVehicle = 14,
                    SightedPlayer = 15,
                    AOrGreaterFighting = 16,
                    AOrFewerFighting = 17,
                    PlayerWithinXWorldUnits = 18,
                    PlayerShotMoreThanXSecondsAgo = 19,
                    GameSafeToSave = 20,
                }
                public enum FlagsOptions
                {
                    Not = 1,
                }
            }
            public enum TriggerFlagsOptions
            {
                LatchOnWhenTriggered = 1,
            }
            public enum CombinationRuleOptions
            {
                Or = 0,
                And = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(116, 4)]
        public sealed class StructureBspBackgroundSoundPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Background Sound", typeof(TagReference))]
            public TagReference BackgroundSound;
            [Abide.Guerilla.Tags.FieldAttribute("Inside Cluster Sound#Play only when player is inside cluster.", typeof(TagReference))]
            public TagReference InsideClusterSound;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [Abide.Guerilla.Tags.FieldAttribute("Scale Flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScaleFlagsOptions), true)]
            public Int32 ScaleFlags;
            [Abide.Guerilla.Tags.FieldAttribute("Interior Scale", typeof(Single))]
            public Single InteriorScale;
            [Abide.Guerilla.Tags.FieldAttribute("Portal Scale", typeof(Single))]
            public Single PortalScale;
            [Abide.Guerilla.Tags.FieldAttribute("Exterior Scale", typeof(Single))]
            public Single ExteriorScale;
            [Abide.Guerilla.Tags.FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString1;
            public int Size
            {
                get
                {
                    return 116;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum ScaleFlagsOptions
            {
                OverrideDefaultScale = 1,
                UseAdjacentClusterAsPortalScale = 2,
                UseAdjacentClusterAsExteriorScale = 4,
                ScaleWithWeatherIntensity = 8,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
        public sealed class StructureBspSoundEnvironmentPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Sound Environment", typeof(TagReference))]
            public TagReference SoundEnvironment;
            [Abide.Guerilla.Tags.FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [Abide.Guerilla.Tags.FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(24)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 80;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
        public sealed class StructureBspWeatherPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Weather System", typeof(TagReference))]
            public TagReference WeatherSystem;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Wind", typeof(TagReference))]
            public TagReference Wind;
            [Abide.Guerilla.Tags.FieldAttribute("Wind Direction", typeof(Vector3))]
            public Vector3 WindDirection;
            [Abide.Guerilla.Tags.FieldAttribute("Wind Magnitude", typeof(Single))]
            public Single WindMagnitude;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("Wind Scale Function", typeof(String32))]
            public String32 WindScaleFunction;
            public int Size
            {
                get
                {
                    return 152;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
        public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            public int Size
            {
                get
                {
                    return 0;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
        public sealed class ScenarioClusterDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("BSP*", typeof(TagReference))]
            public TagReference Bsp;
            [Abide.Guerilla.Tags.FieldAttribute("Background Sounds*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_cluster_background_sounds_block", 512, typeof(ScenarioClusterBackgroundSoundsBlock))]
            public TagBlock BackgroundSounds;
            [Abide.Guerilla.Tags.FieldAttribute("Sound Environments*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_cluster_sound_environments_block", 512, typeof(ScenarioClusterSoundEnvironmentsBlock))]
            public TagBlock SoundEnvironments;
            [Abide.Guerilla.Tags.FieldAttribute("BSP Checksum*", typeof(Int32))]
            public Int32 BspChecksum;
            [Abide.Guerilla.Tags.FieldAttribute("Cluster Centroids*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_cluster_points_block", 512, typeof(ScenarioClusterPointsBlock))]
            public TagBlock ClusterCentroids;
            [Abide.Guerilla.Tags.FieldAttribute("Weather Properties*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_cluster_weather_properties_block", 512, typeof(ScenarioClusterWeatherPropertiesBlock))]
            public TagBlock WeatherProperties;
            [Abide.Guerilla.Tags.FieldAttribute("Atmospheric Fog Properties*", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_cluster_atmospheric_fog_properties_block", 512, typeof(ScenarioClusterAtmosphericFogPropertiesBlock))]
            public TagBlock AtmosphericFogProperties;
            public int Size
            {
                get
                {
                    return 80;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterBackgroundSoundsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterSoundEnvironmentsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ScenarioClusterPointsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Centroid*", typeof(Vector3))]
                public Vector3 Centroid;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterWeatherPropertiesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterAtmosphericFogPropertiesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(108, 4)]
        public sealed class ScenarioSpawnDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Dynamic Spawn Lower Height", typeof(Single))]
            public Single DynamicSpawnLowerHeight;
            [Abide.Guerilla.Tags.FieldAttribute("Dynamic Spawn Upper Height", typeof(Single))]
            public Single DynamicSpawnUpperHeight;
            [Abide.Guerilla.Tags.FieldAttribute("Game Object Reset Height", typeof(Single))]
            public Single GameObjectResetHeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(60)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Dynamic Spawn Overloads", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("dynamic_spawn_zone_overload_block", 32, typeof(DynamicSpawnZoneOverloadBlock))]
            public TagBlock DynamicSpawnOverloads;
            [Abide.Guerilla.Tags.FieldAttribute("Static Respawn Zones", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("static_spawn_zone_block", 128, typeof(StaticSpawnZoneBlock))]
            public TagBlock StaticRespawnZones;
            [Abide.Guerilla.Tags.FieldAttribute("Static Initial Spawn Zones", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("static_spawn_zone_block", 128, typeof(StaticSpawnZoneBlock))]
            public TagBlock StaticInitialSpawnZones;
            public int Size
            {
                get
                {
                    return 108;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class DynamicSpawnZoneOverloadBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Overload Type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(OverloadTypeOptions), false)]
                public Int16 OverloadType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("Inner Radius", typeof(Single))]
                public Single InnerRadius;
                [Abide.Guerilla.Tags.FieldAttribute("Outer Radius", typeof(Single))]
                public Single OuterRadius;
                [Abide.Guerilla.Tags.FieldAttribute("Weight", typeof(Single))]
                public Single Weight;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum OverloadTypeOptions
                {
                    Enemy = 0,
                    Friend = 1,
                    EnemyVehicle = 2,
                    FriendlyVehicle = 3,
                    EmptyVehicle = 4,
                    OddballInclusion = 5,
                    OddballExclusion = 6,
                    HillInclusion = 7,
                    HillExclusion = 8,
                    LastRaceFlag = 9,
                    DeadAlly = 10,
                    ControlledTerritory = 11,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class StaticSpawnZoneBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Data", typeof(StaticSpawnZoneDataStructBlock))]
                public StaticSpawnZoneDataStructBlock Data;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Lower Height", typeof(Single))]
                public Single LowerHeight;
                [Abide.Guerilla.Tags.FieldAttribute("Upper Height", typeof(Single))]
                public Single UpperHeight;
                [Abide.Guerilla.Tags.FieldAttribute("Inner Radius", typeof(Single))]
                public Single InnerRadius;
                [Abide.Guerilla.Tags.FieldAttribute("Outer Radius", typeof(Single))]
                public Single OuterRadius;
                [Abide.Guerilla.Tags.FieldAttribute("Weight", typeof(Single))]
                public Single Weight;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class StaticSpawnZoneDataStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Name", typeof(StringId))]
                    public StringId Name;
                    [Abide.Guerilla.Tags.FieldAttribute("Relevant Team", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(RelevantTeamOptions), true)]
                    public Int32 RelevantTeam;
                    [Abide.Guerilla.Tags.FieldAttribute("Relevant Games", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(RelevantGamesOptions), true)]
                    public Int32 RelevantGames;
                    [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int32 Flags;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum RelevantTeamOptions
                    {
                        RedAlpha = 1,
                        BlueBravo = 2,
                        YellowCharlie = 4,
                        GreenDelta = 8,
                        PurpleEcho = 16,
                        OrangeFoxtrot = 32,
                        BrownGolf = 64,
                        PinkHotel = 128,
                        Neutral = 256,
                    }
                    public enum RelevantGamesOptions
                    {
                        Slayer = 1,
                        Oddball = 2,
                        KingOfTheHill = 4,
                        CaptureTheFlag = 8,
                        Race = 16,
                        Headhunter = 32,
                        Juggernaut = 64,
                        Territories = 128,
                    }
                    public enum FlagsOptions
                    {
                        DisabledIfFlagHome = 1,
                        DisabledIfFlagAway = 2,
                        DisabledIfBombHome = 4,
                        DisabledIfBombAway = 8,
                    }
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(76, 4)]
        public sealed class ScenarioCrateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            public int Size
            {
                get
                {
                    return 76;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [Abide.Guerilla.Tags.FieldAttribute("Active Change Colors", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public Int32 ActiveChangeColors;
                [Abide.Guerilla.Tags.FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioCratePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(256, 4)]
        public sealed class ScenarioAtmosphericFogPalette : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Color", typeof(ColorRgbF))]
            public ColorRgbF Color;
            [Abide.Guerilla.Tags.FieldAttribute("Spread Distance:World Units#How far fog spreads into adjacent clusters: 0 default" +
                "s to 1.", typeof(Single))]
            public Single SpreadDistance;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Maximum Density:[0,1]#Fog density clamps to this value.", typeof(Single))]
            public Single MaximumDensity;
            [Abide.Guerilla.Tags.FieldAttribute("Start Distance:World Units#Before this distance, there is no fog.", typeof(Single))]
            public Single StartDistance;
            [Abide.Guerilla.Tags.FieldAttribute("Opaque Distance:World Units#Fog becomes opaque (maximum density) at this distance" +
                " from viewer.", typeof(Single))]
            public Single OpaqueDistance;
            [Abide.Guerilla.Tags.FieldAttribute("Color", typeof(ColorRgbF))]
            public ColorRgbF Color1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("Maximum Density:[0,1]#Fog density clamps to this value.", typeof(Single))]
            public Single MaximumDensity1;
            [Abide.Guerilla.Tags.FieldAttribute("Start Distance:World Units#Before this distance, there is no fog.", typeof(Single))]
            public Single StartDistance1;
            [Abide.Guerilla.Tags.FieldAttribute("Opaque Distance:World Units#Fog becomes opaque (maximum density) at this distance" +
                " from viewer.", typeof(Single))]
            public Single OpaqueDistance1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Planar Color", typeof(ColorRgbF))]
            public ColorRgbF PlanarColor;
            [Abide.Guerilla.Tags.FieldAttribute("Planar Max Density:[0,1]", typeof(Single))]
            public Single PlanarMaxDensity;
            [Abide.Guerilla.Tags.FieldAttribute("Planar Override Amount:[0,1]", typeof(Single))]
            public Single PlanarOverrideAmount;
            [Abide.Guerilla.Tags.FieldAttribute("Planar Min Distance Bias:World Units#Don\'t ask.", typeof(Single))]
            public Single PlanarMinDistanceBias;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(44)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("Patchy Color", typeof(ColorRgbF))]
            public ColorRgbF PatchyColor;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("Patchy Fog", typeof(TagReference))]
            public TagReference PatchyFog1;
            [Abide.Guerilla.Tags.FieldAttribute("Mixers", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("mixers", 2, typeof(ScenarioAtmosphericFogMixerBlock))]
            public TagBlock Mixers;
            [Abide.Guerilla.Tags.FieldAttribute("Amount:[0,1]", typeof(Single))]
            public Single Amount;
            [Abide.Guerilla.Tags.FieldAttribute("Threshold:[0,1]", typeof(Single))]
            public Single Threshold;
            [Abide.Guerilla.Tags.FieldAttribute("Brightness:[0,1]", typeof(Single))]
            public Single Brightness;
            [Abide.Guerilla.Tags.FieldAttribute("Gamma Power", typeof(Single))]
            public Single GammaPower;
            [Abide.Guerilla.Tags.FieldAttribute("Camera Immersion Flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CameraImmersionFlagsOptions), true)]
            public Int16 CameraImmersionFlags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString6;
            public int Size
            {
                get
                {
                    return 256;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class ScenarioAtmosphericFogMixerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("Atmospheric Fog Source:From Scenario Atmospheric Fog Palette", typeof(StringId))]
                public StringId AtmosphericFogSource;
                [Abide.Guerilla.Tags.FieldAttribute("Interpolator:From Scenario Interpolators", typeof(StringId))]
                public StringId Interpolator;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum CameraImmersionFlagsOptions
            {
                DisableAtmosphericFog = 1,
                DisableSecondaryFog = 2,
                DisablePlanarFog = 4,
                InvertPlanarFogPriorities = 8,
                DisableWater = 16,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
        public sealed class ScenarioPlanarFogPalette : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Planar Fog", typeof(TagReference))]
            public TagReference PlanarFog;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            public int Size
            {
                get
                {
                    return 24;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(148, 4)]
        public sealed class FlockDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("bsp", typeof(Int16))]
            public Int16 Bsp;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("bounding volume", typeof(Int16))]
            public Int16 BoundingVolume;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("ecology margin:wus#distance from ecology boundary that creature begins to be repu" +
                "lsed", typeof(Single))]
            public Single EcologyMargin;
            [Abide.Guerilla.Tags.FieldAttribute("sources", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("flock_source_block", 10, typeof(FlockSourceBlock))]
            public TagBlock Sources;
            [Abide.Guerilla.Tags.FieldAttribute("sinks", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("flock_sink_block", 10, typeof(FlockSinkBlock))]
            public TagBlock Sinks;
            [Abide.Guerilla.Tags.FieldAttribute("production frequency:boids/sec#How frequently boids are produced at one of the so" +
                "urces (limited by the max boid count)", typeof(Single))]
            public Single ProductionFrequency;
            [Abide.Guerilla.Tags.FieldAttribute("creature^", typeof(TagReference))]
            public TagReference Creature;
            [Abide.Guerilla.Tags.FieldAttribute("neighborhood radius:world units#distance within which one boid is affected by ano" +
                "ther", typeof(Single))]
            public Single NeighborhoodRadius;
            [Abide.Guerilla.Tags.FieldAttribute("avoidance radius:world units#distance that a boid tries to maintain from another", typeof(Single))]
            public Single AvoidanceRadius;
            [Abide.Guerilla.Tags.FieldAttribute("forward scale:[0..1]#weight given to boid\'s desire to fly straight ahead", typeof(Single))]
            public Single ForwardScale;
            [Abide.Guerilla.Tags.FieldAttribute("alignment scale:[0..1]#weight given to boid\'s desire to align itself with neighbo" +
                "ring boids", typeof(Single))]
            public Single AlignmentScale;
            [Abide.Guerilla.Tags.FieldAttribute("avoidance scale:[0..1]#weight given to boid\'s desire to avoid collisions with oth" +
                "er boids, when within the avoidance radius", typeof(Single))]
            public Single AvoidanceScale;
            [Abide.Guerilla.Tags.FieldAttribute("leveling force scale:[0..1]#weight given to boids desire to fly level", typeof(Single))]
            public Single LevelingForceScale;
            [Abide.Guerilla.Tags.FieldAttribute("sink scale:[0..1]#weight given to boid\'s desire to fly towards its sinks", typeof(Single))]
            public Single SinkScale;
            [Abide.Guerilla.Tags.FieldAttribute("perception angle:degrees#angle-from-forward within which one boid can perceive an" +
                "d react to another", typeof(Single))]
            public Single PerceptionAngle;
            [Abide.Guerilla.Tags.FieldAttribute("average throttle:[0..1]#throttle at which boids will naturally fly", typeof(Single))]
            public Single AverageThrottle;
            [Abide.Guerilla.Tags.FieldAttribute("maximum throttle:[0..1]#maximum throttle applicable", typeof(Single))]
            public Single MaximumThrottle;
            [Abide.Guerilla.Tags.FieldAttribute("position scale:[0..1]#weight given to boid\'s desire to be near flock center", typeof(Single))]
            public Single PositionScale;
            [Abide.Guerilla.Tags.FieldAttribute("position min radius:wus#distance to flock center beyond which an attracting force" +
                " is applied", typeof(Single))]
            public Single PositionMinRadius;
            [Abide.Guerilla.Tags.FieldAttribute("position max radius:wus#distance to flock center at which the maximum attracting " +
                "force is applied", typeof(Single))]
            public Single PositionMaxRadius;
            [Abide.Guerilla.Tags.FieldAttribute("movement weight threshold#The threshold of accumulated weight over which movement" +
                " occurs", typeof(Single))]
            public Single MovementWeightThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("danger radius:wus#distance within which boids will avoid a dangerous object (e.g." +
                " the player)", typeof(Single))]
            public Single DangerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("danger scale#weight given to boid\'s desire to avoid danger", typeof(Single))]
            public Single DangerScale;
            [Abide.Guerilla.Tags.FieldAttribute("random offset scale:[0..1]#weight given to boid\'s random heading offset", typeof(Single))]
            public Single RandomOffsetScale;
            [Abide.Guerilla.Tags.FieldAttribute("flock name", typeof(StringId))]
            public StringId FlockName;
            public int Size
            {
                get
                {
                    return 148;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
            public sealed class FlockSourceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("starting yaw, pitch:degrees", typeof(Vector2))]
                public Vector2 StartingYawPitch;
                [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                [Abide.Guerilla.Tags.FieldAttribute("weight#probability of producing at this source", typeof(Single))]
                public Single Weight;
                public int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class FlockSinkBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions
            {
                HardBoundariesOnVolume = 1,
                FlockInitiallyStopped = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class DecoratorPlacementDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Grid Origin", typeof(Vector3))]
            public Vector3 GridOrigin;
            [Abide.Guerilla.Tags.FieldAttribute("Cell Count per Dimension", typeof(Int32))]
            public Int32 CellCountPerDimension;
            [Abide.Guerilla.Tags.FieldAttribute("Cache Blocks", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("decorator_cache_block_block", 4096, typeof(DecoratorCacheBlockBlock))]
            public TagBlock CacheBlocks;
            [Abide.Guerilla.Tags.FieldAttribute("Groups", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("decorator_group_block", 131072, typeof(DecoratorGroupBlock))]
            public TagBlock Groups;
            [Abide.Guerilla.Tags.FieldAttribute("Cells", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("decorator_cell_collection_block", 65535, typeof(DecoratorCellCollectionBlock))]
            public TagBlock Cells;
            [Abide.Guerilla.Tags.FieldAttribute("Decals", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("decorator_projected_decal_block", 32768, typeof(DecoratorProjectedDecalBlock))]
            public TagBlock Decals;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
            public sealed class DecoratorCacheBlockBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Geometry Block Info*", typeof(GlobalGeometryBlockInfoStructBlock))]
                public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
                [Abide.Guerilla.Tags.FieldAttribute("Cache Block Data*", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("decorator_cache_block_data_block", 1, typeof(DecoratorCacheBlockDataBlock))]
                public TagBlock CacheBlockData;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                public int Size
                {
                    get
                    {
                        return 60;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(156, 4)]
                public sealed class DecoratorCacheBlockDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Placements*", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("decorator_placement_block", 32768, typeof(DecoratorPlacementBlock))]
                    public TagBlock Placements;
                    [Abide.Guerilla.Tags.FieldAttribute("Decal Vertices*", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("decal_vertices_block", 65536, typeof(DecalVerticesBlock))]
                    public TagBlock DecalVertices;
                    [Abide.Guerilla.Tags.FieldAttribute("Decal Indices*", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("indices_block", 65536, typeof(IndicesBlock))]
                    public TagBlock DecalIndices;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(16)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("Sprite Vertices*", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("sprite_vertices_block", 65536, typeof(SpriteVerticesBlock))]
                    public TagBlock SpriteVertices;
                    [Abide.Guerilla.Tags.FieldAttribute("Sprite Indices*", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("indices_block", 65536, typeof(IndicesBlock))]
                    public TagBlock SpriteIndices;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(16)]
                    public Byte[] EmptyString1;
                    public int Size
                    {
                        get
                        {
                            return 156;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
                    public sealed class DecoratorPlacementBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Internal Data 1", typeof(Int32))]
                        public Int32 InternalData1;
                        [Abide.Guerilla.Tags.FieldAttribute("Compressed Position", typeof(Int32))]
                        public Int32 CompressedPosition;
                        [Abide.Guerilla.Tags.FieldAttribute("Tint Color", typeof(ColorRgb))]
                        public ColorRgb TintColor;
                        [Abide.Guerilla.Tags.FieldAttribute("Lightmap Color", typeof(ColorRgb))]
                        public ColorRgb LightmapColor;
                        [Abide.Guerilla.Tags.FieldAttribute("Compressed Light Direction", typeof(Int32))]
                        public Int32 CompressedLightDirection;
                        [Abide.Guerilla.Tags.FieldAttribute("Compressed Light 2 Direction", typeof(Int32))]
                        public Int32 CompressedLight2Direction;
                        public int Size
                        {
                            get
                            {
                                return 24;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
                    public sealed class DecalVerticesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [Abide.Guerilla.Tags.FieldAttribute("texcoord 0*", typeof(Vector2))]
                        public Vector2 Texcoord0;
                        [Abide.Guerilla.Tags.FieldAttribute("texcoord 1*", typeof(Vector2))]
                        public Vector2 Texcoord1;
                        [Abide.Guerilla.Tags.FieldAttribute("Color*", typeof(ColorRgb))]
                        public ColorRgb Color;
                        public int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                    public sealed class IndicesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Index*", typeof(Int16))]
                        public Int16 Index;
                        public int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
                    public sealed class SpriteVerticesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [Abide.Guerilla.Tags.FieldAttribute("Offset*", typeof(Vector3))]
                        public Vector3 Offset;
                        [Abide.Guerilla.Tags.FieldAttribute("Axis*", typeof(Vector3))]
                        public Vector3 Axis;
                        [Abide.Guerilla.Tags.FieldAttribute("texcoord*", typeof(Vector2))]
                        public Vector2 Texcoord;
                        [Abide.Guerilla.Tags.FieldAttribute("Color*", typeof(ColorRgb))]
                        public ColorRgb Color;
                        public int Size
                        {
                            get
                            {
                                return 48;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
                public sealed class GlobalGeometryBlockInfoStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Block Offset*", typeof(Int32))]
                    public Int32 BlockOffset;
                    [Abide.Guerilla.Tags.FieldAttribute("Block Size*", typeof(Int32))]
                    public Int32 BlockSize;
                    [Abide.Guerilla.Tags.FieldAttribute("Section Data Size*", typeof(Int32))]
                    public Int32 SectionDataSize;
                    [Abide.Guerilla.Tags.FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [Abide.Guerilla.Tags.FieldAttribute("Resources*", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                    public TagBlock Resources;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                    public Int16 OwnerTagSectionOffset;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString2;
                    public int Size
                    {
                        get
                        {
                            return 40;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                    public sealed class GlobalGeometryBlockResourceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                        public Byte Type;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                        [Abide.Guerilla.Tags.PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        [Abide.Guerilla.Tags.FieldAttribute("Primary Locator*", typeof(Int16))]
                        public Int16 PrimaryLocator;
                        [Abide.Guerilla.Tags.FieldAttribute("Secondary Locator*", typeof(Int16))]
                        public Int16 SecondaryLocator;
                        [Abide.Guerilla.Tags.FieldAttribute("Resource Data Size*", typeof(Int32))]
                        public Int32 ResourceDataSize;
                        [Abide.Guerilla.Tags.FieldAttribute("Resource Data Offset*", typeof(Int32))]
                        public Int32 ResourceDataOffset;
                        public int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions
                        {
                            TagBlock = 0,
                            TagData = 1,
                            VertexBuffer = 2,
                        }
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class DecoratorGroupBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Decorator Set*", typeof(Byte))]
                public Byte DecoratorSet;
                [Abide.Guerilla.Tags.FieldAttribute("Decorator Type", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DecoratorTypeOptions), false)]
                public Byte DecoratorType;
                [Abide.Guerilla.Tags.FieldAttribute("Shader Index*", typeof(Byte))]
                public Byte ShaderIndex;
                [Abide.Guerilla.Tags.FieldAttribute("Compressed Radius*", typeof(Byte))]
                public Byte CompressedRadius;
                [Abide.Guerilla.Tags.FieldAttribute("Cluster*", typeof(Int16))]
                public Int16 Cluster;
                [Abide.Guerilla.Tags.FieldAttribute("Cache Block*", typeof(Int16))]
                public Int16 CacheBlock;
                [Abide.Guerilla.Tags.FieldAttribute("Decorator Start Index*", typeof(Int16))]
                public Int16 DecoratorStartIndex;
                [Abide.Guerilla.Tags.FieldAttribute("Decorator Count*", typeof(Int16))]
                public Int16 DecoratorCount;
                [Abide.Guerilla.Tags.FieldAttribute("Vertex Start Offset*", typeof(Int16))]
                public Int16 VertexStartOffset;
                [Abide.Guerilla.Tags.FieldAttribute("Vertex Count*", typeof(Int16))]
                public Int16 VertexCount;
                [Abide.Guerilla.Tags.FieldAttribute("Index Start Offset*", typeof(Int16))]
                public Int16 IndexStartOffset;
                [Abide.Guerilla.Tags.FieldAttribute("Index Count*", typeof(Int16))]
                public Int16 IndexCount;
                [Abide.Guerilla.Tags.FieldAttribute("Compressed Bounding Center*", typeof(Int32))]
                public Int32 CompressedBoundingCenter;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum DecoratorTypeOptions
                {
                    Model = 0,
                    FloatingDecal = 1,
                    ProjectedDecal = 2,
                    ScreenFacingQuad = 3,
                    AxisRotatingQuad = 4,
                    CrossQuad = 5,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class DecoratorCellCollectionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Child Indices", typeof(ChildIndicesElement[]))]
                [Abide.Guerilla.Tags.ArrayAttribute(8, typeof(ChildIndicesElement))]
                public ChildIndicesElement[] ChildIndices;
                [Abide.Guerilla.Tags.FieldAttribute("Cache Block Index", typeof(Int16))]
                public Int16 CacheBlockIndex;
                [Abide.Guerilla.Tags.FieldAttribute("Group Count", typeof(Int16))]
                public Int16 GroupCount;
                [Abide.Guerilla.Tags.FieldAttribute("Group Start Index", typeof(Int32))]
                public Int32 GroupStartIndex;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public sealed class ChildIndicesElement : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Child Index", typeof(Int16))]
                    public Int16 ChildIndex;
                    public int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
            public sealed class DecoratorProjectedDecalBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Decorator Set", typeof(Byte))]
                public Byte DecoratorSet;
                [Abide.Guerilla.Tags.FieldAttribute("Decorator Class", typeof(Byte))]
                public Byte DecoratorClass;
                [Abide.Guerilla.Tags.FieldAttribute("Decorator Permutation", typeof(Byte))]
                public Byte DecoratorPermutation;
                [Abide.Guerilla.Tags.FieldAttribute("Sprite Index", typeof(Byte))]
                public Byte SpriteIndex;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Left", typeof(Vector3))]
                public Vector3 Left;
                [Abide.Guerilla.Tags.FieldAttribute("Up", typeof(Vector3))]
                public Vector3 Up;
                [Abide.Guerilla.Tags.FieldAttribute("Extents", typeof(Vector3))]
                public Vector3 Extents;
                [Abide.Guerilla.Tags.FieldAttribute("Previous Position", typeof(Vector3))]
                public Vector3 PreviousPosition;
                public int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class ScenarioCreatureBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioCreaturePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ScenarioDecoratorSetPaletteEntryBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Decorator Set^", typeof(TagReference))]
            public TagReference DecoratorSet;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class ScenarioBspSwitchTransitionVolumeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("BSP Index Key", typeof(Int32))]
            public Int32 BspIndexKey;
            [Abide.Guerilla.Tags.FieldAttribute("Trigger Volume^", typeof(Int16))]
            public Int16 TriggerVolume;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
        public sealed class ScenarioStructureBspSphericalHarmonicLightingBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("BSP*", typeof(TagReference))]
            public TagReference Bsp;
            [Abide.Guerilla.Tags.FieldAttribute("Lighting Points", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("scenario_spherical_harmonic_lighting_point", 32768, typeof(ScenarioSphericalHarmonicLightingPoint))]
            public TagBlock LightingPoints;
            public int Size
            {
                get
                {
                    return 28;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ScenarioSphericalHarmonicLightingPoint : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(260, 4)]
        public sealed class GScenarioEditorFolderBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("parent folder", typeof(Int32))]
            public Int32 ParentFolder;
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String256))]
            public String256 Name;
            public int Size
            {
                get
                {
                    return 260;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class ScenarioLevelDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Level Description", typeof(TagReference))]
            public TagReference LevelDescription;
            [Abide.Guerilla.Tags.FieldAttribute("Campaign Level Data", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("global_ui_campaign_level_block", 20, typeof(GlobalUiCampaignLevelBlock))]
            public TagBlock CampaignLevelData;
            [Abide.Guerilla.Tags.FieldAttribute("Multiplayer", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("global_ui_multiplayer_level_block", 50, typeof(GlobalUiMultiplayerLevelBlock))]
            public TagBlock Multiplayer;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(2904, 4)]
            public sealed class GlobalUiCampaignLevelBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Campaign ID", typeof(Int32))]
                public Int32 CampaignId;
                [Abide.Guerilla.Tags.FieldAttribute("Map ID", typeof(Int32))]
                public Int32 MapId;
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(576)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2304)]
                public Byte[] EmptyString1;
                public int Size
                {
                    get
                    {
                        return 2904;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(3180, 4)]
            public sealed class GlobalUiMultiplayerLevelBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Map ID", typeof(Int32))]
                public Int32 MapId;
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(576)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2304)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Path", typeof(String256))]
                public String256 Path;
                [Abide.Guerilla.Tags.FieldAttribute("Sort Order", typeof(Int32))]
                public Int32 SortOrder;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Byte Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(3)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams None", typeof(Byte))]
                public Byte MaxTeamsNone;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams CTF", typeof(Byte))]
                public Byte MaxTeamsCtf;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Slayer", typeof(Byte))]
                public Byte MaxTeamsSlayer;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Oddball", typeof(Byte))]
                public Byte MaxTeamsOddball;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams KOTH", typeof(Byte))]
                public Byte MaxTeamsKoth;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Race", typeof(Byte))]
                public Byte MaxTeamsRace;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Headhunter", typeof(Byte))]
                public Byte MaxTeamsHeadhunter;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Juggernaut", typeof(Byte))]
                public Byte MaxTeamsJuggernaut;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Territories", typeof(Byte))]
                public Byte MaxTeamsTerritories;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Assault", typeof(Byte))]
                public Byte MaxTeamsAssault;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 10", typeof(Byte))]
                public Byte MaxTeamsStub10;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 11", typeof(Byte))]
                public Byte MaxTeamsStub11;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 12", typeof(Byte))]
                public Byte MaxTeamsStub12;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 13", typeof(Byte))]
                public Byte MaxTeamsStub13;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 14", typeof(Byte))]
                public Byte MaxTeamsStub14;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 15", typeof(Byte))]
                public Byte MaxTeamsStub15;
                public int Size
                {
                    get
                    {
                        return 3180;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Unlockable = 1,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class AiScenarioMissionDialogueBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("mission dialogue", typeof(TagReference))]
            public TagReference MissionDialogue;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
        public sealed class ScenarioInterpolatorBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Accelerator Name:Interpolator", typeof(StringId))]
            public StringId AcceleratorName;
            [Abide.Guerilla.Tags.FieldAttribute("Multiplier Name:Interpolator", typeof(StringId))]
            public StringId MultiplierName;
            [Abide.Guerilla.Tags.FieldAttribute("Function", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock Function;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            public int Size
            {
                get
                {
                    return 28;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ScalarFunctionStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function1;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(44, 4)]
        public sealed class ScenarioScreenEffectReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Screen Effect", typeof(TagReference))]
            public TagReference ScreenEffect;
            [Abide.Guerilla.Tags.FieldAttribute("Primary Input:Interpolator", typeof(StringId))]
            public StringId PrimaryInput;
            [Abide.Guerilla.Tags.FieldAttribute("Secondary Input:Interpolator", typeof(StringId))]
            public StringId SecondaryInput;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString2;
            public int Size
            {
                get
                {
                    return 44;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
        public sealed class ScenarioSimulationDefinitionTableBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 4;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        public sealed class ObjectSaltsElement : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Int32))]
            public Int32 EmptyString;
            public int Size
            {
                get
                {
                    return 0;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        public enum TypeOptions
        {
            EmptyString = 0,
            Multiplayer = 1,
            EmptyString1 = 2,
            EmptyString2 = 3,
            EmptyString3 = 4,
        }
        public enum FlagsOptions
        {
            CortanaHack = 1,
            AlwaysDrawSky = 2,
            DontStripPathfinding = 4,
            SymmetricMultiplayerMap = 8,
            QuickLoadingCinematicOnlyScenario = 16,
            CharactersUsePreviousMissionWeapons = 32,
            LightmapsSmoothPalettesWithNeighbors = 64,
            SnapToWhiteAtStart = 128,
        }
    }
}
#pragma warning restore CS1591
