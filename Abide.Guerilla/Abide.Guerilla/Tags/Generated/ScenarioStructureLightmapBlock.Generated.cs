#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(268, 4)]
    [TagGroupAttribute("scenario_structure_lightmap", 1819569520u, 4294967293u, typeof(ScenarioStructureLightmapBlock))]
    public sealed class ScenarioStructureLightmapBlock : AbideTagBlock
    {
        private TagBlockList<StructureLightmapGroupBlock> lightmapGroupsList = new TagBlockList<StructureLightmapGroupBlock>(256);
        private TagBlockList<GlobalErrorReportCategoriesBlock> errorsList = new TagBlockList<GlobalErrorReportCategoriesBlock>(64);
        [FieldAttribute("search distance lower bound", typeof(Single))]
        public Single SearchDistanceLowerBound;
        [FieldAttribute("search distance upper bound", typeof(Single))]
        public Single SearchDistanceUpperBound;
        [FieldAttribute("luminels per world unit", typeof(Single))]
        public Single LuminelsPerWorldUnit;
        [FieldAttribute("output white reference", typeof(Single))]
        public Single OutputWhiteReference;
        [FieldAttribute("output black reference", typeof(Single))]
        public Single OutputBlackReference;
        [FieldAttribute("output schlick parameter", typeof(Single))]
        public Single OutputSchlickParameter;
        [FieldAttribute("diffuse map scale", typeof(Single))]
        public Single DiffuseMapScale;
        [FieldAttribute("sun scale", typeof(Single))]
        public Single SunScale;
        [FieldAttribute("sky scale", typeof(Single))]
        public Single SkyScale;
        [FieldAttribute("indirect scale", typeof(Single))]
        public Single IndirectScale;
        [FieldAttribute("prt scale", typeof(Single))]
        public Single PrtScale;
        [FieldAttribute("surface light scale", typeof(Single))]
        public Single SurfaceLightScale;
        [FieldAttribute("scenario light scale", typeof(Single))]
        public Single ScenarioLightScale;
        [FieldAttribute("lightprobe interpolation overide", typeof(Single))]
        public Single LightprobeInterpolationOveride;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(72)]
        public Byte[] EmptyString;
        [FieldAttribute("lightmap groups", typeof(TagBlock))]
        [BlockAttribute("structure_lightmap_group_block", 256, typeof(StructureLightmapGroupBlock))]
        public TagBlock LightmapGroups;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(12)]
        public Byte[] EmptyString1;
        [FieldAttribute("errors*", typeof(TagBlock))]
        [BlockAttribute("error report category", 64, typeof(GlobalErrorReportCategoriesBlock))]
        public TagBlock Errors;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(104)]
        public Byte[] EmptyString2;
        public TagBlockList<StructureLightmapGroupBlock> LightmapGroupsList
        {
            get
            {
                return this.lightmapGroupsList;
            }
        }
        public TagBlockList<GlobalErrorReportCategoriesBlock> ErrorsList
        {
            get
            {
                return this.errorsList;
            }
        }
        public override int Size
        {
            get
            {
                return 268;
            }
        }
        public override void Initialize()
        {
            this.lightmapGroupsList.Clear();
            this.errorsList.Clear();
            this.SearchDistanceLowerBound = 0;
            this.SearchDistanceUpperBound = 0;
            this.LuminelsPerWorldUnit = 0;
            this.OutputWhiteReference = 0;
            this.OutputBlackReference = 0;
            this.OutputSchlickParameter = 0;
            this.DiffuseMapScale = 0;
            this.SunScale = 0;
            this.SkyScale = 0;
            this.IndirectScale = 0;
            this.PrtScale = 0;
            this.SurfaceLightScale = 0;
            this.ScenarioLightScale = 0;
            this.LightprobeInterpolationOveride = 0;
            this.EmptyString = new byte[72];
            this.LightmapGroups = TagBlock.Zero;
            this.EmptyString1 = new byte[12];
            this.Errors = TagBlock.Zero;
            this.EmptyString2 = new byte[104];
        }
        public override void Read(BinaryReader reader)
        {
            this.SearchDistanceLowerBound = reader.ReadSingle();
            this.SearchDistanceUpperBound = reader.ReadSingle();
            this.LuminelsPerWorldUnit = reader.ReadSingle();
            this.OutputWhiteReference = reader.ReadSingle();
            this.OutputBlackReference = reader.ReadSingle();
            this.OutputSchlickParameter = reader.ReadSingle();
            this.DiffuseMapScale = reader.ReadSingle();
            this.SunScale = reader.ReadSingle();
            this.SkyScale = reader.ReadSingle();
            this.IndirectScale = reader.ReadSingle();
            this.PrtScale = reader.ReadSingle();
            this.SurfaceLightScale = reader.ReadSingle();
            this.ScenarioLightScale = reader.ReadSingle();
            this.LightprobeInterpolationOveride = reader.ReadSingle();
            this.EmptyString = reader.ReadBytes(72);
            this.LightmapGroups = reader.ReadInt64();
            this.lightmapGroupsList.Read(reader, this.LightmapGroups);
            this.EmptyString1 = reader.ReadBytes(12);
            this.Errors = reader.ReadInt64();
            this.errorsList.Read(reader, this.Errors);
            this.EmptyString2 = reader.ReadBytes(104);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(156, 4)]
        public sealed class StructureLightmapGroupBlock : AbideTagBlock
        {
            private TagBlockList<StructureLightmapPaletteColorBlock> sectionPaletteList = new TagBlockList<StructureLightmapPaletteColorBlock>(128);
            private TagBlockList<LightmapGeometrySectionBlock> clustersList = new TagBlockList<LightmapGeometrySectionBlock>(512);
            private TagBlockList<LightmapGeometryRenderInfoBlock> clusterRenderInfoList = new TagBlockList<LightmapGeometryRenderInfoBlock>(1024);
            private TagBlockList<StructureLightmapLightingEnvironmentBlock> lightingEnvironmentsList = new TagBlockList<StructureLightmapLightingEnvironmentBlock>(1024);
            private TagBlockList<LightmapVertexBufferBucketBlock> geometryBucketsList = new TagBlockList<LightmapVertexBufferBucketBlock>(1024);
            private TagBlockList<LightmapInstanceBucketReferenceBlock> instanceBucketRefsList = new TagBlockList<LightmapInstanceBucketReferenceBlock>(2000);
            private TagBlockList<LightmapSceneryObjectInfoBlock> sceneryObjectInfoList = new TagBlockList<LightmapSceneryObjectInfoBlock>(2000);
            [FieldAttribute("type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("structure checksum", typeof(Int32))]
            public Int32 StructureChecksum;
            [FieldAttribute("section palette", typeof(TagBlock))]
            [BlockAttribute("structure_lightmap_palette_color_block", 128, typeof(StructureLightmapPaletteColorBlock))]
            public TagBlock SectionPalette;
            [FieldAttribute("writable palettes", typeof(TagBlock))]
            [BlockAttribute("structure_lightmap_palette_color_block", 128, typeof(StructureLightmapPaletteColorBlock))]
            public TagBlock WritablePalettes;
            [FieldAttribute("bitmap group", typeof(TagReference))]
            public TagReference BitmapGroup;
            [FieldAttribute("clusters", typeof(TagBlock))]
            [BlockAttribute("lightmap_geometry_section_block", 512, typeof(LightmapGeometrySectionBlock))]
            public TagBlock Clusters;
            [FieldAttribute("cluster render info", typeof(TagBlock))]
            [BlockAttribute("lightmap_geometry_render_info_block", 1024, typeof(LightmapGeometryRenderInfoBlock))]
            public TagBlock ClusterRenderInfo;
            [FieldAttribute("poop definitions", typeof(TagBlock))]
            [BlockAttribute("lightmap_geometry_section_block", 512, typeof(LightmapGeometrySectionBlock))]
            public TagBlock PoopDefinitions;
            [FieldAttribute("lighting environments*", typeof(TagBlock))]
            [BlockAttribute("structure_lightmap_lighting_environment_block", 1024, typeof(StructureLightmapLightingEnvironmentBlock))]
            public TagBlock LightingEnvironments;
            [FieldAttribute("geometry buckets", typeof(TagBlock))]
            [BlockAttribute("lightmap_vertex_buffer_bucket_block", 1024, typeof(LightmapVertexBufferBucketBlock))]
            public TagBlock GeometryBuckets;
            [FieldAttribute("instance render info", typeof(TagBlock))]
            [BlockAttribute("lightmap_geometry_render_info_block", 1024, typeof(LightmapGeometryRenderInfoBlock))]
            public TagBlock InstanceRenderInfo;
            [FieldAttribute("instance bucket refs", typeof(TagBlock))]
            [BlockAttribute("lightmap_instance_bucket_reference_block", 2000, typeof(LightmapInstanceBucketReferenceBlock))]
            public TagBlock InstanceBucketRefs;
            [FieldAttribute("scenery object info", typeof(TagBlock))]
            [BlockAttribute("lightmap_scenery_object_info_block", 2000, typeof(LightmapSceneryObjectInfoBlock))]
            public TagBlock SceneryObjectInfo;
            [FieldAttribute("scenery object bucket refs", typeof(TagBlock))]
            [BlockAttribute("lightmap_instance_bucket_reference_block", 2000, typeof(LightmapInstanceBucketReferenceBlock))]
            public TagBlock SceneryObjectBucketRefs;
            public TagBlockList<StructureLightmapPaletteColorBlock> SectionPaletteList
            {
                get
                {
                    return this.sectionPaletteList;
                }
            }
            public TagBlockList<LightmapGeometrySectionBlock> ClustersList
            {
                get
                {
                    return this.clustersList;
                }
            }
            public TagBlockList<LightmapGeometryRenderInfoBlock> ClusterRenderInfoList
            {
                get
                {
                    return this.clusterRenderInfoList;
                }
            }
            public TagBlockList<StructureLightmapLightingEnvironmentBlock> LightingEnvironmentsList
            {
                get
                {
                    return this.lightingEnvironmentsList;
                }
            }
            public TagBlockList<LightmapVertexBufferBucketBlock> GeometryBucketsList
            {
                get
                {
                    return this.geometryBucketsList;
                }
            }
            public TagBlockList<LightmapInstanceBucketReferenceBlock> InstanceBucketRefsList
            {
                get
                {
                    return this.instanceBucketRefsList;
                }
            }
            public TagBlockList<LightmapSceneryObjectInfoBlock> SceneryObjectInfoList
            {
                get
                {
                    return this.sceneryObjectInfoList;
                }
            }
            public override int Size
            {
                get
                {
                    return 156;
                }
            }
            public override void Initialize()
            {
                this.sectionPaletteList.Clear();
                this.clustersList.Clear();
                this.clusterRenderInfoList.Clear();
                this.lightingEnvironmentsList.Clear();
                this.geometryBucketsList.Clear();
                this.instanceBucketRefsList.Clear();
                this.sceneryObjectInfoList.Clear();
                this.Type = ((TypeOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.StructureChecksum = 0;
                this.SectionPalette = TagBlock.Zero;
                this.WritablePalettes = TagBlock.Zero;
                this.BitmapGroup = TagReference.Null;
                this.Clusters = TagBlock.Zero;
                this.ClusterRenderInfo = TagBlock.Zero;
                this.PoopDefinitions = TagBlock.Zero;
                this.LightingEnvironments = TagBlock.Zero;
                this.GeometryBuckets = TagBlock.Zero;
                this.InstanceRenderInfo = TagBlock.Zero;
                this.InstanceBucketRefs = TagBlock.Zero;
                this.SceneryObjectInfo = TagBlock.Zero;
                this.SceneryObjectBucketRefs = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.StructureChecksum = reader.ReadInt32();
                this.SectionPalette = reader.ReadInt64();
                this.sectionPaletteList.Read(reader, this.SectionPalette);
                this.WritablePalettes = reader.ReadInt64();
                this.sectionPaletteList.Read(reader, this.WritablePalettes);
                this.BitmapGroup = reader.Read<TagReference>();
                this.Clusters = reader.ReadInt64();
                this.clustersList.Read(reader, this.Clusters);
                this.ClusterRenderInfo = reader.ReadInt64();
                this.clusterRenderInfoList.Read(reader, this.ClusterRenderInfo);
                this.PoopDefinitions = reader.ReadInt64();
                this.clusterRenderInfoList.Read(reader, this.PoopDefinitions);
                this.LightingEnvironments = reader.ReadInt64();
                this.lightingEnvironmentsList.Read(reader, this.LightingEnvironments);
                this.GeometryBuckets = reader.ReadInt64();
                this.geometryBucketsList.Read(reader, this.GeometryBuckets);
                this.InstanceRenderInfo = reader.ReadInt64();
                this.geometryBucketsList.Read(reader, this.InstanceRenderInfo);
                this.InstanceBucketRefs = reader.ReadInt64();
                this.instanceBucketRefsList.Read(reader, this.InstanceBucketRefs);
                this.SceneryObjectInfo = reader.ReadInt64();
                this.sceneryObjectInfoList.Read(reader, this.SceneryObjectInfo);
                this.SceneryObjectBucketRefs = reader.ReadInt64();
                this.sceneryObjectInfoList.Read(reader, this.SceneryObjectBucketRefs);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(1024, 64)]
            public sealed class StructureLightmapPaletteColorBlock : AbideTagBlock
            {
                [FieldAttribute("FIRST palette color*", typeof(Int32))]
                public Int32 FirstPaletteColor;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1020)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 1024;
                    }
                }
                public override void Initialize()
                {
                    this.FirstPaletteColor = 0;
                    this.EmptyString = new byte[1020];
                }
                public override void Read(BinaryReader reader)
                {
                    this.FirstPaletteColor = reader.ReadInt32();
                    this.EmptyString = reader.ReadBytes(1020);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(96, 4)]
            public sealed class LightmapGeometrySectionBlock : AbideTagBlock
            {
                private TagBlockList<LightmapGeometrySectionCacheDataBlock> cacheDataList = new TagBlockList<LightmapGeometrySectionCacheDataBlock>(1);
                [FieldAttribute("geometry info", typeof(GlobalGeometrySectionInfoStructBlock))]
                public GlobalGeometrySectionInfoStructBlock GeometryInfo;
                [FieldAttribute("geometry block info", typeof(GlobalGeometryBlockInfoStructBlock))]
                public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
                [FieldAttribute("cache data", typeof(TagBlock))]
                [BlockAttribute("lightmap_geometry_section_cache_data_block", 1, typeof(LightmapGeometrySectionCacheDataBlock))]
                public TagBlock CacheData;
                public TagBlockList<LightmapGeometrySectionCacheDataBlock> CacheDataList
                {
                    get
                    {
                        return this.cacheDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 96;
                    }
                }
                public override void Initialize()
                {
                    this.cacheDataList.Clear();
                    this.GeometryInfo = new GlobalGeometrySectionInfoStructBlock();
                    this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
                    this.CacheData = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.GeometryInfo = reader.ReadDataStructure<GlobalGeometrySectionInfoStructBlock>();
                    this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
                    this.CacheData = reader.ReadInt64();
                    this.cacheDataList.Read(reader, this.CacheData);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(108, 4)]
                public sealed class LightmapGeometrySectionCacheDataBlock : AbideTagBlock
                {
                    [FieldAttribute("geometry", typeof(GlobalGeometrySectionStructBlock))]
                    public GlobalGeometrySectionStructBlock Geometry;
                    public override int Size
                    {
                        get
                        {
                            return 108;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Geometry = new GlobalGeometrySectionStructBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Geometry = reader.ReadDataStructure<GlobalGeometrySectionStructBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(108, 4)]
                    public sealed class GlobalGeometrySectionStructBlock : AbideTagBlock
                    {
                        private DataList visibilityMoppCodeList = new DataList(393216);
                        private TagBlockList<GlobalGeometryPartBlockNew> partsList = new TagBlockList<GlobalGeometryPartBlockNew>(255);
                        private TagBlockList<GlobalSubpartsBlock> subpartsList = new TagBlockList<GlobalSubpartsBlock>(32768);
                        private TagBlockList<GlobalVisibilityBoundsBlock> visibilityBoundsList = new TagBlockList<GlobalVisibilityBoundsBlock>(32768);
                        private TagBlockList<GlobalGeometrySectionRawVertexBlock> rawVerticesList = new TagBlockList<GlobalGeometrySectionRawVertexBlock>(32767);
                        private TagBlockList<GlobalGeometrySectionStripIndexBlock> stripIndicesList = new TagBlockList<GlobalGeometrySectionStripIndexBlock>(65535);
                        private TagBlockList<GlobalGeometrySectionVertexBufferBlock> vertexBuffersList = new TagBlockList<GlobalGeometrySectionVertexBufferBlock>(512);
                        [FieldAttribute("Parts*", typeof(TagBlock))]
                        [BlockAttribute("part", 255, typeof(GlobalGeometryPartBlockNew))]
                        public TagBlock Parts;
                        [FieldAttribute("Subparts*", typeof(TagBlock))]
                        [BlockAttribute("subparts", 32768, typeof(GlobalSubpartsBlock))]
                        public TagBlock Subparts;
                        [FieldAttribute("Visibility Bounds*", typeof(TagBlock))]
                        [BlockAttribute("visibility bounds", 32768, typeof(GlobalVisibilityBoundsBlock))]
                        public TagBlock VisibilityBounds;
                        [FieldAttribute("Raw Vertices*", typeof(TagBlock))]
                        [BlockAttribute("vertex", 32767, typeof(GlobalGeometrySectionRawVertexBlock))]
                        public TagBlock RawVertices;
                        [FieldAttribute("Strip Indices*", typeof(TagBlock))]
                        [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                        public TagBlock StripIndices;
                        [FieldAttribute("Visibility mopp Code*", typeof(TagBlock))]
                        [DataAttribute(393216)]
                        public TagBlock VisibilityMoppCode;
                        [FieldAttribute("mopp Reorder Table*", typeof(TagBlock))]
                        [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                        public TagBlock MoppReorderTable;
                        [FieldAttribute("Vertex Buffers*", typeof(TagBlock))]
                        [BlockAttribute("vertex buffer", 512, typeof(GlobalGeometrySectionVertexBufferBlock))]
                        public TagBlock VertexBuffers;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(4)]
                        public Byte[] EmptyString;
                        public DataList VisibilityMoppCodeList
                        {
                            get
                            {
                                return this.visibilityMoppCodeList;
                            }
                        }
                        public TagBlockList<GlobalGeometryPartBlockNew> PartsList
                        {
                            get
                            {
                                return this.partsList;
                            }
                        }
                        public TagBlockList<GlobalSubpartsBlock> SubpartsList
                        {
                            get
                            {
                                return this.subpartsList;
                            }
                        }
                        public TagBlockList<GlobalVisibilityBoundsBlock> VisibilityBoundsList
                        {
                            get
                            {
                                return this.visibilityBoundsList;
                            }
                        }
                        public TagBlockList<GlobalGeometrySectionRawVertexBlock> RawVerticesList
                        {
                            get
                            {
                                return this.rawVerticesList;
                            }
                        }
                        public TagBlockList<GlobalGeometrySectionStripIndexBlock> StripIndicesList
                        {
                            get
                            {
                                return this.stripIndicesList;
                            }
                        }
                        public TagBlockList<GlobalGeometrySectionVertexBufferBlock> VertexBuffersList
                        {
                            get
                            {
                                return this.vertexBuffersList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 108;
                            }
                        }
                        public override void Initialize()
                        {
                            this.visibilityMoppCodeList.Clear();
                            this.partsList.Clear();
                            this.subpartsList.Clear();
                            this.visibilityBoundsList.Clear();
                            this.rawVerticesList.Clear();
                            this.stripIndicesList.Clear();
                            this.vertexBuffersList.Clear();
                            this.Parts = TagBlock.Zero;
                            this.Subparts = TagBlock.Zero;
                            this.VisibilityBounds = TagBlock.Zero;
                            this.RawVertices = TagBlock.Zero;
                            this.StripIndices = TagBlock.Zero;
                            this.VisibilityMoppCode = TagBlock.Zero;
                            this.MoppReorderTable = TagBlock.Zero;
                            this.VertexBuffers = TagBlock.Zero;
                            this.EmptyString = new byte[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Parts = reader.ReadInt64();
                            this.partsList.Read(reader, this.Parts);
                            this.Subparts = reader.ReadInt64();
                            this.subpartsList.Read(reader, this.Subparts);
                            this.VisibilityBounds = reader.ReadInt64();
                            this.visibilityBoundsList.Read(reader, this.VisibilityBounds);
                            this.RawVertices = reader.ReadInt64();
                            this.rawVerticesList.Read(reader, this.RawVertices);
                            this.StripIndices = reader.ReadInt64();
                            this.stripIndicesList.Read(reader, this.StripIndices);
                            this.VisibilityMoppCode = reader.ReadInt64();
                            this.MoppReorderTable = reader.ReadInt64();
                            this.visibilityMoppCodeList.Read(reader, this.MoppReorderTable);
                            this.VertexBuffers = reader.ReadInt64();
                            this.vertexBuffersList.Read(reader, this.VertexBuffers);
                            this.EmptyString = reader.ReadBytes(4);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(72, 4)]
                        public sealed class GlobalGeometryPartBlockNew : AbideTagBlock
                        {
                            [FieldAttribute("Type*", typeof(TypeOptions))]
                            [OptionsAttribute(typeof(TypeOptions), false)]
                            public TypeOptions Type;
                            [FieldAttribute("Flags*", typeof(FlagsOptions))]
                            [OptionsAttribute(typeof(FlagsOptions), true)]
                            public FlagsOptions Flags;
                            [FieldAttribute("Material*", typeof(Int16))]
                            public Int16 Material;
                            [FieldAttribute("Strip Start Index*", typeof(Int16))]
                            public Int16 StripStartIndex;
                            [FieldAttribute("Strip Length*", typeof(Int16))]
                            public Int16 StripLength;
                            [FieldAttribute("First Subpart Index*", typeof(Int16))]
                            public Int16 FirstSubpartIndex;
                            [FieldAttribute("Subpart Count*", typeof(Int16))]
                            public Int16 SubpartCount;
                            [FieldAttribute("Max Nodes/Vertex*", typeof(Byte))]
                            public Byte MaxNodesvertex;
                            [FieldAttribute("Contributing Compound Node Count*", typeof(Byte))]
                            public Byte ContributingCompoundNodeCount;
                            [FieldAttribute("Position*", typeof(Vector3))]
                            public Vector3 Position;
                            [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                            [ArrayAttribute(4, typeof(NodeIndicesElement))]
                            public NodeIndicesElement[] NodeIndices;
                            [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                            [ArrayAttribute(3, typeof(NodeWeightsElement))]
                            public NodeWeightsElement[] NodeWeights;
                            [FieldAttribute("lod mipmap magic number*", typeof(Single))]
                            public Single LodMipmapMagicNumber;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(24)]
                            public Byte[] EmptyString;
                            public override int Size
                            {
                                get
                                {
                                    return 72;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Type = ((TypeOptions)(0));
                                this.Flags = ((FlagsOptions)(0));
                                this.Material = 0;
                                this.StripStartIndex = 0;
                                this.StripLength = 0;
                                this.FirstSubpartIndex = 0;
                                this.SubpartCount = 0;
                                this.MaxNodesvertex = 0;
                                this.ContributingCompoundNodeCount = 0;
                                this.Position = Vector3.Zero;
                                this.NodeIndices = new NodeIndicesElement[4];
                                this.NodeWeights = new NodeWeightsElement[3];
                                this.LodMipmapMagicNumber = 0;
                                this.EmptyString = new byte[24];
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Type = ((TypeOptions)(reader.ReadInt16()));
                                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                                this.Material = reader.ReadInt16();
                                this.StripStartIndex = reader.ReadInt16();
                                this.StripLength = reader.ReadInt16();
                                this.FirstSubpartIndex = reader.ReadInt16();
                                this.SubpartCount = reader.ReadInt16();
                                this.MaxNodesvertex = reader.ReadByte();
                                this.ContributingCompoundNodeCount = reader.ReadByte();
                                this.Position = reader.Read<Vector3>();
                                this.LodMipmapMagicNumber = reader.ReadSingle();
                                this.EmptyString = reader.ReadBytes(24);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            public sealed class NodeIndicesElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Index*", typeof(Byte))]
                                public Byte NodeIndex;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeIndex = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeIndex = reader.ReadByte();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public sealed class NodeWeightsElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Weight*", typeof(Single))]
                                public Single NodeWeight;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeWeight = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeWeight = reader.ReadSingle();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public enum TypeOptions : Int16
                            {
                                NotDrawn = 0,
                                OpaqueShadowOnly = 1,
                                OpaqueShadowCasting = 2,
                                OpaqueNonshadowing = 3,
                                Transparent = 4,
                                LightmapOnly = 5,
                            }
                            public enum FlagsOptions : Int16
                            {
                                Decalable = 1,
                                NewPartTypes = 2,
                                DislikesPhotons = 4,
                                OverrideTriangleList = 8,
                                IgnoredByLightmapper = 16,
                            }
                        }
                        [FieldSetAttribute(8, 4)]
                        public sealed class GlobalSubpartsBlock : AbideTagBlock
                        {
                            [FieldAttribute("indices_start_index*", typeof(Int16))]
                            public Int16 IndicesStartIndex;
                            [FieldAttribute("indices_length*", typeof(Int16))]
                            public Int16 IndicesLength;
                            [FieldAttribute("visibility_bounds_index*", typeof(Int16))]
                            public Int16 VisibilityBoundsIndex;
                            [FieldAttribute("Part Index*", typeof(Int16))]
                            public Int16 PartIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 8;
                                }
                            }
                            public override void Initialize()
                            {
                                this.IndicesStartIndex = 0;
                                this.IndicesLength = 0;
                                this.VisibilityBoundsIndex = 0;
                                this.PartIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.IndicesStartIndex = reader.ReadInt16();
                                this.IndicesLength = reader.ReadInt16();
                                this.VisibilityBoundsIndex = reader.ReadInt16();
                                this.PartIndex = reader.ReadInt16();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        [FieldSetAttribute(20, 4)]
                        public sealed class GlobalVisibilityBoundsBlock : AbideTagBlock
                        {
                            [FieldAttribute("Position x*", typeof(Single))]
                            public Single PositionX;
                            [FieldAttribute("Position y*", typeof(Single))]
                            public Single PositionY;
                            [FieldAttribute("Position z*", typeof(Single))]
                            public Single PositionZ;
                            [FieldAttribute("Radius*", typeof(Single))]
                            public Single Radius;
                            [FieldAttribute("Node 0*", typeof(Byte))]
                            public Byte Node0;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(3)]
                            public Byte[] EmptyString;
                            public override int Size
                            {
                                get
                                {
                                    return 20;
                                }
                            }
                            public override void Initialize()
                            {
                                this.PositionX = 0;
                                this.PositionY = 0;
                                this.PositionZ = 0;
                                this.Radius = 0;
                                this.Node0 = 0;
                                this.EmptyString = new byte[3];
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.PositionX = reader.ReadSingle();
                                this.PositionY = reader.ReadSingle();
                                this.PositionZ = reader.ReadSingle();
                                this.Radius = reader.ReadSingle();
                                this.Node0 = reader.ReadByte();
                                this.EmptyString = reader.ReadBytes(3);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        [FieldSetAttribute(196, 4)]
                        public sealed class GlobalGeometrySectionRawVertexBlock : AbideTagBlock
                        {
                            [FieldAttribute("Position*", typeof(Vector3))]
                            public Vector3 Position;
                            [FieldAttribute("Node Indices (OLD)*", typeof(NodeIndicesOldElement[]))]
                            [ArrayAttribute(4, typeof(NodeIndicesOldElement))]
                            public NodeIndicesOldElement[] NodeIndicesOld;
                            [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                            [ArrayAttribute(4, typeof(NodeWeightsElement))]
                            public NodeWeightsElement[] NodeWeights;
                            [FieldAttribute("Node Indices (NEW)*", typeof(NodeIndicesNewElement[]))]
                            [ArrayAttribute(4, typeof(NodeIndicesNewElement))]
                            public NodeIndicesNewElement[] NodeIndicesNew;
                            [FieldAttribute("Use New Node Indices*", typeof(Int32))]
                            public Int32 UseNewNodeIndices;
                            [FieldAttribute("Adjusted Compound Node Index*", typeof(Int32))]
                            public Int32 AdjustedCompoundNodeIndex;
                            [FieldAttribute("texcoord*", typeof(Vector2))]
                            public Vector2 Texcoord;
                            [FieldAttribute("Normal*", typeof(Vector3))]
                            public Vector3 Normal;
                            [FieldAttribute("Binormal*", typeof(Vector3))]
                            public Vector3 Binormal;
                            [FieldAttribute("Tangent*", typeof(Vector3))]
                            public Vector3 Tangent;
                            [FieldAttribute("Anisotropic Binormal*", typeof(Vector3))]
                            public Vector3 AnisotropicBinormal;
                            [FieldAttribute("Secondary texcoord*", typeof(Vector2))]
                            public Vector2 SecondaryTexcoord;
                            [FieldAttribute("Primary Lightmap Color", typeof(ColorRgbF))]
                            public ColorRgbF PrimaryLightmapColor;
                            [FieldAttribute("Primary Lightmap texcoord", typeof(Vector2))]
                            public Vector2 PrimaryLightmapTexcoord;
                            [FieldAttribute("Primary Lightmap Incident Direction", typeof(Vector3))]
                            public Vector3 PrimaryLightmapIncidentDirection;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(12)]
                            public Byte[] EmptyString;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(8)]
                            public Byte[] EmptyString1;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(12)]
                            public Byte[] EmptyString2;
                            public override int Size
                            {
                                get
                                {
                                    return 196;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Position = Vector3.Zero;
                                this.NodeIndicesOld = new NodeIndicesOldElement[4];
                                this.NodeWeights = new NodeWeightsElement[4];
                                this.NodeIndicesNew = new NodeIndicesNewElement[4];
                                this.UseNewNodeIndices = 0;
                                this.AdjustedCompoundNodeIndex = 0;
                                this.Texcoord = Vector2.Zero;
                                this.Normal = Vector3.Zero;
                                this.Binormal = Vector3.Zero;
                                this.Tangent = Vector3.Zero;
                                this.AnisotropicBinormal = Vector3.Zero;
                                this.SecondaryTexcoord = Vector2.Zero;
                                this.PrimaryLightmapColor = ColorRgbF.Zero;
                                this.PrimaryLightmapTexcoord = Vector2.Zero;
                                this.PrimaryLightmapIncidentDirection = Vector3.Zero;
                                this.EmptyString = new byte[12];
                                this.EmptyString1 = new byte[8];
                                this.EmptyString2 = new byte[12];
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Position = reader.Read<Vector3>();
                                this.UseNewNodeIndices = reader.ReadInt32();
                                this.AdjustedCompoundNodeIndex = reader.ReadInt32();
                                this.Texcoord = reader.Read<Vector2>();
                                this.Normal = reader.Read<Vector3>();
                                this.Binormal = reader.Read<Vector3>();
                                this.Tangent = reader.Read<Vector3>();
                                this.AnisotropicBinormal = reader.Read<Vector3>();
                                this.SecondaryTexcoord = reader.Read<Vector2>();
                                this.PrimaryLightmapColor = reader.Read<ColorRgbF>();
                                this.PrimaryLightmapTexcoord = reader.Read<Vector2>();
                                this.PrimaryLightmapIncidentDirection = reader.Read<Vector3>();
                                this.EmptyString = reader.ReadBytes(12);
                                this.EmptyString1 = reader.ReadBytes(8);
                                this.EmptyString2 = reader.ReadBytes(12);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            public sealed class NodeIndicesOldElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Index (OLD)*", typeof(Int32))]
                                public Int32 NodeIndexOld;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeIndexOld = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeIndexOld = reader.ReadInt32();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public sealed class NodeWeightsElement : AbideTagBlock
                            {
                                [FieldAttribute("node_weight*", typeof(Single))]
                                public Single NodeWeight;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeWeight = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeWeight = reader.ReadSingle();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public sealed class NodeIndicesNewElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Index (NEW)*", typeof(Int32))]
                                public Int32 NodeIndexNew;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeIndexNew = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeIndexNew = reader.ReadInt32();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                        [FieldSetAttribute(2, 4)]
                        public sealed class GlobalGeometrySectionStripIndexBlock : AbideTagBlock
                        {
                            [FieldAttribute("Index*", typeof(Int16))]
                            public Int16 Index;
                            public override int Size
                            {
                                get
                                {
                                    return 2;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Index = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Index = reader.ReadInt16();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        [FieldSetAttribute(32, 4)]
                        public sealed class GlobalGeometrySectionVertexBufferBlock : AbideTagBlock
                        {
                            public override int Size
                            {
                                get
                                {
                                    return 32;
                                }
                            }
                            public override void Initialize()
                            {
                            }
                            public override void Read(BinaryReader reader)
                            {
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
                [FieldSetAttribute(44, 4)]
                public sealed class GlobalGeometrySectionInfoStructBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometryCompressionInfoBlock> emptyStringList = new TagBlockList<GlobalGeometryCompressionInfoBlock>(1);
                    [FieldAttribute("Total Vertex Count*", typeof(Int16))]
                    public Int16 TotalVertexCount;
                    [FieldAttribute("Total Triangle Count*", typeof(Int16))]
                    public Int16 TotalTriangleCount;
                    [FieldAttribute("Total Part Count*", typeof(Int16))]
                    public Int16 TotalPartCount;
                    [FieldAttribute("Shadow-Casting Triangle Count*", typeof(Int16))]
                    public Int16 ShadowCastingTriangleCount;
                    [FieldAttribute("Shadow-Casting Part Count*", typeof(Int16))]
                    public Int16 ShadowCastingPartCount;
                    [FieldAttribute("Opaque Point Count*", typeof(Int16))]
                    public Int16 OpaquePointCount;
                    [FieldAttribute("Opaque Vertex Count*", typeof(Int16))]
                    public Int16 OpaqueVertexCount;
                    [FieldAttribute("Opaque Part Count*", typeof(Int16))]
                    public Int16 OpaquePartCount;
                    [FieldAttribute("Opaque Max Nodes/Vertex*", typeof(Byte))]
                    public Byte OpaqueMaxNodesvertex;
                    [FieldAttribute("Transparent Max Nodes/Vertex*", typeof(Byte))]
                    public Byte TransparentMaxNodesvertex;
                    [FieldAttribute("Shadow-Casting Rigid Triangle Count*", typeof(Int16))]
                    public Int16 ShadowCastingRigidTriangleCount;
                    [FieldAttribute("Geometry Classification*", typeof(GeometryClassificationOptions))]
                    [OptionsAttribute(typeof(GeometryClassificationOptions), false)]
                    public GeometryClassificationOptions GeometryClassification;
                    [FieldAttribute("Geometry Compression Flags*", typeof(GeometryCompressionFlagsOptions))]
                    [OptionsAttribute(typeof(GeometryCompressionFlagsOptions), true)]
                    public GeometryCompressionFlagsOptions GeometryCompressionFlags;
                    [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
                    [BlockAttribute("compression info", 1, typeof(GlobalGeometryCompressionInfoBlock))]
                    public TagBlock EmptyString;
                    [FieldAttribute("Hardware Node Count*", typeof(Byte))]
                    public Byte HardwareNodeCount;
                    [FieldAttribute("Node Map Size*", typeof(Byte))]
                    public Byte NodeMapSize;
                    [FieldAttribute("Software Plane Count*", typeof(Int16))]
                    public Int16 SoftwarePlaneCount;
                    [FieldAttribute("total subpart_cont*", typeof(Int16))]
                    public Int16 TotalSubpartCont;
                    [FieldAttribute("Section Lighting Flags*", typeof(SectionLightingFlagsOptions))]
                    [OptionsAttribute(typeof(SectionLightingFlagsOptions), true)]
                    public SectionLightingFlagsOptions SectionLightingFlags;
                    public TagBlockList<GlobalGeometryCompressionInfoBlock> EmptyStringList
                    {
                        get
                        {
                            return this.emptyStringList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 44;
                        }
                    }
                    public override void Initialize()
                    {
                        this.emptyStringList.Clear();
                        this.TotalVertexCount = 0;
                        this.TotalTriangleCount = 0;
                        this.TotalPartCount = 0;
                        this.ShadowCastingTriangleCount = 0;
                        this.ShadowCastingPartCount = 0;
                        this.OpaquePointCount = 0;
                        this.OpaqueVertexCount = 0;
                        this.OpaquePartCount = 0;
                        this.OpaqueMaxNodesvertex = 0;
                        this.TransparentMaxNodesvertex = 0;
                        this.ShadowCastingRigidTriangleCount = 0;
                        this.GeometryClassification = ((GeometryClassificationOptions)(0));
                        this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(0));
                        this.EmptyString = TagBlock.Zero;
                        this.HardwareNodeCount = 0;
                        this.NodeMapSize = 0;
                        this.SoftwarePlaneCount = 0;
                        this.TotalSubpartCont = 0;
                        this.SectionLightingFlags = ((SectionLightingFlagsOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.TotalVertexCount = reader.ReadInt16();
                        this.TotalTriangleCount = reader.ReadInt16();
                        this.TotalPartCount = reader.ReadInt16();
                        this.ShadowCastingTriangleCount = reader.ReadInt16();
                        this.ShadowCastingPartCount = reader.ReadInt16();
                        this.OpaquePointCount = reader.ReadInt16();
                        this.OpaqueVertexCount = reader.ReadInt16();
                        this.OpaquePartCount = reader.ReadInt16();
                        this.OpaqueMaxNodesvertex = reader.ReadByte();
                        this.TransparentMaxNodesvertex = reader.ReadByte();
                        this.ShadowCastingRigidTriangleCount = reader.ReadInt16();
                        this.GeometryClassification = ((GeometryClassificationOptions)(reader.ReadInt16()));
                        this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadInt64();
                        this.emptyStringList.Read(reader, this.EmptyString);
                        this.HardwareNodeCount = reader.ReadByte();
                        this.NodeMapSize = reader.ReadByte();
                        this.SoftwarePlaneCount = reader.ReadInt16();
                        this.TotalSubpartCont = reader.ReadInt16();
                        this.SectionLightingFlags = ((SectionLightingFlagsOptions)(reader.ReadInt16()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(56, 4)]
                    public sealed class GlobalGeometryCompressionInfoBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 56;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum GeometryClassificationOptions : Int16
                    {
                        Worldspace = 0,
                        Rigid = 1,
                        RigidBoned = 2,
                        Skinned = 3,
                        UnsupportedReimport = 4,
                    }
                    public enum GeometryCompressionFlagsOptions : Int16
                    {
                        CompressedPosition = 1,
                        CompressedTexcoord = 2,
                        CompressedSecondaryTexcoord = 4,
                    }
                    public enum SectionLightingFlagsOptions : Int16
                    {
                        HasLmTexcoords = 1,
                        HasLmIncRad = 2,
                        HasLmColors = 4,
                        HasLmPrt = 8,
                    }
                }
                [FieldSetAttribute(40, 4)]
                public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                    [FieldAttribute("Block Offset*", typeof(Int32))]
                    public Int32 BlockOffset;
                    [FieldAttribute("Block Size*", typeof(Int32))]
                    public Int32 BlockSize;
                    [FieldAttribute("Section Data Size*", typeof(Int32))]
                    public Int32 SectionDataSize;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resources*", typeof(TagBlock))]
                    [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                    public TagBlock Resources;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                    public Int16 OwnerTagSectionOffset;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString2;
                    public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                    {
                        get
                        {
                            return this.resourcesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 40;
                        }
                    }
                    public override void Initialize()
                    {
                        this.resourcesList.Clear();
                        this.BlockOffset = 0;
                        this.BlockSize = 0;
                        this.SectionDataSize = 0;
                        this.ResourceDataSize = 0;
                        this.Resources = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                        this.OwnerTagSectionOffset = 0;
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BlockOffset = reader.ReadInt32();
                        this.BlockSize = reader.ReadInt32();
                        this.SectionDataSize = reader.ReadInt32();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.Resources = reader.ReadInt64();
                        this.resourcesList.Read(reader, this.Resources);
                        this.EmptyString = reader.ReadBytes(4);
                        this.OwnerTagSectionOffset = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        [FieldAttribute("Primary Locator*", typeof(Int16))]
                        public Int16 PrimaryLocator;
                        [FieldAttribute("Secondary Locator*", typeof(Int16))]
                        public Int16 SecondaryLocator;
                        [FieldAttribute("Resource Data Size*", typeof(Int32))]
                        public Int32 ResourceDataSize;
                        [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                        public Int32 ResourceDataOffset;
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.EmptyString = new byte[3];
                            this.PrimaryLocator = 0;
                            this.SecondaryLocator = 0;
                            this.ResourceDataSize = 0;
                            this.ResourceDataOffset = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadByte()));
                            this.EmptyString = reader.ReadBytes(3);
                            this.PrimaryLocator = reader.ReadInt16();
                            this.SecondaryLocator = reader.ReadInt16();
                            this.ResourceDataSize = reader.ReadInt32();
                            this.ResourceDataOffset = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions : Byte
                        {
                            TagBlock = 0,
                            TagData = 1,
                            VertexBuffer = 2,
                        }
                    }
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class LightmapGeometryRenderInfoBlock : AbideTagBlock
            {
                [FieldAttribute("bitmap index", typeof(Int16))]
                public Int16 BitmapIndex;
                [FieldAttribute("palette index", typeof(Byte))]
                public Byte PaletteIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.BitmapIndex = 0;
                    this.PaletteIndex = 0;
                    this.EmptyString = new byte[1];
                }
                public override void Read(BinaryReader reader)
                {
                    this.BitmapIndex = reader.ReadInt16();
                    this.PaletteIndex = reader.ReadByte();
                    this.EmptyString = reader.ReadBytes(1);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(220, 4)]
            public sealed class StructureLightmapLightingEnvironmentBlock : AbideTagBlock
            {
                [FieldAttribute("sample_point*", typeof(Vector3))]
                public Vector3 SamplePoint;
                [FieldAttribute("red coefficients*", typeof(RedCoefficientsElement[]))]
                [ArrayAttribute(9, typeof(RedCoefficientsElement))]
                public RedCoefficientsElement[] RedCoefficients;
                [FieldAttribute("green coefficients*", typeof(GreenCoefficientsElement[]))]
                [ArrayAttribute(9, typeof(GreenCoefficientsElement))]
                public GreenCoefficientsElement[] GreenCoefficients;
                [FieldAttribute("blue coefficients*", typeof(BlueCoefficientsElement[]))]
                [ArrayAttribute(9, typeof(BlueCoefficientsElement))]
                public BlueCoefficientsElement[] BlueCoefficients;
                [FieldAttribute("mean incoming light direction", typeof(Vector3))]
                public Vector3 MeanIncomingLightDirection;
                [FieldAttribute("incoming light intensity", typeof(Vector3))]
                public Vector3 IncomingLightIntensity;
                [FieldAttribute("specular bitmap index", typeof(Int32))]
                public Int32 SpecularBitmapIndex;
                [FieldAttribute("rotation axis", typeof(Vector3))]
                public Vector3 RotationAxis;
                [FieldAttribute("rotation speed", typeof(Single))]
                public Single RotationSpeed;
                [FieldAttribute("bump direction", typeof(Vector3))]
                public Vector3 BumpDirection;
                [FieldAttribute("color tint", typeof(ColorRgbF))]
                public ColorRgbF ColorTint;
                [FieldAttribute("procedural overide", typeof(ProceduralOverideOptions))]
                [OptionsAttribute(typeof(ProceduralOverideOptions), false)]
                public ProceduralOverideOptions ProceduralOveride;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("procedural param0", typeof(Vector3))]
                public Vector3 ProceduralParam0;
                [FieldAttribute("procedural param1.xyz", typeof(Vector3))]
                public Vector3 ProceduralParam1xyz;
                [FieldAttribute("procedural param1.w", typeof(Single))]
                public Single ProceduralParam1w;
                public override int Size
                {
                    get
                    {
                        return 220;
                    }
                }
                public override void Initialize()
                {
                    this.SamplePoint = Vector3.Zero;
                    this.RedCoefficients = new RedCoefficientsElement[9];
                    this.GreenCoefficients = new GreenCoefficientsElement[9];
                    this.BlueCoefficients = new BlueCoefficientsElement[9];
                    this.MeanIncomingLightDirection = Vector3.Zero;
                    this.IncomingLightIntensity = Vector3.Zero;
                    this.SpecularBitmapIndex = 0;
                    this.RotationAxis = Vector3.Zero;
                    this.RotationSpeed = 0;
                    this.BumpDirection = Vector3.Zero;
                    this.ColorTint = ColorRgbF.Zero;
                    this.ProceduralOveride = ((ProceduralOverideOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.ProceduralParam0 = Vector3.Zero;
                    this.ProceduralParam1xyz = Vector3.Zero;
                    this.ProceduralParam1w = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.SamplePoint = reader.Read<Vector3>();
                    this.MeanIncomingLightDirection = reader.Read<Vector3>();
                    this.IncomingLightIntensity = reader.Read<Vector3>();
                    this.SpecularBitmapIndex = reader.ReadInt32();
                    this.RotationAxis = reader.Read<Vector3>();
                    this.RotationSpeed = reader.ReadSingle();
                    this.BumpDirection = reader.Read<Vector3>();
                    this.ColorTint = reader.Read<ColorRgbF>();
                    this.ProceduralOveride = ((ProceduralOverideOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.ProceduralParam0 = reader.Read<Vector3>();
                    this.ProceduralParam1xyz = reader.Read<Vector3>();
                    this.ProceduralParam1w = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public sealed class RedCoefficientsElement : AbideTagBlock
                {
                    [FieldAttribute("red coefficient*", typeof(Single))]
                    public Single RedCoefficient;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.RedCoefficient = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.RedCoefficient = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public sealed class GreenCoefficientsElement : AbideTagBlock
                {
                    [FieldAttribute("green coefficient*", typeof(Single))]
                    public Single GreenCoefficient;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.GreenCoefficient = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.GreenCoefficient = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public sealed class BlueCoefficientsElement : AbideTagBlock
                {
                    [FieldAttribute("blue coefficient*", typeof(Single))]
                    public Single BlueCoefficient;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.BlueCoefficient = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BlueCoefficient = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum ProceduralOverideOptions : Int16
                {
                    NoOveride = 0,
                    CieClearSky = 1,
                    CiePartlyCloudy = 2,
                    CieCloudy = 3,
                    DirectionalLight = 4,
                    ConeLight = 5,
                    SphereLight = 6,
                    HemisphereLight = 7,
                }
                public enum FlagsOptions : Int16
                {
                    LeaveMeAlonePlease = 1,
                }
            }
            [FieldSetAttribute(68, 4)]
            public sealed class LightmapVertexBufferBucketBlock : AbideTagBlock
            {
                private TagBlockList<LightmapBucketRawVertexBlock> rawVerticesList = new TagBlockList<LightmapBucketRawVertexBlock>(32767);
                private TagBlockList<LightmapVertexBufferBucketCacheDataBlock> cacheDataList = new TagBlockList<LightmapVertexBufferBucketCacheDataBlock>(1);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("raw vertices", typeof(TagBlock))]
                [BlockAttribute("vertex", 32767, typeof(LightmapBucketRawVertexBlock))]
                public TagBlock RawVertices;
                [FieldAttribute("geometry block info", typeof(GlobalGeometryBlockInfoStructBlock))]
                public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
                [FieldAttribute("cache data", typeof(TagBlock))]
                [BlockAttribute("lightmap_vertex_buffer_bucket_cache_data_block", 1, typeof(LightmapVertexBufferBucketCacheDataBlock))]
                public TagBlock CacheData;
                public TagBlockList<LightmapBucketRawVertexBlock> RawVerticesList
                {
                    get
                    {
                        return this.rawVerticesList;
                    }
                }
                public TagBlockList<LightmapVertexBufferBucketCacheDataBlock> CacheDataList
                {
                    get
                    {
                        return this.cacheDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 68;
                    }
                }
                public override void Initialize()
                {
                    this.rawVerticesList.Clear();
                    this.cacheDataList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.RawVertices = TagBlock.Zero;
                    this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
                    this.CacheData = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.RawVertices = reader.ReadInt64();
                    this.rawVerticesList.Read(reader, this.RawVertices);
                    this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
                    this.CacheData = reader.ReadInt64();
                    this.cacheDataList.Read(reader, this.CacheData);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(24, 4)]
                public sealed class LightmapBucketRawVertexBlock : AbideTagBlock
                {
                    [FieldAttribute("primary lightmap color", typeof(ColorRgbF))]
                    public ColorRgbF PrimaryLightmapColor;
                    [FieldAttribute("primary lightmap incident direction", typeof(Vector3))]
                    public Vector3 PrimaryLightmapIncidentDirection;
                    public override int Size
                    {
                        get
                        {
                            return 24;
                        }
                    }
                    public override void Initialize()
                    {
                        this.PrimaryLightmapColor = ColorRgbF.Zero;
                        this.PrimaryLightmapIncidentDirection = Vector3.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.PrimaryLightmapColor = reader.Read<ColorRgbF>();
                        this.PrimaryLightmapIncidentDirection = reader.Read<Vector3>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(12, 4)]
                public sealed class LightmapVertexBufferBucketCacheDataBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometrySectionVertexBufferBlock> vertexBuffersList = new TagBlockList<GlobalGeometrySectionVertexBufferBlock>(512);
                    [FieldAttribute("vertex buffers*", typeof(TagBlock))]
                    [BlockAttribute("vertex buffer", 512, typeof(GlobalGeometrySectionVertexBufferBlock))]
                    public TagBlock VertexBuffers;
                    public TagBlockList<GlobalGeometrySectionVertexBufferBlock> VertexBuffersList
                    {
                        get
                        {
                            return this.vertexBuffersList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.vertexBuffersList.Clear();
                        this.VertexBuffers = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.VertexBuffers = reader.ReadInt64();
                        this.vertexBuffersList.Read(reader, this.VertexBuffers);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class GlobalGeometrySectionVertexBufferBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(40, 4)]
                public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                    [FieldAttribute("Block Offset*", typeof(Int32))]
                    public Int32 BlockOffset;
                    [FieldAttribute("Block Size*", typeof(Int32))]
                    public Int32 BlockSize;
                    [FieldAttribute("Section Data Size*", typeof(Int32))]
                    public Int32 SectionDataSize;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resources*", typeof(TagBlock))]
                    [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                    public TagBlock Resources;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                    public Int16 OwnerTagSectionOffset;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString2;
                    public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                    {
                        get
                        {
                            return this.resourcesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 40;
                        }
                    }
                    public override void Initialize()
                    {
                        this.resourcesList.Clear();
                        this.BlockOffset = 0;
                        this.BlockSize = 0;
                        this.SectionDataSize = 0;
                        this.ResourceDataSize = 0;
                        this.Resources = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                        this.OwnerTagSectionOffset = 0;
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BlockOffset = reader.ReadInt32();
                        this.BlockSize = reader.ReadInt32();
                        this.SectionDataSize = reader.ReadInt32();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.Resources = reader.ReadInt64();
                        this.resourcesList.Read(reader, this.Resources);
                        this.EmptyString = reader.ReadBytes(4);
                        this.OwnerTagSectionOffset = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        [FieldAttribute("Primary Locator*", typeof(Int16))]
                        public Int16 PrimaryLocator;
                        [FieldAttribute("Secondary Locator*", typeof(Int16))]
                        public Int16 SecondaryLocator;
                        [FieldAttribute("Resource Data Size*", typeof(Int32))]
                        public Int32 ResourceDataSize;
                        [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                        public Int32 ResourceDataOffset;
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.EmptyString = new byte[3];
                            this.PrimaryLocator = 0;
                            this.SecondaryLocator = 0;
                            this.ResourceDataSize = 0;
                            this.ResourceDataOffset = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadByte()));
                            this.EmptyString = reader.ReadBytes(3);
                            this.PrimaryLocator = reader.ReadInt16();
                            this.SecondaryLocator = reader.ReadInt16();
                            this.ResourceDataSize = reader.ReadInt32();
                            this.ResourceDataOffset = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions : Byte
                        {
                            TagBlock = 0,
                            TagData = 1,
                            VertexBuffer = 2,
                        }
                    }
                }
                public enum FlagsOptions : Int16
                {
                    IncidentDirection = 1,
                    Color = 2,
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class LightmapInstanceBucketReferenceBlock : AbideTagBlock
            {
                private TagBlockList<LightmapInstanceBucketSectionOffsetBlock> sectionOffsetsList = new TagBlockList<LightmapInstanceBucketSectionOffsetBlock>(255);
                [FieldAttribute("flags", typeof(Int16))]
                public Int16 Flags;
                [FieldAttribute("bucket index", typeof(Int16))]
                public Int16 BucketIndex;
                [FieldAttribute("section offsets", typeof(TagBlock))]
                [BlockAttribute("lightmap_instance_bucket_section_offset_block", 255, typeof(LightmapInstanceBucketSectionOffsetBlock))]
                public TagBlock SectionOffsets;
                public TagBlockList<LightmapInstanceBucketSectionOffsetBlock> SectionOffsetsList
                {
                    get
                    {
                        return this.sectionOffsetsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.sectionOffsetsList.Clear();
                    this.Flags = 0;
                    this.BucketIndex = 0;
                    this.SectionOffsets = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = reader.ReadInt16();
                    this.BucketIndex = reader.ReadInt16();
                    this.SectionOffsets = reader.ReadInt64();
                    this.sectionOffsetsList.Read(reader, this.SectionOffsets);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(2, 4)]
                public sealed class LightmapInstanceBucketSectionOffsetBlock : AbideTagBlock
                {
                    [FieldAttribute("section offset*", typeof(Int16))]
                    public Int16 SectionOffset;
                    public override int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SectionOffset = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SectionOffset = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class LightmapSceneryObjectInfoBlock : AbideTagBlock
            {
                [FieldAttribute("unique ID", typeof(Int32))]
                public Int32 UniqueId;
                [FieldAttribute("origin BSP index", typeof(Int16))]
                public Int16 OriginBspIndex;
                [FieldAttribute("type", typeof(Byte))]
                public Byte Type;
                [FieldAttribute("source", typeof(Byte))]
                public Byte Source;
                [FieldAttribute("render model checksum", typeof(Int32))]
                public Int32 RenderModelChecksum;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.UniqueId = 0;
                    this.OriginBspIndex = 0;
                    this.Type = 0;
                    this.Source = 0;
                    this.RenderModelChecksum = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.UniqueId = reader.ReadInt32();
                    this.OriginBspIndex = reader.ReadInt16();
                    this.Type = reader.ReadByte();
                    this.Source = reader.ReadByte();
                    this.RenderModelChecksum = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum TypeOptions : Int16
            {
                Normal = 0,
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(680, 4)]
        public sealed class GlobalErrorReportCategoriesBlock : AbideTagBlock
        {
            private TagBlockList<ErrorReportsBlock> reportsList = new TagBlockList<ErrorReportsBlock>(1024);
            [FieldAttribute("Name^*", typeof(String256))]
            public String256 Name;
            [FieldAttribute("Report Type*", typeof(ReportTypeOptions))]
            [OptionsAttribute(typeof(ReportTypeOptions), false)]
            public ReportTypeOptions ReportType;
            [FieldAttribute("Flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(404)]
            public Byte[] EmptyString2;
            [FieldAttribute("Reports*", typeof(TagBlock))]
            [BlockAttribute("error report", 1024, typeof(ErrorReportsBlock))]
            public TagBlock Reports;
            public TagBlockList<ErrorReportsBlock> ReportsList
            {
                get
                {
                    return this.reportsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 680;
                }
            }
            public override void Initialize()
            {
                this.reportsList.Clear();
                this.Name = String256.Empty;
                this.ReportType = ((ReportTypeOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[404];
                this.Reports = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String256>();
                this.ReportType = ((ReportTypeOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(404);
                this.Reports = reader.ReadInt64();
                this.reportsList.Read(reader, this.Reports);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(644, 4)]
            public sealed class ErrorReportsBlock : AbideTagBlock
            {
                private DataList textList = new DataList(8192);
                private TagBlockList<ErrorReportVerticesBlock> verticesList = new TagBlockList<ErrorReportVerticesBlock>(1024);
                private TagBlockList<ErrorReportVectorsBlock> vectorsList = new TagBlockList<ErrorReportVectorsBlock>(1024);
                private TagBlockList<ErrorReportLinesBlock> linesList = new TagBlockList<ErrorReportLinesBlock>(1024);
                private TagBlockList<ErrorReportTrianglesBlock> trianglesList = new TagBlockList<ErrorReportTrianglesBlock>(1024);
                private TagBlockList<ErrorReportQuadsBlock> quadsList = new TagBlockList<ErrorReportQuadsBlock>(1024);
                private TagBlockList<ErrorReportCommentsBlock> commentsList = new TagBlockList<ErrorReportCommentsBlock>(1024);
                [FieldAttribute("Type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Flags*", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Text*", typeof(TagBlock))]
                [DataAttribute(8192)]
                public TagBlock Text;
                [FieldAttribute("Source Filename*", typeof(String32))]
                public String32 SourceFilename;
                [FieldAttribute("Source Line Number*", typeof(Int32))]
                public Int32 SourceLineNumber;
                [FieldAttribute("Vertices*", typeof(TagBlock))]
                [BlockAttribute("error report vertex", 1024, typeof(ErrorReportVerticesBlock))]
                public TagBlock Vertices;
                [FieldAttribute("Vectors*", typeof(TagBlock))]
                [BlockAttribute("error report vector", 1024, typeof(ErrorReportVectorsBlock))]
                public TagBlock Vectors;
                [FieldAttribute("Lines*", typeof(TagBlock))]
                [BlockAttribute("error report line", 1024, typeof(ErrorReportLinesBlock))]
                public TagBlock Lines;
                [FieldAttribute("Triangles*", typeof(TagBlock))]
                [BlockAttribute("error report triangle", 1024, typeof(ErrorReportTrianglesBlock))]
                public TagBlock Triangles;
                [FieldAttribute("Quads*", typeof(TagBlock))]
                [BlockAttribute("error report quad", 1024, typeof(ErrorReportQuadsBlock))]
                public TagBlock Quads;
                [FieldAttribute("Comments*", typeof(TagBlock))]
                [BlockAttribute("error report comment", 1024, typeof(ErrorReportCommentsBlock))]
                public TagBlock Comments;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(380)]
                public Byte[] EmptyString;
                [FieldAttribute("Report Key*", typeof(Int32))]
                public Int32 ReportKey;
                [FieldAttribute("Node Index*", typeof(Int32))]
                public Int32 NodeIndex;
                [FieldAttribute("Color*", typeof(ColorArgbF))]
                public ColorArgbF Color;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(84)]
                public Byte[] EmptyString1;
                public DataList TextList
                {
                    get
                    {
                        return this.textList;
                    }
                }
                public TagBlockList<ErrorReportVerticesBlock> VerticesList
                {
                    get
                    {
                        return this.verticesList;
                    }
                }
                public TagBlockList<ErrorReportVectorsBlock> VectorsList
                {
                    get
                    {
                        return this.vectorsList;
                    }
                }
                public TagBlockList<ErrorReportLinesBlock> LinesList
                {
                    get
                    {
                        return this.linesList;
                    }
                }
                public TagBlockList<ErrorReportTrianglesBlock> TrianglesList
                {
                    get
                    {
                        return this.trianglesList;
                    }
                }
                public TagBlockList<ErrorReportQuadsBlock> QuadsList
                {
                    get
                    {
                        return this.quadsList;
                    }
                }
                public TagBlockList<ErrorReportCommentsBlock> CommentsList
                {
                    get
                    {
                        return this.commentsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 644;
                    }
                }
                public override void Initialize()
                {
                    this.textList.Clear();
                    this.verticesList.Clear();
                    this.vectorsList.Clear();
                    this.linesList.Clear();
                    this.trianglesList.Clear();
                    this.quadsList.Clear();
                    this.commentsList.Clear();
                    this.Type = ((TypeOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.Text = TagBlock.Zero;
                    this.SourceFilename = String32.Empty;
                    this.SourceLineNumber = 0;
                    this.Vertices = TagBlock.Zero;
                    this.Vectors = TagBlock.Zero;
                    this.Lines = TagBlock.Zero;
                    this.Triangles = TagBlock.Zero;
                    this.Quads = TagBlock.Zero;
                    this.Comments = TagBlock.Zero;
                    this.EmptyString = new byte[380];
                    this.ReportKey = 0;
                    this.NodeIndex = 0;
                    this.Color = ColorArgbF.Zero;
                    this.EmptyString1 = new byte[84];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.Text = reader.ReadInt64();
                    this.SourceFilename = reader.Read<String32>();
                    this.SourceLineNumber = reader.ReadInt32();
                    this.Vertices = reader.ReadInt64();
                    this.verticesList.Read(reader, this.Vertices);
                    this.Vectors = reader.ReadInt64();
                    this.vectorsList.Read(reader, this.Vectors);
                    this.Lines = reader.ReadInt64();
                    this.linesList.Read(reader, this.Lines);
                    this.Triangles = reader.ReadInt64();
                    this.trianglesList.Read(reader, this.Triangles);
                    this.Quads = reader.ReadInt64();
                    this.quadsList.Read(reader, this.Quads);
                    this.Comments = reader.ReadInt64();
                    this.commentsList.Read(reader, this.Comments);
                    this.EmptyString = reader.ReadBytes(380);
                    this.ReportKey = reader.ReadInt32();
                    this.NodeIndex = reader.ReadInt32();
                    this.Color = reader.Read<ColorArgbF>();
                    this.EmptyString1 = reader.ReadBytes(84);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(52, 4)]
                public sealed class ErrorReportVerticesBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Screen Size*", typeof(Single))]
                    public Single ScreenSize;
                    public override int Size
                    {
                        get
                        {
                            return 52;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.ScreenSize = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.ScreenSize = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(64, 4)]
                public sealed class ErrorReportVectorsBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Normal*", typeof(Vector3))]
                    public Vector3 Normal;
                    [FieldAttribute("Screen Length*", typeof(Single))]
                    public Single ScreenLength;
                    public override int Size
                    {
                        get
                        {
                            return 64;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.Normal = Vector3.Zero;
                        this.ScreenLength = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.Normal = reader.Read<Vector3>();
                        this.ScreenLength = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(80, 4)]
                public sealed class ErrorReportLinesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(2, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 80;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[2];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(112, 4)]
                public sealed class ErrorReportTrianglesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(3, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 112;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[3];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(144, 4)]
                public sealed class ErrorReportQuadsBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(4, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 144;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(68, 4)]
                public sealed class ErrorReportCommentsBlock : AbideTagBlock
                {
                    private DataList textList = new DataList(8192);
                    [FieldAttribute("Text*", typeof(TagBlock))]
                    [DataAttribute(8192)]
                    public TagBlock Text;
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public DataList TextList
                    {
                        get
                        {
                            return this.textList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 68;
                        }
                    }
                    public override void Initialize()
                    {
                        this.textList.Clear();
                        this.Text = TagBlock.Zero;
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Text = reader.ReadInt64();
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                public enum TypeOptions : Int16
                {
                    Silent = 0,
                    Comment = 1,
                    Warning = 2,
                    Error = 3,
                }
                public enum FlagsOptions : Int16
                {
                    Rendered = 1,
                    TangentSpace = 2,
                    Noncritical = 4,
                    LightmapLight = 8,
                    ReportKeyIsValid = 16,
                }
            }
            public enum ReportTypeOptions : Int16
            {
                Silent = 0,
                Comment = 1,
                Warning = 2,
                Error = 3,
            }
            public enum FlagsOptions : Int16
            {
                Rendered = 1,
                TangentSpace = 2,
                Noncritical = 4,
                LightmapLight = 8,
                ReportKeyIsValid = 16,
            }
        }
    }
}
#pragma warning restore CS1591
