#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(184, 4)]
    [TagGroupAttribute("render_model", 1836016741u, 4294967293u, typeof(RenderModelBlock))]
    public sealed class RenderModelBlock : AbideTagBlock
    {
        private TagBlockList<GlobalTagImportInfoBlock> importInfoList = new TagBlockList<GlobalTagImportInfoBlock>(1);
        private TagBlockList<GlobalGeometryCompressionInfoBlock> compressionInfoList = new TagBlockList<GlobalGeometryCompressionInfoBlock>(1);
        private TagBlockList<RenderModelRegionBlock> regionsList = new TagBlockList<RenderModelRegionBlock>(16);
        private TagBlockList<RenderModelSectionBlock> sectionsList = new TagBlockList<RenderModelSectionBlock>(255);
        private TagBlockList<RenderModelInvalidSectionPairsBlock> invalidSectionPairBitsList = new TagBlockList<RenderModelInvalidSectionPairsBlock>(1013);
        private TagBlockList<RenderModelSectionGroupBlock> sectionGroupsList = new TagBlockList<RenderModelSectionGroupBlock>(6);
        private TagBlockList<RenderModelNodeBlock> nodesList = new TagBlockList<RenderModelNodeBlock>(255);
        private TagBlockList<RenderModelNodeMapBlockOld> nodeMapOldList = new TagBlockList<RenderModelNodeMapBlockOld>(640);
        private TagBlockList<RenderModelMarkerGroupBlock> markerGroupsList = new TagBlockList<RenderModelMarkerGroupBlock>(4096);
        private TagBlockList<GlobalGeometryMaterialBlock> materialsList = new TagBlockList<GlobalGeometryMaterialBlock>(1024);
        private TagBlockList<GlobalErrorReportCategoriesBlock> errorsList = new TagBlockList<GlobalErrorReportCategoriesBlock>(64);
        private TagBlockList<PrtInfoBlock> prtInfoList = new TagBlockList<PrtInfoBlock>(1);
        private TagBlockList<SectionRenderLeavesBlock> sectionRenderLeavesList = new TagBlockList<SectionRenderLeavesBlock>(255);
        [FieldAttribute("name*", typeof(StringId))]
        public StringId Name;
        [FieldAttribute("flags*", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [FieldAttribute("import info*", typeof(TagBlock))]
        [BlockAttribute("import info", 1, typeof(GlobalTagImportInfoBlock))]
        public TagBlock ImportInfo;
        [FieldAttribute("compression info*", typeof(TagBlock))]
        [BlockAttribute("compression info", 1, typeof(GlobalGeometryCompressionInfoBlock))]
        public TagBlock CompressionInfo;
        [FieldAttribute("regions*", typeof(TagBlock))]
        [BlockAttribute("region", 16, typeof(RenderModelRegionBlock))]
        public TagBlock Regions;
        [FieldAttribute("sections*", typeof(TagBlock))]
        [BlockAttribute("render_model_section_block", 255, typeof(RenderModelSectionBlock))]
        public TagBlock Sections;
        [FieldAttribute("invalid section pair bits*", typeof(TagBlock))]
        [BlockAttribute("bitvector", 1013, typeof(RenderModelInvalidSectionPairsBlock))]
        public TagBlock InvalidSectionPairBits;
        [FieldAttribute("section groups*", typeof(TagBlock))]
        [BlockAttribute("section group", 6, typeof(RenderModelSectionGroupBlock))]
        public TagBlock SectionGroups;
        [FieldAttribute("L1 section group index*:(super low)", typeof(Byte))]
        public Byte L1SectionGroupIndex;
        [FieldAttribute("L2 section group index*:(low)", typeof(Byte))]
        public Byte L2SectionGroupIndex;
        [FieldAttribute("L3 section group index*:(medium)", typeof(Byte))]
        public Byte L3SectionGroupIndex;
        [FieldAttribute("L4 section group index*:(high)", typeof(Byte))]
        public Byte L4SectionGroupIndex;
        [FieldAttribute("L5 section group index*:(super high)", typeof(Byte))]
        public Byte L5SectionGroupIndex;
        [FieldAttribute("L6 section group index*:(hollywood)", typeof(Byte))]
        public Byte L6SectionGroupIndex;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("node list checksum*", typeof(Int32))]
        public Int32 NodeListChecksum;
        [FieldAttribute("nodes*", typeof(TagBlock))]
        [BlockAttribute("node", 255, typeof(RenderModelNodeBlock))]
        public TagBlock Nodes;
        [FieldAttribute("node map (OLD)*", typeof(TagBlock))]
        [BlockAttribute("index", 640, typeof(RenderModelNodeMapBlockOld))]
        public TagBlock NodeMapOld;
        [FieldAttribute("marker groups*", typeof(TagBlock))]
        [BlockAttribute("marker group", 4096, typeof(RenderModelMarkerGroupBlock))]
        public TagBlock MarkerGroups;
        [FieldAttribute("materials*", typeof(TagBlock))]
        [BlockAttribute("material", 1024, typeof(GlobalGeometryMaterialBlock))]
        public TagBlock Materials;
        [FieldAttribute("errors*", typeof(TagBlock))]
        [BlockAttribute("error report category", 64, typeof(GlobalErrorReportCategoriesBlock))]
        public TagBlock Errors;
        [FieldAttribute("don\'t draw over camera cosine angle#dont draw fp model when camera > this angle c" +
            "osine (-1,1) Sugg. -0.2. 0 disables.", typeof(Single))]
        public Single DontDrawOverCameraCosineAngle;
        [FieldAttribute("PRT info", typeof(TagBlock))]
        [BlockAttribute("prt_info_block", 1, typeof(PrtInfoBlock))]
        public TagBlock PrtInfo;
        [FieldAttribute("section render leaves", typeof(TagBlock))]
        [BlockAttribute("section_render_leaves_block", 255, typeof(SectionRenderLeavesBlock))]
        public TagBlock SectionRenderLeaves;
        public TagBlockList<GlobalTagImportInfoBlock> ImportInfoList
        {
            get
            {
                return this.importInfoList;
            }
        }
        public TagBlockList<GlobalGeometryCompressionInfoBlock> CompressionInfoList
        {
            get
            {
                return this.compressionInfoList;
            }
        }
        public TagBlockList<RenderModelRegionBlock> RegionsList
        {
            get
            {
                return this.regionsList;
            }
        }
        public TagBlockList<RenderModelSectionBlock> SectionsList
        {
            get
            {
                return this.sectionsList;
            }
        }
        public TagBlockList<RenderModelInvalidSectionPairsBlock> InvalidSectionPairBitsList
        {
            get
            {
                return this.invalidSectionPairBitsList;
            }
        }
        public TagBlockList<RenderModelSectionGroupBlock> SectionGroupsList
        {
            get
            {
                return this.sectionGroupsList;
            }
        }
        public TagBlockList<RenderModelNodeBlock> NodesList
        {
            get
            {
                return this.nodesList;
            }
        }
        public TagBlockList<RenderModelNodeMapBlockOld> NodeMapOldList
        {
            get
            {
                return this.nodeMapOldList;
            }
        }
        public TagBlockList<RenderModelMarkerGroupBlock> MarkerGroupsList
        {
            get
            {
                return this.markerGroupsList;
            }
        }
        public TagBlockList<GlobalGeometryMaterialBlock> MaterialsList
        {
            get
            {
                return this.materialsList;
            }
        }
        public TagBlockList<GlobalErrorReportCategoriesBlock> ErrorsList
        {
            get
            {
                return this.errorsList;
            }
        }
        public TagBlockList<PrtInfoBlock> PrtInfoList
        {
            get
            {
                return this.prtInfoList;
            }
        }
        public TagBlockList<SectionRenderLeavesBlock> SectionRenderLeavesList
        {
            get
            {
                return this.sectionRenderLeavesList;
            }
        }
        public override int Size
        {
            get
            {
                return 184;
            }
        }
        public override void Initialize()
        {
            this.importInfoList.Clear();
            this.compressionInfoList.Clear();
            this.regionsList.Clear();
            this.sectionsList.Clear();
            this.invalidSectionPairBitsList.Clear();
            this.sectionGroupsList.Clear();
            this.nodesList.Clear();
            this.nodeMapOldList.Clear();
            this.markerGroupsList.Clear();
            this.materialsList.Clear();
            this.errorsList.Clear();
            this.prtInfoList.Clear();
            this.sectionRenderLeavesList.Clear();
            this.Name = StringId.Zero;
            this.Flags = ((FlagsOptions)(0));
            this.EmptyString = new byte[2];
            this.EmptyString1 = new byte[4];
            this.ImportInfo = TagBlock.Zero;
            this.CompressionInfo = TagBlock.Zero;
            this.Regions = TagBlock.Zero;
            this.Sections = TagBlock.Zero;
            this.InvalidSectionPairBits = TagBlock.Zero;
            this.SectionGroups = TagBlock.Zero;
            this.L1SectionGroupIndex = 0;
            this.L2SectionGroupIndex = 0;
            this.L3SectionGroupIndex = 0;
            this.L4SectionGroupIndex = 0;
            this.L5SectionGroupIndex = 0;
            this.L6SectionGroupIndex = 0;
            this.EmptyString2 = new byte[2];
            this.NodeListChecksum = 0;
            this.Nodes = TagBlock.Zero;
            this.NodeMapOld = TagBlock.Zero;
            this.MarkerGroups = TagBlock.Zero;
            this.Materials = TagBlock.Zero;
            this.Errors = TagBlock.Zero;
            this.DontDrawOverCameraCosineAngle = 0;
            this.PrtInfo = TagBlock.Zero;
            this.SectionRenderLeaves = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Name = reader.ReadInt32();
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.EmptyString1 = reader.ReadBytes(4);
            this.ImportInfo = reader.ReadInt64();
            this.importInfoList.Read(reader, this.ImportInfo);
            this.CompressionInfo = reader.ReadInt64();
            this.compressionInfoList.Read(reader, this.CompressionInfo);
            this.Regions = reader.ReadInt64();
            this.regionsList.Read(reader, this.Regions);
            this.Sections = reader.ReadInt64();
            this.sectionsList.Read(reader, this.Sections);
            this.InvalidSectionPairBits = reader.ReadInt64();
            this.invalidSectionPairBitsList.Read(reader, this.InvalidSectionPairBits);
            this.SectionGroups = reader.ReadInt64();
            this.sectionGroupsList.Read(reader, this.SectionGroups);
            this.L1SectionGroupIndex = reader.ReadByte();
            this.L2SectionGroupIndex = reader.ReadByte();
            this.L3SectionGroupIndex = reader.ReadByte();
            this.L4SectionGroupIndex = reader.ReadByte();
            this.L5SectionGroupIndex = reader.ReadByte();
            this.L6SectionGroupIndex = reader.ReadByte();
            this.EmptyString2 = reader.ReadBytes(2);
            this.NodeListChecksum = reader.ReadInt32();
            this.Nodes = reader.ReadInt64();
            this.nodesList.Read(reader, this.Nodes);
            this.NodeMapOld = reader.ReadInt64();
            this.nodeMapOldList.Read(reader, this.NodeMapOld);
            this.MarkerGroups = reader.ReadInt64();
            this.markerGroupsList.Read(reader, this.MarkerGroups);
            this.Materials = reader.ReadInt64();
            this.materialsList.Read(reader, this.Materials);
            this.Errors = reader.ReadInt64();
            this.errorsList.Read(reader, this.Errors);
            this.DontDrawOverCameraCosineAngle = reader.ReadSingle();
            this.PrtInfo = reader.ReadInt64();
            this.prtInfoList.Read(reader, this.PrtInfo);
            this.SectionRenderLeaves = reader.ReadInt64();
            this.sectionRenderLeavesList.Read(reader, this.SectionRenderLeaves);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(596, 4)]
        public sealed class GlobalTagImportInfoBlock : AbideTagBlock
        {
            private TagBlockList<TagImportFileBlock> filesList = new TagBlockList<TagImportFileBlock>(1024);
            [FieldAttribute("build*", typeof(Int32))]
            public Int32 Build;
            [FieldAttribute("version*", typeof(String256))]
            public String256 Version;
            [FieldAttribute("import date*", typeof(String32))]
            public String32 ImportDate;
            [FieldAttribute("culprit*", typeof(String32))]
            public String32 Culprit;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(96)]
            public Byte[] EmptyString;
            [FieldAttribute("import time*", typeof(String32))]
            public String32 ImportTime;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("files*", typeof(TagBlock))]
            [BlockAttribute("import file", 1024, typeof(TagImportFileBlock))]
            public TagBlock Files;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(128)]
            public Byte[] EmptyString2;
            public TagBlockList<TagImportFileBlock> FilesList
            {
                get
                {
                    return this.filesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 596;
                }
            }
            public override void Initialize()
            {
                this.filesList.Clear();
                this.Build = 0;
                this.Version = String256.Empty;
                this.ImportDate = String32.Empty;
                this.Culprit = String32.Empty;
                this.EmptyString = new byte[96];
                this.ImportTime = String32.Empty;
                this.EmptyString1 = new byte[4];
                this.Files = TagBlock.Zero;
                this.EmptyString2 = new byte[128];
            }
            public override void Read(BinaryReader reader)
            {
                this.Build = reader.ReadInt32();
                this.Version = reader.Read<String256>();
                this.ImportDate = reader.Read<String32>();
                this.Culprit = reader.Read<String32>();
                this.EmptyString = reader.ReadBytes(96);
                this.ImportTime = reader.Read<String32>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Files = reader.ReadInt64();
                this.filesList.Read(reader, this.Files);
                this.EmptyString2 = reader.ReadBytes(128);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(540, 4)]
            public sealed class TagImportFileBlock : AbideTagBlock
            {
                private DataList zippedDataList = new DataList(134217728);
                [FieldAttribute("path*", typeof(String256))]
                public String256 Path;
                [FieldAttribute("modification date*", typeof(String32))]
                public String32 ModificationDate;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(88)]
                public Byte[] EmptyString1;
                [FieldAttribute("checksum*:crc32", typeof(Int32))]
                public Int32 Checksum;
                [FieldAttribute("size*:bytes", typeof(Int32))]
                public Int32 Size1;
                [FieldAttribute("zipped data*", typeof(TagBlock))]
                [DataAttribute(134217728)]
                public TagBlock ZippedData;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(128)]
                public Byte[] EmptyString2;
                public DataList ZippedDataList
                {
                    get
                    {
                        return this.zippedDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 540;
                    }
                }
                public override void Initialize()
                {
                    this.zippedDataList.Clear();
                    this.Path = String256.Empty;
                    this.ModificationDate = String32.Empty;
                    this.EmptyString = new byte[8];
                    this.EmptyString1 = new byte[88];
                    this.Checksum = 0;
                    this.Size1 = 0;
                    this.ZippedData = TagBlock.Zero;
                    this.EmptyString2 = new byte[128];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Path = reader.Read<String256>();
                    this.ModificationDate = reader.Read<String32>();
                    this.EmptyString = reader.ReadBytes(8);
                    this.EmptyString1 = reader.ReadBytes(88);
                    this.Checksum = reader.ReadInt32();
                    this.Size1 = reader.ReadInt32();
                    this.ZippedData = reader.ReadInt64();
                    this.EmptyString2 = reader.ReadBytes(128);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(56, 4)]
        public sealed class GlobalGeometryCompressionInfoBlock : AbideTagBlock
        {
            public override int Size
            {
                get
                {
                    return 56;
                }
            }
            public override void Initialize()
            {
            }
            public override void Read(BinaryReader reader)
            {
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class RenderModelRegionBlock : AbideTagBlock
        {
            private TagBlockList<RenderModelPermutationBlock> permutationsList = new TagBlockList<RenderModelPermutationBlock>(32);
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("node map offset (OLD)*", typeof(Int16))]
            public Int16 NodeMapOffsetOld;
            [FieldAttribute("node map size (OLD)*", typeof(Int16))]
            public Int16 NodeMapSizeOld;
            [FieldAttribute("permutations*", typeof(TagBlock))]
            [BlockAttribute("permutation", 32, typeof(RenderModelPermutationBlock))]
            public TagBlock Permutations;
            public TagBlockList<RenderModelPermutationBlock> PermutationsList
            {
                get
                {
                    return this.permutationsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.permutationsList.Clear();
                this.Name = StringId.Zero;
                this.NodeMapOffsetOld = 0;
                this.NodeMapSizeOld = 0;
                this.Permutations = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.NodeMapOffsetOld = reader.ReadInt16();
                this.NodeMapSizeOld = reader.ReadInt16();
                this.Permutations = reader.ReadInt64();
                this.permutationsList.Read(reader, this.Permutations);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class RenderModelPermutationBlock : AbideTagBlock
            {
                [FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("L1 section index*:(super low)", typeof(Int16))]
                public Int16 L1SectionIndex;
                [FieldAttribute("L2 section index*:(low)", typeof(Int16))]
                public Int16 L2SectionIndex;
                [FieldAttribute("L3 section index*:(medium)", typeof(Int16))]
                public Int16 L3SectionIndex;
                [FieldAttribute("L4 section index*:(high)", typeof(Int16))]
                public Int16 L4SectionIndex;
                [FieldAttribute("L5 section index*:(super high)", typeof(Int16))]
                public Int16 L5SectionIndex;
                [FieldAttribute("L6 section index*:(hollywood)", typeof(Int16))]
                public Int16 L6SectionIndex;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.L1SectionIndex = 0;
                    this.L2SectionIndex = 0;
                    this.L3SectionIndex = 0;
                    this.L4SectionIndex = 0;
                    this.L5SectionIndex = 0;
                    this.L6SectionIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.L1SectionIndex = reader.ReadInt16();
                    this.L2SectionIndex = reader.ReadInt16();
                    this.L3SectionIndex = reader.ReadInt16();
                    this.L4SectionIndex = reader.ReadInt16();
                    this.L5SectionIndex = reader.ReadInt16();
                    this.L6SectionIndex = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(104, 4)]
        public sealed class RenderModelSectionBlock : AbideTagBlock
        {
            private TagBlockList<RenderModelSectionDataBlock> sectionDataList = new TagBlockList<RenderModelSectionDataBlock>(1);
            [FieldAttribute("global_geometry_classification_enum_definition", typeof(GlobalGeometryClassificationEnumDefinitionOptions))]
            [OptionsAttribute(typeof(GlobalGeometryClassificationEnumDefinitionOptions), false)]
            public GlobalGeometryClassificationEnumDefinitionOptions GlobalGeometryClassificationEnumDefinition;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("section info*", typeof(GlobalGeometrySectionInfoStructBlock))]
            public GlobalGeometrySectionInfoStructBlock SectionInfo;
            [FieldAttribute("rigid node*", typeof(Int16))]
            public Int16 RigidNode;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("section data*", typeof(TagBlock))]
            [BlockAttribute("render_model_section_data_block", 1, typeof(RenderModelSectionDataBlock))]
            public TagBlock SectionData;
            [FieldAttribute("geometry block info*", typeof(GlobalGeometryBlockInfoStructBlock))]
            public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
            public TagBlockList<RenderModelSectionDataBlock> SectionDataList
            {
                get
                {
                    return this.sectionDataList;
                }
            }
            public override int Size
            {
                get
                {
                    return 104;
                }
            }
            public override void Initialize()
            {
                this.sectionDataList.Clear();
                this.GlobalGeometryClassificationEnumDefinition = ((GlobalGeometryClassificationEnumDefinitionOptions)(0));
                this.EmptyString = new byte[2];
                this.SectionInfo = new GlobalGeometrySectionInfoStructBlock();
                this.RigidNode = 0;
                this.Flags = ((FlagsOptions)(0));
                this.SectionData = TagBlock.Zero;
                this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.GlobalGeometryClassificationEnumDefinition = ((GlobalGeometryClassificationEnumDefinitionOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.SectionInfo = reader.ReadDataStructure<GlobalGeometrySectionInfoStructBlock>();
                this.RigidNode = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.SectionData = reader.ReadInt64();
                this.sectionDataList.Read(reader, this.SectionData);
                this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(180, 4)]
            public sealed class RenderModelSectionDataBlock : AbideTagBlock
            {
                private TagBlockList<RenderModelNodeMapBlock> nodeMapList = new TagBlockList<RenderModelNodeMapBlock>(40);
                [FieldAttribute("section*", typeof(GlobalGeometrySectionStructBlock))]
                public GlobalGeometrySectionStructBlock Section;
                [FieldAttribute("point data*", typeof(GlobalGeometryPointDataStructBlock))]
                public GlobalGeometryPointDataStructBlock PointData;
                [FieldAttribute("node map*", typeof(TagBlock))]
                [BlockAttribute("index", 40, typeof(RenderModelNodeMapBlock))]
                public TagBlock NodeMap;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                public TagBlockList<RenderModelNodeMapBlock> NodeMapList
                {
                    get
                    {
                        return this.nodeMapList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 180;
                    }
                }
                public override void Initialize()
                {
                    this.nodeMapList.Clear();
                    this.Section = new GlobalGeometrySectionStructBlock();
                    this.PointData = new GlobalGeometryPointDataStructBlock();
                    this.NodeMap = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Section = reader.ReadDataStructure<GlobalGeometrySectionStructBlock>();
                    this.PointData = reader.ReadDataStructure<GlobalGeometryPointDataStructBlock>();
                    this.NodeMap = reader.ReadInt64();
                    this.nodeMapList.Read(reader, this.NodeMap);
                    this.EmptyString = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(1, 4)]
                public sealed class RenderModelNodeMapBlock : AbideTagBlock
                {
                    [FieldAttribute("node index*", typeof(Byte))]
                    public Byte NodeIndex;
                    public override int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public override void Initialize()
                    {
                        this.NodeIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.NodeIndex = reader.ReadByte();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(108, 4)]
                public sealed class GlobalGeometrySectionStructBlock : AbideTagBlock
                {
                    private DataList visibilityMoppCodeList = new DataList(393216);
                    private TagBlockList<GlobalGeometryPartBlockNew> partsList = new TagBlockList<GlobalGeometryPartBlockNew>(255);
                    private TagBlockList<GlobalSubpartsBlock> subpartsList = new TagBlockList<GlobalSubpartsBlock>(32768);
                    private TagBlockList<GlobalVisibilityBoundsBlock> visibilityBoundsList = new TagBlockList<GlobalVisibilityBoundsBlock>(32768);
                    private TagBlockList<GlobalGeometrySectionRawVertexBlock> rawVerticesList = new TagBlockList<GlobalGeometrySectionRawVertexBlock>(32767);
                    private TagBlockList<GlobalGeometrySectionStripIndexBlock> stripIndicesList = new TagBlockList<GlobalGeometrySectionStripIndexBlock>(65535);
                    private TagBlockList<GlobalGeometrySectionVertexBufferBlock> vertexBuffersList = new TagBlockList<GlobalGeometrySectionVertexBufferBlock>(512);
                    [FieldAttribute("Parts*", typeof(TagBlock))]
                    [BlockAttribute("part", 255, typeof(GlobalGeometryPartBlockNew))]
                    public TagBlock Parts;
                    [FieldAttribute("Subparts*", typeof(TagBlock))]
                    [BlockAttribute("subparts", 32768, typeof(GlobalSubpartsBlock))]
                    public TagBlock Subparts;
                    [FieldAttribute("Visibility Bounds*", typeof(TagBlock))]
                    [BlockAttribute("visibility bounds", 32768, typeof(GlobalVisibilityBoundsBlock))]
                    public TagBlock VisibilityBounds;
                    [FieldAttribute("Raw Vertices*", typeof(TagBlock))]
                    [BlockAttribute("vertex", 32767, typeof(GlobalGeometrySectionRawVertexBlock))]
                    public TagBlock RawVertices;
                    [FieldAttribute("Strip Indices*", typeof(TagBlock))]
                    [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                    public TagBlock StripIndices;
                    [FieldAttribute("Visibility mopp Code*", typeof(TagBlock))]
                    [DataAttribute(393216)]
                    public TagBlock VisibilityMoppCode;
                    [FieldAttribute("mopp Reorder Table*", typeof(TagBlock))]
                    [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                    public TagBlock MoppReorderTable;
                    [FieldAttribute("Vertex Buffers*", typeof(TagBlock))]
                    [BlockAttribute("vertex buffer", 512, typeof(GlobalGeometrySectionVertexBufferBlock))]
                    public TagBlock VertexBuffers;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    public DataList VisibilityMoppCodeList
                    {
                        get
                        {
                            return this.visibilityMoppCodeList;
                        }
                    }
                    public TagBlockList<GlobalGeometryPartBlockNew> PartsList
                    {
                        get
                        {
                            return this.partsList;
                        }
                    }
                    public TagBlockList<GlobalSubpartsBlock> SubpartsList
                    {
                        get
                        {
                            return this.subpartsList;
                        }
                    }
                    public TagBlockList<GlobalVisibilityBoundsBlock> VisibilityBoundsList
                    {
                        get
                        {
                            return this.visibilityBoundsList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionRawVertexBlock> RawVerticesList
                    {
                        get
                        {
                            return this.rawVerticesList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionStripIndexBlock> StripIndicesList
                    {
                        get
                        {
                            return this.stripIndicesList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionVertexBufferBlock> VertexBuffersList
                    {
                        get
                        {
                            return this.vertexBuffersList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 108;
                        }
                    }
                    public override void Initialize()
                    {
                        this.visibilityMoppCodeList.Clear();
                        this.partsList.Clear();
                        this.subpartsList.Clear();
                        this.visibilityBoundsList.Clear();
                        this.rawVerticesList.Clear();
                        this.stripIndicesList.Clear();
                        this.vertexBuffersList.Clear();
                        this.Parts = TagBlock.Zero;
                        this.Subparts = TagBlock.Zero;
                        this.VisibilityBounds = TagBlock.Zero;
                        this.RawVertices = TagBlock.Zero;
                        this.StripIndices = TagBlock.Zero;
                        this.VisibilityMoppCode = TagBlock.Zero;
                        this.MoppReorderTable = TagBlock.Zero;
                        this.VertexBuffers = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Parts = reader.ReadInt64();
                        this.partsList.Read(reader, this.Parts);
                        this.Subparts = reader.ReadInt64();
                        this.subpartsList.Read(reader, this.Subparts);
                        this.VisibilityBounds = reader.ReadInt64();
                        this.visibilityBoundsList.Read(reader, this.VisibilityBounds);
                        this.RawVertices = reader.ReadInt64();
                        this.rawVerticesList.Read(reader, this.RawVertices);
                        this.StripIndices = reader.ReadInt64();
                        this.stripIndicesList.Read(reader, this.StripIndices);
                        this.VisibilityMoppCode = reader.ReadInt64();
                        this.MoppReorderTable = reader.ReadInt64();
                        this.visibilityMoppCodeList.Read(reader, this.MoppReorderTable);
                        this.VertexBuffers = reader.ReadInt64();
                        this.vertexBuffersList.Read(reader, this.VertexBuffers);
                        this.EmptyString = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(72, 4)]
                    public sealed class GlobalGeometryPartBlockNew : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("Flags*", typeof(FlagsOptions))]
                        [OptionsAttribute(typeof(FlagsOptions), true)]
                        public FlagsOptions Flags;
                        [FieldAttribute("Material*", typeof(Int16))]
                        public Int16 Material;
                        [FieldAttribute("Strip Start Index*", typeof(Int16))]
                        public Int16 StripStartIndex;
                        [FieldAttribute("Strip Length*", typeof(Int16))]
                        public Int16 StripLength;
                        [FieldAttribute("First Subpart Index*", typeof(Int16))]
                        public Int16 FirstSubpartIndex;
                        [FieldAttribute("Subpart Count*", typeof(Int16))]
                        public Int16 SubpartCount;
                        [FieldAttribute("Max Nodes/Vertex*", typeof(Byte))]
                        public Byte MaxNodesvertex;
                        [FieldAttribute("Contributing Compound Node Count*", typeof(Byte))]
                        public Byte ContributingCompoundNodeCount;
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(3, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        [FieldAttribute("lod mipmap magic number*", typeof(Single))]
                        public Single LodMipmapMagicNumber;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(24)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 72;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.Flags = ((FlagsOptions)(0));
                            this.Material = 0;
                            this.StripStartIndex = 0;
                            this.StripLength = 0;
                            this.FirstSubpartIndex = 0;
                            this.SubpartCount = 0;
                            this.MaxNodesvertex = 0;
                            this.ContributingCompoundNodeCount = 0;
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[3];
                            this.LodMipmapMagicNumber = 0;
                            this.EmptyString = new byte[24];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadInt16()));
                            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                            this.Material = reader.ReadInt16();
                            this.StripStartIndex = reader.ReadInt16();
                            this.StripLength = reader.ReadInt16();
                            this.FirstSubpartIndex = reader.ReadInt16();
                            this.SubpartCount = reader.ReadInt16();
                            this.MaxNodesvertex = reader.ReadByte();
                            this.ContributingCompoundNodeCount = reader.ReadByte();
                            this.Position = reader.Read<Vector3>();
                            this.LodMipmapMagicNumber = reader.ReadSingle();
                            this.EmptyString = reader.ReadBytes(24);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public enum TypeOptions : Int16
                        {
                            NotDrawn = 0,
                            OpaqueShadowOnly = 1,
                            OpaqueShadowCasting = 2,
                            OpaqueNonshadowing = 3,
                            Transparent = 4,
                            LightmapOnly = 5,
                        }
                        public enum FlagsOptions : Int16
                        {
                            Decalable = 1,
                            NewPartTypes = 2,
                            DislikesPhotons = 4,
                            OverrideTriangleList = 8,
                            IgnoredByLightmapper = 16,
                        }
                    }
                    [FieldSetAttribute(8, 4)]
                    public sealed class GlobalSubpartsBlock : AbideTagBlock
                    {
                        [FieldAttribute("indices_start_index*", typeof(Int16))]
                        public Int16 IndicesStartIndex;
                        [FieldAttribute("indices_length*", typeof(Int16))]
                        public Int16 IndicesLength;
                        [FieldAttribute("visibility_bounds_index*", typeof(Int16))]
                        public Int16 VisibilityBoundsIndex;
                        [FieldAttribute("Part Index*", typeof(Int16))]
                        public Int16 PartIndex;
                        public override int Size
                        {
                            get
                            {
                                return 8;
                            }
                        }
                        public override void Initialize()
                        {
                            this.IndicesStartIndex = 0;
                            this.IndicesLength = 0;
                            this.VisibilityBoundsIndex = 0;
                            this.PartIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.IndicesStartIndex = reader.ReadInt16();
                            this.IndicesLength = reader.ReadInt16();
                            this.VisibilityBoundsIndex = reader.ReadInt16();
                            this.PartIndex = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(20, 4)]
                    public sealed class GlobalVisibilityBoundsBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position x*", typeof(Single))]
                        public Single PositionX;
                        [FieldAttribute("Position y*", typeof(Single))]
                        public Single PositionY;
                        [FieldAttribute("Position z*", typeof(Single))]
                        public Single PositionZ;
                        [FieldAttribute("Radius*", typeof(Single))]
                        public Single Radius;
                        [FieldAttribute("Node 0*", typeof(Byte))]
                        public Byte Node0;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 20;
                            }
                        }
                        public override void Initialize()
                        {
                            this.PositionX = 0;
                            this.PositionY = 0;
                            this.PositionZ = 0;
                            this.Radius = 0;
                            this.Node0 = 0;
                            this.EmptyString = new byte[3];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.PositionX = reader.ReadSingle();
                            this.PositionY = reader.ReadSingle();
                            this.PositionZ = reader.ReadSingle();
                            this.Radius = reader.ReadSingle();
                            this.Node0 = reader.ReadByte();
                            this.EmptyString = reader.ReadBytes(3);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(196, 4)]
                    public sealed class GlobalGeometrySectionRawVertexBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices (OLD)*", typeof(NodeIndicesOldElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesOldElement))]
                        public NodeIndicesOldElement[] NodeIndicesOld;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        [FieldAttribute("Node Indices (NEW)*", typeof(NodeIndicesNewElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesNewElement))]
                        public NodeIndicesNewElement[] NodeIndicesNew;
                        [FieldAttribute("Use New Node Indices*", typeof(Int32))]
                        public Int32 UseNewNodeIndices;
                        [FieldAttribute("Adjusted Compound Node Index*", typeof(Int32))]
                        public Int32 AdjustedCompoundNodeIndex;
                        [FieldAttribute("texcoord*", typeof(Vector2))]
                        public Vector2 Texcoord;
                        [FieldAttribute("Normal*", typeof(Vector3))]
                        public Vector3 Normal;
                        [FieldAttribute("Binormal*", typeof(Vector3))]
                        public Vector3 Binormal;
                        [FieldAttribute("Tangent*", typeof(Vector3))]
                        public Vector3 Tangent;
                        [FieldAttribute("Anisotropic Binormal*", typeof(Vector3))]
                        public Vector3 AnisotropicBinormal;
                        [FieldAttribute("Secondary texcoord*", typeof(Vector2))]
                        public Vector2 SecondaryTexcoord;
                        [FieldAttribute("Primary Lightmap Color", typeof(ColorRgbF))]
                        public ColorRgbF PrimaryLightmapColor;
                        [FieldAttribute("Primary Lightmap texcoord", typeof(Vector2))]
                        public Vector2 PrimaryLightmapTexcoord;
                        [FieldAttribute("Primary Lightmap Incident Direction", typeof(Vector3))]
                        public Vector3 PrimaryLightmapIncidentDirection;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(12)]
                        public Byte[] EmptyString;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(8)]
                        public Byte[] EmptyString1;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(12)]
                        public Byte[] EmptyString2;
                        public override int Size
                        {
                            get
                            {
                                return 196;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndicesOld = new NodeIndicesOldElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                            this.NodeIndicesNew = new NodeIndicesNewElement[4];
                            this.UseNewNodeIndices = 0;
                            this.AdjustedCompoundNodeIndex = 0;
                            this.Texcoord = Vector2.Zero;
                            this.Normal = Vector3.Zero;
                            this.Binormal = Vector3.Zero;
                            this.Tangent = Vector3.Zero;
                            this.AnisotropicBinormal = Vector3.Zero;
                            this.SecondaryTexcoord = Vector2.Zero;
                            this.PrimaryLightmapColor = ColorRgbF.Zero;
                            this.PrimaryLightmapTexcoord = Vector2.Zero;
                            this.PrimaryLightmapIncidentDirection = Vector3.Zero;
                            this.EmptyString = new byte[12];
                            this.EmptyString1 = new byte[8];
                            this.EmptyString2 = new byte[12];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.UseNewNodeIndices = reader.ReadInt32();
                            this.AdjustedCompoundNodeIndex = reader.ReadInt32();
                            this.Texcoord = reader.Read<Vector2>();
                            this.Normal = reader.Read<Vector3>();
                            this.Binormal = reader.Read<Vector3>();
                            this.Tangent = reader.Read<Vector3>();
                            this.AnisotropicBinormal = reader.Read<Vector3>();
                            this.SecondaryTexcoord = reader.Read<Vector2>();
                            this.PrimaryLightmapColor = reader.Read<ColorRgbF>();
                            this.PrimaryLightmapTexcoord = reader.Read<Vector2>();
                            this.PrimaryLightmapIncidentDirection = reader.Read<Vector3>();
                            this.EmptyString = reader.ReadBytes(12);
                            this.EmptyString1 = reader.ReadBytes(8);
                            this.EmptyString2 = reader.ReadBytes(12);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesOldElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (OLD)*", typeof(Int32))]
                            public Int32 NodeIndexOld;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexOld = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexOld = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("node_weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeIndicesNewElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (NEW)*", typeof(Int32))]
                            public Int32 NodeIndexNew;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexNew = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexNew = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [FieldSetAttribute(2, 4)]
                    public sealed class GlobalGeometrySectionStripIndexBlock : AbideTagBlock
                    {
                        [FieldAttribute("Index*", typeof(Int16))]
                        public Int16 Index;
                        public override int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Index = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Index = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class GlobalGeometrySectionVertexBufferBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(56, 4)]
                public sealed class GlobalGeometryPointDataStructBlock : AbideTagBlock
                {
                    private DataList runtimePointDataList = new DataList(1048544);
                    private TagBlockList<GlobalGeometryRawPointBlock> rawPointsList = new TagBlockList<GlobalGeometryRawPointBlock>(32767);
                    private TagBlockList<GlobalGeometryRigidPointGroupBlock> rigidPointGroupsList = new TagBlockList<GlobalGeometryRigidPointGroupBlock>(32767);
                    private TagBlockList<GlobalGeometryPointDataIndexBlock> vertexPointIndicesList = new TagBlockList<GlobalGeometryPointDataIndexBlock>(32767);
                    [FieldAttribute("Raw Points*", typeof(TagBlock))]
                    [BlockAttribute("point", 32767, typeof(GlobalGeometryRawPointBlock))]
                    public TagBlock RawPoints;
                    [FieldAttribute("Runtime Point Data*", typeof(TagBlock))]
                    [DataAttribute(1048544)]
                    public TagBlock RuntimePointData;
                    [FieldAttribute("Rigid Point Groups*", typeof(TagBlock))]
                    [BlockAttribute("rigid point group", 32767, typeof(GlobalGeometryRigidPointGroupBlock))]
                    public TagBlock RigidPointGroups;
                    [FieldAttribute("Vertex-Point Indices*", typeof(TagBlock))]
                    [BlockAttribute("index", 32767, typeof(GlobalGeometryPointDataIndexBlock))]
                    public TagBlock VertexPointIndices;
                    public DataList RuntimePointDataList
                    {
                        get
                        {
                            return this.runtimePointDataList;
                        }
                    }
                    public TagBlockList<GlobalGeometryRawPointBlock> RawPointsList
                    {
                        get
                        {
                            return this.rawPointsList;
                        }
                    }
                    public TagBlockList<GlobalGeometryRigidPointGroupBlock> RigidPointGroupsList
                    {
                        get
                        {
                            return this.rigidPointGroupsList;
                        }
                    }
                    public TagBlockList<GlobalGeometryPointDataIndexBlock> VertexPointIndicesList
                    {
                        get
                        {
                            return this.vertexPointIndicesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 56;
                        }
                    }
                    public override void Initialize()
                    {
                        this.runtimePointDataList.Clear();
                        this.rawPointsList.Clear();
                        this.rigidPointGroupsList.Clear();
                        this.vertexPointIndicesList.Clear();
                        this.RawPoints = TagBlock.Zero;
                        this.RuntimePointData = TagBlock.Zero;
                        this.RigidPointGroups = TagBlock.Zero;
                        this.VertexPointIndices = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.RawPoints = reader.ReadInt64();
                        this.rawPointsList.Read(reader, this.RawPoints);
                        this.RuntimePointData = reader.ReadInt64();
                        this.RigidPointGroups = reader.ReadInt64();
                        this.rigidPointGroupsList.Read(reader, this.RigidPointGroups);
                        this.VertexPointIndices = reader.ReadInt64();
                        this.vertexPointIndicesList.Read(reader, this.VertexPointIndices);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(68, 4)]
                    public sealed class GlobalGeometryRawPointBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices (OLD)*", typeof(NodeIndicesOldElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesOldElement))]
                        public NodeIndicesOldElement[] NodeIndicesOld;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        [FieldAttribute("Node Indices (NEW)*", typeof(NodeIndicesNewElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesNewElement))]
                        public NodeIndicesNewElement[] NodeIndicesNew;
                        [FieldAttribute("Use New Node Indices*", typeof(Int32))]
                        public Int32 UseNewNodeIndices;
                        [FieldAttribute("Adjusted Compound Node Index*", typeof(Int32))]
                        public Int32 AdjustedCompoundNodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 68;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndicesOld = new NodeIndicesOldElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                            this.NodeIndicesNew = new NodeIndicesNewElement[4];
                            this.UseNewNodeIndices = 0;
                            this.AdjustedCompoundNodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.UseNewNodeIndices = reader.ReadInt32();
                            this.AdjustedCompoundNodeIndex = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesOldElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (OLD)*", typeof(Int32))]
                            public Int32 NodeIndexOld;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexOld = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexOld = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("node_weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeIndicesNewElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (NEW)*", typeof(Int32))]
                            public Int32 NodeIndexNew;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexNew = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexNew = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [FieldSetAttribute(4, 4)]
                    public sealed class GlobalGeometryRigidPointGroupBlock : AbideTagBlock
                    {
                        [FieldAttribute("Rigid Node Index*", typeof(Byte))]
                        public Byte RigidNodeIndex;
                        [FieldAttribute("Nodes/Point*", typeof(Byte))]
                        public Byte Nodespoint;
                        [FieldAttribute("Point Count*", typeof(Int16))]
                        public Int16 PointCount;
                        public override int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public override void Initialize()
                        {
                            this.RigidNodeIndex = 0;
                            this.Nodespoint = 0;
                            this.PointCount = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.RigidNodeIndex = reader.ReadByte();
                            this.Nodespoint = reader.ReadByte();
                            this.PointCount = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(2, 4)]
                    public sealed class GlobalGeometryPointDataIndexBlock : AbideTagBlock
                    {
                        [FieldAttribute("Index*", typeof(Int16))]
                        public Int16 Index;
                        public override int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Index = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Index = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [FieldSetAttribute(44, 4)]
            public sealed class GlobalGeometrySectionInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<GlobalGeometryCompressionInfoBlock> emptyStringList = new TagBlockList<GlobalGeometryCompressionInfoBlock>(1);
                [FieldAttribute("Total Vertex Count*", typeof(Int16))]
                public Int16 TotalVertexCount;
                [FieldAttribute("Total Triangle Count*", typeof(Int16))]
                public Int16 TotalTriangleCount;
                [FieldAttribute("Total Part Count*", typeof(Int16))]
                public Int16 TotalPartCount;
                [FieldAttribute("Shadow-Casting Triangle Count*", typeof(Int16))]
                public Int16 ShadowCastingTriangleCount;
                [FieldAttribute("Shadow-Casting Part Count*", typeof(Int16))]
                public Int16 ShadowCastingPartCount;
                [FieldAttribute("Opaque Point Count*", typeof(Int16))]
                public Int16 OpaquePointCount;
                [FieldAttribute("Opaque Vertex Count*", typeof(Int16))]
                public Int16 OpaqueVertexCount;
                [FieldAttribute("Opaque Part Count*", typeof(Int16))]
                public Int16 OpaquePartCount;
                [FieldAttribute("Opaque Max Nodes/Vertex*", typeof(Byte))]
                public Byte OpaqueMaxNodesvertex;
                [FieldAttribute("Transparent Max Nodes/Vertex*", typeof(Byte))]
                public Byte TransparentMaxNodesvertex;
                [FieldAttribute("Shadow-Casting Rigid Triangle Count*", typeof(Int16))]
                public Int16 ShadowCastingRigidTriangleCount;
                [FieldAttribute("Geometry Classification*", typeof(GeometryClassificationOptions))]
                [OptionsAttribute(typeof(GeometryClassificationOptions), false)]
                public GeometryClassificationOptions GeometryClassification;
                [FieldAttribute("Geometry Compression Flags*", typeof(GeometryCompressionFlagsOptions))]
                [OptionsAttribute(typeof(GeometryCompressionFlagsOptions), true)]
                public GeometryCompressionFlagsOptions GeometryCompressionFlags;
                [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
                [BlockAttribute("compression info", 1, typeof(GlobalGeometryCompressionInfoBlock))]
                public TagBlock EmptyString;
                [FieldAttribute("Hardware Node Count*", typeof(Byte))]
                public Byte HardwareNodeCount;
                [FieldAttribute("Node Map Size*", typeof(Byte))]
                public Byte NodeMapSize;
                [FieldAttribute("Software Plane Count*", typeof(Int16))]
                public Int16 SoftwarePlaneCount;
                [FieldAttribute("total subpart_cont*", typeof(Int16))]
                public Int16 TotalSubpartCont;
                [FieldAttribute("Section Lighting Flags*", typeof(SectionLightingFlagsOptions))]
                [OptionsAttribute(typeof(SectionLightingFlagsOptions), true)]
                public SectionLightingFlagsOptions SectionLightingFlags;
                public TagBlockList<GlobalGeometryCompressionInfoBlock> EmptyStringList
                {
                    get
                    {
                        return this.emptyStringList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 44;
                    }
                }
                public override void Initialize()
                {
                    this.emptyStringList.Clear();
                    this.TotalVertexCount = 0;
                    this.TotalTriangleCount = 0;
                    this.TotalPartCount = 0;
                    this.ShadowCastingTriangleCount = 0;
                    this.ShadowCastingPartCount = 0;
                    this.OpaquePointCount = 0;
                    this.OpaqueVertexCount = 0;
                    this.OpaquePartCount = 0;
                    this.OpaqueMaxNodesvertex = 0;
                    this.TransparentMaxNodesvertex = 0;
                    this.ShadowCastingRigidTriangleCount = 0;
                    this.GeometryClassification = ((GeometryClassificationOptions)(0));
                    this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(0));
                    this.EmptyString = TagBlock.Zero;
                    this.HardwareNodeCount = 0;
                    this.NodeMapSize = 0;
                    this.SoftwarePlaneCount = 0;
                    this.TotalSubpartCont = 0;
                    this.SectionLightingFlags = ((SectionLightingFlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.TotalVertexCount = reader.ReadInt16();
                    this.TotalTriangleCount = reader.ReadInt16();
                    this.TotalPartCount = reader.ReadInt16();
                    this.ShadowCastingTriangleCount = reader.ReadInt16();
                    this.ShadowCastingPartCount = reader.ReadInt16();
                    this.OpaquePointCount = reader.ReadInt16();
                    this.OpaqueVertexCount = reader.ReadInt16();
                    this.OpaquePartCount = reader.ReadInt16();
                    this.OpaqueMaxNodesvertex = reader.ReadByte();
                    this.TransparentMaxNodesvertex = reader.ReadByte();
                    this.ShadowCastingRigidTriangleCount = reader.ReadInt16();
                    this.GeometryClassification = ((GeometryClassificationOptions)(reader.ReadInt16()));
                    this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadInt64();
                    this.emptyStringList.Read(reader, this.EmptyString);
                    this.HardwareNodeCount = reader.ReadByte();
                    this.NodeMapSize = reader.ReadByte();
                    this.SoftwarePlaneCount = reader.ReadInt16();
                    this.TotalSubpartCont = reader.ReadInt16();
                    this.SectionLightingFlags = ((SectionLightingFlagsOptions)(reader.ReadInt16()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(56, 4)]
                public sealed class GlobalGeometryCompressionInfoBlock : AbideTagBlock
                {
                    public override int Size
                    {
                        get
                        {
                            return 56;
                        }
                    }
                    public override void Initialize()
                    {
                    }
                    public override void Read(BinaryReader reader)
                    {
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum GeometryClassificationOptions : Int16
                {
                    Worldspace = 0,
                    Rigid = 1,
                    RigidBoned = 2,
                    Skinned = 3,
                    UnsupportedReimport = 4,
                }
                public enum GeometryCompressionFlagsOptions : Int16
                {
                    CompressedPosition = 1,
                    CompressedTexcoord = 2,
                    CompressedSecondaryTexcoord = 4,
                }
                public enum SectionLightingFlagsOptions : Int16
                {
                    HasLmTexcoords = 1,
                    HasLmIncRad = 2,
                    HasLmColors = 4,
                    HasLmPrt = 8,
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                [FieldAttribute("Block Offset*", typeof(Int32))]
                public Int32 BlockOffset;
                [FieldAttribute("Block Size*", typeof(Int32))]
                public Int32 BlockSize;
                [FieldAttribute("Section Data Size*", typeof(Int32))]
                public Int32 SectionDataSize;
                [FieldAttribute("Resource Data Size*", typeof(Int32))]
                public Int32 ResourceDataSize;
                [FieldAttribute("Resources*", typeof(TagBlock))]
                [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                public TagBlock Resources;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                public Int16 OwnerTagSectionOffset;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                {
                    get
                    {
                        return this.resourcesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.resourcesList.Clear();
                    this.BlockOffset = 0;
                    this.BlockSize = 0;
                    this.SectionDataSize = 0;
                    this.ResourceDataSize = 0;
                    this.Resources = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                    this.OwnerTagSectionOffset = 0;
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.BlockOffset = reader.ReadInt32();
                    this.BlockSize = reader.ReadInt32();
                    this.SectionDataSize = reader.ReadInt32();
                    this.ResourceDataSize = reader.ReadInt32();
                    this.Resources = reader.ReadInt64();
                    this.resourcesList.Read(reader, this.Resources);
                    this.EmptyString = reader.ReadBytes(4);
                    this.OwnerTagSectionOffset = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(3)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Primary Locator*", typeof(Int16))]
                    public Int16 PrimaryLocator;
                    [FieldAttribute("Secondary Locator*", typeof(Int16))]
                    public Int16 SecondaryLocator;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                    public Int32 ResourceDataOffset;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.EmptyString = new byte[3];
                        this.PrimaryLocator = 0;
                        this.SecondaryLocator = 0;
                        this.ResourceDataSize = 0;
                        this.ResourceDataOffset = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.EmptyString = reader.ReadBytes(3);
                        this.PrimaryLocator = reader.ReadInt16();
                        this.SecondaryLocator = reader.ReadInt16();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.ResourceDataOffset = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        TagBlock = 0,
                        TagData = 1,
                        VertexBuffer = 2,
                    }
                }
            }
            public enum GlobalGeometryClassificationEnumDefinitionOptions : Int16
            {
                Worldspace = 0,
                Rigid = 1,
                RigidBoned = 2,
                Skinned = 3,
                UnsupportedReimport = 4,
            }
            public enum FlagsOptions : Int16
            {
                GeometryPostprocessed = 1,
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class RenderModelInvalidSectionPairsBlock : AbideTagBlock
        {
            [FieldAttribute("bits*", typeof(Int32))]
            public Int32 Bits;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.Bits = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Bits = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class RenderModelSectionGroupBlock : AbideTagBlock
        {
            private TagBlockList<RenderModelCompoundNodeBlock> compoundNodesList = new TagBlockList<RenderModelCompoundNodeBlock>(255);
            [FieldAttribute("detail levels*", typeof(DetailLevelsOptions))]
            [OptionsAttribute(typeof(DetailLevelsOptions), true)]
            public DetailLevelsOptions DetailLevels;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("compound nodes*", typeof(TagBlock))]
            [BlockAttribute("compound node", 255, typeof(RenderModelCompoundNodeBlock))]
            public TagBlock CompoundNodes;
            public TagBlockList<RenderModelCompoundNodeBlock> CompoundNodesList
            {
                get
                {
                    return this.compoundNodesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.compoundNodesList.Clear();
                this.DetailLevels = ((DetailLevelsOptions)(0));
                this.EmptyString = new byte[2];
                this.CompoundNodes = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.DetailLevels = ((DetailLevelsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.CompoundNodes = reader.ReadInt64();
                this.compoundNodesList.Read(reader, this.CompoundNodes);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class RenderModelCompoundNodeBlock : AbideTagBlock
            {
                [FieldAttribute("node indices*", typeof(NodeIndicesElement[]))]
                [ArrayAttribute(4, typeof(NodeIndicesElement))]
                public NodeIndicesElement[] NodeIndices;
                [FieldAttribute("node weights*", typeof(NodeWeightsElement[]))]
                [ArrayAttribute(3, typeof(NodeWeightsElement))]
                public NodeWeightsElement[] NodeWeights;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.NodeIndices = new NodeIndicesElement[4];
                    this.NodeWeights = new NodeWeightsElement[3];
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public sealed class NodeIndicesElement : AbideTagBlock
                {
                    [FieldAttribute("node index*", typeof(Byte))]
                    public Byte NodeIndex;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.NodeIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.NodeIndex = reader.ReadByte();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public sealed class NodeWeightsElement : AbideTagBlock
                {
                    [FieldAttribute("node weight*", typeof(Single))]
                    public Single NodeWeight;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.NodeWeight = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.NodeWeight = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            public enum DetailLevelsOptions : Int16
            {
                L1SuperLow = 1,
                L2Low = 2,
                L3Medium = 4,
                L4High = 8,
                L5SuperHigh = 16,
                L6Hollywood = 32,
            }
        }
        [FieldSetAttribute(96, 4)]
        public sealed class RenderModelNodeBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("parent node*", typeof(Int16))]
            public Int16 ParentNode;
            [FieldAttribute("first child node*", typeof(Int16))]
            public Int16 FirstChildNode;
            [FieldAttribute("next sibling node*", typeof(Int16))]
            public Int16 NextSiblingNode;
            [FieldAttribute("import node index*", typeof(Int16))]
            public Int16 ImportNodeIndex;
            [FieldAttribute("default translation*", typeof(Vector3))]
            public Vector3 DefaultTranslation;
            [FieldAttribute("default rotation*", typeof(Quaternion))]
            public Quaternion DefaultRotation;
            [FieldAttribute("inverse forward*", typeof(Vector3))]
            public Vector3 InverseForward;
            [FieldAttribute("inverse left*", typeof(Vector3))]
            public Vector3 InverseLeft;
            [FieldAttribute("inverse up*", typeof(Vector3))]
            public Vector3 InverseUp;
            [FieldAttribute("inverse position*", typeof(Vector3))]
            public Vector3 InversePosition;
            [FieldAttribute("inverse scale*", typeof(Single))]
            public Single InverseScale;
            [FieldAttribute("distance from parent*", typeof(Single))]
            public Single DistanceFromParent;
            public override int Size
            {
                get
                {
                    return 96;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.ParentNode = 0;
                this.FirstChildNode = 0;
                this.NextSiblingNode = 0;
                this.ImportNodeIndex = 0;
                this.DefaultTranslation = Vector3.Zero;
                this.DefaultRotation = Quaternion.Zero;
                this.InverseForward = Vector3.Zero;
                this.InverseLeft = Vector3.Zero;
                this.InverseUp = Vector3.Zero;
                this.InversePosition = Vector3.Zero;
                this.InverseScale = 0;
                this.DistanceFromParent = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.ParentNode = reader.ReadInt16();
                this.FirstChildNode = reader.ReadInt16();
                this.NextSiblingNode = reader.ReadInt16();
                this.ImportNodeIndex = reader.ReadInt16();
                this.DefaultTranslation = reader.Read<Vector3>();
                this.DefaultRotation = reader.Read<Quaternion>();
                this.InverseForward = reader.Read<Vector3>();
                this.InverseLeft = reader.Read<Vector3>();
                this.InverseUp = reader.Read<Vector3>();
                this.InversePosition = reader.Read<Vector3>();
                this.InverseScale = reader.ReadSingle();
                this.DistanceFromParent = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(1, 4)]
        public sealed class RenderModelNodeMapBlockOld : AbideTagBlock
        {
            [FieldAttribute("node index*", typeof(Byte))]
            public Byte NodeIndex;
            public override int Size
            {
                get
                {
                    return 1;
                }
            }
            public override void Initialize()
            {
                this.NodeIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.NodeIndex = reader.ReadByte();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class RenderModelMarkerGroupBlock : AbideTagBlock
        {
            private TagBlockList<RenderModelMarkerBlock> markersList = new TagBlockList<RenderModelMarkerBlock>(256);
            [FieldAttribute("name^*", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("markers*", typeof(TagBlock))]
            [BlockAttribute("marker", 256, typeof(RenderModelMarkerBlock))]
            public TagBlock Markers;
            public TagBlockList<RenderModelMarkerBlock> MarkersList
            {
                get
                {
                    return this.markersList;
                }
            }
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.markersList.Clear();
                this.Name = StringId.Zero;
                this.Markers = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Markers = reader.ReadInt64();
                this.markersList.Read(reader, this.Markers);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(36, 4)]
            public sealed class RenderModelMarkerBlock : AbideTagBlock
            {
                [FieldAttribute("region index*", typeof(Byte))]
                public Byte RegionIndex;
                [FieldAttribute("permutation index*", typeof(Byte))]
                public Byte PermutationIndex;
                [FieldAttribute("node index*", typeof(Byte))]
                public Byte NodeIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("translation*", typeof(Vector3))]
                public Vector3 Translation;
                [FieldAttribute("rotation*", typeof(Quaternion))]
                public Quaternion Rotation;
                [FieldAttribute("scale", typeof(Single))]
                public Single Scale;
                public override int Size
                {
                    get
                    {
                        return 36;
                    }
                }
                public override void Initialize()
                {
                    this.RegionIndex = 0;
                    this.PermutationIndex = 0;
                    this.NodeIndex = 0;
                    this.EmptyString = new byte[1];
                    this.Translation = Vector3.Zero;
                    this.Rotation = Quaternion.Zero;
                    this.Scale = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.RegionIndex = reader.ReadByte();
                    this.PermutationIndex = reader.ReadByte();
                    this.NodeIndex = reader.ReadByte();
                    this.EmptyString = reader.ReadBytes(1);
                    this.Translation = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Quaternion>();
                    this.Scale = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class GlobalGeometryMaterialBlock : AbideTagBlock
        {
            private TagBlockList<GlobalGeometryMaterialPropertyBlock> propertiesList = new TagBlockList<GlobalGeometryMaterialPropertyBlock>(16);
            [FieldAttribute("Old Shader*", typeof(TagReference))]
            public TagReference OldShader;
            [FieldAttribute("Shader^*", typeof(TagReference))]
            public TagReference Shader;
            [FieldAttribute("Properties*", typeof(TagBlock))]
            [BlockAttribute("material property", 16, typeof(GlobalGeometryMaterialPropertyBlock))]
            public TagBlock Properties;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("Breakable Surface Index*", typeof(Byte))]
            public Byte BreakableSurfaceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(3)]
            public Byte[] EmptyString1;
            public TagBlockList<GlobalGeometryMaterialPropertyBlock> PropertiesList
            {
                get
                {
                    return this.propertiesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.propertiesList.Clear();
                this.OldShader = TagReference.Null;
                this.Shader = TagReference.Null;
                this.Properties = TagBlock.Zero;
                this.EmptyString = new byte[4];
                this.BreakableSurfaceIndex = 0;
                this.EmptyString1 = new byte[3];
            }
            public override void Read(BinaryReader reader)
            {
                this.OldShader = reader.Read<TagReference>();
                this.Shader = reader.Read<TagReference>();
                this.Properties = reader.ReadInt64();
                this.propertiesList.Read(reader, this.Properties);
                this.EmptyString = reader.ReadBytes(4);
                this.BreakableSurfaceIndex = reader.ReadByte();
                this.EmptyString1 = reader.ReadBytes(3);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class GlobalGeometryMaterialPropertyBlock : AbideTagBlock
            {
                [FieldAttribute("Type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Int Value*", typeof(Int16))]
                public Int16 IntValue;
                [FieldAttribute("Real Value*", typeof(Single))]
                public Single RealValue;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.Type = ((TypeOptions)(0));
                    this.IntValue = 0;
                    this.RealValue = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.IntValue = reader.ReadInt16();
                    this.RealValue = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Int16
                {
                    LightmapResolution = 0,
                    LightmapPower = 1,
                    LightmapHalfLife = 2,
                    LightmapDiffuseScale = 3,
                }
            }
        }
        [FieldSetAttribute(680, 4)]
        public sealed class GlobalErrorReportCategoriesBlock : AbideTagBlock
        {
            private TagBlockList<ErrorReportsBlock> reportsList = new TagBlockList<ErrorReportsBlock>(1024);
            [FieldAttribute("Name^*", typeof(String256))]
            public String256 Name;
            [FieldAttribute("Report Type*", typeof(ReportTypeOptions))]
            [OptionsAttribute(typeof(ReportTypeOptions), false)]
            public ReportTypeOptions ReportType;
            [FieldAttribute("Flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(404)]
            public Byte[] EmptyString2;
            [FieldAttribute("Reports*", typeof(TagBlock))]
            [BlockAttribute("error report", 1024, typeof(ErrorReportsBlock))]
            public TagBlock Reports;
            public TagBlockList<ErrorReportsBlock> ReportsList
            {
                get
                {
                    return this.reportsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 680;
                }
            }
            public override void Initialize()
            {
                this.reportsList.Clear();
                this.Name = String256.Empty;
                this.ReportType = ((ReportTypeOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[404];
                this.Reports = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String256>();
                this.ReportType = ((ReportTypeOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(404);
                this.Reports = reader.ReadInt64();
                this.reportsList.Read(reader, this.Reports);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(644, 4)]
            public sealed class ErrorReportsBlock : AbideTagBlock
            {
                private DataList textList = new DataList(8192);
                private TagBlockList<ErrorReportVerticesBlock> verticesList = new TagBlockList<ErrorReportVerticesBlock>(1024);
                private TagBlockList<ErrorReportVectorsBlock> vectorsList = new TagBlockList<ErrorReportVectorsBlock>(1024);
                private TagBlockList<ErrorReportLinesBlock> linesList = new TagBlockList<ErrorReportLinesBlock>(1024);
                private TagBlockList<ErrorReportTrianglesBlock> trianglesList = new TagBlockList<ErrorReportTrianglesBlock>(1024);
                private TagBlockList<ErrorReportQuadsBlock> quadsList = new TagBlockList<ErrorReportQuadsBlock>(1024);
                private TagBlockList<ErrorReportCommentsBlock> commentsList = new TagBlockList<ErrorReportCommentsBlock>(1024);
                [FieldAttribute("Type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Flags*", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Text*", typeof(TagBlock))]
                [DataAttribute(8192)]
                public TagBlock Text;
                [FieldAttribute("Source Filename*", typeof(String32))]
                public String32 SourceFilename;
                [FieldAttribute("Source Line Number*", typeof(Int32))]
                public Int32 SourceLineNumber;
                [FieldAttribute("Vertices*", typeof(TagBlock))]
                [BlockAttribute("error report vertex", 1024, typeof(ErrorReportVerticesBlock))]
                public TagBlock Vertices;
                [FieldAttribute("Vectors*", typeof(TagBlock))]
                [BlockAttribute("error report vector", 1024, typeof(ErrorReportVectorsBlock))]
                public TagBlock Vectors;
                [FieldAttribute("Lines*", typeof(TagBlock))]
                [BlockAttribute("error report line", 1024, typeof(ErrorReportLinesBlock))]
                public TagBlock Lines;
                [FieldAttribute("Triangles*", typeof(TagBlock))]
                [BlockAttribute("error report triangle", 1024, typeof(ErrorReportTrianglesBlock))]
                public TagBlock Triangles;
                [FieldAttribute("Quads*", typeof(TagBlock))]
                [BlockAttribute("error report quad", 1024, typeof(ErrorReportQuadsBlock))]
                public TagBlock Quads;
                [FieldAttribute("Comments*", typeof(TagBlock))]
                [BlockAttribute("error report comment", 1024, typeof(ErrorReportCommentsBlock))]
                public TagBlock Comments;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(380)]
                public Byte[] EmptyString;
                [FieldAttribute("Report Key*", typeof(Int32))]
                public Int32 ReportKey;
                [FieldAttribute("Node Index*", typeof(Int32))]
                public Int32 NodeIndex;
                [FieldAttribute("Color*", typeof(ColorArgbF))]
                public ColorArgbF Color;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(84)]
                public Byte[] EmptyString1;
                public DataList TextList
                {
                    get
                    {
                        return this.textList;
                    }
                }
                public TagBlockList<ErrorReportVerticesBlock> VerticesList
                {
                    get
                    {
                        return this.verticesList;
                    }
                }
                public TagBlockList<ErrorReportVectorsBlock> VectorsList
                {
                    get
                    {
                        return this.vectorsList;
                    }
                }
                public TagBlockList<ErrorReportLinesBlock> LinesList
                {
                    get
                    {
                        return this.linesList;
                    }
                }
                public TagBlockList<ErrorReportTrianglesBlock> TrianglesList
                {
                    get
                    {
                        return this.trianglesList;
                    }
                }
                public TagBlockList<ErrorReportQuadsBlock> QuadsList
                {
                    get
                    {
                        return this.quadsList;
                    }
                }
                public TagBlockList<ErrorReportCommentsBlock> CommentsList
                {
                    get
                    {
                        return this.commentsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 644;
                    }
                }
                public override void Initialize()
                {
                    this.textList.Clear();
                    this.verticesList.Clear();
                    this.vectorsList.Clear();
                    this.linesList.Clear();
                    this.trianglesList.Clear();
                    this.quadsList.Clear();
                    this.commentsList.Clear();
                    this.Type = ((TypeOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.Text = TagBlock.Zero;
                    this.SourceFilename = String32.Empty;
                    this.SourceLineNumber = 0;
                    this.Vertices = TagBlock.Zero;
                    this.Vectors = TagBlock.Zero;
                    this.Lines = TagBlock.Zero;
                    this.Triangles = TagBlock.Zero;
                    this.Quads = TagBlock.Zero;
                    this.Comments = TagBlock.Zero;
                    this.EmptyString = new byte[380];
                    this.ReportKey = 0;
                    this.NodeIndex = 0;
                    this.Color = ColorArgbF.Zero;
                    this.EmptyString1 = new byte[84];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.Text = reader.ReadInt64();
                    this.SourceFilename = reader.Read<String32>();
                    this.SourceLineNumber = reader.ReadInt32();
                    this.Vertices = reader.ReadInt64();
                    this.verticesList.Read(reader, this.Vertices);
                    this.Vectors = reader.ReadInt64();
                    this.vectorsList.Read(reader, this.Vectors);
                    this.Lines = reader.ReadInt64();
                    this.linesList.Read(reader, this.Lines);
                    this.Triangles = reader.ReadInt64();
                    this.trianglesList.Read(reader, this.Triangles);
                    this.Quads = reader.ReadInt64();
                    this.quadsList.Read(reader, this.Quads);
                    this.Comments = reader.ReadInt64();
                    this.commentsList.Read(reader, this.Comments);
                    this.EmptyString = reader.ReadBytes(380);
                    this.ReportKey = reader.ReadInt32();
                    this.NodeIndex = reader.ReadInt32();
                    this.Color = reader.Read<ColorArgbF>();
                    this.EmptyString1 = reader.ReadBytes(84);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(52, 4)]
                public sealed class ErrorReportVerticesBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Screen Size*", typeof(Single))]
                    public Single ScreenSize;
                    public override int Size
                    {
                        get
                        {
                            return 52;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.ScreenSize = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.ScreenSize = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(64, 4)]
                public sealed class ErrorReportVectorsBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Normal*", typeof(Vector3))]
                    public Vector3 Normal;
                    [FieldAttribute("Screen Length*", typeof(Single))]
                    public Single ScreenLength;
                    public override int Size
                    {
                        get
                        {
                            return 64;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.Normal = Vector3.Zero;
                        this.ScreenLength = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.Normal = reader.Read<Vector3>();
                        this.ScreenLength = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(80, 4)]
                public sealed class ErrorReportLinesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(2, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 80;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[2];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(112, 4)]
                public sealed class ErrorReportTrianglesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(3, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 112;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[3];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(144, 4)]
                public sealed class ErrorReportQuadsBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(4, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 144;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(68, 4)]
                public sealed class ErrorReportCommentsBlock : AbideTagBlock
                {
                    private DataList textList = new DataList(8192);
                    [FieldAttribute("Text*", typeof(TagBlock))]
                    [DataAttribute(8192)]
                    public TagBlock Text;
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public DataList TextList
                    {
                        get
                        {
                            return this.textList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 68;
                        }
                    }
                    public override void Initialize()
                    {
                        this.textList.Clear();
                        this.Text = TagBlock.Zero;
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Text = reader.ReadInt64();
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                public enum TypeOptions : Int16
                {
                    Silent = 0,
                    Comment = 1,
                    Warning = 2,
                    Error = 3,
                }
                public enum FlagsOptions : Int16
                {
                    Rendered = 1,
                    TangentSpace = 2,
                    Noncritical = 4,
                    LightmapLight = 8,
                    ReportKeyIsValid = 16,
                }
            }
            public enum ReportTypeOptions : Int16
            {
                Silent = 0,
                Comment = 1,
                Warning = 2,
                Error = 3,
            }
            public enum FlagsOptions : Int16
            {
                Rendered = 1,
                TangentSpace = 2,
                Noncritical = 4,
                LightmapLight = 8,
                ReportKeyIsValid = 16,
            }
        }
        [FieldSetAttribute(108, 4)]
        public sealed class PrtInfoBlock : AbideTagBlock
        {
            private TagBlockList<PrtLodInfoBlock> lodInfoList = new TagBlockList<PrtLodInfoBlock>(6);
            private TagBlockList<PrtClusterBasisBlock> clusterBasisList = new TagBlockList<PrtClusterBasisBlock>(34560);
            private TagBlockList<PrtRawPcaDataBlock> rawPcaDataList = new TagBlockList<PrtRawPcaDataBlock>(150405120);
            private TagBlockList<PrtVertexBuffersBlock> vertexBuffersList = new TagBlockList<PrtVertexBuffersBlock>(255);
            [FieldAttribute("SH Order*", typeof(Int16))]
            public Int16 ShOrder;
            [FieldAttribute("num of clusters*", typeof(Int16))]
            public Int16 NumOfClusters;
            [FieldAttribute("pca vectors per cluster*", typeof(Int16))]
            public Int16 PcaVectorsPerCluster;
            [FieldAttribute("number of rays*", typeof(Int16))]
            public Int16 NumberOfRays;
            [FieldAttribute("number of bounces*", typeof(Int16))]
            public Int16 NumberOfBounces;
            [FieldAttribute("mat index for sbsfc scattering*", typeof(Int16))]
            public Int16 MatIndexForSbsfcScattering;
            [FieldAttribute("length scale*", typeof(Single))]
            public Single LengthScale;
            [FieldAttribute("number of lods in model*", typeof(Int16))]
            public Int16 NumberOfLodsInModel;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("lod info*", typeof(TagBlock))]
            [BlockAttribute("prt lod info", 6, typeof(PrtLodInfoBlock))]
            public TagBlock LodInfo;
            [FieldAttribute("cluster basis*", typeof(TagBlock))]
            [BlockAttribute("cluster basis", 34560, typeof(PrtClusterBasisBlock))]
            public TagBlock ClusterBasis;
            [FieldAttribute("raw_pca_data*", typeof(TagBlock))]
            [BlockAttribute("raw pca data", 150405120, typeof(PrtRawPcaDataBlock))]
            public TagBlock RawPcaData;
            [FieldAttribute("vertex buffers*", typeof(TagBlock))]
            [BlockAttribute("vertex buffers", 255, typeof(PrtVertexBuffersBlock))]
            public TagBlock VertexBuffers;
            [FieldAttribute("geometry block info*", typeof(GlobalGeometryBlockInfoStructBlock))]
            public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
            public TagBlockList<PrtLodInfoBlock> LodInfoList
            {
                get
                {
                    return this.lodInfoList;
                }
            }
            public TagBlockList<PrtClusterBasisBlock> ClusterBasisList
            {
                get
                {
                    return this.clusterBasisList;
                }
            }
            public TagBlockList<PrtRawPcaDataBlock> RawPcaDataList
            {
                get
                {
                    return this.rawPcaDataList;
                }
            }
            public TagBlockList<PrtVertexBuffersBlock> VertexBuffersList
            {
                get
                {
                    return this.vertexBuffersList;
                }
            }
            public override int Size
            {
                get
                {
                    return 108;
                }
            }
            public override void Initialize()
            {
                this.lodInfoList.Clear();
                this.clusterBasisList.Clear();
                this.rawPcaDataList.Clear();
                this.vertexBuffersList.Clear();
                this.ShOrder = 0;
                this.NumOfClusters = 0;
                this.PcaVectorsPerCluster = 0;
                this.NumberOfRays = 0;
                this.NumberOfBounces = 0;
                this.MatIndexForSbsfcScattering = 0;
                this.LengthScale = 0;
                this.NumberOfLodsInModel = 0;
                this.EmptyString = new byte[2];
                this.LodInfo = TagBlock.Zero;
                this.ClusterBasis = TagBlock.Zero;
                this.RawPcaData = TagBlock.Zero;
                this.VertexBuffers = TagBlock.Zero;
                this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.ShOrder = reader.ReadInt16();
                this.NumOfClusters = reader.ReadInt16();
                this.PcaVectorsPerCluster = reader.ReadInt16();
                this.NumberOfRays = reader.ReadInt16();
                this.NumberOfBounces = reader.ReadInt16();
                this.MatIndexForSbsfcScattering = reader.ReadInt16();
                this.LengthScale = reader.ReadSingle();
                this.NumberOfLodsInModel = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.LodInfo = reader.ReadInt64();
                this.lodInfoList.Read(reader, this.LodInfo);
                this.ClusterBasis = reader.ReadInt64();
                this.clusterBasisList.Read(reader, this.ClusterBasis);
                this.RawPcaData = reader.ReadInt64();
                this.rawPcaDataList.Read(reader, this.RawPcaData);
                this.VertexBuffers = reader.ReadInt64();
                this.vertexBuffersList.Read(reader, this.VertexBuffers);
                this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class PrtLodInfoBlock : AbideTagBlock
            {
                private TagBlockList<PrtSectionInfoBlock> sectionInfoList = new TagBlockList<PrtSectionInfoBlock>(255);
                [FieldAttribute("cluster offset*", typeof(Int32))]
                public Int32 ClusterOffset;
                [FieldAttribute("section info*", typeof(TagBlock))]
                [BlockAttribute("prt section info", 255, typeof(PrtSectionInfoBlock))]
                public TagBlock SectionInfo;
                public TagBlockList<PrtSectionInfoBlock> SectionInfoList
                {
                    get
                    {
                        return this.sectionInfoList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.sectionInfoList.Clear();
                    this.ClusterOffset = 0;
                    this.SectionInfo = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ClusterOffset = reader.ReadInt32();
                    this.SectionInfo = reader.ReadInt64();
                    this.sectionInfoList.Read(reader, this.SectionInfo);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class PrtSectionInfoBlock : AbideTagBlock
                {
                    [FieldAttribute("section index*", typeof(Int32))]
                    public Int32 SectionIndex;
                    [FieldAttribute("pca data offset*", typeof(Int32))]
                    public Int32 PcaDataOffset;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SectionIndex = 0;
                        this.PcaDataOffset = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SectionIndex = reader.ReadInt32();
                        this.PcaDataOffset = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class PrtClusterBasisBlock : AbideTagBlock
            {
                [FieldAttribute("basis data", typeof(Single))]
                public Single BasisData;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.BasisData = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.BasisData = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class PrtRawPcaDataBlock : AbideTagBlock
            {
                [FieldAttribute("raw pca data", typeof(Single))]
                public Single RawPcaData;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.RawPcaData = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.RawPcaData = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(32, 4)]
            public sealed class PrtVertexBuffersBlock : AbideTagBlock
            {
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                [FieldAttribute("Block Offset*", typeof(Int32))]
                public Int32 BlockOffset;
                [FieldAttribute("Block Size*", typeof(Int32))]
                public Int32 BlockSize;
                [FieldAttribute("Section Data Size*", typeof(Int32))]
                public Int32 SectionDataSize;
                [FieldAttribute("Resource Data Size*", typeof(Int32))]
                public Int32 ResourceDataSize;
                [FieldAttribute("Resources*", typeof(TagBlock))]
                [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                public TagBlock Resources;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                public Int16 OwnerTagSectionOffset;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                {
                    get
                    {
                        return this.resourcesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.resourcesList.Clear();
                    this.BlockOffset = 0;
                    this.BlockSize = 0;
                    this.SectionDataSize = 0;
                    this.ResourceDataSize = 0;
                    this.Resources = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                    this.OwnerTagSectionOffset = 0;
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.BlockOffset = reader.ReadInt32();
                    this.BlockSize = reader.ReadInt32();
                    this.SectionDataSize = reader.ReadInt32();
                    this.ResourceDataSize = reader.ReadInt32();
                    this.Resources = reader.ReadInt64();
                    this.resourcesList.Read(reader, this.Resources);
                    this.EmptyString = reader.ReadBytes(4);
                    this.OwnerTagSectionOffset = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(3)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Primary Locator*", typeof(Int16))]
                    public Int16 PrimaryLocator;
                    [FieldAttribute("Secondary Locator*", typeof(Int16))]
                    public Int16 SecondaryLocator;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                    public Int32 ResourceDataOffset;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.EmptyString = new byte[3];
                        this.PrimaryLocator = 0;
                        this.SecondaryLocator = 0;
                        this.ResourceDataSize = 0;
                        this.ResourceDataOffset = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.EmptyString = reader.ReadBytes(3);
                        this.PrimaryLocator = reader.ReadInt16();
                        this.SecondaryLocator = reader.ReadInt16();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.ResourceDataOffset = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        TagBlock = 0,
                        TagData = 1,
                        VertexBuffer = 2,
                    }
                }
            }
        }
        [FieldSetAttribute(12, 4)]
        public sealed class SectionRenderLeavesBlock : AbideTagBlock
        {
            private TagBlockList<NodeRenderLeavesBlock> nodeRenderLeavesList = new TagBlockList<NodeRenderLeavesBlock>(64);
            [FieldAttribute("node render leaves*", typeof(TagBlock))]
            [BlockAttribute("node_render_leaves_block", 64, typeof(NodeRenderLeavesBlock))]
            public TagBlock NodeRenderLeaves;
            public TagBlockList<NodeRenderLeavesBlock> NodeRenderLeavesList
            {
                get
                {
                    return this.nodeRenderLeavesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 12;
                }
            }
            public override void Initialize()
            {
                this.nodeRenderLeavesList.Clear();
                this.NodeRenderLeaves = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.NodeRenderLeaves = reader.ReadInt64();
                this.nodeRenderLeavesList.Read(reader, this.NodeRenderLeaves);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(24, 4)]
            public sealed class NodeRenderLeavesBlock : AbideTagBlock
            {
                private TagBlockList<BspLeafBlock> collisionLeavesList = new TagBlockList<BspLeafBlock>(65536);
                private TagBlockList<BspSurfaceReferenceBlock> surfaceReferencesList = new TagBlockList<BspSurfaceReferenceBlock>(262144);
                [FieldAttribute("collision leaves*", typeof(TagBlock))]
                [BlockAttribute("bsp_leaf_block", 65536, typeof(BspLeafBlock))]
                public TagBlock CollisionLeaves;
                [FieldAttribute("surface references*", typeof(TagBlock))]
                [BlockAttribute("bsp_surface_reference_block", 262144, typeof(BspSurfaceReferenceBlock))]
                public TagBlock SurfaceReferences;
                public TagBlockList<BspLeafBlock> CollisionLeavesList
                {
                    get
                    {
                        return this.collisionLeavesList;
                    }
                }
                public TagBlockList<BspSurfaceReferenceBlock> SurfaceReferencesList
                {
                    get
                    {
                        return this.surfaceReferencesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.collisionLeavesList.Clear();
                    this.surfaceReferencesList.Clear();
                    this.CollisionLeaves = TagBlock.Zero;
                    this.SurfaceReferences = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.CollisionLeaves = reader.ReadInt64();
                    this.collisionLeavesList.Read(reader, this.CollisionLeaves);
                    this.SurfaceReferences = reader.ReadInt64();
                    this.surfaceReferencesList.Read(reader, this.SurfaceReferences);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class BspLeafBlock : AbideTagBlock
                {
                    [FieldAttribute("cluster*", typeof(Int16))]
                    public Int16 Cluster;
                    [FieldAttribute("surface reference count*", typeof(Int16))]
                    public Int16 SurfaceReferenceCount;
                    [FieldAttribute("first surface reference index*", typeof(Int32))]
                    public Int32 FirstSurfaceReferenceIndex;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Cluster = 0;
                        this.SurfaceReferenceCount = 0;
                        this.FirstSurfaceReferenceIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Cluster = reader.ReadInt16();
                        this.SurfaceReferenceCount = reader.ReadInt16();
                        this.FirstSurfaceReferenceIndex = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(8, 4)]
                public sealed class BspSurfaceReferenceBlock : AbideTagBlock
                {
                    [FieldAttribute("strip index*", typeof(Int16))]
                    public Int16 StripIndex;
                    [FieldAttribute("lightmap triangle index*", typeof(Int16))]
                    public Int16 LightmapTriangleIndex;
                    [FieldAttribute("bsp node index*", typeof(Int32))]
                    public Int32 BspNodeIndex;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.StripIndex = 0;
                        this.LightmapTriangleIndex = 0;
                        this.BspNodeIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.StripIndex = reader.ReadInt16();
                        this.LightmapTriangleIndex = reader.ReadInt16();
                        this.BspNodeIndex = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        public enum FlagsOptions : Int16
        {
            RenderModelForceThirdPersonBit = 1,
            ForceCarmackReverse = 2,
            ForceNodeMaps = 4,
            GeometryPostprocessed = 8,
        }
    }
}
#pragma warning restore CS1591
