#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(88, 4)]
    [TagGroupAttribute("user_interface_list_skin_definition", 1936419182u, 4294967293u, typeof(UserInterfaceListSkinDefinitionBlock))]
    public sealed class UserInterfaceListSkinDefinitionBlock : AbideTagBlock
    {
        private TagBlockList<SingleAnimationReferenceBlock> itemAnimationsList = new TagBlockList<SingleAnimationReferenceBlock>(7);
        private TagBlockList<TextBlockReferenceBlock> textBlocksList = new TagBlockList<TextBlockReferenceBlock>(64);
        private TagBlockList<BitmapBlockReferenceBlock> bitmapBlocksList = new TagBlockList<BitmapBlockReferenceBlock>(64);
        private TagBlockList<HudBlockReferenceBlock> hudBlocksList = new TagBlockList<HudBlockReferenceBlock>(64);
        private TagBlockList<PlayerBlockReferenceBlock> playerBlocksList = new TagBlockList<PlayerBlockReferenceBlock>(64);
        [FieldAttribute("list flags", typeof(ListFlagsOptions))]
        [OptionsAttribute(typeof(ListFlagsOptions), true)]
        public ListFlagsOptions ListFlags;
        [FieldAttribute("arrows bitmap", typeof(TagReference))]
        public TagReference ArrowsBitmap;
        [FieldAttribute("up-arrows offset:from bot-left of 1st item", typeof(Vector2))]
        public Vector2 UpArrowsOffset;
        [FieldAttribute("down-arrows offset:from bot-left of 1st item", typeof(Vector2))]
        public Vector2 DownArrowsOffset;
        [FieldAttribute("item animations", typeof(TagBlock))]
        [BlockAttribute("single_animation_reference_block", 7, typeof(SingleAnimationReferenceBlock))]
        public TagBlock ItemAnimations;
        [FieldAttribute("text blocks", typeof(TagBlock))]
        [BlockAttribute("text_block_reference_block", 64, typeof(TextBlockReferenceBlock))]
        public TagBlock TextBlocks;
        [FieldAttribute("bitmap blocks", typeof(TagBlock))]
        [BlockAttribute("bitmap_block_reference_block", 64, typeof(BitmapBlockReferenceBlock))]
        public TagBlock BitmapBlocks;
        [FieldAttribute("hud blocks", typeof(TagBlock))]
        [BlockAttribute("hud_block_reference_block", 64, typeof(HudBlockReferenceBlock))]
        public TagBlock HudBlocks;
        [FieldAttribute("player blocks", typeof(TagBlock))]
        [BlockAttribute("player_block_reference_block", 64, typeof(PlayerBlockReferenceBlock))]
        public TagBlock PlayerBlocks;
        public TagBlockList<SingleAnimationReferenceBlock> ItemAnimationsList
        {
            get
            {
                return this.itemAnimationsList;
            }
        }
        public TagBlockList<TextBlockReferenceBlock> TextBlocksList
        {
            get
            {
                return this.textBlocksList;
            }
        }
        public TagBlockList<BitmapBlockReferenceBlock> BitmapBlocksList
        {
            get
            {
                return this.bitmapBlocksList;
            }
        }
        public TagBlockList<HudBlockReferenceBlock> HudBlocksList
        {
            get
            {
                return this.hudBlocksList;
            }
        }
        public TagBlockList<PlayerBlockReferenceBlock> PlayerBlocksList
        {
            get
            {
                return this.playerBlocksList;
            }
        }
        public override int Size
        {
            get
            {
                return 88;
            }
        }
        public override void Initialize()
        {
            this.itemAnimationsList.Clear();
            this.textBlocksList.Clear();
            this.bitmapBlocksList.Clear();
            this.hudBlocksList.Clear();
            this.playerBlocksList.Clear();
            this.ListFlags = ((ListFlagsOptions)(0));
            this.ArrowsBitmap = TagReference.Null;
            this.UpArrowsOffset = Vector2.Zero;
            this.DownArrowsOffset = Vector2.Zero;
            this.ItemAnimations = TagBlock.Zero;
            this.TextBlocks = TagBlock.Zero;
            this.BitmapBlocks = TagBlock.Zero;
            this.HudBlocks = TagBlock.Zero;
            this.PlayerBlocks = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.ListFlags = ((ListFlagsOptions)(reader.ReadInt32()));
            this.ArrowsBitmap = reader.Read<TagReference>();
            this.UpArrowsOffset = reader.Read<Vector2>();
            this.DownArrowsOffset = reader.Read<Vector2>();
            this.ItemAnimations = reader.ReadInt64();
            this.itemAnimationsList.Read(reader, this.ItemAnimations);
            this.TextBlocks = reader.ReadInt64();
            this.textBlocksList.Read(reader, this.TextBlocks);
            this.BitmapBlocks = reader.ReadInt64();
            this.bitmapBlocksList.Read(reader, this.BitmapBlocks);
            this.HudBlocks = reader.ReadInt64();
            this.hudBlocksList.Read(reader, this.HudBlocks);
            this.PlayerBlocks = reader.ReadInt64();
            this.playerBlocksList.Read(reader, this.PlayerBlocks);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(20, 4)]
        public sealed class SingleAnimationReferenceBlock : AbideTagBlock
        {
            private TagBlockList<ScreenAnimationKeyframeReferenceBlock> keyframesList = new TagBlockList<ScreenAnimationKeyframeReferenceBlock>(64);
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("animation period:milliseconds", typeof(Int32))]
            public Int32 AnimationPeriod;
            [FieldAttribute("keyframes", typeof(TagBlock))]
            [BlockAttribute("screen_animation_keyframe_reference_block", 64, typeof(ScreenAnimationKeyframeReferenceBlock))]
            public TagBlock Keyframes;
            public TagBlockList<ScreenAnimationKeyframeReferenceBlock> KeyframesList
            {
                get
                {
                    return this.keyframesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.keyframesList.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.AnimationPeriod = 0;
                this.Keyframes = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.AnimationPeriod = reader.ReadInt32();
                this.Keyframes = reader.ReadInt64();
                this.keyframesList.Read(reader, this.Keyframes);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(20, 4)]
            public sealed class ScreenAnimationKeyframeReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("alpha", typeof(Single))]
                public Single Alpha;
                [FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[4];
                    this.Alpha = 0;
                    this.Position = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(4);
                    this.Alpha = reader.ReadSingle();
                    this.Position = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int32
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(44, 4)]
        public sealed class TextBlockReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("text flags", typeof(TextFlagsOptions))]
            [OptionsAttribute(typeof(TextFlagsOptions), true)]
            public TextFlagsOptions TextFlags;
            [FieldAttribute("animation index", typeof(AnimationIndexOptions))]
            [OptionsAttribute(typeof(AnimationIndexOptions), false)]
            public AnimationIndexOptions AnimationIndex;
            [FieldAttribute("intro animation delay milliseconds", typeof(Int16))]
            public Int16 IntroAnimationDelayMilliseconds;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("custom font", typeof(CustomFontOptions))]
            [OptionsAttribute(typeof(CustomFontOptions), false)]
            public CustomFontOptions CustomFont;
            [FieldAttribute("text color", typeof(ColorArgbF))]
            public ColorArgbF TextColor;
            [FieldAttribute("text bounds", typeof(Vector2))]
            public Vector2 TextBounds;
            [FieldAttribute("string id", typeof(StringId))]
            public StringId StringId;
            [FieldAttribute("render depth bias", typeof(Int16))]
            public Int16 RenderDepthBias;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 44;
                }
            }
            public override void Initialize()
            {
                this.TextFlags = ((TextFlagsOptions)(0));
                this.AnimationIndex = ((AnimationIndexOptions)(0));
                this.IntroAnimationDelayMilliseconds = 0;
                this.EmptyString = new byte[2];
                this.CustomFont = ((CustomFontOptions)(0));
                this.TextColor = ColorArgbF.Zero;
                this.TextBounds = Vector2.Zero;
                this.StringId = StringId.Zero;
                this.RenderDepthBias = 0;
                this.EmptyString1 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.TextFlags = ((TextFlagsOptions)(reader.ReadInt32()));
                this.AnimationIndex = ((AnimationIndexOptions)(reader.ReadInt16()));
                this.IntroAnimationDelayMilliseconds = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.CustomFont = ((CustomFontOptions)(reader.ReadInt16()));
                this.TextColor = reader.Read<ColorArgbF>();
                this.TextBounds = reader.Read<Vector2>();
                this.StringId = reader.ReadInt32();
                this.RenderDepthBias = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TextFlagsOptions : Int32
            {
                LeftJustifyText = 1,
                RightJustifyText = 2,
                PulsatingText = 4,
                CalloutText = 8,
                Small31CharBuffer = 16,
            }
            public enum AnimationIndexOptions : Int16
            {
                None = 0,
                _00 = 1,
                _01 = 2,
                _02 = 3,
                _03 = 4,
                _04 = 5,
                _05 = 6,
                _06 = 7,
                _07 = 8,
                _08 = 9,
                _09 = 10,
                _10 = 11,
                _11 = 12,
                _12 = 13,
                _13 = 14,
                _14 = 15,
                _15 = 16,
                _16 = 17,
                _17 = 18,
                _18 = 19,
                _19 = 20,
                _20 = 21,
                _21 = 22,
                _22 = 23,
                _23 = 24,
                _24 = 25,
                _25 = 26,
                _26 = 27,
                _27 = 28,
                _28 = 29,
                _29 = 30,
                _30 = 31,
                _31 = 32,
                _32 = 33,
                _33 = 34,
                _34 = 35,
                _35 = 36,
                _36 = 37,
                _37 = 38,
                _38 = 39,
                _39 = 40,
                _40 = 41,
                _41 = 42,
                _42 = 43,
                _43 = 44,
                _44 = 45,
                _45 = 46,
                _46 = 47,
                _47 = 48,
                _48 = 49,
                _49 = 50,
                _50 = 51,
                _51 = 52,
                _52 = 53,
                _53 = 54,
                _54 = 55,
                _55 = 56,
                _56 = 57,
                _57 = 58,
                _58 = 59,
                _59 = 60,
                _60 = 61,
                _61 = 62,
                _62 = 63,
                _63 = 64,
            }
            public enum CustomFontOptions : Int16
            {
                Terminal = 0,
                BodyText = 1,
                Title = 2,
                SuperLargeFont = 3,
                LargeBodyText = 4,
                SplitScreenHudMessage = 5,
                FullScreenHudMessage = 6,
                EnglishBodyText = 7,
                HudNumberText = 8,
                SubtitleFont = 9,
                MainMenuFont = 10,
                TextChatFont = 11,
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class BitmapBlockReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("animation index", typeof(AnimationIndexOptions))]
            [OptionsAttribute(typeof(AnimationIndexOptions), false)]
            public AnimationIndexOptions AnimationIndex;
            [FieldAttribute("intro animation delay milliseconds", typeof(Int16))]
            public Int16 IntroAnimationDelayMilliseconds;
            [FieldAttribute("bitmap blend method", typeof(BitmapBlendMethodOptions))]
            [OptionsAttribute(typeof(BitmapBlendMethodOptions), false)]
            public BitmapBlendMethodOptions BitmapBlendMethod;
            [FieldAttribute("initial sprite frame", typeof(Int16))]
            public Int16 InitialSpriteFrame;
            [FieldAttribute("top-left", typeof(Vector2))]
            public Vector2 TopLeft;
            [FieldAttribute("horiz texture wraps/second", typeof(Single))]
            public Single HorizTextureWrapssecond;
            [FieldAttribute("vert texture wraps/second", typeof(Single))]
            public Single VertTextureWrapssecond;
            [FieldAttribute("bitmap tag", typeof(TagReference))]
            public TagReference BitmapTag;
            [FieldAttribute("render depth bias", typeof(Int16))]
            public Int16 RenderDepthBias;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("sprite animation speed fps", typeof(Single))]
            public Single SpriteAnimationSpeedFps;
            [FieldAttribute("progress bottom-left", typeof(Vector2))]
            public Vector2 ProgressBottomLeft;
            [FieldAttribute("string identifier", typeof(StringId))]
            public StringId StringIdentifier;
            [FieldAttribute("progress scale", typeof(Vector2))]
            public Vector2 ProgressScale;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.AnimationIndex = ((AnimationIndexOptions)(0));
                this.IntroAnimationDelayMilliseconds = 0;
                this.BitmapBlendMethod = ((BitmapBlendMethodOptions)(0));
                this.InitialSpriteFrame = 0;
                this.TopLeft = Vector2.Zero;
                this.HorizTextureWrapssecond = 0;
                this.VertTextureWrapssecond = 0;
                this.BitmapTag = TagReference.Null;
                this.RenderDepthBias = 0;
                this.EmptyString = new byte[2];
                this.SpriteAnimationSpeedFps = 0;
                this.ProgressBottomLeft = Vector2.Zero;
                this.StringIdentifier = StringId.Zero;
                this.ProgressScale = Vector2.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.AnimationIndex = ((AnimationIndexOptions)(reader.ReadInt16()));
                this.IntroAnimationDelayMilliseconds = reader.ReadInt16();
                this.BitmapBlendMethod = ((BitmapBlendMethodOptions)(reader.ReadInt16()));
                this.InitialSpriteFrame = reader.ReadInt16();
                this.TopLeft = reader.Read<Vector2>();
                this.HorizTextureWrapssecond = reader.ReadSingle();
                this.VertTextureWrapssecond = reader.ReadSingle();
                this.BitmapTag = reader.Read<TagReference>();
                this.RenderDepthBias = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.SpriteAnimationSpeedFps = reader.ReadSingle();
                this.ProgressBottomLeft = reader.Read<Vector2>();
                this.StringIdentifier = reader.ReadInt32();
                this.ProgressScale = reader.Read<Vector2>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                IgnoreForListSkinSizeCalculation = 1,
                SwapOnRelativeListPosition = 2,
                RenderAsProgressBar = 4,
            }
            public enum AnimationIndexOptions : Int16
            {
                None = 0,
                _00 = 1,
                _01 = 2,
                _02 = 3,
                _03 = 4,
                _04 = 5,
                _05 = 6,
                _06 = 7,
                _07 = 8,
                _08 = 9,
                _09 = 10,
                _10 = 11,
                _11 = 12,
                _12 = 13,
                _13 = 14,
                _14 = 15,
                _15 = 16,
                _16 = 17,
                _17 = 18,
                _18 = 19,
                _19 = 20,
                _20 = 21,
                _21 = 22,
                _22 = 23,
                _23 = 24,
                _24 = 25,
                _25 = 26,
                _26 = 27,
                _27 = 28,
                _28 = 29,
                _29 = 30,
                _30 = 31,
                _31 = 32,
                _32 = 33,
                _33 = 34,
                _34 = 35,
                _35 = 36,
                _36 = 37,
                _37 = 38,
                _38 = 39,
                _39 = 40,
                _40 = 41,
                _41 = 42,
                _42 = 43,
                _43 = 44,
                _44 = 45,
                _45 = 46,
                _46 = 47,
                _47 = 48,
                _48 = 49,
                _49 = 50,
                _50 = 51,
                _51 = 52,
                _52 = 53,
                _53 = 54,
                _54 = 55,
                _55 = 56,
                _56 = 57,
                _57 = 58,
                _58 = 59,
                _59 = 60,
                _60 = 61,
                _61 = 62,
                _62 = 63,
                _63 = 64,
            }
            public enum BitmapBlendMethodOptions : Int16
            {
                Standard = 0,
                Multiply = 1,
                Unused = 2,
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class HudBlockReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("animation index", typeof(AnimationIndexOptions))]
            [OptionsAttribute(typeof(AnimationIndexOptions), false)]
            public AnimationIndexOptions AnimationIndex;
            [FieldAttribute("intro animation delay milliseconds", typeof(Int16))]
            public Int16 IntroAnimationDelayMilliseconds;
            [FieldAttribute("render depth bias", typeof(Int16))]
            public Int16 RenderDepthBias;
            [FieldAttribute("starting bitmap sequence index", typeof(Int16))]
            public Int16 StartingBitmapSequenceIndex;
            [FieldAttribute("bitmap", typeof(TagReference))]
            public TagReference Bitmap;
            [FieldAttribute("shader", typeof(TagReference))]
            public TagReference Shader;
            [FieldAttribute("bounds", typeof(Vector2))]
            public Vector2 Bounds;
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.AnimationIndex = ((AnimationIndexOptions)(0));
                this.IntroAnimationDelayMilliseconds = 0;
                this.RenderDepthBias = 0;
                this.StartingBitmapSequenceIndex = 0;
                this.Bitmap = TagReference.Null;
                this.Shader = TagReference.Null;
                this.Bounds = Vector2.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.AnimationIndex = ((AnimationIndexOptions)(reader.ReadInt16()));
                this.IntroAnimationDelayMilliseconds = reader.ReadInt16();
                this.RenderDepthBias = reader.ReadInt16();
                this.StartingBitmapSequenceIndex = reader.ReadInt16();
                this.Bitmap = reader.Read<TagReference>();
                this.Shader = reader.Read<TagReference>();
                this.Bounds = reader.Read<Vector2>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                IgnoreForListSkinSize = 1,
                NeedsValidRank = 2,
            }
            public enum AnimationIndexOptions : Int16
            {
                None = 0,
                _00 = 1,
                _01 = 2,
                _02 = 3,
                _03 = 4,
                _04 = 5,
                _05 = 6,
                _06 = 7,
                _07 = 8,
                _08 = 9,
                _09 = 10,
                _10 = 11,
                _11 = 12,
                _12 = 13,
                _13 = 14,
                _14 = 15,
                _15 = 16,
                _16 = 17,
                _17 = 18,
                _18 = 19,
                _19 = 20,
                _20 = 21,
                _21 = 22,
                _22 = 23,
                _23 = 24,
                _24 = 25,
                _25 = 26,
                _26 = 27,
                _27 = 28,
                _28 = 29,
                _29 = 30,
                _30 = 31,
                _31 = 32,
                _32 = 33,
                _33 = 34,
                _34 = 35,
                _35 = 36,
                _36 = 37,
                _37 = 38,
                _38 = 39,
                _39 = 40,
                _40 = 41,
                _41 = 42,
                _42 = 43,
                _43 = 44,
                _44 = 45,
                _45 = 46,
                _46 = 47,
                _47 = 48,
                _48 = 49,
                _49 = 50,
                _50 = 51,
                _51 = 52,
                _52 = 53,
                _53 = 54,
                _54 = 55,
                _55 = 56,
                _56 = 57,
                _57 = 58,
                _58 = 59,
                _59 = 60,
                _60 = 61,
                _61 = 62,
                _62 = 63,
                _63 = 64,
            }
        }
        [FieldSetAttribute(32, 4)]
        public sealed class PlayerBlockReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("skin", typeof(TagReference))]
            public TagReference Skin;
            [FieldAttribute("bottom-left", typeof(Vector2))]
            public Vector2 BottomLeft;
            [FieldAttribute("table order", typeof(TableOrderOptions))]
            [OptionsAttribute(typeof(TableOrderOptions), false)]
            public TableOrderOptions TableOrder;
            [FieldAttribute("maximum player count", typeof(Byte))]
            public Byte MaximumPlayerCount;
            [FieldAttribute("row count", typeof(Byte))]
            public Byte RowCount;
            [FieldAttribute("column count", typeof(Byte))]
            public Byte ColumnCount;
            [FieldAttribute("row height", typeof(Int16))]
            public Int16 RowHeight;
            [FieldAttribute("column width", typeof(Int16))]
            public Int16 ColumnWidth;
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[4];
                this.Skin = TagReference.Null;
                this.BottomLeft = Vector2.Zero;
                this.TableOrder = ((TableOrderOptions)(0));
                this.MaximumPlayerCount = 0;
                this.RowCount = 0;
                this.ColumnCount = 0;
                this.RowHeight = 0;
                this.ColumnWidth = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
                this.Skin = reader.Read<TagReference>();
                this.BottomLeft = reader.Read<Vector2>();
                this.TableOrder = ((TableOrderOptions)(reader.ReadByte()));
                this.MaximumPlayerCount = reader.ReadByte();
                this.RowCount = reader.ReadByte();
                this.ColumnCount = reader.ReadByte();
                this.RowHeight = reader.ReadInt16();
                this.ColumnWidth = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum TableOrderOptions : Byte
            {
                RowMajor = 0,
                ColumnMajor = 1,
            }
        }
        public enum ListFlagsOptions : Int32
        {
            Unused = 1,
        }
    }
}
#pragma warning restore CS1591
