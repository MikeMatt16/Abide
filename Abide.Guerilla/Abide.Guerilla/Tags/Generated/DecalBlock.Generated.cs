#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(188, 4)]
    [TagGroupAttribute("decal", 1684366177u, 4294967293u, typeof(DecalBlock))]
    public sealed class DecalBlock : AbideTagBlock
    {
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("type#controls how the decal wraps onto surface geometry", typeof(TypeOptions))]
        [OptionsAttribute(typeof(TypeOptions), false)]
        public TypeOptions Type;
        [FieldAttribute("layer", typeof(LayerOptions))]
        [OptionsAttribute(typeof(LayerOptions), false)]
        public LayerOptions Layer;
        [FieldAttribute("max overlapping count", typeof(Int16))]
        public Int16 MaxOverlappingCount;
        [FieldAttribute("next decal in chain", typeof(TagReference))]
        public TagReference NextDecalInChain;
        [FieldAttribute("radius overlap rejection:muliplier", typeof(Single))]
        public Single RadiusOverlapRejection;
        [FieldAttribute("color lower bounds", typeof(ColorRgbF))]
        public ColorRgbF ColorLowerBounds;
        [FieldAttribute("color upper bounds", typeof(ColorRgbF))]
        public ColorRgbF ColorUpperBounds;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(40)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString3;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString4;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString5;
        [FieldAttribute("bitmap", typeof(TagReference))]
        public TagReference Bitmap;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString6;
        [FieldAttribute("maximum sprite extent:pixels*", typeof(Single))]
        public Single MaximumSpriteExtent;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString7;
        public override int Size
        {
            get
            {
                return 188;
            }
        }
        public override void Initialize()
        {
            this.Flags = ((FlagsOptions)(0));
            this.Type = ((TypeOptions)(0));
            this.Layer = ((LayerOptions)(0));
            this.MaxOverlappingCount = 0;
            this.NextDecalInChain = TagReference.Null;
            this.RadiusOverlapRejection = 0;
            this.ColorLowerBounds = ColorRgbF.Zero;
            this.ColorUpperBounds = ColorRgbF.Zero;
            this.EmptyString = new byte[40];
            this.EmptyString1 = new byte[2];
            this.EmptyString2 = new byte[2];
            this.EmptyString3 = new byte[2];
            this.EmptyString4 = new byte[2];
            this.EmptyString5 = new byte[20];
            this.Bitmap = TagReference.Null;
            this.EmptyString6 = new byte[20];
            this.MaximumSpriteExtent = 0;
            this.EmptyString7 = new byte[4];
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.Type = ((TypeOptions)(reader.ReadInt16()));
            this.Layer = ((LayerOptions)(reader.ReadInt16()));
            this.MaxOverlappingCount = reader.ReadInt16();
            this.NextDecalInChain = reader.Read<TagReference>();
            this.RadiusOverlapRejection = reader.ReadSingle();
            this.ColorLowerBounds = reader.Read<ColorRgbF>();
            this.ColorUpperBounds = reader.Read<ColorRgbF>();
            this.EmptyString = reader.ReadBytes(40);
            this.EmptyString1 = reader.ReadBytes(2);
            this.EmptyString2 = reader.ReadBytes(2);
            this.EmptyString3 = reader.ReadBytes(2);
            this.EmptyString4 = reader.ReadBytes(2);
            this.EmptyString5 = reader.ReadBytes(20);
            this.Bitmap = reader.Read<TagReference>();
            this.EmptyString6 = reader.ReadBytes(20);
            this.MaximumSpriteExtent = reader.ReadSingle();
            this.EmptyString7 = reader.ReadBytes(4);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        public enum FlagsOptions : Int16
        {
            GeometryInheritedByNextDecalInChain = 1,
            InterpolateColorInHsv = 2,
            MoreColors = 4,
            NoRandomRotation = 8,
            Unused = 16,
            SapienSnapToAxis = 32,
            SapienIncrementalCounter = 64,
            Unused1 = 128,
            PreserveAspect = 256,
            Unused2 = 512,
        }
        public enum TypeOptions : Int16
        {
            Scratch = 0,
            Splatter = 1,
            Burn = 2,
            PaintedSign = 3,
        }
        public enum LayerOptions : Int16
        {
            LitAlphaBlendPrelight = 0,
            LitAlphaBlend = 1,
            DoubleMultiply = 2,
            Multiply = 3,
            Max = 4,
            Add = 5,
            Error = 6,
        }
    }
}
#pragma warning restore CS1591
