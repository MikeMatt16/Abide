#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(12, 4)]
    [TagGroupAttribute("multiplayer_scenario_description", 1836084345u, 4294967293u, typeof(MultiplayerScenarioDescriptionBlock))]
    public sealed class MultiplayerScenarioDescriptionBlock : AbideTagBlock
    {
        private TagBlockList<ScenarioDescriptionBlock> multiplayerScenariosList = new TagBlockList<ScenarioDescriptionBlock>(32);
        [FieldAttribute("multiplayer scenarios", typeof(TagBlock))]
        [BlockAttribute("scenario_description_block", 32, typeof(ScenarioDescriptionBlock))]
        public TagBlock MultiplayerScenarios;
        public TagBlockList<ScenarioDescriptionBlock> MultiplayerScenariosList
        {
            get
            {
                return this.multiplayerScenariosList;
            }
        }
        public override int Size
        {
            get
            {
                return 12;
            }
        }
        public override void Initialize()
        {
            this.multiplayerScenariosList.Clear();
            this.MultiplayerScenarios = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.MultiplayerScenarios = reader.ReadInt64();
            this.multiplayerScenariosList.Read(reader, this.MultiplayerScenarios);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(68, 4)]
        public sealed class ScenarioDescriptionBlock : AbideTagBlock
        {
            [FieldAttribute("descriptive bitmap", typeof(TagReference))]
            public TagReference DescriptiveBitmap;
            [FieldAttribute("displayed map name", typeof(TagReference))]
            public TagReference DisplayedMapName;
            [FieldAttribute("scenario tag directory path#this is the path to the directory containing the scen" +
                "ario tag file of the same name", typeof(String32))]
            public String32 ScenarioTagDirectoryPath;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 68;
                }
            }
            public override void Initialize()
            {
                this.DescriptiveBitmap = TagReference.Null;
                this.DisplayedMapName = TagReference.Null;
                this.ScenarioTagDirectoryPath = String32.Empty;
                this.EmptyString = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.DescriptiveBitmap = reader.Read<TagReference>();
                this.DisplayedMapName = reader.Read<TagReference>();
                this.ScenarioTagDirectoryPath = reader.Read<String32>();
                this.EmptyString = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
    }
}
#pragma warning restore CS1591
