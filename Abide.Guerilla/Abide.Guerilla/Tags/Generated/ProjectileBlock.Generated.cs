#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(348, 4)]
    [TagGroupAttribute("projectile", 1886547818u, 1868720741u, typeof(ProjectileBlock))]
    public sealed class ProjectileBlock : AbideTagBlock
    {
        private TagBlockList<ProjectileMaterialResponseBlock> materialResponsesList = new TagBlockList<ProjectileMaterialResponseBlock>(200);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("detonation timer starts", typeof(DetonationTimerStartsOptions))]
        [OptionsAttribute(typeof(DetonationTimerStartsOptions), false)]
        public DetonationTimerStartsOptions DetonationTimerStarts;
        [FieldAttribute("impact noise", typeof(ImpactNoiseOptions))]
        [OptionsAttribute(typeof(ImpactNoiseOptions), false)]
        public ImpactNoiseOptions ImpactNoise;
        [FieldAttribute("AI perception radius:world units", typeof(Single))]
        public Single AiPerceptionRadius;
        [FieldAttribute("collision radius:world units", typeof(Single))]
        public Single CollisionRadius;
        [FieldAttribute("arming time:seconds#won\'t detonate before this time elapses", typeof(Single))]
        public Single ArmingTime;
        [FieldAttribute("danger radius:world units", typeof(Single))]
        public Single DangerRadius;
        [FieldAttribute("minimum velocity:world units per second#detonates when slowed below this velocity" +
            "", typeof(Single))]
        public Single MinimumVelocity;
        [FieldAttribute("maximum range:world units#detonates after travelling this distance", typeof(Single))]
        public Single MaximumRange;
        [FieldAttribute("detonation noise", typeof(DetonationNoiseOptions))]
        [OptionsAttribute(typeof(DetonationNoiseOptions), false)]
        public DetonationNoiseOptions DetonationNoise;
        [FieldAttribute("super det. projectile count", typeof(Int16))]
        public Int16 SuperDetProjectileCount;
        [FieldAttribute("detonation started", typeof(TagReference))]
        public TagReference DetonationStarted;
        [FieldAttribute("detonation effect (airborne)", typeof(TagReference))]
        public TagReference DetonationEffectAirborne;
        [FieldAttribute("detonation effect (ground)", typeof(TagReference))]
        public TagReference DetonationEffectGround;
        [FieldAttribute("detonation damage", typeof(TagReference))]
        public TagReference DetonationDamage;
        [FieldAttribute("attached detonation damage", typeof(TagReference))]
        public TagReference AttachedDetonationDamage;
        [FieldAttribute("super detonation", typeof(TagReference))]
        public TagReference SuperDetonation;
        [FieldAttribute("your momma!", typeof(SuperDetonationDamageStructBlock))]
        public SuperDetonationDamageStructBlock YourMomma;
        [FieldAttribute("detonation sound", typeof(TagReference))]
        public TagReference DetonationSound;
        [FieldAttribute("damage reporting type", typeof(DamageReportingTypeOptions))]
        [OptionsAttribute(typeof(DamageReportingTypeOptions), false)]
        public DamageReportingTypeOptions DamageReportingType;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(3)]
        public Byte[] EmptyString;
        [FieldAttribute("super attached detonation damage", typeof(TagReference))]
        public TagReference SuperAttachedDetonationDamage;
        [FieldAttribute("material effect radius#radius within we will generate material effects", typeof(Single))]
        public Single MaterialEffectRadius;
        [FieldAttribute("flyby sound", typeof(TagReference))]
        public TagReference FlybySound;
        [FieldAttribute("impact effect", typeof(TagReference))]
        public TagReference ImpactEffect;
        [FieldAttribute("impact damage", typeof(TagReference))]
        public TagReference ImpactDamage;
        [FieldAttribute("boarding detonation time", typeof(Single))]
        public Single BoardingDetonationTime;
        [FieldAttribute("boarding detonation damage", typeof(TagReference))]
        public TagReference BoardingDetonationDamage;
        [FieldAttribute("boarding attached detonation damage", typeof(TagReference))]
        public TagReference BoardingAttachedDetonationDamage;
        [FieldAttribute("air gravity scale#the proportion of normal gravity applied to the projectile when" +
            " in air.", typeof(Single))]
        public Single AirGravityScale;
        [FieldAttribute("water gravity scale#the proportion of normal gravity applied to the projectile wh" +
            "en in water.", typeof(Single))]
        public Single WaterGravityScale;
        [FieldAttribute("initial velocity:world units per second#bullet\'s velocity when inflicting maximum" +
            " damage", typeof(Single))]
        public Single InitialVelocity;
        [FieldAttribute("final velocity:world units per second#bullet\'s velocity when inflicting minimum d" +
            "amage", typeof(Single))]
        public Single FinalVelocity;
        [FieldAttribute("blah", typeof(AngularVelocityLowerBoundStructBlock))]
        public AngularVelocityLowerBoundStructBlock Blah;
        [FieldAttribute("guided angular velocity (upper):degrees per second", typeof(Single))]
        public Single GuidedAngularVelocityUpper;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [FieldAttribute("targeted leading fraction", typeof(Single))]
        public Single TargetedLeadingFraction;
        [FieldAttribute("material responses", typeof(TagBlock))]
        [BlockAttribute("projectile_material_response_block", 200, typeof(ProjectileMaterialResponseBlock))]
        public TagBlock MaterialResponses;
        public TagBlockList<ProjectileMaterialResponseBlock> MaterialResponsesList
        {
            get
            {
                return this.materialResponsesList;
            }
        }
        public override int Size
        {
            get
            {
                return 348;
            }
        }
        public override void Initialize()
        {
            this.materialResponsesList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.DetonationTimerStarts = ((DetonationTimerStartsOptions)(0));
            this.ImpactNoise = ((ImpactNoiseOptions)(0));
            this.AiPerceptionRadius = 0;
            this.CollisionRadius = 0;
            this.ArmingTime = 0;
            this.DangerRadius = 0;
            this.MinimumVelocity = 0;
            this.MaximumRange = 0;
            this.DetonationNoise = ((DetonationNoiseOptions)(0));
            this.SuperDetProjectileCount = 0;
            this.DetonationStarted = TagReference.Null;
            this.DetonationEffectAirborne = TagReference.Null;
            this.DetonationEffectGround = TagReference.Null;
            this.DetonationDamage = TagReference.Null;
            this.AttachedDetonationDamage = TagReference.Null;
            this.SuperDetonation = TagReference.Null;
            this.YourMomma = new SuperDetonationDamageStructBlock();
            this.DetonationSound = TagReference.Null;
            this.DamageReportingType = ((DamageReportingTypeOptions)(0));
            this.EmptyString = new byte[3];
            this.SuperAttachedDetonationDamage = TagReference.Null;
            this.MaterialEffectRadius = 0;
            this.FlybySound = TagReference.Null;
            this.ImpactEffect = TagReference.Null;
            this.ImpactDamage = TagReference.Null;
            this.BoardingDetonationTime = 0;
            this.BoardingDetonationDamage = TagReference.Null;
            this.BoardingAttachedDetonationDamage = TagReference.Null;
            this.AirGravityScale = 0;
            this.WaterGravityScale = 0;
            this.InitialVelocity = 0;
            this.FinalVelocity = 0;
            this.Blah = new AngularVelocityLowerBoundStructBlock();
            this.GuidedAngularVelocityUpper = 0;
            this.EmptyString1 = new byte[4];
            this.TargetedLeadingFraction = 0;
            this.MaterialResponses = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.DetonationTimerStarts = ((DetonationTimerStartsOptions)(reader.ReadInt16()));
            this.ImpactNoise = ((ImpactNoiseOptions)(reader.ReadInt16()));
            this.AiPerceptionRadius = reader.ReadSingle();
            this.CollisionRadius = reader.ReadSingle();
            this.ArmingTime = reader.ReadSingle();
            this.DangerRadius = reader.ReadSingle();
            this.MinimumVelocity = reader.ReadSingle();
            this.MaximumRange = reader.ReadSingle();
            this.DetonationNoise = ((DetonationNoiseOptions)(reader.ReadInt16()));
            this.SuperDetProjectileCount = reader.ReadInt16();
            this.DetonationStarted = reader.Read<TagReference>();
            this.DetonationEffectAirborne = reader.Read<TagReference>();
            this.DetonationEffectGround = reader.Read<TagReference>();
            this.DetonationDamage = reader.Read<TagReference>();
            this.AttachedDetonationDamage = reader.Read<TagReference>();
            this.SuperDetonation = reader.Read<TagReference>();
            this.YourMomma = reader.ReadDataStructure<SuperDetonationDamageStructBlock>();
            this.DetonationSound = reader.Read<TagReference>();
            this.DamageReportingType = ((DamageReportingTypeOptions)(reader.ReadByte()));
            this.EmptyString = reader.ReadBytes(3);
            this.SuperAttachedDetonationDamage = reader.Read<TagReference>();
            this.MaterialEffectRadius = reader.ReadSingle();
            this.FlybySound = reader.Read<TagReference>();
            this.ImpactEffect = reader.Read<TagReference>();
            this.ImpactDamage = reader.Read<TagReference>();
            this.BoardingDetonationTime = reader.ReadSingle();
            this.BoardingDetonationDamage = reader.Read<TagReference>();
            this.BoardingAttachedDetonationDamage = reader.Read<TagReference>();
            this.AirGravityScale = reader.ReadSingle();
            this.WaterGravityScale = reader.ReadSingle();
            this.InitialVelocity = reader.ReadSingle();
            this.FinalVelocity = reader.ReadSingle();
            this.Blah = reader.ReadDataStructure<AngularVelocityLowerBoundStructBlock>();
            this.GuidedAngularVelocityUpper = reader.ReadSingle();
            this.EmptyString1 = reader.ReadBytes(4);
            this.TargetedLeadingFraction = reader.ReadSingle();
            this.MaterialResponses = reader.ReadInt64();
            this.materialResponsesList.Read(reader, this.MaterialResponses);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(112, 4)]
        public sealed class ProjectileMaterialResponseBlock : AbideTagBlock
        {
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("response", typeof(ResponseOptions))]
            [OptionsAttribute(typeof(ResponseOptions), false)]
            public ResponseOptions Response;
            [FieldAttribute("DO NOT USE (OLD effect)", typeof(TagReference))]
            public TagReference DoNotUseOldEffect;
            [FieldAttribute("material name", typeof(StringId))]
            public StringId MaterialName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("response", typeof(ResponseOptions1))]
            [OptionsAttribute(typeof(ResponseOptions1), false)]
            public ResponseOptions1 Response1;
            [FieldAttribute("flags", typeof(FlagsOptions1))]
            [OptionsAttribute(typeof(FlagsOptions1), true)]
            public FlagsOptions1 Flags1;
            [FieldAttribute("chance fraction:[0,1]", typeof(Single))]
            public Single ChanceFraction;
            [FieldAttribute("DO NOT USE (OLD effect)", typeof(TagReference))]
            public TagReference DoNotUseOldEffect1;
            [FieldAttribute("scale effects by", typeof(ScaleEffectsByOptions))]
            [OptionsAttribute(typeof(ScaleEffectsByOptions), false)]
            public ScaleEffectsByOptions ScaleEffectsBy;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("angular noise:degrees#the angle of incidence is randomly perturbed by at most thi" +
                "s amount to simulate irregularity.", typeof(Single))]
            public Single AngularNoise;
            [FieldAttribute("velocity noise:world units per second#the velocity is randomly perturbed by at mo" +
                "st this amount to simulate irregularity.", typeof(Single))]
            public Single VelocityNoise;
            [FieldAttribute("DO NOT USE (OLD detonation effect)", typeof(TagReference))]
            public TagReference DoNotUseOldDetonationEffect;
            [FieldAttribute("initial friction#the fraction of the projectile\'s velocity lost on penetration", typeof(Single))]
            public Single InitialFriction;
            [FieldAttribute("maximum distance#the maximum distance the projectile can travel through on object" +
                " of this material", typeof(Single))]
            public Single MaximumDistance;
            [FieldAttribute("parallel friction#the fraction of the projectile\'s velocity parallel to the surfa" +
                "ce lost on impact", typeof(Single))]
            public Single ParallelFriction;
            [FieldAttribute("perpendicular friction#the fraction of the projectile\'s velocity perpendicular to" +
                " the surface lost on impact", typeof(Single))]
            public Single PerpendicularFriction;
            public override int Size
            {
                get
                {
                    return 112;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.Response = ((ResponseOptions)(0));
                this.DoNotUseOldEffect = TagReference.Null;
                this.MaterialName = StringId.Zero;
                this.EmptyString = new byte[4];
                this.Response1 = ((ResponseOptions1)(0));
                this.Flags1 = ((FlagsOptions1)(0));
                this.ChanceFraction = 0;
                this.DoNotUseOldEffect1 = TagReference.Null;
                this.ScaleEffectsBy = ((ScaleEffectsByOptions)(0));
                this.EmptyString1 = new byte[2];
                this.AngularNoise = 0;
                this.VelocityNoise = 0;
                this.DoNotUseOldDetonationEffect = TagReference.Null;
                this.InitialFriction = 0;
                this.MaximumDistance = 0;
                this.ParallelFriction = 0;
                this.PerpendicularFriction = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Response = ((ResponseOptions)(reader.ReadInt16()));
                this.DoNotUseOldEffect = reader.Read<TagReference>();
                this.MaterialName = reader.ReadInt32();
                this.EmptyString = reader.ReadBytes(4);
                this.Response1 = ((ResponseOptions1)(reader.ReadInt16()));
                this.Flags1 = ((FlagsOptions1)(reader.ReadInt16()));
                this.ChanceFraction = reader.ReadSingle();
                this.DoNotUseOldEffect1 = reader.Read<TagReference>();
                this.ScaleEffectsBy = ((ScaleEffectsByOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.AngularNoise = reader.ReadSingle();
                this.VelocityNoise = reader.ReadSingle();
                this.DoNotUseOldDetonationEffect = reader.Read<TagReference>();
                this.InitialFriction = reader.ReadSingle();
                this.MaximumDistance = reader.ReadSingle();
                this.ParallelFriction = reader.ReadSingle();
                this.PerpendicularFriction = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                CannotBeOverpenetrated = 1,
            }
            public enum ResponseOptions : Int16
            {
                ImpactDetonate = 0,
                Fizzle = 1,
                Overpenetrate = 2,
                Attach = 3,
                Bounce = 4,
                BounceDud = 5,
                FizzleRicochet = 6,
            }
            public enum ResponseOptions1 : Int16
            {
                ImpactDetonate = 0,
                Fizzle = 1,
                Overpenetrate = 2,
                Attach = 3,
                Bounce = 4,
                BounceDud = 5,
                FizzleRicochet = 6,
            }
            public enum FlagsOptions1 : Int16
            {
                OnlyAgainstUnits = 1,
                NeverAgainstUnits = 2,
            }
            public enum ScaleEffectsByOptions : Int16
            {
                Damage = 0,
                Angle = 1,
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class SuperDetonationDamageStructBlock : AbideTagBlock
        {
            [FieldAttribute("super detonation damage", typeof(TagReference))]
            public TagReference SuperDetonationDamage;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.SuperDetonationDamage = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.SuperDetonationDamage = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class AngularVelocityLowerBoundStructBlock : AbideTagBlock
        {
            [FieldAttribute("guided angular velocity (lower):degrees per second", typeof(Single))]
            public Single GuidedAngularVelocityLower;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.GuidedAngularVelocityLower = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.GuidedAngularVelocityLower = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        public enum FlagsOptions : Int32
        {
            OrientedAlongVelocity = 1,
            AiMustUseBallisticAiming = 2,
            DetonationMaxTimeIfAttached = 4,
            HasSuperCombiningExplosion = 8,
            DamageScalesBasedOnDistance = 16,
            TravelsInstantaneously = 32,
            SteeringAdjustsOrientation = 64,
            DontNoiseUpSteering = 128,
            CanTrackBehindItself = 256,
            RobotronSteering = 512,
            FasterWhenOwnedByPlayer = 1024,
        }
        public enum DetonationTimerStartsOptions : Int16
        {
            Immediately = 0,
            AfterFirstBounce = 1,
            WhenAtRest = 2,
            AfterFirstBounceOffAnySurface = 3,
        }
        public enum ImpactNoiseOptions : Int16
        {
            Silent = 0,
            Medium = 1,
            Loud = 2,
            Shout = 3,
            Quiet = 4,
        }
        public enum DetonationNoiseOptions : Int16
        {
            Silent = 0,
            Medium = 1,
            Loud = 2,
            Shout = 3,
            Quiet = 4,
        }
        public enum DamageReportingTypeOptions : Byte
        {
            TehGuardians11 = 0,
            FallingDamage = 1,
            GenericCollisionDamage = 2,
            GenericMeleeDamage = 3,
            GenericExplosion = 4,
            MagnumPistol = 5,
            PlasmaPistol = 6,
            Needler = 7,
            Smg = 8,
            PlasmaRifle = 9,
            BattleRifle = 10,
            Carbine = 11,
            Shotgun = 12,
            SniperRifle = 13,
            BeamRifle = 14,
            RocketLauncher = 15,
            FlakCannon = 16,
            BruteShot = 17,
            Disintegrator = 18,
            BrutePlasmaRifle = 19,
            EnergySword = 20,
            FragGrenade = 21,
            PlasmaGrenade = 22,
            FlagMeleeDamage = 23,
            BombMeleeDamage = 24,
            BombExplosionDamage = 25,
            BallMeleeDamage = 26,
            HumanTurret = 27,
            PlasmaTurret = 28,
            Banshee = 29,
            Ghost = 30,
            Mongoose = 31,
            Scorpion = 32,
            SpectreDriver = 33,
            SpectreGunner = 34,
            WarthogDriver = 35,
            WarthogGunner = 36,
            Wraith = 37,
            Tank = 38,
            SentinelBeam = 39,
            SentinelRpg = 40,
            Teleporter = 41,
        }
    }
}
#pragma warning restore CS1591
