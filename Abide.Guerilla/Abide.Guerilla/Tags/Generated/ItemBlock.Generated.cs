#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(156, 4)]
    [TagGroupAttribute("item", 1769235821u, 1868720741u, typeof(ItemBlock))]
    public sealed class ItemBlock : AbideTagBlock
    {
        private TagBlockList<PredictedBitmapsBlock> predictedBitmapsList = new TagBlockList<PredictedBitmapsBlock>(8);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("OLD message index", typeof(Int16))]
        public Int16 OldMessageIndex;
        [FieldAttribute("sort order", typeof(Int16))]
        public Int16 SortOrder;
        [FieldAttribute("multiplayer on-ground scale", typeof(Single))]
        public Single MultiplayerOnGroundScale;
        [FieldAttribute("campaign on-ground scale", typeof(Single))]
        public Single CampaignOnGroundScale;
        [FieldAttribute("pickup message", typeof(StringId))]
        public StringId PickupMessage;
        [FieldAttribute("swap message", typeof(StringId))]
        public StringId SwapMessage;
        [FieldAttribute("pickup or dual msg", typeof(StringId))]
        public StringId PickupOrDualMsg;
        [FieldAttribute("swap or dual msg", typeof(StringId))]
        public StringId SwapOrDualMsg;
        [FieldAttribute("dual-only msg", typeof(StringId))]
        public StringId DualOnlyMsg;
        [FieldAttribute("picked up msg", typeof(StringId))]
        public StringId PickedUpMsg;
        [FieldAttribute("singluar quantity msg", typeof(StringId))]
        public StringId SingluarQuantityMsg;
        [FieldAttribute("plural quantity msg", typeof(StringId))]
        public StringId PluralQuantityMsg;
        [FieldAttribute("switch-to msg", typeof(StringId))]
        public StringId SwitchToMsg;
        [FieldAttribute("switch-to from ai msg", typeof(StringId))]
        public StringId SwitchToFromAiMsg;
        [FieldAttribute("UNUSED*", typeof(TagReference))]
        public TagReference Unused;
        [FieldAttribute("collision sound", typeof(TagReference))]
        public TagReference CollisionSound;
        [FieldAttribute("predicted bitmaps", typeof(TagBlock))]
        [BlockAttribute("predicted_bitmaps_block", 8, typeof(PredictedBitmapsBlock))]
        public TagBlock PredictedBitmaps;
        [FieldAttribute("detonation damage effect", typeof(TagReference))]
        public TagReference DetonationDamageEffect;
        [FieldAttribute("detonating effect", typeof(TagReference))]
        public TagReference DetonatingEffect;
        [FieldAttribute("detonation effect", typeof(TagReference))]
        public TagReference DetonationEffect;
        public TagBlockList<PredictedBitmapsBlock> PredictedBitmapsList
        {
            get
            {
                return this.predictedBitmapsList;
            }
        }
        public override int Size
        {
            get
            {
                return 156;
            }
        }
        public override void Initialize()
        {
            this.predictedBitmapsList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.OldMessageIndex = 0;
            this.SortOrder = 0;
            this.MultiplayerOnGroundScale = 0;
            this.CampaignOnGroundScale = 0;
            this.PickupMessage = StringId.Zero;
            this.SwapMessage = StringId.Zero;
            this.PickupOrDualMsg = StringId.Zero;
            this.SwapOrDualMsg = StringId.Zero;
            this.DualOnlyMsg = StringId.Zero;
            this.PickedUpMsg = StringId.Zero;
            this.SingluarQuantityMsg = StringId.Zero;
            this.PluralQuantityMsg = StringId.Zero;
            this.SwitchToMsg = StringId.Zero;
            this.SwitchToFromAiMsg = StringId.Zero;
            this.Unused = TagReference.Null;
            this.CollisionSound = TagReference.Null;
            this.PredictedBitmaps = TagBlock.Zero;
            this.DetonationDamageEffect = TagReference.Null;
            this.DetonatingEffect = TagReference.Null;
            this.DetonationEffect = TagReference.Null;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.OldMessageIndex = reader.ReadInt16();
            this.SortOrder = reader.ReadInt16();
            this.MultiplayerOnGroundScale = reader.ReadSingle();
            this.CampaignOnGroundScale = reader.ReadSingle();
            this.PickupMessage = reader.ReadInt32();
            this.SwapMessage = reader.ReadInt32();
            this.PickupOrDualMsg = reader.ReadInt32();
            this.SwapOrDualMsg = reader.ReadInt32();
            this.DualOnlyMsg = reader.ReadInt32();
            this.PickedUpMsg = reader.ReadInt32();
            this.SingluarQuantityMsg = reader.ReadInt32();
            this.PluralQuantityMsg = reader.ReadInt32();
            this.SwitchToMsg = reader.ReadInt32();
            this.SwitchToFromAiMsg = reader.ReadInt32();
            this.Unused = reader.Read<TagReference>();
            this.CollisionSound = reader.Read<TagReference>();
            this.PredictedBitmaps = reader.ReadInt64();
            this.predictedBitmapsList.Read(reader, this.PredictedBitmaps);
            this.DetonationDamageEffect = reader.Read<TagReference>();
            this.DetonatingEffect = reader.Read<TagReference>();
            this.DetonationEffect = reader.Read<TagReference>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(16, 4)]
        public sealed class PredictedBitmapsBlock : AbideTagBlock
        {
            [FieldAttribute("bitmap", typeof(TagReference))]
            public TagReference Bitmap;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Bitmap = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Bitmap = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        public enum FlagsOptions : Int32
        {
            AlwaysMaintainsZUp = 1,
            DestroyedByExplosions = 2,
            UnaffectedByGravity = 4,
        }
    }
}
#pragma warning restore CS1591
