#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(212, 4)]
    [TagGroupAttribute("damage_effect", 1785754657u, 4294967293u, typeof(DamageEffectBlock))]
    public sealed class DamageEffectBlock : AbideTagBlock
    {
        private TagBlockList<DamageEffectPlayerResponseBlock> playerResponsesList = new TagBlockList<DamageEffectPlayerResponseBlock>(2);
        [FieldAttribute("cutoff scale:[0,1]", typeof(Single))]
        public Single CutoffScale;
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("side effect", typeof(SideEffectOptions))]
        [OptionsAttribute(typeof(SideEffectOptions), false)]
        public SideEffectOptions SideEffect;
        [FieldAttribute("category", typeof(CategoryOptions))]
        [OptionsAttribute(typeof(CategoryOptions), false)]
        public CategoryOptions Category;
        [FieldAttribute("flags", typeof(FlagsOptions1))]
        [OptionsAttribute(typeof(FlagsOptions1), true)]
        public FlagsOptions1 Flags1;
        [FieldAttribute("AOE core radius:world units#if this is area of effect damage", typeof(Single))]
        public Single AoeCoreRadius;
        [FieldAttribute("damage lower bound", typeof(Single))]
        public Single DamageLowerBound;
        [FieldAttribute("dmg inner cone angle", typeof(Single))]
        public Single DmgInnerConeAngle;
        [FieldAttribute("blah", typeof(DamageOuterConeAngleStructBlock))]
        public DamageOuterConeAngleStructBlock Blah;
        [FieldAttribute("active camouflage damage:[0,1]#how much more visible this damage makes a player w" +
            "ho is active camouflaged", typeof(Single))]
        public Single ActiveCamouflageDamage;
        [FieldAttribute("stun:[0,1]#amount of stun added to damaged unit", typeof(Single))]
        public Single Stun;
        [FieldAttribute("maximum stun:[0,1]#damaged unit\'s stun will never exceed this amount", typeof(Single))]
        public Single MaximumStun;
        [FieldAttribute("stun time:seconds#duration of stun due to this damage", typeof(Single))]
        public Single StunTime;
        [FieldAttribute("instantaneous acceleration:[0,+inf]", typeof(Single))]
        public Single InstantaneousAcceleration;
        [FieldAttribute("rider direct damage scale", typeof(Single))]
        public Single RiderDirectDamageScale;
        [FieldAttribute("rider maximum transfer damage scale", typeof(Single))]
        public Single RiderMaximumTransferDamageScale;
        [FieldAttribute("rider minimum transfer damage scale", typeof(Single))]
        public Single RiderMinimumTransferDamageScale;
        [FieldAttribute("general_damage", typeof(StringId))]
        public StringId GeneralDamage;
        [FieldAttribute("specific_damage", typeof(StringId))]
        public StringId SpecificDamage;
        [FieldAttribute("AI stun radius:world units", typeof(Single))]
        public Single AiStunRadius;
        [FieldAttribute("shake radius", typeof(Single))]
        public Single ShakeRadius;
        [FieldAttribute("EMP radius", typeof(Single))]
        public Single EmpRadius;
        [FieldAttribute("player responses", typeof(TagBlock))]
        [BlockAttribute("damage_effect_player_response_block", 2, typeof(DamageEffectPlayerResponseBlock))]
        public TagBlock PlayerResponses;
        [FieldAttribute("duration:seconds", typeof(Single))]
        public Single Duration;
        [FieldAttribute("fade function", typeof(FadeFunctionOptions))]
        [OptionsAttribute(typeof(FadeFunctionOptions), false)]
        public FadeFunctionOptions FadeFunction;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("rotation:degrees", typeof(Single))]
        public Single Rotation;
        [FieldAttribute("pushback:world units", typeof(Single))]
        public Single Pushback;
        [FieldAttribute("duration:seconds#the effect will last for this duration.", typeof(Single))]
        public Single Duration1;
        [FieldAttribute("falloff function#a function to envelope the effect\'s magnitude over time", typeof(FalloffFunctionOptions))]
        [OptionsAttribute(typeof(FalloffFunctionOptions), false)]
        public FalloffFunctionOptions FalloffFunction;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString1;
        [FieldAttribute("random translation:world units#random translation in all directions", typeof(Single))]
        public Single RandomTranslation;
        [FieldAttribute("random rotation:degrees#random rotation in all directions", typeof(Single))]
        public Single RandomRotation;
        [FieldAttribute("wobble function#a function to perturb the effect\'s behavior over time", typeof(WobbleFunctionOptions))]
        [OptionsAttribute(typeof(WobbleFunctionOptions), false)]
        public WobbleFunctionOptions WobbleFunction;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("wobble function period:seconds", typeof(Single))]
        public Single WobbleFunctionPeriod;
        [FieldAttribute("wobble weight#a value of 0.0 signifies that the wobble function has no effect; a " +
            "value of 1.0 signifies that the effect will not be felt when the wobble function" +
            "\'s value is zero.", typeof(Single))]
        public Single WobbleWeight;
        [FieldAttribute("sound", typeof(TagReference))]
        public TagReference Sound;
        [FieldAttribute("forward velocity:world units per second", typeof(Single))]
        public Single ForwardVelocity;
        [FieldAttribute("forward radius:world units", typeof(Single))]
        public Single ForwardRadius;
        [FieldAttribute("forward exponent", typeof(Single))]
        public Single ForwardExponent;
        [FieldAttribute("outward velocity:world units per second", typeof(Single))]
        public Single OutwardVelocity;
        [FieldAttribute("outward radius:world units", typeof(Single))]
        public Single OutwardRadius;
        [FieldAttribute("outward exponent", typeof(Single))]
        public Single OutwardExponent;
        public TagBlockList<DamageEffectPlayerResponseBlock> PlayerResponsesList
        {
            get
            {
                return this.playerResponsesList;
            }
        }
        public override int Size
        {
            get
            {
                return 212;
            }
        }
        public override void Initialize()
        {
            this.playerResponsesList.Clear();
            this.CutoffScale = 0;
            this.Flags = ((FlagsOptions)(0));
            this.SideEffect = ((SideEffectOptions)(0));
            this.Category = ((CategoryOptions)(0));
            this.Flags1 = ((FlagsOptions1)(0));
            this.AoeCoreRadius = 0;
            this.DamageLowerBound = 0;
            this.DmgInnerConeAngle = 0;
            this.Blah = new DamageOuterConeAngleStructBlock();
            this.ActiveCamouflageDamage = 0;
            this.Stun = 0;
            this.MaximumStun = 0;
            this.StunTime = 0;
            this.InstantaneousAcceleration = 0;
            this.RiderDirectDamageScale = 0;
            this.RiderMaximumTransferDamageScale = 0;
            this.RiderMinimumTransferDamageScale = 0;
            this.GeneralDamage = StringId.Zero;
            this.SpecificDamage = StringId.Zero;
            this.AiStunRadius = 0;
            this.ShakeRadius = 0;
            this.EmpRadius = 0;
            this.PlayerResponses = TagBlock.Zero;
            this.Duration = 0;
            this.FadeFunction = ((FadeFunctionOptions)(0));
            this.EmptyString = new byte[2];
            this.Rotation = 0;
            this.Pushback = 0;
            this.Duration1 = 0;
            this.FalloffFunction = ((FalloffFunctionOptions)(0));
            this.EmptyString1 = new byte[2];
            this.RandomTranslation = 0;
            this.RandomRotation = 0;
            this.WobbleFunction = ((WobbleFunctionOptions)(0));
            this.EmptyString2 = new byte[2];
            this.WobbleFunctionPeriod = 0;
            this.WobbleWeight = 0;
            this.Sound = TagReference.Null;
            this.ForwardVelocity = 0;
            this.ForwardRadius = 0;
            this.ForwardExponent = 0;
            this.OutwardVelocity = 0;
            this.OutwardRadius = 0;
            this.OutwardExponent = 0;
        }
        public override void Read(BinaryReader reader)
        {
            this.CutoffScale = reader.ReadSingle();
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.SideEffect = ((SideEffectOptions)(reader.ReadInt16()));
            this.Category = ((CategoryOptions)(reader.ReadInt16()));
            this.Flags1 = ((FlagsOptions1)(reader.ReadInt32()));
            this.AoeCoreRadius = reader.ReadSingle();
            this.DamageLowerBound = reader.ReadSingle();
            this.DmgInnerConeAngle = reader.ReadSingle();
            this.Blah = reader.ReadDataStructure<DamageOuterConeAngleStructBlock>();
            this.ActiveCamouflageDamage = reader.ReadSingle();
            this.Stun = reader.ReadSingle();
            this.MaximumStun = reader.ReadSingle();
            this.StunTime = reader.ReadSingle();
            this.InstantaneousAcceleration = reader.ReadSingle();
            this.RiderDirectDamageScale = reader.ReadSingle();
            this.RiderMaximumTransferDamageScale = reader.ReadSingle();
            this.RiderMinimumTransferDamageScale = reader.ReadSingle();
            this.GeneralDamage = reader.ReadInt32();
            this.SpecificDamage = reader.ReadInt32();
            this.AiStunRadius = reader.ReadSingle();
            this.ShakeRadius = reader.ReadSingle();
            this.EmpRadius = reader.ReadSingle();
            this.PlayerResponses = reader.ReadInt64();
            this.playerResponsesList.Read(reader, this.PlayerResponses);
            this.Duration = reader.ReadSingle();
            this.FadeFunction = ((FadeFunctionOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.Rotation = reader.ReadSingle();
            this.Pushback = reader.ReadSingle();
            this.Duration1 = reader.ReadSingle();
            this.FalloffFunction = ((FalloffFunctionOptions)(reader.ReadInt16()));
            this.EmptyString1 = reader.ReadBytes(2);
            this.RandomTranslation = reader.ReadSingle();
            this.RandomRotation = reader.ReadSingle();
            this.WobbleFunction = ((WobbleFunctionOptions)(reader.ReadInt16()));
            this.EmptyString2 = reader.ReadBytes(2);
            this.WobbleFunctionPeriod = reader.ReadSingle();
            this.WobbleWeight = reader.ReadSingle();
            this.Sound = reader.Read<TagReference>();
            this.ForwardVelocity = reader.ReadSingle();
            this.ForwardRadius = reader.ReadSingle();
            this.ForwardExponent = reader.ReadSingle();
            this.OutwardVelocity = reader.ReadSingle();
            this.OutwardRadius = reader.ReadSingle();
            this.OutwardExponent = reader.ReadSingle();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(88, 4)]
        public sealed class DamageEffectPlayerResponseBlock : AbideTagBlock
        {
            [FieldAttribute("response type", typeof(ResponseTypeOptions))]
            [OptionsAttribute(typeof(ResponseTypeOptions), false)]
            public ResponseTypeOptions ResponseType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("screen flash*", typeof(ScreenFlashDefinitionStructBlock))]
            public ScreenFlashDefinitionStructBlock ScreenFlash;
            [FieldAttribute("vibration*", typeof(VibrationDefinitionStructBlock))]
            public VibrationDefinitionStructBlock Vibration;
            [FieldAttribute("sound effect", typeof(DamageEffectSoundEffectDefinitionBlock))]
            public DamageEffectSoundEffectDefinitionBlock SoundEffect;
            public override int Size
            {
                get
                {
                    return 88;
                }
            }
            public override void Initialize()
            {
                this.ResponseType = ((ResponseTypeOptions)(0));
                this.EmptyString = new byte[2];
                this.ScreenFlash = new ScreenFlashDefinitionStructBlock();
                this.Vibration = new VibrationDefinitionStructBlock();
                this.SoundEffect = new DamageEffectSoundEffectDefinitionBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.ResponseType = ((ResponseTypeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.ScreenFlash = reader.ReadDataStructure<ScreenFlashDefinitionStructBlock>();
                this.Vibration = reader.ReadDataStructure<VibrationDefinitionStructBlock>();
                this.SoundEffect = reader.ReadDataStructure<DamageEffectSoundEffectDefinitionBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class ScreenFlashDefinitionStructBlock : AbideTagBlock
            {
                [FieldAttribute("type", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("priority", typeof(PriorityOptions))]
                [OptionsAttribute(typeof(PriorityOptions), false)]
                public PriorityOptions Priority;
                [FieldAttribute("duration:seconds", typeof(Single))]
                public Single Duration;
                [FieldAttribute("fade function", typeof(FadeFunctionOptions))]
                [OptionsAttribute(typeof(FadeFunctionOptions), false)]
                public FadeFunctionOptions FadeFunction;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("maximum intensity:[0,1]", typeof(Single))]
                public Single MaximumIntensity;
                [FieldAttribute("color", typeof(ColorArgbF))]
                public ColorArgbF Color;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.Type = ((TypeOptions)(0));
                    this.Priority = ((PriorityOptions)(0));
                    this.Duration = 0;
                    this.FadeFunction = ((FadeFunctionOptions)(0));
                    this.EmptyString = new byte[2];
                    this.MaximumIntensity = 0;
                    this.Color = ColorArgbF.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Priority = ((PriorityOptions)(reader.ReadInt16()));
                    this.Duration = reader.ReadSingle();
                    this.FadeFunction = ((FadeFunctionOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.MaximumIntensity = reader.ReadSingle();
                    this.Color = reader.Read<ColorArgbF>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Int16
                {
                    None = 0,
                    Lighten = 1,
                    Darken = 2,
                    Max = 3,
                    Min = 4,
                    Invert = 5,
                    Tint = 6,
                }
                public enum PriorityOptions : Int16
                {
                    Low = 0,
                    Medium = 1,
                    High = 2,
                }
                public enum FadeFunctionOptions : Int16
                {
                    Linear = 0,
                    Late = 1,
                    VeryLate = 2,
                    Early = 3,
                    VeryEarly = 4,
                    Cosine = 5,
                    Zero = 6,
                    One = 7,
                }
            }
            [FieldSetAttribute(32, 4)]
            public sealed class VibrationDefinitionStructBlock : AbideTagBlock
            {
                [FieldAttribute("low frequency vibration", typeof(VibrationFrequencyDefinitionStructBlock))]
                public VibrationFrequencyDefinitionStructBlock LowFrequencyVibration;
                [FieldAttribute("high frequency vibration", typeof(VibrationFrequencyDefinitionStructBlock))]
                public VibrationFrequencyDefinitionStructBlock HighFrequencyVibration;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.LowFrequencyVibration = new VibrationFrequencyDefinitionStructBlock();
                    this.HighFrequencyVibration = new VibrationFrequencyDefinitionStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.LowFrequencyVibration = reader.ReadDataStructure<VibrationFrequencyDefinitionStructBlock>();
                    this.HighFrequencyVibration = reader.ReadDataStructure<VibrationFrequencyDefinitionStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class VibrationFrequencyDefinitionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("duration:seconds", typeof(Single))]
                    public Single Duration;
                    [FieldAttribute("dirty whore", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock DirtyWhore;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Duration = 0;
                        this.DirtyWhore = new MappingFunctionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Duration = reader.ReadSingle();
                        this.DirtyWhore = reader.ReadDataStructure<MappingFunctionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : AbideTagBlock
                    {
                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                        [FieldAttribute("data", typeof(TagBlock))]
                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public TagBlockList<ByteBlock> DataList
                        {
                            get
                            {
                                return this.dataList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.dataList.Clear();
                            this.Data = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Data = reader.ReadInt64();
                            this.dataList.Read(reader, this.Data);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : AbideTagBlock
                        {
                            [FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public override int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Value = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Value = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class DamageEffectSoundEffectDefinitionBlock : AbideTagBlock
            {
                [FieldAttribute("effect name", typeof(StringId))]
                public StringId EffectName;
                [FieldAttribute("duration:seconds", typeof(Single))]
                public Single Duration;
                [FieldAttribute("effect scale function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock EffectScaleFunction;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.EffectName = StringId.Zero;
                    this.Duration = 0;
                    this.EffectScaleFunction = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.EffectName = reader.ReadInt32();
                    this.Duration = reader.ReadSingle();
                    this.EffectScaleFunction = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            public enum ResponseTypeOptions : Int16
            {
                Shielded = 0,
                Unshielded = 1,
                All = 2,
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class DamageOuterConeAngleStructBlock : AbideTagBlock
        {
            [FieldAttribute("dmg outer cone angle", typeof(Single))]
            public Single DmgOuterConeAngle;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.DmgOuterConeAngle = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.DmgOuterConeAngle = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        public enum FlagsOptions : Int32
        {
            DontScaleDamageByDistance = 1,
            AreaDamagePlayersOnly = 2,
        }
        public enum SideEffectOptions : Int16
        {
            None = 0,
            Harmless = 1,
            LethalToTheUnsuspecting = 2,
            Emp = 3,
        }
        public enum CategoryOptions : Int16
        {
            None = 0,
            Falling = 1,
            Bullet = 2,
            Grenade = 3,
            HighExplosive = 4,
            Sniper = 5,
            Melee = 6,
            Flame = 7,
            MountedWeapon = 8,
            Vehicle = 9,
            Plasma = 10,
            Needle = 11,
            Shotgun = 12,
        }
        public enum FlagsOptions1 : Int32
        {
            DoesNotHurtOwner = 1,
            CanCauseHeadshots = 2,
            PingsResistantUnits = 4,
            DoesNotHurtFriends = 8,
            DoesNotPingUnits = 16,
            DetonatesExplosives = 32,
            OnlyHurtsShields = 64,
            CausesFlamingDeath = 128,
            DamageIndicatorsAlwaysPointDown = 256,
            SkipsShields = 512,
            OnlyHurtsOneInfectionForm = 1024,
            ObsoleteWasCanCauseMultiplayerHeadshots = 2048,
            InfectionFormPop = 4096,
            IgnoreSeatScaleForDirDmg = 8192,
            ForcesHardPing = 16384,
            DoesNotHurtPlayers = 32768,
        }
        public enum FadeFunctionOptions : Int16
        {
            Linear = 0,
            Late = 1,
            VeryLate = 2,
            Early = 3,
            VeryEarly = 4,
            Cosine = 5,
            Zero = 6,
            One = 7,
        }
        public enum FalloffFunctionOptions : Int16
        {
            Linear = 0,
            Late = 1,
            VeryLate = 2,
            Early = 3,
            VeryEarly = 4,
            Cosine = 5,
            Zero = 6,
            One = 7,
        }
        public enum WobbleFunctionOptions : Int16
        {
            One = 0,
            Zero = 1,
            Cosine = 2,
            CosineVariablePeriod = 3,
            DiagonalWave = 4,
            DiagonalWaveVariablePeriod = 5,
            Slide = 6,
            SlideVariablePeriod = 7,
            Noise = 8,
            Jitter = 9,
            Wander = 10,
            Spark = 11,
        }
    }
}
#pragma warning restore CS1591
