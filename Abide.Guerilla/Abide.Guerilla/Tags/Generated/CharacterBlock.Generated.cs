#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(372, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("character", 1667785074u, 4294967293u, typeof(CharacterBlock))]
    public sealed class CharacterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("Character flags", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(CharacterFlagsOptions), true)]
        public Int32 CharacterFlags;
        [Abide.Guerilla.Tags.FieldAttribute("parent character", typeof(TagReference))]
        public TagReference ParentCharacter;
        [Abide.Guerilla.Tags.FieldAttribute("unit", typeof(TagReference))]
        public TagReference Unit;
        [Abide.Guerilla.Tags.FieldAttribute("creature#Creature reference for swarm characters ONLY", typeof(TagReference))]
        public TagReference Creature;
        [Abide.Guerilla.Tags.FieldAttribute("style", typeof(TagReference))]
        public TagReference Style;
        [Abide.Guerilla.Tags.FieldAttribute("major character", typeof(TagReference))]
        public TagReference MajorCharacter;
        [Abide.Guerilla.Tags.FieldAttribute("variants", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_variants_block", 64, typeof(CharacterVariantsBlock))]
        public TagBlock Variants;
        [Abide.Guerilla.Tags.FieldAttribute("general properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_general_block", 1, typeof(CharacterGeneralBlock))]
        public TagBlock GeneralProperties;
        [Abide.Guerilla.Tags.FieldAttribute("vitality properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_vitality_block", 1, typeof(CharacterVitalityBlock))]
        public TagBlock VitalityProperties;
        [Abide.Guerilla.Tags.FieldAttribute("placement properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_placement_block", 1, typeof(CharacterPlacementBlock))]
        public TagBlock PlacementProperties;
        [Abide.Guerilla.Tags.FieldAttribute("perception properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_perception_block", 4, typeof(CharacterPerceptionBlock))]
        public TagBlock PerceptionProperties;
        [Abide.Guerilla.Tags.FieldAttribute("look properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_look_block", 1, typeof(CharacterLookBlock))]
        public TagBlock LookProperties;
        [Abide.Guerilla.Tags.FieldAttribute("movement properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_movement_block", 1, typeof(CharacterMovementBlock))]
        public TagBlock MovementProperties;
        [Abide.Guerilla.Tags.FieldAttribute("swarm properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_swarm_block", 3, typeof(CharacterSwarmBlock))]
        public TagBlock SwarmProperties;
        [Abide.Guerilla.Tags.FieldAttribute("ready properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_ready_block", 3, typeof(CharacterReadyBlock))]
        public TagBlock ReadyProperties;
        [Abide.Guerilla.Tags.FieldAttribute("engage properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_engage_block", 3, typeof(CharacterEngageBlock))]
        public TagBlock EngageProperties;
        [Abide.Guerilla.Tags.FieldAttribute("charge properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_charge_block", 3, typeof(CharacterChargeBlock))]
        public TagBlock ChargeProperties;
        [Abide.Guerilla.Tags.FieldAttribute("evasion properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_evasion_block", 3, typeof(CharacterEvasionBlock))]
        public TagBlock EvasionProperties;
        [Abide.Guerilla.Tags.FieldAttribute("cover properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_cover_block", 3, typeof(CharacterCoverBlock))]
        public TagBlock CoverProperties;
        [Abide.Guerilla.Tags.FieldAttribute("retreat properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_retreat_block", 3, typeof(CharacterRetreatBlock))]
        public TagBlock RetreatProperties;
        [Abide.Guerilla.Tags.FieldAttribute("search properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_search_block", 3, typeof(CharacterSearchBlock))]
        public TagBlock SearchProperties;
        [Abide.Guerilla.Tags.FieldAttribute("pre-search properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_presearch_block", 3, typeof(CharacterPresearchBlock))]
        public TagBlock PreSearchProperties;
        [Abide.Guerilla.Tags.FieldAttribute("idle properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_idle_block", 3, typeof(CharacterIdleBlock))]
        public TagBlock IdleProperties;
        [Abide.Guerilla.Tags.FieldAttribute("vocalization properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_vocalization_block", 1, typeof(CharacterVocalizationBlock))]
        public TagBlock VocalizationProperties;
        [Abide.Guerilla.Tags.FieldAttribute("boarding properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_boarding_block", 1, typeof(CharacterBoardingBlock))]
        public TagBlock BoardingProperties;
        [Abide.Guerilla.Tags.FieldAttribute("boss properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_boss_block", 1, typeof(CharacterBossBlock))]
        public TagBlock BossProperties;
        [Abide.Guerilla.Tags.FieldAttribute("weapons properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_weapons_block", 100, typeof(CharacterWeaponsBlock))]
        public TagBlock WeaponsProperties;
        [Abide.Guerilla.Tags.FieldAttribute("firing pattern properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_firing_pattern_properties_block", 100, typeof(CharacterFiringPatternPropertiesBlock))]
        public TagBlock FiringPatternProperties;
        [Abide.Guerilla.Tags.FieldAttribute("grenades properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_grenades_block", 10, typeof(CharacterGrenadesBlock))]
        public TagBlock GrenadesProperties;
        [Abide.Guerilla.Tags.FieldAttribute("vehicle properties", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_vehicle_block", 100, typeof(CharacterVehicleBlock))]
        public TagBlock VehicleProperties;
        public int Size
        {
            get
            {
                return 372;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
        public sealed class CharacterVariantsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("variant name^", typeof(StringId))]
            public StringId VariantName;
            [Abide.Guerilla.Tags.FieldAttribute("variant index*", typeof(Int16))]
            public Int16 VariantIndex;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("variant designator*", typeof(StringId))]
            public StringId VariantDesignator;
            public int Size
            {
                get
                {
                    return 12;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
        public sealed class CharacterGeneralBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("general flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GeneralFlagsOptions), true)]
            public Int32 GeneralFlags;
            [Abide.Guerilla.Tags.FieldAttribute("type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("scariness#the inherent scariness of the character", typeof(Single))]
            public Single Scariness;
            public int Size
            {
                get
                {
                    return 12;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum GeneralFlagsOptions
            {
                Swarm = 1,
                Flying = 2,
                DualWields = 4,
                UsesGravemind = 8,
            }
            public enum TypeOptions
            {
                Elite = 0,
                Jackal = 1,
                Grunt = 2,
                Hunter = 3,
                Engineer = 4,
                Assassin = 5,
                Player = 6,
                Marine = 7,
                Crew = 8,
                CombatForm = 9,
                InfectionForm = 10,
                CarrierForm = 11,
                Monitor = 12,
                Sentinel = 13,
                None = 14,
                MountedWeapon = 15,
                Brute = 16,
                Prophet = 17,
                Bugger = 18,
                Juggernaut = 19,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(112, 4)]
        public sealed class CharacterVitalityBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("vitality flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(VitalityFlagsOptions), true)]
            public Int32 VitalityFlags;
            [Abide.Guerilla.Tags.FieldAttribute("normal body vitality#maximum body vitality of our unit", typeof(Single))]
            public Single NormalBodyVitality;
            [Abide.Guerilla.Tags.FieldAttribute("normal shield vitality#maximum shield vitality of our unit", typeof(Single))]
            public Single NormalShieldVitality;
            [Abide.Guerilla.Tags.FieldAttribute("legendary body vitality#maximum body vitality of our unit (on legendary)", typeof(Single))]
            public Single LegendaryBodyVitality;
            [Abide.Guerilla.Tags.FieldAttribute("legendary shield vitality#maximum shield vitality of our unit (on legendary)", typeof(Single))]
            public Single LegendaryShieldVitality;
            [Abide.Guerilla.Tags.FieldAttribute("body recharge fraction#fraction of body health that can be regained after damage", typeof(Single))]
            public Single BodyRechargeFraction;
            [Abide.Guerilla.Tags.FieldAttribute("soft ping threshold (with shields)#damage necessary to trigger a soft ping when s" +
                "hields are up", typeof(Single))]
            public Single SoftPingThresholdWithShields;
            [Abide.Guerilla.Tags.FieldAttribute("soft ping threshold (no shields)#damage necessary to trigger a soft ping when shi" +
                "elds are down", typeof(Single))]
            public Single SoftPingThresholdNoShields;
            [Abide.Guerilla.Tags.FieldAttribute("soft ping min interrupt time#minimum time before a soft ping can be interrupted", typeof(Single))]
            public Single SoftPingMinInterruptTime;
            [Abide.Guerilla.Tags.FieldAttribute("hard ping threshold (with shields)#damage necessary to trigger a hard ping when s" +
                "hields are up", typeof(Single))]
            public Single HardPingThresholdWithShields;
            [Abide.Guerilla.Tags.FieldAttribute("hard ping threshold (no shields)#damage necessary to trigger a hard ping when shi" +
                "elds are down", typeof(Single))]
            public Single HardPingThresholdNoShields;
            [Abide.Guerilla.Tags.FieldAttribute("hard ping min interrupt time#minimum time before a hard ping can be interrupted", typeof(Single))]
            public Single HardPingMinInterruptTime;
            [Abide.Guerilla.Tags.FieldAttribute("current damage decay delay#current damage begins to fall after a time delay has p" +
                "assed since last the damage", typeof(Single))]
            public Single CurrentDamageDecayDelay;
            [Abide.Guerilla.Tags.FieldAttribute("current damage decay time#amount of time it would take for 100% current damage to" +
                " decay to 0", typeof(Single))]
            public Single CurrentDamageDecayTime;
            [Abide.Guerilla.Tags.FieldAttribute("recent damage decay delay#recent damage begins to fall after a time delay has pas" +
                "sed since last the damage", typeof(Single))]
            public Single RecentDamageDecayDelay;
            [Abide.Guerilla.Tags.FieldAttribute("recent damage decay time#amount of time it would take for 100% recent damage to d" +
                "ecay to 0", typeof(Single))]
            public Single RecentDamageDecayTime;
            [Abide.Guerilla.Tags.FieldAttribute("body recharge delay time#amount of time delay before a shield begins to recharge", typeof(Single))]
            public Single BodyRechargeDelayTime;
            [Abide.Guerilla.Tags.FieldAttribute("body recharge time#amount of time for shields to recharge completely", typeof(Single))]
            public Single BodyRechargeTime;
            [Abide.Guerilla.Tags.FieldAttribute("shield recharge delay time#amount of time delay before a shield begins to recharg" +
                "e", typeof(Single))]
            public Single ShieldRechargeDelayTime;
            [Abide.Guerilla.Tags.FieldAttribute("shield recharge time#amount of time for shields to recharge completely", typeof(Single))]
            public Single ShieldRechargeTime;
            [Abide.Guerilla.Tags.FieldAttribute("stun threshold#stun level that triggers the stunned state (currently, the \'stunne" +
                "d\' behavior)", typeof(Single))]
            public Single StunThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("extended shield damage threshold:%#Amount of shield damage sustained before it is" +
                " considered \'extended\'", typeof(Single))]
            public Single ExtendedShieldDamageThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("extended body damage threshold:%#Amount of body damage sustained before it is con" +
                "sidered \'extended\'", typeof(Single))]
            public Single ExtendedBodyDamageThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("suicide radius#when I die and explode, I damage stuff within this distance of me." +
                "", typeof(Single))]
            public Single SuicideRadius;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString5;
            public int Size
            {
                get
                {
                    return 112;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum VitalityFlagsOptions
            {
                Unused = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class CharacterPlacementBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("few upgrade chance (easy)", typeof(Single))]
            public Single FewUpgradeChanceEasy;
            [Abide.Guerilla.Tags.FieldAttribute("few upgrade chance (normal)", typeof(Single))]
            public Single FewUpgradeChanceNormal;
            [Abide.Guerilla.Tags.FieldAttribute("few upgrade chance (heroic)", typeof(Single))]
            public Single FewUpgradeChanceHeroic;
            [Abide.Guerilla.Tags.FieldAttribute("few upgrade chance (legendary)", typeof(Single))]
            public Single FewUpgradeChanceLegendary;
            [Abide.Guerilla.Tags.FieldAttribute("normal upgrade chance (easy)", typeof(Single))]
            public Single NormalUpgradeChanceEasy;
            [Abide.Guerilla.Tags.FieldAttribute("normal upgrade chance (normal)", typeof(Single))]
            public Single NormalUpgradeChanceNormal;
            [Abide.Guerilla.Tags.FieldAttribute("normal upgrade chance (heroic)", typeof(Single))]
            public Single NormalUpgradeChanceHeroic;
            [Abide.Guerilla.Tags.FieldAttribute("normal upgrade chance (legendary)", typeof(Single))]
            public Single NormalUpgradeChanceLegendary;
            [Abide.Guerilla.Tags.FieldAttribute("many upgrade chance (easy)", typeof(Single))]
            public Single ManyUpgradeChanceEasy;
            [Abide.Guerilla.Tags.FieldAttribute("many upgrade chance (normal)", typeof(Single))]
            public Single ManyUpgradeChanceNormal;
            [Abide.Guerilla.Tags.FieldAttribute("many upgrade chance (heroic)", typeof(Single))]
            public Single ManyUpgradeChanceHeroic;
            [Abide.Guerilla.Tags.FieldAttribute("many upgrade chance (legendary)", typeof(Single))]
            public Single ManyUpgradeChanceLegendary;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class CharacterPerceptionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("perception flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(PerceptionFlagsOptions), true)]
            public Int32 PerceptionFlags;
            [Abide.Guerilla.Tags.FieldAttribute("max vision distance:world units#maximum range of sight", typeof(Single))]
            public Single MaxVisionDistance;
            [Abide.Guerilla.Tags.FieldAttribute("central vision angle:degrees#horizontal angle within which we see targets out to " +
                "our maximum range", typeof(Single))]
            public Single CentralVisionAngle;
            [Abide.Guerilla.Tags.FieldAttribute("max vision angle:degrees#maximum horizontal angle within which we see targets at " +
                "range", typeof(Single))]
            public Single MaxVisionAngle;
            [Abide.Guerilla.Tags.FieldAttribute("peripheral vision angle:degrees#maximum horizontal angle within which we can see " +
                "targets out of the corner of our eye", typeof(Single))]
            public Single PeripheralVisionAngle;
            [Abide.Guerilla.Tags.FieldAttribute("peripheral distance:world units#maximum range at which we can see targets our of " +
                "the corner of our eye", typeof(Single))]
            public Single PeripheralDistance;
            [Abide.Guerilla.Tags.FieldAttribute("hearing distance:world units#maximum range at which sounds can be heard", typeof(Single))]
            public Single HearingDistance;
            [Abide.Guerilla.Tags.FieldAttribute("notice projectile chance:[0,1]#random chance of noticing a dangerous enemy projec" +
                "tile (e.g. grenade)", typeof(Single))]
            public Single NoticeProjectileChance;
            [Abide.Guerilla.Tags.FieldAttribute("notice vehicle chance:[0,1]#random chance of noticing a dangerous vehicle", typeof(Single))]
            public Single NoticeVehicleChance;
            [Abide.Guerilla.Tags.FieldAttribute("combat perception time:seconds#time required to acknowledge a visible enemy when " +
                "we are already in combat or searching for them", typeof(Single))]
            public Single CombatPerceptionTime;
            [Abide.Guerilla.Tags.FieldAttribute("guard perception time:seconds#time required to acknowledge a visible enemy when w" +
                "e have been alerted", typeof(Single))]
            public Single GuardPerceptionTime;
            [Abide.Guerilla.Tags.FieldAttribute("non-combat perception time:seconds#time required to acknowledge a visible enemy w" +
                "hen we are not alerted", typeof(Single))]
            public Single NonCombatPerceptionTime;
            [Abide.Guerilla.Tags.FieldAttribute("first ack. surprise distance:world units#If a new prop is acknowledged within the" +
                " given distance, surprise is registerd", typeof(Single))]
            public Single FirstAckSurpriseDistance;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum PerceptionFlagsOptions
            {
                Flag1 = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
        public sealed class CharacterLookBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("maximum aiming deviation:degrees#how far we can turn our weapon", typeof(Vector2))]
            public Vector2 MaximumAimingDeviation;
            [Abide.Guerilla.Tags.FieldAttribute("maximum looking deviation:degrees#how far we can turn our head", typeof(Vector2))]
            public Vector2 MaximumLookingDeviation;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("noncombat look delta L:degrees#how far we can turn our head left away from our ai" +
                "ming vector when not in combat", typeof(Single))]
            public Single NoncombatLookDeltaL;
            [Abide.Guerilla.Tags.FieldAttribute("noncombat look delta R:degrees#how far we can turn our head right away from our a" +
                "iming vector when not in combat", typeof(Single))]
            public Single NoncombatLookDeltaR;
            [Abide.Guerilla.Tags.FieldAttribute("combat look delta L:degrees#how far we can turn our head left away from our aimin" +
                "g vector when in combat", typeof(Single))]
            public Single CombatLookDeltaL;
            [Abide.Guerilla.Tags.FieldAttribute("combat look delta R:degrees#how far we can turn our head right away from our aimi" +
                "ng vector when in combat", typeof(Single))]
            public Single CombatLookDeltaR;
            public int Size
            {
                get
                {
                    return 80;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class CharacterMovementBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("movement flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(MovementFlagsOptions), true)]
            public Int32 MovementFlags;
            [Abide.Guerilla.Tags.FieldAttribute("pathfinding radius", typeof(Single))]
            public Single PathfindingRadius;
            [Abide.Guerilla.Tags.FieldAttribute("destination radius", typeof(Single))]
            public Single DestinationRadius;
            [Abide.Guerilla.Tags.FieldAttribute("dive grenade chance", typeof(Single))]
            public Single DiveGrenadeChance;
            [Abide.Guerilla.Tags.FieldAttribute("obstacle leap min size", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ObstacleLeapMinSizeOptions), false)]
            public Int16 ObstacleLeapMinSize;
            [Abide.Guerilla.Tags.FieldAttribute("obstacle leap max size", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ObstacleLeapMaxSizeOptions), false)]
            public Int16 ObstacleLeapMaxSize;
            [Abide.Guerilla.Tags.FieldAttribute("obstacle ignore size", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ObstacleIgnoreSizeOptions), false)]
            public Int16 ObstacleIgnoreSize;
            [Abide.Guerilla.Tags.FieldAttribute("obstacle smashable size", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ObstacleSmashableSizeOptions), false)]
            public Int16 ObstacleSmashableSize;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("jump height", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(JumpHeightOptions), false)]
            public Int16 JumpHeight;
            [Abide.Guerilla.Tags.FieldAttribute("movement hints", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(MovementHintsOptions), true)]
            public Int32 MovementHints;
            [Abide.Guerilla.Tags.FieldAttribute("throttle scale", typeof(Single))]
            public Single ThrottleScale;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum MovementFlagsOptions
            {
                DangerCrouchAllowMovement = 1,
                NoSideStep = 2,
                PreferToCombarNearFriends = 4,
                HopToCoverPathSegements = 8,
                Perch = 16,
                HasFlyingMode = 32,
                DisallowCrouch = 64,
            }
            public enum ObstacleLeapMinSizeOptions
            {
                None = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                Immobile = 6,
            }
            public enum ObstacleLeapMaxSizeOptions
            {
                None = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                Immobile = 6,
            }
            public enum ObstacleIgnoreSizeOptions
            {
                None = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                Immobile = 6,
            }
            public enum ObstacleSmashableSizeOptions
            {
                None = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                Immobile = 6,
            }
            public enum JumpHeightOptions
            {
                None = 0,
                Down = 1,
                Step = 2,
                Crouch = 3,
                Stand = 4,
                Storey = 5,
                Tower = 6,
                Infinite = 7,
            }
            public enum MovementHintsOptions
            {
                VaultStep = 1,
                VaultCrouch = 2,
                EmptyString = 4,
                EmptyString1 = 8,
                EmptyString2 = 16,
                MountStep = 32,
                MountCrouch = 64,
                MountStand = 128,
                EmptyString3 = 256,
                EmptyString4 = 512,
                EmptyString5 = 1024,
                HoistCrouch = 2048,
                HoistStand = 4096,
                EmptyString6 = 8192,
                EmptyString7 = 16384,
                EmptyString8 = 32768,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class CharacterSwarmBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("scatter killed count#After the given number of deaths, the swarm scatters", typeof(Int16))]
            public Int16 ScatterKilledCount;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("scatter radius#the distance from the target that the swarm scatters", typeof(Single))]
            public Single ScatterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("scatter time#amount of time to remain scattered", typeof(Single))]
            public Single ScatterTime;
            [Abide.Guerilla.Tags.FieldAttribute("hound min distance", typeof(Single))]
            public Single HoundMinDistance;
            [Abide.Guerilla.Tags.FieldAttribute("hound max distance", typeof(Single))]
            public Single HoundMaxDistance;
            [Abide.Guerilla.Tags.FieldAttribute("perlin offset scale:[0-1]#amount of randomness added to creature\'s throttle", typeof(Single))]
            public Single PerlinOffsetScale;
            [Abide.Guerilla.Tags.FieldAttribute("perlin idle movement threshold:[0-1]#a random offset lower then given threshold i" +
                "s made 0. (threshold of 1 = no movement)", typeof(Single))]
            public Single PerlinIdleMovementThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("perlin combat movement threshold:[0-1]#a random offset lower then given threshold" +
                " is made 0. (threshold of 1 = no movement)", typeof(Single))]
            public Single PerlinCombatMovementThreshold;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class CharacterReadyBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class CharacterEngageBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Crouch danger threshold#When danger rises above the threshold, the actor crouches" +
                "", typeof(Single))]
            public Single CrouchDangerThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Stand danger threshold#When danger drops below this threshold, the actor can stan" +
                "d again.", typeof(Single))]
            public Single StandDangerThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Fight danger move threshold#When danger goes above given level, this actor switch" +
                "es firing positions", typeof(Single))]
            public Single FightDangerMoveThreshold;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                EngagePerch = 1,
                FightConstantMovement = 2,
                FlightFightConstantMovement = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(72, 4)]
        public sealed class CharacterChargeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Charge flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ChargeFlagsOptions), true)]
            public Int32 ChargeFlags;
            [Abide.Guerilla.Tags.FieldAttribute("melee consider range", typeof(Single))]
            public Single MeleeConsiderRange;
            [Abide.Guerilla.Tags.FieldAttribute("melee chance#chance of initiating a melee within a 1 second period", typeof(Single))]
            public Single MeleeChance;
            [Abide.Guerilla.Tags.FieldAttribute("melee attack range", typeof(Single))]
            public Single MeleeAttackRange;
            [Abide.Guerilla.Tags.FieldAttribute("melee abort range", typeof(Single))]
            public Single MeleeAbortRange;
            [Abide.Guerilla.Tags.FieldAttribute("melee attack timeout:seconds#Give up after given amount of time spent charging", typeof(Single))]
            public Single MeleeAttackTimeout;
            [Abide.Guerilla.Tags.FieldAttribute("melee attack delay timer:seconds#don\'t attempt again before given time since last" +
                " melee", typeof(Single))]
            public Single MeleeAttackDelayTimer;
            [Abide.Guerilla.Tags.FieldAttribute("melee leap chance", typeof(Single))]
            public Single MeleeLeapChance;
            [Abide.Guerilla.Tags.FieldAttribute("ideal leap velocity", typeof(Single))]
            public Single IdealLeapVelocity;
            [Abide.Guerilla.Tags.FieldAttribute("max leap velocity", typeof(Single))]
            public Single MaxLeapVelocity;
            [Abide.Guerilla.Tags.FieldAttribute("melee leap ballistic", typeof(Single))]
            public Single MeleeLeapBallistic;
            [Abide.Guerilla.Tags.FieldAttribute("melee delay timer:seconds#time between melee leaps", typeof(Single))]
            public Single MeleeDelayTimer;
            [Abide.Guerilla.Tags.FieldAttribute("berserk weapon#when I berserk, I pull out a ...", typeof(TagReference))]
            public TagReference BerserkWeapon;
            public int Size
            {
                get
                {
                    return 72;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum ChargeFlagsOptions
            {
                OffhandMeleeAllowed = 1,
                BerserkWheneverCharge = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class CharacterEvasionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Evasion danger threshold#Consider evading when immediate danger surpasses thresho" +
                "ld", typeof(Single))]
            public Single EvasionDangerThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Evasion delay timer#Wait at least this delay between evasions", typeof(Single))]
            public Single EvasionDelayTimer;
            [Abide.Guerilla.Tags.FieldAttribute("Evasion chance#If danger is above threshold, the chance that we will evade. Expre" +
                "ssed as chance of evading within a 1 second time period", typeof(Single))]
            public Single EvasionChance;
            [Abide.Guerilla.Tags.FieldAttribute("Evasion proximity threshold#If target is within given proximity, possibly evade", typeof(Single))]
            public Single EvasionProximityThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("dive retreat chance#Chance of retreating (fleeing) after danger avoidance dive", typeof(Single))]
            public Single DiveRetreatChance;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class CharacterCoverBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("cover flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CoverFlagsOptions), true)]
            public Int32 CoverFlags;
            [Abide.Guerilla.Tags.FieldAttribute("Cover vitality threshold#When vitality drops below this level, possibly trigger a" +
                " cover", typeof(Single))]
            public Single CoverVitalityThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Cover shield fraction#trigger cover when shield drops below this fraction (low sh" +
                "ield cover impulse must be enabled)", typeof(Single))]
            public Single CoverShieldFraction;
            [Abide.Guerilla.Tags.FieldAttribute("Cover check delay#amount of time I will wait before trying again after covering", typeof(Single))]
            public Single CoverCheckDelay;
            [Abide.Guerilla.Tags.FieldAttribute("Emerge from cover when shield fraction reaches threshold#Emerge from cover when s" +
                "hield fraction reaches threshold", typeof(Single))]
            public Single EmergeFromCoverWhenShieldFractionReachesThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Cover danger threshold#Danger must be this high to cover. At a danger level of \'d" +
                "anger threshold\', the chance of seeking cover is the cover chance lower bound (b" +
                "elow)", typeof(Single))]
            public Single CoverDangerThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Danger upper threshold#At or above danger level of upper threshold, the chance of" +
                " seeking cover is the cover chance upper bound (below)", typeof(Single))]
            public Single DangerUpperThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Proximity self-preserve:wus#When the proximity_self_preservation impulse is enabl" +
                "ed, triggers self-preservation when target within this distance", typeof(Single))]
            public Single ProximitySelfPreserve;
            [Abide.Guerilla.Tags.FieldAttribute("Disallow cover distance:world units#Disallow covering from visible target under t" +
                "he given distance away", typeof(Single))]
            public Single DisallowCoverDistance;
            [Abide.Guerilla.Tags.FieldAttribute("proximity melee distance#When self preserving from a target less than given dista" +
                "nce, causes melee attack (assuming proximity_melee_impulse is enabled)", typeof(Single))]
            public Single ProximityMeleeDistance;
            [Abide.Guerilla.Tags.FieldAttribute("unreachable enemy danger threshold#When danger from an unreachable enemy surpasse" +
                "s threshold, actor cover (assuming unreachable_enemy_cover impulse is enabled)", typeof(Single))]
            public Single UnreachableEnemyDangerThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("scary target threshold#When target is aware of me and surpasses the given scarine" +
                "ss, self-preserve (scary_target_cover_impulse)", typeof(Single))]
            public Single ScaryTargetThreshold;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum CoverFlagsOptions
            {
                Flag1 = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class CharacterRetreatBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Retreat flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(RetreatFlagsOptions), true)]
            public Int32 RetreatFlags;
            [Abide.Guerilla.Tags.FieldAttribute("Shield threshold#When shield vitality drops below given amount, retreat is trigge" +
                "red by low_shield_retreat_impulse", typeof(Single))]
            public Single ShieldThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Scary target threshold#When confronting an enemy of over the given scariness, ret" +
                "reat is triggered by scary_target_retreat_impulse", typeof(Single))]
            public Single ScaryTargetThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Danger threshold#When perceived danger rises above the given threshold, retreat i" +
                "s triggered by danger_retreat_impulse", typeof(Single))]
            public Single DangerThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("Proximity threshold#When enemy closer than given threshold, retreat is triggered " +
                "by proximity_retreat_impulse", typeof(Single))]
            public Single ProximityThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("proximity ambush threshold#If target reaches is within the given proximity, an am" +
                "bush is triggered by the proximity ambush impulse", typeof(Single))]
            public Single ProximityAmbushThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("awareness ambush threshold#If target is less than threshold (0-1) aware of me, an" +
                " ambush is triggered by the vulnerable enemy ambush impulse", typeof(Single))]
            public Single AwarenessAmbushThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("leader dead retreat chance#If leader-dead-retreat-impulse is active, gives the ch" +
                "ance that we will flee when our leader dies within 4 world units of us", typeof(Single))]
            public Single LeaderDeadRetreatChance;
            [Abide.Guerilla.Tags.FieldAttribute("peer dead retreat chance#If peer-dead-retreat-impulse is active, gives the chance" +
                " that we will flee when one of our peers (friend of the same race) dies within 4" +
                " world units of us", typeof(Single))]
            public Single PeerDeadRetreatChance;
            [Abide.Guerilla.Tags.FieldAttribute("second peer dead retreat chance#If peer-dead-retreat-impulse is active, gives the" +
                " chance that we will flee when a second peer (friend of the same race) dies with" +
                "in 4 world units of us", typeof(Single))]
            public Single SecondPeerDeadRetreatChance;
            [Abide.Guerilla.Tags.FieldAttribute("zig-zag angle:degrees#The angle from the intended destination direction that a zi" +
                "g-zag will cause", typeof(Single))]
            public Single ZigZagAngle;
            [Abide.Guerilla.Tags.FieldAttribute("zig-zag period:seconds#How long it takes to zig left and then zag right.", typeof(Single))]
            public Single ZigZagPeriod;
            [Abide.Guerilla.Tags.FieldAttribute("retreat grenade chance#The likelihood of throwing down a grenade to cover our ret" +
                "reat", typeof(Single))]
            public Single RetreatGrenadeChance;
            [Abide.Guerilla.Tags.FieldAttribute("backup weapon#If I want to flee and I don\'t have flee animations with my current " +
                "weapon, throw it away and try a ...", typeof(TagReference))]
            public TagReference BackupWeapon;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum RetreatFlagsOptions
            {
                ZigZagWhenFleeing = 1,
                Unused1 = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class CharacterSearchBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Search flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SearchFlagsOptions), true)]
            public Int32 SearchFlags;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum SearchFlagsOptions
            {
                CrouchOnInvestigate = 1,
                WalkOnPursuit = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class CharacterPresearchBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Pre-search flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(PreSearchFlagsOptions), true)]
            public Int32 PreSearchFlags;
            [Abide.Guerilla.Tags.FieldAttribute("Min certainty radius", typeof(Single))]
            public Single MinCertaintyRadius;
            [Abide.Guerilla.Tags.FieldAttribute("DEPRECATED", typeof(Single))]
            public Single Deprecated;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum PreSearchFlagsOptions
            {
                Flag1 = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
        public sealed class CharacterIdleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 12;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class CharacterVocalizationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("look comment time:s#How long does the player look at an AI before the AI responds" +
                "?", typeof(Single))]
            public Single LookCommentTime;
            [Abide.Guerilla.Tags.FieldAttribute("look long comment time:s#How long does the player look at the AI before he respon" +
                "ds with his \'long look\' comment?", typeof(Single))]
            public Single LookLongCommentTime;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class CharacterBoardingBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("max distance:wus#maximum distance from entry point that we will consider boarding" +
                "", typeof(Single))]
            public Single MaxDistance;
            [Abide.Guerilla.Tags.FieldAttribute("abort distance:wus#give up trying to get in boarding seat if entry point is furth" +
                "er away than this", typeof(Single))]
            public Single AbortDistance;
            [Abide.Guerilla.Tags.FieldAttribute("max speed:wu/s#maximum speed at which we will consider boarding", typeof(Single))]
            public Single MaxSpeed;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                AirborneBoarding = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
        public sealed class CharacterBossBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("flurry damage threshold:[0..1]#when more than x damage is caused a juggernaut flu" +
                "rry is triggered", typeof(Single))]
            public Single FlurryDamageThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("flurry time:seconds#flurry lasts this long", typeof(Single))]
            public Single FlurryTime;
            public int Size
            {
                get
                {
                    return 12;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(224, 4)]
        public sealed class CharacterWeaponsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("weapons flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(WeaponsFlagsOptions), true)]
            public Int32 WeaponsFlags;
            [Abide.Guerilla.Tags.FieldAttribute("weapon^", typeof(TagReference))]
            public TagReference Weapon;
            [Abide.Guerilla.Tags.FieldAttribute("maximum firing range:world units#we can only fire our weapon at targets within th" +
                "is distance", typeof(Single))]
            public Single MaximumFiringRange;
            [Abide.Guerilla.Tags.FieldAttribute("minimum firing range#weapon will not be fired at target closer than given distanc" +
                "e", typeof(Single))]
            public Single MinimumFiringRange;
            [Abide.Guerilla.Tags.FieldAttribute("bombardment range#we offset our burst targets randomly by this range when firing " +
                "at non-visible enemies (zero = never)", typeof(Single))]
            public Single BombardmentRange;
            [Abide.Guerilla.Tags.FieldAttribute("Max special target distance:world units#Specific target regions on a vehicle or u" +
                "nit will be fired upon only under the given distance", typeof(Single))]
            public Single MaxSpecialTargetDistance;
            [Abide.Guerilla.Tags.FieldAttribute("super-ballistic range#we try to aim our shots super-ballistically if target is ou" +
                "tside this range (zero = never)", typeof(Single))]
            public Single SuperBallisticRange;
            [Abide.Guerilla.Tags.FieldAttribute("surprise delay time:seconds", typeof(Single))]
            public Single SurpriseDelayTime;
            [Abide.Guerilla.Tags.FieldAttribute("surprise fire-wildly time:seconds", typeof(Single))]
            public Single SurpriseFireWildlyTime;
            [Abide.Guerilla.Tags.FieldAttribute("death fire-wildly chance:[0,1]", typeof(Single))]
            public Single DeathFireWildlyChance;
            [Abide.Guerilla.Tags.FieldAttribute("death fire-wildly time:seconds", typeof(Single))]
            public Single DeathFireWildlyTime;
            [Abide.Guerilla.Tags.FieldAttribute("custom stand gun offset#custom standing gun offset for overriding the default in " +
                "the base actor", typeof(Vector3))]
            public Vector3 CustomStandGunOffset;
            [Abide.Guerilla.Tags.FieldAttribute("custom crouch gun offset#custom crouching gun offset for overriding the default i" +
                "n the base actor", typeof(Vector3))]
            public Vector3 CustomCrouchGunOffset;
            [Abide.Guerilla.Tags.FieldAttribute("special-fire mode#the type of special weapon fire that we can use", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpecialFireModeOptions), false)]
            public Int16 SpecialFireMode;
            [Abide.Guerilla.Tags.FieldAttribute("special-fire situation#when we will decide to use our special weapon fire mode", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpecialFireSituationOptions), false)]
            public Int16 SpecialFireSituation;
            [Abide.Guerilla.Tags.FieldAttribute("special-fire chance:[0,1]#how likely we are to use our special weapon fire mode", typeof(Single))]
            public Single SpecialFireChance;
            [Abide.Guerilla.Tags.FieldAttribute("special-fire delay:seconds#how long we must wait between uses of our special weap" +
                "on fire mode", typeof(Single))]
            public Single SpecialFireDelay;
            [Abide.Guerilla.Tags.FieldAttribute("special damage modifier:[0,1]#damage modifier for special weapon fire (applied in" +
                " addition to the normal damage modifier. zero = no change)", typeof(Single))]
            public Single SpecialDamageModifier;
            [Abide.Guerilla.Tags.FieldAttribute("special projectile error:degrees#projectile error angle for special weapon fire (" +
                "applied in addition to the normal error)", typeof(Single))]
            public Single SpecialProjectileError;
            [Abide.Guerilla.Tags.FieldAttribute("normal accuracy time#The amount of time it takes the accuracy to go from starting" +
                " to ending", typeof(Single))]
            public Single NormalAccuracyTime;
            [Abide.Guerilla.Tags.FieldAttribute("heroic accuracy time#The amount of time it takes the accuracy to go from starting" +
                " to ending", typeof(Single))]
            public Single HeroicAccuracyTime;
            [Abide.Guerilla.Tags.FieldAttribute("legendary accuracy time#The amount of time it takes the accuracy to go from start" +
                "ing to ending", typeof(Single))]
            public Single LegendaryAccuracyTime;
            [Abide.Guerilla.Tags.FieldAttribute("firing patterns", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("character_firing_pattern_block", 2, typeof(CharacterFiringPatternBlock))]
            public TagBlock FiringPatterns;
            [Abide.Guerilla.Tags.FieldAttribute("weapon melee damage", typeof(TagReference))]
            public TagReference WeaponMeleeDamage;
            public int Size
            {
                get
                {
                    return 224;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
            public sealed class CharacterFiringPatternBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("rate of fire#how many times per second we pull the trigger (zero = continuously h" +
                    "eld down)", typeof(Single))]
                public Single RateOfFire;
                [Abide.Guerilla.Tags.FieldAttribute("target tracking:[0,1]#how well our bursts track moving targets. 0.0= fire at the " +
                    "position they were standing when we started the burst. 1.0= fire at current posi" +
                    "tion", typeof(Single))]
                public Single TargetTracking;
                [Abide.Guerilla.Tags.FieldAttribute("target leading:[0,1]#how much we lead moving targets. 0.0= no prediction. 1.0= pr" +
                    "edict completely.", typeof(Single))]
                public Single TargetLeading;
                [Abide.Guerilla.Tags.FieldAttribute("burst origin radius:world units#how far away from the target the starting point i" +
                    "s", typeof(Single))]
                public Single BurstOriginRadius;
                [Abide.Guerilla.Tags.FieldAttribute("burst origin angle:degrees#the range from the horizontal that our starting error " +
                    "can be", typeof(Single))]
                public Single BurstOriginAngle;
                [Abide.Guerilla.Tags.FieldAttribute("burst return angle:degrees#the range from the horizontal that the return directio" +
                    "n can be", typeof(Single))]
                public Single BurstReturnAngle;
                [Abide.Guerilla.Tags.FieldAttribute("weapon damage modifier#what fraction of its normal damage our weapon inflicts (ze" +
                    "ro = no modifier)", typeof(Single))]
                public Single WeaponDamageModifier;
                [Abide.Guerilla.Tags.FieldAttribute("projectile error:degrees#error added to every projectile we fire", typeof(Single))]
                public Single ProjectileError;
                [Abide.Guerilla.Tags.FieldAttribute("burst angular velocity:degrees per second#the maximum rate at which we can sweep " +
                    "our fire (zero = unlimited)", typeof(Single))]
                public Single BurstAngularVelocity;
                [Abide.Guerilla.Tags.FieldAttribute("maximum error angle:degrees#cap on the maximum angle by which we will miss target" +
                    " (restriction on burst origin radius", typeof(Single))]
                public Single MaximumErrorAngle;
                public int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum WeaponsFlagsOptions
            {
                BurstingInhibitsMovement = 1,
                MustCrouchToShoot = 2,
                UseExtendedSafeToSaveRange = 4,
            }
            public enum SpecialFireModeOptions
            {
                None = 0,
                Overcharge = 1,
                SecondaryTrigger = 2,
            }
            public enum SpecialFireSituationOptions
            {
                Never = 0,
                EnemyVisible = 1,
                EnemyOutOfSight = 2,
                Strafing = 3,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
        public sealed class CharacterFiringPatternPropertiesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("weapon^", typeof(TagReference))]
            public TagReference Weapon;
            [Abide.Guerilla.Tags.FieldAttribute("firing patterns", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("character_firing_pattern_block", 2, typeof(CharacterFiringPatternBlock))]
            public TagBlock FiringPatterns;
            public int Size
            {
                get
                {
                    return 28;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
            public sealed class CharacterFiringPatternBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("rate of fire#how many times per second we pull the trigger (zero = continuously h" +
                    "eld down)", typeof(Single))]
                public Single RateOfFire;
                [Abide.Guerilla.Tags.FieldAttribute("target tracking:[0,1]#how well our bursts track moving targets. 0.0= fire at the " +
                    "position they were standing when we started the burst. 1.0= fire at current posi" +
                    "tion", typeof(Single))]
                public Single TargetTracking;
                [Abide.Guerilla.Tags.FieldAttribute("target leading:[0,1]#how much we lead moving targets. 0.0= no prediction. 1.0= pr" +
                    "edict completely.", typeof(Single))]
                public Single TargetLeading;
                [Abide.Guerilla.Tags.FieldAttribute("burst origin radius:world units#how far away from the target the starting point i" +
                    "s", typeof(Single))]
                public Single BurstOriginRadius;
                [Abide.Guerilla.Tags.FieldAttribute("burst origin angle:degrees#the range from the horizontal that our starting error " +
                    "can be", typeof(Single))]
                public Single BurstOriginAngle;
                [Abide.Guerilla.Tags.FieldAttribute("burst return angle:degrees#the range from the horizontal that the return directio" +
                    "n can be", typeof(Single))]
                public Single BurstReturnAngle;
                [Abide.Guerilla.Tags.FieldAttribute("weapon damage modifier#what fraction of its normal damage our weapon inflicts (ze" +
                    "ro = no modifier)", typeof(Single))]
                public Single WeaponDamageModifier;
                [Abide.Guerilla.Tags.FieldAttribute("projectile error:degrees#error added to every projectile we fire", typeof(Single))]
                public Single ProjectileError;
                [Abide.Guerilla.Tags.FieldAttribute("burst angular velocity:degrees per second#the maximum rate at which we can sweep " +
                    "our fire (zero = unlimited)", typeof(Single))]
                public Single BurstAngularVelocity;
                [Abide.Guerilla.Tags.FieldAttribute("maximum error angle:degrees#cap on the maximum angle by which we will miss target" +
                    " (restriction on burst origin radius", typeof(Single))]
                public Single MaximumErrorAngle;
                public int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
        public sealed class CharacterGrenadesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("grenades flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GrenadesFlagsOptions), true)]
            public Int32 GrenadesFlags;
            [Abide.Guerilla.Tags.FieldAttribute("grenade type#type of grenades that we throw^", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GrenadeTypeOptions), false)]
            public Int16 GrenadeType;
            [Abide.Guerilla.Tags.FieldAttribute("trajectory type#how we throw our grenades", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TrajectoryTypeOptions), false)]
            public Int16 TrajectoryType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("minimum enemy count#how many enemies must be within the radius of the grenade bef" +
                "ore we will consider throwing there", typeof(Int16))]
            public Int16 MinimumEnemyCount;
            [Abide.Guerilla.Tags.FieldAttribute("enemy radius:world units#we consider enemies within this radius when determining " +
                "where to throw", typeof(Single))]
            public Single EnemyRadius;
            [Abide.Guerilla.Tags.FieldAttribute("grenade ideal velocity:world units per second#how fast we LIKE to throw our grena" +
                "des", typeof(Single))]
            public Single GrenadeIdealVelocity;
            [Abide.Guerilla.Tags.FieldAttribute("grenade velocity:world units per second#the fastest we can possibly throw our gre" +
                "nades", typeof(Single))]
            public Single GrenadeVelocity;
            [Abide.Guerilla.Tags.FieldAttribute("collateral damage radius:world units#we won\'t throw if there are friendlies aroun" +
                "d our target within this range", typeof(Single))]
            public Single CollateralDamageRadius;
            [Abide.Guerilla.Tags.FieldAttribute("grenade chance:[0,1]#how likely we are to throw a grenade in one second", typeof(Single))]
            public Single GrenadeChance;
            [Abide.Guerilla.Tags.FieldAttribute("grenade throw delay:seconds#How long we have to wait after throwing a grenade bef" +
                "ore we can throw another one", typeof(Single))]
            public Single GrenadeThrowDelay;
            [Abide.Guerilla.Tags.FieldAttribute("grenade uncover chance:[0,1]#how likely we are to throw a grenade to flush out a " +
                "target in one second", typeof(Single))]
            public Single GrenadeUncoverChance;
            [Abide.Guerilla.Tags.FieldAttribute("anti-vehicle grenade chance:[0,1]#how likely we are to throw a grenade against a " +
                "vehicle", typeof(Single))]
            public Single AntiVehicleGrenadeChance;
            [Abide.Guerilla.Tags.FieldAttribute("dont drop grenades chance:[0,1]#how likely we are not to drop any grenades when w" +
                "e die, even if we still have some", typeof(Single))]
            public Single DontDropGrenadesChance;
            public int Size
            {
                get
                {
                    return 60;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum GrenadesFlagsOptions
            {
                Flag1 = 1,
            }
            public enum GrenadeTypeOptions
            {
                HumanFragmentation = 0,
                CovenantPlasma = 1,
            }
            public enum TrajectoryTypeOptions
            {
                Toss = 0,
                Lob = 1,
                Bounce = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(196, 4)]
        public sealed class CharacterVehicleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("unit^", typeof(TagReference))]
            public TagReference Unit;
            [Abide.Guerilla.Tags.FieldAttribute("style^", typeof(TagReference))]
            public TagReference Style;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(VehicleFlagsOptions), true)]
            public Int32 VehicleFlags;
            [Abide.Guerilla.Tags.FieldAttribute("ai pathfinding radius:world units#(Ground vehicles)", typeof(Single))]
            public Single AiPathfindingRadius;
            [Abide.Guerilla.Tags.FieldAttribute("ai destination radius:world units#(All vehicles) Distance within which goal is co" +
                "nsidered reached", typeof(Single))]
            public Single AiDestinationRadius;
            [Abide.Guerilla.Tags.FieldAttribute("ai deceleration distanceworld units#(All vehicles)Distance from goal at which AI " +
                "starts to decelerate", typeof(Single))]
            public Single AiDecelerationDistanceworldUnits;
            [Abide.Guerilla.Tags.FieldAttribute("ai turning radius#(Warthog, Pelican, Ghost) Idealized average turning radius (sho" +
                "uld reflect actual vehicle physics)", typeof(Single))]
            public Single AiTurningRadius;
            [Abide.Guerilla.Tags.FieldAttribute("ai inner turning radius (< tr)#(Warthog-type) Idealized minimum turning radius (s" +
                "hould reflect actual vehicle physics)", typeof(Single))]
            public Single AiInnerTurningRadiusLessThanTr;
            [Abide.Guerilla.Tags.FieldAttribute("ai ideal turning radius (> tr)#(Warthogs, ghosts) Ideal turning radius for roundi" +
                "ng turns (barring obstacles, etc.)", typeof(Single))]
            public Single AiIdealTurningRadiusGreaterThanTr;
            [Abide.Guerilla.Tags.FieldAttribute("ai banshee steering maximum#(Banshee)", typeof(Single))]
            public Single AiBansheeSteeringMaximum;
            [Abide.Guerilla.Tags.FieldAttribute("ai max steering angle:degrees#(Warthog, ghosts, wraiths)Maximum steering angle fr" +
                "om forward (ultimately controls turning speed)", typeof(Single))]
            public Single AiMaxSteeringAngle;
            [Abide.Guerilla.Tags.FieldAttribute("ai max steering delta: degrees#(pelicans, dropships, ghosts, wraiths)Maximum delt" +
                "a in steering angle from one tick to the next (ultimately controls turn accelera" +
                "tion)", typeof(Single))]
            public Single AiMaxSteeringDelta;
            [Abide.Guerilla.Tags.FieldAttribute("ai oversteering scale#(Warthog, ghosts, wraiths)", typeof(Single))]
            public Single AiOversteeringScale;
            [Abide.Guerilla.Tags.FieldAttribute("ai sideslip distance#(Ghosts, Dropships) Distance within which Ai will strafe to " +
                "target (as opposed to turning)", typeof(Single))]
            public Single AiSideslipDistance;
            [Abide.Guerilla.Tags.FieldAttribute("ai avoidance distance:world units#(Banshee-style) Look-ahead distance for obstacl" +
                "e avoidance", typeof(Single))]
            public Single AiAvoidanceDistance;
            [Abide.Guerilla.Tags.FieldAttribute("ai min urgency:[0-1]#(Banshees)The minimum urgency with which a turn can be made " +
                "(urgency = percent of maximum steering delta)", typeof(Single))]
            public Single AiMinUrgency;
            [Abide.Guerilla.Tags.FieldAttribute("ai throttle maximum:(0 - 1)#(All vehicles)", typeof(Single))]
            public Single AiThrottleMaximum;
            [Abide.Guerilla.Tags.FieldAttribute("ai goal min throttle scale#(Warthogs, Dropships, ghosts)scale on throttle when wi" +
                "thin \'ai deceleration distance\' of goal (0...1)", typeof(Single))]
            public Single AiGoalMinThrottleScale;
            [Abide.Guerilla.Tags.FieldAttribute("ai turn min throttle scale#(Warthogs, ghosts) Scale on throttle due to nearness t" +
                "o a turn (0...1)", typeof(Single))]
            public Single AiTurnMinThrottleScale;
            [Abide.Guerilla.Tags.FieldAttribute("ai direction min throttle scale#(Warthogs, ghosts) Scale on throttle due to facin" +
                "g away from intended direction (0...1)", typeof(Single))]
            public Single AiDirectionMinThrottleScale;
            [Abide.Guerilla.Tags.FieldAttribute("ai acceleration scale:(0-1)#(warthogs, ghosts) The maximum allowable change in th" +
                "rottle between ticks", typeof(Single))]
            public Single AiAccelerationScale;
            [Abide.Guerilla.Tags.FieldAttribute("ai throttle blend:(0-1)#(dropships, sentinels) The degree of throttle blending be" +
                "tween one tick and the next (0 = no blending)", typeof(Single))]
            public Single AiThrottleBlend;
            [Abide.Guerilla.Tags.FieldAttribute("theoretical max speed:wu/s#(dropships, warthogs, ghosts) About how fast I can go." +
                "", typeof(Single))]
            public Single TheoreticalMaxSpeed;
            [Abide.Guerilla.Tags.FieldAttribute("error scale#(dropships, warthogs) scale on the difference between desired and act" +
                "ual speed, applied to throttle", typeof(Single))]
            public Single ErrorScale;
            [Abide.Guerilla.Tags.FieldAttribute("ai allowable aim deviation angle", typeof(Single))]
            public Single AiAllowableAimDeviationAngle;
            [Abide.Guerilla.Tags.FieldAttribute("ai charge tight angle distance#(All vehicles) The distance at which the tight ang" +
                "le criterion is used for deciding to vehicle charge", typeof(Single))]
            public Single AiChargeTightAngleDistance;
            [Abide.Guerilla.Tags.FieldAttribute("ai charge tight angle:[0-1]#(All vehicles) Angle cosine within which the target m" +
                "ust be when target is closer than tight angle distance in order to charge", typeof(Single))]
            public Single AiChargeTightAngle;
            [Abide.Guerilla.Tags.FieldAttribute("ai charge repeat timeout#(All vehicles) Time delay between vehicle charges", typeof(Single))]
            public Single AiChargeRepeatTimeout;
            [Abide.Guerilla.Tags.FieldAttribute("ai charge look-ahead time#(All vehicles) In deciding when to abort vehicle charge" +
                ", look ahead these many seconds to predict time of contact", typeof(Single))]
            public Single AiChargeLookAheadTime;
            [Abide.Guerilla.Tags.FieldAttribute("ai charge consider distance#Consider charging the target when it is within this r" +
                "ange (0 = infinite distance)", typeof(Single))]
            public Single AiChargeConsiderDistance;
            [Abide.Guerilla.Tags.FieldAttribute("ai charge abort distance#Abort the charge when the target get more than this far " +
                "away (0 = never abort)", typeof(Single))]
            public Single AiChargeAbortDistance;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle ram timeout#The ram behavior stops after a maximum of the given number of" +
                " seconds", typeof(Single))]
            public Single VehicleRamTimeout;
            [Abide.Guerilla.Tags.FieldAttribute("ram paralysis time#The ram behavior freezes the vehicle for a given number of sec" +
                "onds after performing the ram", typeof(Single))]
            public Single RamParalysisTime;
            [Abide.Guerilla.Tags.FieldAttribute("ai cover damage threshold#(All vehicles) Trigger a cover when recent damage is ab" +
                "ove given threshold (damage_vehicle_cover impulse)", typeof(Single))]
            public Single AiCoverDamageThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("ai cover min distance#(All vehicles) When executing vehicle-cover, minimum distan" +
                "ce from the target to flee to", typeof(Single))]
            public Single AiCoverMinDistance;
            [Abide.Guerilla.Tags.FieldAttribute("ai cover time#(All vehicles) How long to stay away from the target", typeof(Single))]
            public Single AiCoverTime;
            [Abide.Guerilla.Tags.FieldAttribute("ai cover min boost distance#(All vehicles) Boosting allowed when distance to cove" +
                "r destination is greater then this.", typeof(Single))]
            public Single AiCoverMinBoostDistance;
            [Abide.Guerilla.Tags.FieldAttribute("turtling recent damage threshold:%#If vehicle turtling behavior is enabled, turtl" +
                "ing is initiated if \'recent damage\' surpasses the given threshold", typeof(Single))]
            public Single TurtlingRecentDamageThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("turtling min time:seconds#If the vehicle turtling behavior is enabled, turtling o" +
                "ccurs for at least the given time", typeof(Single))]
            public Single TurtlingMinTime;
            [Abide.Guerilla.Tags.FieldAttribute("turtling timeout:seconds#The turtled state times out after the given number of se" +
                "conds", typeof(Single))]
            public Single TurtlingTimeout;
            [Abide.Guerilla.Tags.FieldAttribute("obstacle ignore size", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ObstacleIgnoreSizeOptions), false)]
            public Int16 ObstacleIgnoreSize;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString10;
            public int Size
            {
                get
                {
                    return 196;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum VehicleFlagsOptions
            {
                PassengersAdoptOriginalSquad = 1,
            }
            public enum ObstacleIgnoreSizeOptions
            {
                None = 0,
                Tiny = 1,
                Small = 2,
                Medium = 3,
                Large = 4,
                Huge = 5,
                Immobile = 6,
            }
        }
        public enum CharacterFlagsOptions
        {
            Flag1 = 1,
        }
    }
}
#pragma warning restore CS1591
