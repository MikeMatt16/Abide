#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(20, 4)]
    [TagGroupAttribute("light_volume", 1296519986u, 4294967293u, typeof(LightVolumeBlock))]
    public sealed class LightVolumeBlock : AbideTagBlock
    {
        private TagBlockList<LightVolumeVolumeBlock> volumesList = new TagBlockList<LightVolumeVolumeBlock>(16);
        [FieldAttribute("falloff distance from camera:world units", typeof(Single))]
        public Single FalloffDistanceFromCamera;
        [FieldAttribute("cutoff distance from camera:world units", typeof(Single))]
        public Single CutoffDistanceFromCamera;
        [FieldAttribute("volumes", typeof(TagBlock))]
        [BlockAttribute("volume", 16, typeof(LightVolumeVolumeBlock))]
        public TagBlock Volumes;
        public TagBlockList<LightVolumeVolumeBlock> VolumesList
        {
            get
            {
                return this.volumesList;
            }
        }
        public override int Size
        {
            get
            {
                return 20;
            }
        }
        public override void Initialize()
        {
            this.volumesList.Clear();
            this.FalloffDistanceFromCamera = 0;
            this.CutoffDistanceFromCamera = 0;
            this.Volumes = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.FalloffDistanceFromCamera = reader.ReadSingle();
            this.CutoffDistanceFromCamera = reader.ReadSingle();
            this.Volumes = reader.ReadInt64();
            this.volumesList.Read(reader, this.Volumes);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(188, 4)]
        public sealed class LightVolumeVolumeBlock : AbideTagBlock
        {
            private TagBlockList<LightVolumeAspectBlock> aspectList = new TagBlockList<LightVolumeAspectBlock>(1);
            private TagBlockList<LightVolumeRuntimeOffsetBlock> list = new TagBlockList<LightVolumeRuntimeOffsetBlock>(256);
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("bitmap", typeof(TagReference))]
            public TagReference Bitmap;
            [FieldAttribute("sprite count:[4,256]", typeof(Int32))]
            public Int32 SpriteCount;
            [FieldAttribute("offset function", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock OffsetFunction;
            [FieldAttribute("radius function", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock RadiusFunction;
            [FieldAttribute("brightness function", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock BrightnessFunction;
            [FieldAttribute("color function", typeof(ColorFunctionStructBlock))]
            public ColorFunctionStructBlock ColorFunction;
            [FieldAttribute("facing function", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock FacingFunction;
            [FieldAttribute("aspect", typeof(TagBlock))]
            [BlockAttribute("aspect", 1, typeof(LightVolumeAspectBlock))]
            public TagBlock Aspect;
            [FieldAttribute("radius frac min*:[0.00390625, 1.0]", typeof(Single))]
            public Single RadiusFracMin;
            [FieldAttribute("DEPRECATED!! x-step exponent*:[0.5, 0.875]", typeof(Single))]
            public Single DeprecatedXStepExponent;
            [FieldAttribute("DEPRECATED!! x-buffer length*:[32, 512]", typeof(Int32))]
            public Int32 DeprecatedXBufferLength;
            [FieldAttribute("x-buffer spacing*:[1, 256]", typeof(Int32))]
            public Int32 XBufferSpacing;
            [FieldAttribute("x-buffer min iterations*:[1, 256]", typeof(Int32))]
            public Int32 XBufferMinIterations;
            [FieldAttribute("x-buffer max iterations*:[1, 256]", typeof(Int32))]
            public Int32 XBufferMaxIterations;
            [FieldAttribute("x-delta max error*:[0.001, 0.1]", typeof(Single))]
            public Single XDeltaMaxError;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("*", typeof(TagBlock))]
            [BlockAttribute("light_volume_runtime_offset_block", 256, typeof(LightVolumeRuntimeOffsetBlock))]
            public TagBlock EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(48)]
            public Byte[] EmptyString2;
            public TagBlockList<LightVolumeAspectBlock> AspectList
            {
                get
                {
                    return this.aspectList;
                }
            }
            public TagBlockList<LightVolumeRuntimeOffsetBlock> List
            {
                get
                {
                    return this.list;
                }
            }
            public override int Size
            {
                get
                {
                    return 188;
                }
            }
            public override void Initialize()
            {
                this.aspectList.Clear();
                this.list.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.Bitmap = TagReference.Null;
                this.SpriteCount = 0;
                this.OffsetFunction = new ScalarFunctionStructBlock();
                this.RadiusFunction = new ScalarFunctionStructBlock();
                this.BrightnessFunction = new ScalarFunctionStructBlock();
                this.ColorFunction = new ColorFunctionStructBlock();
                this.FacingFunction = new ScalarFunctionStructBlock();
                this.Aspect = TagBlock.Zero;
                this.RadiusFracMin = 0;
                this.DeprecatedXStepExponent = 0;
                this.DeprecatedXBufferLength = 0;
                this.XBufferSpacing = 0;
                this.XBufferMinIterations = 0;
                this.XBufferMaxIterations = 0;
                this.XDeltaMaxError = 0;
                this.EmptyString = new byte[4];
                this.EmptyString1 = TagBlock.Zero;
                this.EmptyString2 = new byte[48];
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Bitmap = reader.Read<TagReference>();
                this.SpriteCount = reader.ReadInt32();
                this.OffsetFunction = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.RadiusFunction = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.BrightnessFunction = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.ColorFunction = reader.ReadDataStructure<ColorFunctionStructBlock>();
                this.FacingFunction = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.Aspect = reader.ReadInt64();
                this.aspectList.Read(reader, this.Aspect);
                this.RadiusFracMin = reader.ReadSingle();
                this.DeprecatedXStepExponent = reader.ReadSingle();
                this.DeprecatedXBufferLength = reader.ReadInt32();
                this.XBufferSpacing = reader.ReadInt32();
                this.XBufferMinIterations = reader.ReadInt32();
                this.XBufferMaxIterations = reader.ReadInt32();
                this.XDeltaMaxError = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(4);
                this.EmptyString1 = reader.ReadInt64();
                this.list.Read(reader, this.EmptyString1);
                this.EmptyString2 = reader.ReadBytes(48);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(36, 4)]
            public sealed class LightVolumeAspectBlock : AbideTagBlock
            {
                [FieldAttribute("along axis", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock AlongAxis;
                [FieldAttribute("away from axis", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock AwayFromAxis;
                [FieldAttribute("parallel scale", typeof(Single))]
                public Single ParallelScale;
                [FieldAttribute("parallel threshold angle:degrees", typeof(Single))]
                public Single ParallelThresholdAngle;
                [FieldAttribute("parallel exponent", typeof(Single))]
                public Single ParallelExponent;
                public override int Size
                {
                    get
                    {
                        return 36;
                    }
                }
                public override void Initialize()
                {
                    this.AlongAxis = new ScalarFunctionStructBlock();
                    this.AwayFromAxis = new ScalarFunctionStructBlock();
                    this.ParallelScale = 0;
                    this.ParallelThresholdAngle = 0;
                    this.ParallelExponent = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.AlongAxis = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.AwayFromAxis = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.ParallelScale = reader.ReadSingle();
                    this.ParallelThresholdAngle = reader.ReadSingle();
                    this.ParallelExponent = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class ScalarFunctionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Function = new MappingFunctionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : AbideTagBlock
                    {
                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                        [FieldAttribute("data", typeof(TagBlock))]
                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public TagBlockList<ByteBlock> DataList
                        {
                            get
                            {
                                return this.dataList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.dataList.Clear();
                            this.Data = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Data = reader.ReadInt64();
                            this.dataList.Read(reader, this.Data);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : AbideTagBlock
                        {
                            [FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public override int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Value = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Value = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class LightVolumeRuntimeOffsetBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Vector2))]
                public Vector2 EmptyString;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = Vector2.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.Read<Vector2>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScalarFunctionStructBlock : AbideTagBlock
            {
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ColorFunctionStructBlock : AbideTagBlock
            {
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            public enum FlagsOptions : Int32
            {
                ForceLinearRadiusFunction = 1,
                ForceLinearOffset = 2,
                ForceDifferentialEvaluation = 4,
                Fuzzy = 8,
                NotScaledByEventDuration = 16,
                ScaledByMarker = 32,
            }
        }
    }
}
#pragma warning restore CS1591
