#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(172, 4)]
    [TagGroupAttribute("sound", 1936614433u, 4294967293u, typeof(SoundBlock))]
    public sealed class SoundBlock : AbideTagBlock
    {
        private TagBlockList<SoundPitchRangeBlock> pitchRangesList = new TagBlockList<SoundPitchRangeBlock>(9);
        private TagBlockList<SoundPlatformSoundPlaybackBlock> platformParametersList = new TagBlockList<SoundPlatformSoundPlaybackBlock>(1);
        private TagBlockList<SoundExtraInfoBlock> emptyStringList = new TagBlockList<SoundExtraInfoBlock>(1);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("class", typeof(ClassOptions))]
        [OptionsAttribute(typeof(ClassOptions), false)]
        public ClassOptions Class;
        [FieldAttribute("sample rate*", typeof(SampleRateOptions))]
        [OptionsAttribute(typeof(SampleRateOptions), false)]
        public SampleRateOptions SampleRate;
        [FieldAttribute("", typeof(EmptyStringOptions))]
        [OptionsAttribute(typeof(EmptyStringOptions), false)]
        public EmptyStringOptions EmptyString;
        [FieldAttribute("import type*", typeof(ImportTypeOptions))]
        [OptionsAttribute(typeof(ImportTypeOptions), false)]
        public ImportTypeOptions ImportType;
        [FieldAttribute("playback", typeof(SoundPlaybackParametersStructBlock))]
        public SoundPlaybackParametersStructBlock Playback;
        [FieldAttribute("scale", typeof(SoundScaleModifiersStructBlock))]
        public SoundScaleModifiersStructBlock Scale;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString1;
        [FieldAttribute("encoding*", typeof(EncodingOptions))]
        [OptionsAttribute(typeof(EncodingOptions), false)]
        public EncodingOptions Encoding;
        [FieldAttribute("compression*", typeof(CompressionOptions))]
        [OptionsAttribute(typeof(CompressionOptions), false)]
        public CompressionOptions Compression;
        [FieldAttribute("promotion", typeof(SoundPromotionParametersStructBlock))]
        public SoundPromotionParametersStructBlock Promotion;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(12)]
        public Byte[] EmptyString2;
        [FieldAttribute("pitch ranges*#pitch ranges allow multiple samples to represent the same sound at " +
            "different pitches", typeof(TagBlock))]
        [BlockAttribute("sound_pitch_range_block", 9, typeof(SoundPitchRangeBlock))]
        public TagBlock PitchRanges;
        [FieldAttribute("platform parameters", typeof(TagBlock))]
        [BlockAttribute("sound_platform_sound_playback_block", 1, typeof(SoundPlatformSoundPlaybackBlock))]
        public TagBlock PlatformParameters;
        [FieldAttribute("", typeof(TagBlock))]
        [BlockAttribute("sound_extra_info_block", 1, typeof(SoundExtraInfoBlock))]
        public TagBlock EmptyString3;
        public TagBlockList<SoundPitchRangeBlock> PitchRangesList
        {
            get
            {
                return this.pitchRangesList;
            }
        }
        public TagBlockList<SoundPlatformSoundPlaybackBlock> PlatformParametersList
        {
            get
            {
                return this.platformParametersList;
            }
        }
        public TagBlockList<SoundExtraInfoBlock> EmptyStringList
        {
            get
            {
                return this.emptyStringList;
            }
        }
        public override int Size
        {
            get
            {
                return 172;
            }
        }
        public override void Initialize()
        {
            this.pitchRangesList.Clear();
            this.platformParametersList.Clear();
            this.emptyStringList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.Class = ((ClassOptions)(0));
            this.SampleRate = ((SampleRateOptions)(0));
            this.EmptyString = ((EmptyStringOptions)(0));
            this.ImportType = ((ImportTypeOptions)(0));
            this.Playback = new SoundPlaybackParametersStructBlock();
            this.Scale = new SoundScaleModifiersStructBlock();
            this.EmptyString1 = new byte[2];
            this.Encoding = ((EncodingOptions)(0));
            this.Compression = ((CompressionOptions)(0));
            this.Promotion = new SoundPromotionParametersStructBlock();
            this.EmptyString2 = new byte[12];
            this.PitchRanges = TagBlock.Zero;
            this.PlatformParameters = TagBlock.Zero;
            this.EmptyString3 = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.Class = ((ClassOptions)(reader.ReadByte()));
            this.SampleRate = ((SampleRateOptions)(reader.ReadByte()));
            this.EmptyString = ((EmptyStringOptions)(reader.ReadByte()));
            this.ImportType = ((ImportTypeOptions)(reader.ReadByte()));
            this.Playback = reader.ReadDataStructure<SoundPlaybackParametersStructBlock>();
            this.Scale = reader.ReadDataStructure<SoundScaleModifiersStructBlock>();
            this.EmptyString1 = reader.ReadBytes(2);
            this.Encoding = ((EncodingOptions)(reader.ReadByte()));
            this.Compression = ((CompressionOptions)(reader.ReadByte()));
            this.Promotion = reader.ReadDataStructure<SoundPromotionParametersStructBlock>();
            this.EmptyString2 = reader.ReadBytes(12);
            this.PitchRanges = reader.ReadInt64();
            this.pitchRangesList.Read(reader, this.PitchRanges);
            this.PlatformParameters = reader.ReadInt64();
            this.platformParametersList.Read(reader, this.PlatformParameters);
            this.EmptyString3 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString3);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(32, 4)]
        public sealed class SoundPitchRangeBlock : AbideTagBlock
        {
            private TagBlockList<SoundPermutationsBlock> permutationsList = new TagBlockList<SoundPermutationsBlock>(32);
            [FieldAttribute("name*#the name of the imported pitch range directory", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("natural pitch:cents#the apparent pitch when these samples are played at their rec" +
                "orded pitch.", typeof(Int16))]
            public Int16 NaturalPitch;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("permutations*#permutations represent equivalent variations of this sound.", typeof(TagBlock))]
            [BlockAttribute("sound_permutations_block", 32, typeof(SoundPermutationsBlock))]
            public TagBlock Permutations;
            public TagBlockList<SoundPermutationsBlock> PermutationsList
            {
                get
                {
                    return this.permutationsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.permutationsList.Clear();
                this.Name = StringId.Zero;
                this.NaturalPitch = 0;
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[4];
                this.Permutations = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.NaturalPitch = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(4);
                this.Permutations = reader.ReadInt64();
                this.permutationsList.Read(reader, this.Permutations);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class SoundPermutationsBlock : AbideTagBlock
            {
                private TagBlockList<SoundPermutationChunkBlock> emptyStringList = new TagBlockList<SoundPermutationChunkBlock>(32767);
                [FieldAttribute("name*^#name of the file from which this sample was imported", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("skip fraction#fraction of requests to play this permutation that are ignored (a d" +
                    "ifferent permutation is selected.)", typeof(Single))]
                public Single SkipFraction;
                [FieldAttribute("gain:dB#additional attenuation when played", typeof(Single))]
                public Single Gain;
                [FieldAttribute("", typeof(Int32))]
                public Int32 EmptyString;
                [FieldAttribute("", typeof(Int16))]
                public Int16 EmptyString1;
                [FieldAttribute("", typeof(Int16))]
                public Int16 EmptyString2;
                [FieldAttribute("", typeof(TagBlock))]
                [BlockAttribute("sound_permutation_chunk_block", 32767, typeof(SoundPermutationChunkBlock))]
                public TagBlock EmptyString3;
                public TagBlockList<SoundPermutationChunkBlock> EmptyStringList
                {
                    get
                    {
                        return this.emptyStringList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.emptyStringList.Clear();
                    this.Name = StringId.Zero;
                    this.SkipFraction = 0;
                    this.Gain = 0;
                    this.EmptyString = 0;
                    this.EmptyString1 = 0;
                    this.EmptyString2 = 0;
                    this.EmptyString3 = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.SkipFraction = reader.ReadSingle();
                    this.Gain = reader.ReadSingle();
                    this.EmptyString = reader.ReadInt32();
                    this.EmptyString1 = reader.ReadInt16();
                    this.EmptyString2 = reader.ReadInt16();
                    this.EmptyString3 = reader.ReadInt64();
                    this.emptyStringList.Read(reader, this.EmptyString3);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class SoundPermutationChunkBlock : AbideTagBlock
                {
                    [FieldAttribute("file offset*", typeof(Int32))]
                    public Int32 FileOffset;
                    [FieldAttribute("", typeof(Int32))]
                    public Int32 EmptyString;
                    [FieldAttribute("", typeof(Int32))]
                    public Int32 EmptyString1;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.FileOffset = 0;
                        this.EmptyString = 0;
                        this.EmptyString1 = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.FileOffset = reader.ReadInt32();
                        this.EmptyString = reader.ReadInt32();
                        this.EmptyString1 = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        [FieldSetAttribute(84, 4)]
        public sealed class SoundPlatformSoundPlaybackBlock : AbideTagBlock
        {
            private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
            [FieldAttribute("playback definition", typeof(SimplePlatformSoundPlaybackStructBlock))]
            public SimplePlatformSoundPlaybackStructBlock PlaybackDefinition;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString;
            public TagBlockList<GNullBlock> EmptyStringList
            {
                get
                {
                    return this.emptyStringList;
                }
            }
            public override int Size
            {
                get
                {
                    return 84;
                }
            }
            public override void Initialize()
            {
                this.emptyStringList.Clear();
                this.PlaybackDefinition = new SimplePlatformSoundPlaybackStructBlock();
                this.EmptyString = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.PlaybackDefinition = reader.ReadDataStructure<SimplePlatformSoundPlaybackStructBlock>();
                this.EmptyString = reader.ReadInt64();
                this.emptyStringList.Read(reader, this.EmptyString);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : AbideTagBlock
            {
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(72, 4)]
            public sealed class SimplePlatformSoundPlaybackStructBlock : AbideTagBlock
            {
                private TagBlockList<PlatformSoundOverrideMixbinsBlock> emptyStringList = new TagBlockList<PlatformSoundOverrideMixbinsBlock>(8);
                private TagBlockList<PlatformSoundFilterBlock> filterList = new TagBlockList<PlatformSoundFilterBlock>(1);
                private TagBlockList<PlatformSoundPitchLfoBlock> pitchLfoList = new TagBlockList<PlatformSoundPitchLfoBlock>(1);
                private TagBlockList<PlatformSoundFilterLfoBlock> filterLfoList = new TagBlockList<PlatformSoundFilterLfoBlock>(1);
                private TagBlockList<SoundEffectPlaybackBlock> soundEffectList = new TagBlockList<SoundEffectPlaybackBlock>(1);
                [FieldAttribute("", typeof(TagBlock))]
                [BlockAttribute("platform_sound_override_mixbins_block", 8, typeof(PlatformSoundOverrideMixbinsBlock))]
                public TagBlock EmptyString;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString1;
                [FieldAttribute("filter", typeof(TagBlock))]
                [BlockAttribute("platform_sound_filter_block", 1, typeof(PlatformSoundFilterBlock))]
                public TagBlock Filter;
                [FieldAttribute("pitch lfo", typeof(TagBlock))]
                [BlockAttribute("platform_sound_pitch_lfo_block", 1, typeof(PlatformSoundPitchLfoBlock))]
                public TagBlock PitchLfo;
                [FieldAttribute("filter lfo", typeof(TagBlock))]
                [BlockAttribute("platform_sound_filter_lfo_block", 1, typeof(PlatformSoundFilterLfoBlock))]
                public TagBlock FilterLfo;
                [FieldAttribute("sound effect", typeof(TagBlock))]
                [BlockAttribute("sound_effect_playback_block", 1, typeof(SoundEffectPlaybackBlock))]
                public TagBlock SoundEffect;
                public TagBlockList<PlatformSoundOverrideMixbinsBlock> EmptyStringList
                {
                    get
                    {
                        return this.emptyStringList;
                    }
                }
                public TagBlockList<PlatformSoundFilterBlock> FilterList
                {
                    get
                    {
                        return this.filterList;
                    }
                }
                public TagBlockList<PlatformSoundPitchLfoBlock> PitchLfoList
                {
                    get
                    {
                        return this.pitchLfoList;
                    }
                }
                public TagBlockList<PlatformSoundFilterLfoBlock> FilterLfoList
                {
                    get
                    {
                        return this.filterLfoList;
                    }
                }
                public TagBlockList<SoundEffectPlaybackBlock> SoundEffectList
                {
                    get
                    {
                        return this.soundEffectList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 72;
                    }
                }
                public override void Initialize()
                {
                    this.emptyStringList.Clear();
                    this.filterList.Clear();
                    this.pitchLfoList.Clear();
                    this.filterLfoList.Clear();
                    this.soundEffectList.Clear();
                    this.EmptyString = TagBlock.Zero;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString1 = new byte[8];
                    this.Filter = TagBlock.Zero;
                    this.PitchLfo = TagBlock.Zero;
                    this.FilterLfo = TagBlock.Zero;
                    this.SoundEffect = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt64();
                    this.emptyStringList.Read(reader, this.EmptyString);
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.EmptyString1 = reader.ReadBytes(8);
                    this.Filter = reader.ReadInt64();
                    this.filterList.Read(reader, this.Filter);
                    this.PitchLfo = reader.ReadInt64();
                    this.pitchLfoList.Read(reader, this.PitchLfo);
                    this.FilterLfo = reader.ReadInt64();
                    this.filterLfoList.Read(reader, this.FilterLfo);
                    this.SoundEffect = reader.ReadInt64();
                    this.soundEffectList.Read(reader, this.SoundEffect);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class PlatformSoundOverrideMixbinsBlock : AbideTagBlock
                {
                    [FieldAttribute("mixbin", typeof(MixbinOptions))]
                    [OptionsAttribute(typeof(MixbinOptions), false)]
                    public MixbinOptions Mixbin;
                    [FieldAttribute("gain:dB", typeof(Single))]
                    public Single Gain;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Mixbin = ((MixbinOptions)(0));
                        this.Gain = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Mixbin = ((MixbinOptions)(reader.ReadInt32()));
                        this.Gain = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum MixbinOptions : Int32
                    {
                        FrontLeft = 0,
                        FrontRight = 1,
                        BackLeft = 2,
                        BackRight = 3,
                        Center = 4,
                        LowFrequency = 5,
                        Reverb = 6,
                        _3dFrontLeft = 7,
                        _3dFrontRight = 8,
                        _3dBackLeft = 9,
                        _3dBackRight = 10,
                        DefaultLeftSpeakers = 11,
                        DefaultRightSpeakers = 12,
                    }
                }
                [FieldSetAttribute(72, 4)]
                public sealed class PlatformSoundFilterBlock : AbideTagBlock
                {
                    [FieldAttribute("filter type", typeof(FilterTypeOptions))]
                    [OptionsAttribute(typeof(FilterTypeOptions), false)]
                    public FilterTypeOptions FilterType;
                    [FieldAttribute("filter width:[0,7]", typeof(Int32))]
                    public Int32 FilterWidth;
                    [FieldAttribute("left filter frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock LeftFilterFrequency;
                    [FieldAttribute("left filter gain", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock LeftFilterGain;
                    [FieldAttribute("right filter frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock RightFilterFrequency;
                    [FieldAttribute("right filter gain", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock RightFilterGain;
                    public override int Size
                    {
                        get
                        {
                            return 72;
                        }
                    }
                    public override void Initialize()
                    {
                        this.FilterType = ((FilterTypeOptions)(0));
                        this.FilterWidth = 0;
                        this.LeftFilterFrequency = new SoundPlaybackParameterDefinitionBlock();
                        this.LeftFilterGain = new SoundPlaybackParameterDefinitionBlock();
                        this.RightFilterFrequency = new SoundPlaybackParameterDefinitionBlock();
                        this.RightFilterGain = new SoundPlaybackParameterDefinitionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.FilterType = ((FilterTypeOptions)(reader.ReadInt32()));
                        this.FilterWidth = reader.ReadInt32();
                        this.LeftFilterFrequency = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.LeftFilterGain = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.RightFilterFrequency = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.RightFilterGain = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class SoundPlaybackParameterDefinitionBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum FilterTypeOptions : Int32
                    {
                        ParametricEq = 0,
                        Dls2 = 1,
                        BothOnlyValidForMono = 2,
                    }
                }
                [FieldSetAttribute(48, 4)]
                public sealed class PlatformSoundPitchLfoBlock : AbideTagBlock
                {
                    [FieldAttribute("delay", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock Delay;
                    [FieldAttribute("frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock Frequency;
                    [FieldAttribute("pitch modulation", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock PitchModulation;
                    public override int Size
                    {
                        get
                        {
                            return 48;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Delay = new SoundPlaybackParameterDefinitionBlock();
                        this.Frequency = new SoundPlaybackParameterDefinitionBlock();
                        this.PitchModulation = new SoundPlaybackParameterDefinitionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Delay = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.Frequency = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.PitchModulation = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class SoundPlaybackParameterDefinitionBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(64, 4)]
                public sealed class PlatformSoundFilterLfoBlock : AbideTagBlock
                {
                    [FieldAttribute("delay", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock Delay;
                    [FieldAttribute("frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock Frequency;
                    [FieldAttribute("cutoff modulation", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock CutoffModulation;
                    [FieldAttribute("gain modulation", typeof(SoundPlaybackParameterDefinitionBlock))]
                    public SoundPlaybackParameterDefinitionBlock GainModulation;
                    public override int Size
                    {
                        get
                        {
                            return 64;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Delay = new SoundPlaybackParameterDefinitionBlock();
                        this.Frequency = new SoundPlaybackParameterDefinitionBlock();
                        this.CutoffModulation = new SoundPlaybackParameterDefinitionBlock();
                        this.GainModulation = new SoundPlaybackParameterDefinitionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Delay = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.Frequency = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.CutoffModulation = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                        this.GainModulation = reader.ReadDataStructure<SoundPlaybackParameterDefinitionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class SoundPlaybackParameterDefinitionBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(72, 4)]
                public sealed class SoundEffectPlaybackBlock : AbideTagBlock
                {
                    [FieldAttribute("sound effect struct", typeof(SoundEffectStructDefinitionBlock))]
                    public SoundEffectStructDefinitionBlock SoundEffectStruct;
                    public override int Size
                    {
                        get
                        {
                            return 72;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundEffectStruct = new SoundEffectStructDefinitionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundEffectStruct = reader.ReadDataStructure<SoundEffectStructDefinitionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(72, 4)]
                    public sealed class SoundEffectStructDefinitionBlock : AbideTagBlock
                    {
                        private DataList emptyStringList = new DataList(1024);
                        private TagBlockList<SoundEffectComponentBlock> componentsList = new TagBlockList<SoundEffectComponentBlock>(16);
                        private TagBlockList<SoundEffectOverridesBlock> emptyStringList1 = new TagBlockList<SoundEffectOverridesBlock>(128);
                        private TagBlockList<PlatformSoundEffectCollectionBlock> emptyStringList2 = new TagBlockList<PlatformSoundEffectCollectionBlock>(1);
                        [FieldAttribute("", typeof(TagReference))]
                        public TagReference EmptyString;
                        [FieldAttribute("components", typeof(TagBlock))]
                        [BlockAttribute("sound_effect_component_block", 16, typeof(SoundEffectComponentBlock))]
                        public TagBlock Components;
                        [FieldAttribute("", typeof(TagBlock))]
                        [BlockAttribute("sound_effect_overrides_block", 128, typeof(SoundEffectOverridesBlock))]
                        public TagBlock EmptyString1;
                        [FieldAttribute("", typeof(TagBlock))]
                        [DataAttribute(1024)]
                        public TagBlock EmptyString2;
                        [FieldAttribute("", typeof(TagBlock))]
                        [BlockAttribute("platform_sound_effect_collection_block", 1, typeof(PlatformSoundEffectCollectionBlock))]
                        public TagBlock EmptyString3;
                        public DataList EmptyStringList
                        {
                            get
                            {
                                return this.emptyStringList;
                            }
                        }
                        public TagBlockList<SoundEffectComponentBlock> ComponentsList
                        {
                            get
                            {
                                return this.componentsList;
                            }
                        }
                        public TagBlockList<SoundEffectOverridesBlock> EmptyStringList1
                        {
                            get
                            {
                                return this.emptyStringList1;
                            }
                        }
                        public TagBlockList<PlatformSoundEffectCollectionBlock> EmptyStringList2
                        {
                            get
                            {
                                return this.emptyStringList2;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 72;
                            }
                        }
                        public override void Initialize()
                        {
                            this.emptyStringList.Clear();
                            this.componentsList.Clear();
                            this.emptyStringList1.Clear();
                            this.emptyStringList2.Clear();
                            this.EmptyString = TagReference.Null;
                            this.Components = TagBlock.Zero;
                            this.EmptyString1 = TagBlock.Zero;
                            this.EmptyString2 = TagBlock.Zero;
                            this.EmptyString3 = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.EmptyString = reader.Read<TagReference>();
                            this.Components = reader.ReadInt64();
                            this.componentsList.Read(reader, this.Components);
                            this.EmptyString1 = reader.ReadInt64();
                            this.emptyStringList1.Read(reader, this.EmptyString1);
                            this.EmptyString2 = reader.ReadInt64();
                            this.EmptyString3 = reader.ReadInt64();
                            this.emptyStringList2.Read(reader, this.EmptyString3);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(24, 4)]
                        public sealed class SoundEffectComponentBlock : AbideTagBlock
                        {
                            [FieldAttribute("sound^", typeof(TagReference))]
                            public TagReference Sound;
                            [FieldAttribute("gain:dB#additional attenuation to sound", typeof(Single))]
                            public Single Gain;
                            [FieldAttribute("flags", typeof(FlagsOptions))]
                            [OptionsAttribute(typeof(FlagsOptions), true)]
                            public FlagsOptions Flags;
                            public override int Size
                            {
                                get
                                {
                                    return 24;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Sound = TagReference.Null;
                                this.Gain = 0;
                                this.Flags = ((FlagsOptions)(0));
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Sound = reader.Read<TagReference>();
                                this.Gain = reader.ReadSingle();
                                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            public enum FlagsOptions : Int32
                            {
                                DontPlayAtStart = 1,
                                PlayOnStop = 2,
                                EmptyString = 4,
                                PlayAlternate = 8,
                                EmptyString1 = 16,
                                SyncWithOriginLoopingSound = 32,
                            }
                        }
                        [FieldSetAttribute(16, 4)]
                        public sealed class SoundEffectOverridesBlock : AbideTagBlock
                        {
                            private TagBlockList<SoundEffectOverrideParametersBlock> overridesList = new TagBlockList<SoundEffectOverrideParametersBlock>(128);
                            [FieldAttribute("name", typeof(StringId))]
                            public StringId Name;
                            [FieldAttribute("overrides", typeof(TagBlock))]
                            [BlockAttribute("sound_effect_override_parameters_block", 128, typeof(SoundEffectOverrideParametersBlock))]
                            public TagBlock Overrides;
                            public TagBlockList<SoundEffectOverrideParametersBlock> OverridesList
                            {
                                get
                                {
                                    return this.overridesList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 16;
                                }
                            }
                            public override void Initialize()
                            {
                                this.overridesList.Clear();
                                this.Name = StringId.Zero;
                                this.Overrides = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Name = reader.ReadInt32();
                                this.Overrides = reader.ReadInt64();
                                this.overridesList.Read(reader, this.Overrides);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(36, 4)]
                            public sealed class SoundEffectOverrideParametersBlock : AbideTagBlock
                            {
                                [FieldAttribute("name", typeof(StringId))]
                                public StringId Name;
                                [FieldAttribute("input", typeof(StringId))]
                                public StringId Input;
                                [FieldAttribute("range", typeof(StringId))]
                                public StringId Range;
                                [FieldAttribute("time period: seconds", typeof(Single))]
                                public Single TimePeriod;
                                [FieldAttribute("integer value", typeof(Int32))]
                                public Int32 IntegerValue;
                                [FieldAttribute("real value", typeof(Single))]
                                public Single RealValue;
                                [FieldAttribute("function value", typeof(MappingFunctionBlock))]
                                public MappingFunctionBlock FunctionValue;
                                public override int Size
                                {
                                    get
                                    {
                                        return 36;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.Name = StringId.Zero;
                                    this.Input = StringId.Zero;
                                    this.Range = StringId.Zero;
                                    this.TimePeriod = 0;
                                    this.IntegerValue = 0;
                                    this.RealValue = 0;
                                    this.FunctionValue = new MappingFunctionBlock();
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Name = reader.ReadInt32();
                                    this.Input = reader.ReadInt32();
                                    this.Range = reader.ReadInt32();
                                    this.TimePeriod = reader.ReadSingle();
                                    this.IntegerValue = reader.ReadInt32();
                                    this.RealValue = reader.ReadSingle();
                                    this.FunctionValue = reader.ReadDataStructure<MappingFunctionBlock>();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                                [FieldSetAttribute(12, 4)]
                                public sealed class MappingFunctionBlock : AbideTagBlock
                                {
                                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                                    [FieldAttribute("data", typeof(TagBlock))]
                                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                                    public TagBlock Data;
                                    public TagBlockList<ByteBlock> DataList
                                    {
                                        get
                                        {
                                            return this.dataList;
                                        }
                                    }
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 12;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.dataList.Clear();
                                        this.Data = TagBlock.Zero;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.Data = reader.ReadInt64();
                                        this.dataList.Read(reader, this.Data);
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                    [FieldSetAttribute(1, 4)]
                                    public sealed class ByteBlock : AbideTagBlock
                                    {
                                        [FieldAttribute("Value", typeof(Byte))]
                                        public Byte Value;
                                        public override int Size
                                        {
                                            get
                                            {
                                                return 1;
                                            }
                                        }
                                        public override void Initialize()
                                        {
                                            this.Value = 0;
                                        }
                                        public override void Read(BinaryReader reader)
                                        {
                                            this.Value = reader.ReadByte();
                                        }
                                        public override void Write(BinaryWriter writer)
                                        {
                                        }
                                    }
                                }
                            }
                        }
                        [FieldSetAttribute(28, 4)]
                        public sealed class PlatformSoundEffectCollectionBlock : AbideTagBlock
                        {
                            private TagBlockList<PlatformSoundEffectBlock> soundEffectsList = new TagBlockList<PlatformSoundEffectBlock>(8);
                            private TagBlockList<PlatformSoundEffectFunctionBlock> lowFrequencyInputList = new TagBlockList<PlatformSoundEffectFunctionBlock>(16);
                            [FieldAttribute("sound effects*", typeof(TagBlock))]
                            [BlockAttribute("platform_sound_effect_block", 8, typeof(PlatformSoundEffectBlock))]
                            public TagBlock SoundEffects;
                            [FieldAttribute("low frequency input*", typeof(TagBlock))]
                            [BlockAttribute("platform_sound_effect_function_block", 16, typeof(PlatformSoundEffectFunctionBlock))]
                            public TagBlock LowFrequencyInput;
                            [FieldAttribute("sound effect overrides", typeof(Int32))]
                            public Int32 SoundEffectOverrides;
                            public TagBlockList<PlatformSoundEffectBlock> SoundEffectsList
                            {
                                get
                                {
                                    return this.soundEffectsList;
                                }
                            }
                            public TagBlockList<PlatformSoundEffectFunctionBlock> LowFrequencyInputList
                            {
                                get
                                {
                                    return this.lowFrequencyInputList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 28;
                                }
                            }
                            public override void Initialize()
                            {
                                this.soundEffectsList.Clear();
                                this.lowFrequencyInputList.Clear();
                                this.SoundEffects = TagBlock.Zero;
                                this.LowFrequencyInput = TagBlock.Zero;
                                this.SoundEffectOverrides = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.SoundEffects = reader.ReadInt64();
                                this.soundEffectsList.Read(reader, this.SoundEffects);
                                this.LowFrequencyInput = reader.ReadInt64();
                                this.lowFrequencyInputList.Read(reader, this.LowFrequencyInput);
                                this.SoundEffectOverrides = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(40, 4)]
                            public sealed class PlatformSoundEffectBlock : AbideTagBlock
                            {
                                private TagBlockList<PlatformSoundEffectFunctionBlock> functionInputsList = new TagBlockList<PlatformSoundEffectFunctionBlock>(16);
                                private TagBlockList<PlatformSoundEffectConstantBlock> constantInputsList = new TagBlockList<PlatformSoundEffectConstantBlock>(16);
                                private TagBlockList<PlatformSoundEffectOverrideDescriptorBlock> templateOverrideDescriptorsList = new TagBlockList<PlatformSoundEffectOverrideDescriptorBlock>(16);
                                [FieldAttribute("function inputs", typeof(TagBlock))]
                                [BlockAttribute("platform_sound_effect_function_block", 16, typeof(PlatformSoundEffectFunctionBlock))]
                                public TagBlock FunctionInputs;
                                [FieldAttribute("constant inputs", typeof(TagBlock))]
                                [BlockAttribute("platform_sound_effect_constant_block", 16, typeof(PlatformSoundEffectConstantBlock))]
                                public TagBlock ConstantInputs;
                                [FieldAttribute("template override descriptors", typeof(TagBlock))]
                                [BlockAttribute("platform_sound_effect_override_descriptor_block", 16, typeof(PlatformSoundEffectOverrideDescriptorBlock))]
                                public TagBlock TemplateOverrideDescriptors;
                                [FieldAttribute("input overrides", typeof(Int32))]
                                public Int32 InputOverrides;
                                public TagBlockList<PlatformSoundEffectFunctionBlock> FunctionInputsList
                                {
                                    get
                                    {
                                        return this.functionInputsList;
                                    }
                                }
                                public TagBlockList<PlatformSoundEffectConstantBlock> ConstantInputsList
                                {
                                    get
                                    {
                                        return this.constantInputsList;
                                    }
                                }
                                public TagBlockList<PlatformSoundEffectOverrideDescriptorBlock> TemplateOverrideDescriptorsList
                                {
                                    get
                                    {
                                        return this.templateOverrideDescriptorsList;
                                    }
                                }
                                public override int Size
                                {
                                    get
                                    {
                                        return 40;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.functionInputsList.Clear();
                                    this.constantInputsList.Clear();
                                    this.templateOverrideDescriptorsList.Clear();
                                    this.FunctionInputs = TagBlock.Zero;
                                    this.ConstantInputs = TagBlock.Zero;
                                    this.TemplateOverrideDescriptors = TagBlock.Zero;
                                    this.InputOverrides = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.FunctionInputs = reader.ReadInt64();
                                    this.functionInputsList.Read(reader, this.FunctionInputs);
                                    this.ConstantInputs = reader.ReadInt64();
                                    this.constantInputsList.Read(reader, this.ConstantInputs);
                                    this.TemplateOverrideDescriptors = reader.ReadInt64();
                                    this.templateOverrideDescriptorsList.Read(reader, this.TemplateOverrideDescriptors);
                                    this.InputOverrides = reader.ReadInt32();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                                [FieldSetAttribute(20, 4)]
                                public sealed class PlatformSoundEffectFunctionBlock : AbideTagBlock
                                {
                                    [FieldAttribute("input", typeof(InputOptions))]
                                    [OptionsAttribute(typeof(InputOptions), false)]
                                    public InputOptions Input;
                                    [FieldAttribute("range", typeof(RangeOptions))]
                                    [OptionsAttribute(typeof(RangeOptions), false)]
                                    public RangeOptions Range;
                                    [FieldAttribute("function", typeof(MappingFunctionBlock))]
                                    public MappingFunctionBlock Function;
                                    [FieldAttribute("time period: seconds", typeof(Single))]
                                    public Single TimePeriod;
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 20;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.Input = ((InputOptions)(0));
                                        this.Range = ((RangeOptions)(0));
                                        this.Function = new MappingFunctionBlock();
                                        this.TimePeriod = 0;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.Input = ((InputOptions)(reader.ReadInt16()));
                                        this.Range = ((RangeOptions)(reader.ReadInt16()));
                                        this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                                        this.TimePeriod = reader.ReadSingle();
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                    [FieldSetAttribute(12, 4)]
                                    public sealed class MappingFunctionBlock : AbideTagBlock
                                    {
                                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                                        [FieldAttribute("data", typeof(TagBlock))]
                                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                                        public TagBlock Data;
                                        public TagBlockList<ByteBlock> DataList
                                        {
                                            get
                                            {
                                                return this.dataList;
                                            }
                                        }
                                        public override int Size
                                        {
                                            get
                                            {
                                                return 12;
                                            }
                                        }
                                        public override void Initialize()
                                        {
                                            this.dataList.Clear();
                                            this.Data = TagBlock.Zero;
                                        }
                                        public override void Read(BinaryReader reader)
                                        {
                                            this.Data = reader.ReadInt64();
                                            this.dataList.Read(reader, this.Data);
                                        }
                                        public override void Write(BinaryWriter writer)
                                        {
                                        }
                                        [FieldSetAttribute(1, 4)]
                                        public sealed class ByteBlock : AbideTagBlock
                                        {
                                            [FieldAttribute("Value", typeof(Byte))]
                                            public Byte Value;
                                            public override int Size
                                            {
                                                get
                                                {
                                                    return 1;
                                                }
                                            }
                                            public override void Initialize()
                                            {
                                                this.Value = 0;
                                            }
                                            public override void Read(BinaryReader reader)
                                            {
                                                this.Value = reader.ReadByte();
                                            }
                                            public override void Write(BinaryWriter writer)
                                            {
                                            }
                                        }
                                    }
                                    public enum InputOptions : Int16
                                    {
                                        Zero = 0,
                                        Time = 1,
                                        Scale = 2,
                                        Rolloff = 3,
                                    }
                                    public enum RangeOptions : Int16
                                    {
                                        Zero = 0,
                                        Time = 1,
                                        Scale = 2,
                                        Rolloff = 3,
                                    }
                                }
                                [FieldSetAttribute(4, 4)]
                                public sealed class PlatformSoundEffectConstantBlock : AbideTagBlock
                                {
                                    [FieldAttribute("constant value", typeof(Single))]
                                    public Single ConstantValue;
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 4;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.ConstantValue = 0;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.ConstantValue = reader.ReadSingle();
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                }
                                [FieldSetAttribute(1, 4)]
                                public sealed class PlatformSoundEffectOverrideDescriptorBlock : AbideTagBlock
                                {
                                    [FieldAttribute("override descriptor", typeof(Byte))]
                                    public Byte OverrideDescriptor;
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 1;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.OverrideDescriptor = 0;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.OverrideDescriptor = reader.ReadByte();
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                }
                            }
                            [FieldSetAttribute(20, 4)]
                            public sealed class PlatformSoundEffectFunctionBlock : AbideTagBlock
                            {
                                [FieldAttribute("input", typeof(InputOptions))]
                                [OptionsAttribute(typeof(InputOptions), false)]
                                public InputOptions Input;
                                [FieldAttribute("range", typeof(RangeOptions))]
                                [OptionsAttribute(typeof(RangeOptions), false)]
                                public RangeOptions Range;
                                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                                public MappingFunctionBlock Function;
                                [FieldAttribute("time period: seconds", typeof(Single))]
                                public Single TimePeriod;
                                public override int Size
                                {
                                    get
                                    {
                                        return 20;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.Input = ((InputOptions)(0));
                                    this.Range = ((RangeOptions)(0));
                                    this.Function = new MappingFunctionBlock();
                                    this.TimePeriod = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Input = ((InputOptions)(reader.ReadInt16()));
                                    this.Range = ((RangeOptions)(reader.ReadInt16()));
                                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                                    this.TimePeriod = reader.ReadSingle();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                                [FieldSetAttribute(12, 4)]
                                public sealed class MappingFunctionBlock : AbideTagBlock
                                {
                                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                                    [FieldAttribute("data", typeof(TagBlock))]
                                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                                    public TagBlock Data;
                                    public TagBlockList<ByteBlock> DataList
                                    {
                                        get
                                        {
                                            return this.dataList;
                                        }
                                    }
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 12;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.dataList.Clear();
                                        this.Data = TagBlock.Zero;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.Data = reader.ReadInt64();
                                        this.dataList.Read(reader, this.Data);
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                    [FieldSetAttribute(1, 4)]
                                    public sealed class ByteBlock : AbideTagBlock
                                    {
                                        [FieldAttribute("Value", typeof(Byte))]
                                        public Byte Value;
                                        public override int Size
                                        {
                                            get
                                            {
                                                return 1;
                                            }
                                        }
                                        public override void Initialize()
                                        {
                                            this.Value = 0;
                                        }
                                        public override void Read(BinaryReader reader)
                                        {
                                            this.Value = reader.ReadByte();
                                        }
                                        public override void Write(BinaryWriter writer)
                                        {
                                        }
                                    }
                                }
                                public enum InputOptions : Int16
                                {
                                    Zero = 0,
                                    Time = 1,
                                    Scale = 2,
                                    Rolloff = 3,
                                }
                                public enum RangeOptions : Int16
                                {
                                    Zero = 0,
                                    Time = 1,
                                    Scale = 2,
                                    Rolloff = 3,
                                }
                            }
                        }
                    }
                }
                public enum FlagsOptions : Int32
                {
                    Use3dRadioHack = 1,
                }
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class SoundExtraInfoBlock : AbideTagBlock
        {
            private TagBlockList<SoundDefinitionLanguagePermutationInfoBlock> languagePermutationInfoList = new TagBlockList<SoundDefinitionLanguagePermutationInfoBlock>(576);
            private TagBlockList<SoundEncodedDialogueSectionBlock> encodedPermutationSectionList = new TagBlockList<SoundEncodedDialogueSectionBlock>(1);
            [FieldAttribute("language permutation info", typeof(TagBlock))]
            [BlockAttribute("sound_definition_language_permutation_info_block", 576, typeof(SoundDefinitionLanguagePermutationInfoBlock))]
            public TagBlock LanguagePermutationInfo;
            [FieldAttribute("encoded permutation section", typeof(TagBlock))]
            [BlockAttribute("sound_encoded_dialogue_section_block", 1, typeof(SoundEncodedDialogueSectionBlock))]
            public TagBlock EncodedPermutationSection;
            [FieldAttribute("geometry block info", typeof(GlobalGeometryBlockInfoStructBlock))]
            public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
            public TagBlockList<SoundDefinitionLanguagePermutationInfoBlock> LanguagePermutationInfoList
            {
                get
                {
                    return this.languagePermutationInfoList;
                }
            }
            public TagBlockList<SoundEncodedDialogueSectionBlock> EncodedPermutationSectionList
            {
                get
                {
                    return this.encodedPermutationSectionList;
                }
            }
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.languagePermutationInfoList.Clear();
                this.encodedPermutationSectionList.Clear();
                this.LanguagePermutationInfo = TagBlock.Zero;
                this.EncodedPermutationSection = TagBlock.Zero;
                this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.LanguagePermutationInfo = reader.ReadInt64();
                this.languagePermutationInfoList.Read(reader, this.LanguagePermutationInfo);
                this.EncodedPermutationSection = reader.ReadInt64();
                this.encodedPermutationSectionList.Read(reader, this.EncodedPermutationSection);
                this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class SoundDefinitionLanguagePermutationInfoBlock : AbideTagBlock
            {
                private TagBlockList<SoundPermutationRawInfoBlock> rawInfoBlockList = new TagBlockList<SoundPermutationRawInfoBlock>(18);
                [FieldAttribute("raw info block", typeof(TagBlock))]
                [BlockAttribute("sound_permutation_raw_info_block", 18, typeof(SoundPermutationRawInfoBlock))]
                public TagBlock RawInfoBlock;
                public TagBlockList<SoundPermutationRawInfoBlock> RawInfoBlockList
                {
                    get
                    {
                        return this.rawInfoBlockList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.rawInfoBlockList.Clear();
                    this.RawInfoBlock = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.RawInfoBlock = reader.ReadInt64();
                    this.rawInfoBlockList.Read(reader, this.RawInfoBlock);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(80, 4)]
                public sealed class SoundPermutationRawInfoBlock : AbideTagBlock
                {
                    private DataList emptyStringList = new DataList(16777216);
                    private DataList emptyStringList1 = new DataList(8192);
                    private DataList emptyStringList2 = new DataList(1048576);
                    private TagBlockList<SoundPermutationMarkerBlock> emptyStringList3 = new TagBlockList<SoundPermutationMarkerBlock>(65535);
                    [FieldAttribute("skip fraction name", typeof(StringId))]
                    public StringId SkipFractionName;
                    [FieldAttribute("", typeof(TagBlock))]
                    [DataAttribute(16777216)]
                    public TagBlock EmptyString;
                    [FieldAttribute("", typeof(TagBlock))]
                    [DataAttribute(8192)]
                    public TagBlock EmptyString1;
                    [FieldAttribute("", typeof(TagBlock))]
                    [DataAttribute(1048576)]
                    public TagBlock EmptyString2;
                    [FieldAttribute("", typeof(TagBlock))]
                    [BlockAttribute("sound_permutation_marker_block", 65535, typeof(SoundPermutationMarkerBlock))]
                    public TagBlock EmptyString3;
                    [FieldAttribute("compression*", typeof(CompressionOptions))]
                    [OptionsAttribute(typeof(CompressionOptions), false)]
                    public CompressionOptions Compression;
                    [FieldAttribute("language*", typeof(LanguageOptions))]
                    [OptionsAttribute(typeof(LanguageOptions), false)]
                    public LanguageOptions Language;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(1)]
                    public Byte[] EmptyString4;
                    public DataList EmptyStringList
                    {
                        get
                        {
                            return this.emptyStringList;
                        }
                    }
                    public DataList EmptyStringList1
                    {
                        get
                        {
                            return this.emptyStringList1;
                        }
                    }
                    public DataList EmptyStringList2
                    {
                        get
                        {
                            return this.emptyStringList2;
                        }
                    }
                    public TagBlockList<SoundPermutationMarkerBlock> EmptyStringList3
                    {
                        get
                        {
                            return this.emptyStringList3;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 80;
                        }
                    }
                    public override void Initialize()
                    {
                        this.emptyStringList.Clear();
                        this.emptyStringList1.Clear();
                        this.emptyStringList2.Clear();
                        this.emptyStringList3.Clear();
                        this.SkipFractionName = StringId.Zero;
                        this.EmptyString = TagBlock.Zero;
                        this.EmptyString1 = TagBlock.Zero;
                        this.EmptyString2 = TagBlock.Zero;
                        this.EmptyString3 = TagBlock.Zero;
                        this.Compression = ((CompressionOptions)(0));
                        this.Language = ((LanguageOptions)(0));
                        this.EmptyString4 = new byte[1];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SkipFractionName = reader.ReadInt32();
                        this.EmptyString = reader.ReadInt64();
                        this.EmptyString1 = reader.ReadInt64();
                        this.EmptyString2 = reader.ReadInt64();
                        this.EmptyString3 = reader.ReadInt64();
                        this.emptyStringList3.Read(reader, this.EmptyString3);
                        this.Compression = ((CompressionOptions)(reader.ReadInt16()));
                        this.Language = ((LanguageOptions)(reader.ReadByte()));
                        this.EmptyString4 = reader.ReadBytes(1);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class SoundPermutationMarkerBlock : AbideTagBlock
                    {
                        [FieldAttribute("marker id*", typeof(Int32))]
                        public Int32 MarkerId;
                        [FieldAttribute("name^*", typeof(StringId))]
                        public StringId Name;
                        [FieldAttribute("sample offset*", typeof(Int32))]
                        public Int32 SampleOffset;
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.MarkerId = 0;
                            this.Name = StringId.Zero;
                            this.SampleOffset = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.MarkerId = reader.ReadInt32();
                            this.Name = reader.ReadInt32();
                            this.SampleOffset = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum CompressionOptions : Int16
                    {
                        NoneBigEndian = 0,
                        XboxAdpcm = 1,
                        ImaAdpcm = 2,
                        NoneLittleEndian = 3,
                        Wma = 4,
                    }
                    public enum LanguageOptions : Byte
                    {
                        English = 0,
                        Japanese = 1,
                        German = 2,
                        French = 3,
                        Spanish = 4,
                        Italian = 5,
                        Korean = 6,
                        Chinese = 7,
                        Portuguese = 8,
                    }
                }
            }
            [FieldSetAttribute(32, 4)]
            public sealed class SoundEncodedDialogueSectionBlock : AbideTagBlock
            {
                private DataList encodedDataList = new DataList(301989888);
                private TagBlockList<SoundPermutationDialogueInfoBlock> soundDialogueInfoList = new TagBlockList<SoundPermutationDialogueInfoBlock>(288);
                [FieldAttribute("encoded data", typeof(TagBlock))]
                [DataAttribute(301989888)]
                public TagBlock EncodedData;
                [FieldAttribute("sound dialogue info", typeof(TagBlock))]
                [BlockAttribute("sound_permutation_dialogue_info_block", 288, typeof(SoundPermutationDialogueInfoBlock))]
                public TagBlock SoundDialogueInfo;
                public DataList EncodedDataList
                {
                    get
                    {
                        return this.encodedDataList;
                    }
                }
                public TagBlockList<SoundPermutationDialogueInfoBlock> SoundDialogueInfoList
                {
                    get
                    {
                        return this.soundDialogueInfoList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.encodedDataList.Clear();
                    this.soundDialogueInfoList.Clear();
                    this.EncodedData = TagBlock.Zero;
                    this.SoundDialogueInfo = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EncodedData = reader.ReadInt64();
                    this.SoundDialogueInfo = reader.ReadInt64();
                    this.soundDialogueInfoList.Read(reader, this.SoundDialogueInfo);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class SoundPermutationDialogueInfoBlock : AbideTagBlock
                {
                    [FieldAttribute("mouth data offset", typeof(Int32))]
                    public Int32 MouthDataOffset;
                    [FieldAttribute("mouth data length", typeof(Int32))]
                    public Int32 MouthDataLength;
                    [FieldAttribute("lipsync data offset", typeof(Int32))]
                    public Int32 LipsyncDataOffset;
                    [FieldAttribute("lipsync data length", typeof(Int32))]
                    public Int32 LipsyncDataLength;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.MouthDataOffset = 0;
                        this.MouthDataLength = 0;
                        this.LipsyncDataOffset = 0;
                        this.LipsyncDataLength = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.MouthDataOffset = reader.ReadInt32();
                        this.MouthDataLength = reader.ReadInt32();
                        this.LipsyncDataOffset = reader.ReadInt32();
                        this.LipsyncDataLength = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                [FieldAttribute("Block Offset*", typeof(Int32))]
                public Int32 BlockOffset;
                [FieldAttribute("Block Size*", typeof(Int32))]
                public Int32 BlockSize;
                [FieldAttribute("Section Data Size*", typeof(Int32))]
                public Int32 SectionDataSize;
                [FieldAttribute("Resource Data Size*", typeof(Int32))]
                public Int32 ResourceDataSize;
                [FieldAttribute("Resources*", typeof(TagBlock))]
                [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                public TagBlock Resources;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                public Int16 OwnerTagSectionOffset;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                {
                    get
                    {
                        return this.resourcesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.resourcesList.Clear();
                    this.BlockOffset = 0;
                    this.BlockSize = 0;
                    this.SectionDataSize = 0;
                    this.ResourceDataSize = 0;
                    this.Resources = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                    this.OwnerTagSectionOffset = 0;
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.BlockOffset = reader.ReadInt32();
                    this.BlockSize = reader.ReadInt32();
                    this.SectionDataSize = reader.ReadInt32();
                    this.ResourceDataSize = reader.ReadInt32();
                    this.Resources = reader.ReadInt64();
                    this.resourcesList.Read(reader, this.Resources);
                    this.EmptyString = reader.ReadBytes(4);
                    this.OwnerTagSectionOffset = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(3)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Primary Locator*", typeof(Int16))]
                    public Int16 PrimaryLocator;
                    [FieldAttribute("Secondary Locator*", typeof(Int16))]
                    public Int16 SecondaryLocator;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                    public Int32 ResourceDataOffset;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.EmptyString = new byte[3];
                        this.PrimaryLocator = 0;
                        this.SecondaryLocator = 0;
                        this.ResourceDataSize = 0;
                        this.ResourceDataOffset = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.EmptyString = reader.ReadBytes(3);
                        this.PrimaryLocator = reader.ReadInt16();
                        this.SecondaryLocator = reader.ReadInt16();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.ResourceDataOffset = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        TagBlock = 0,
                        TagData = 1,
                        VertexBuffer = 2,
                    }
                }
            }
        }
        [FieldSetAttribute(56, 4)]
        public sealed class SoundPlaybackParametersStructBlock : AbideTagBlock
        {
            [FieldAttribute("minimum distance:world units#the distance below which this sound no longer gets l" +
                "ouder", typeof(Single))]
            public Single MinimumDistance;
            [FieldAttribute("maximum distance:world units#the distance beyond which this sound is no longer au" +
                "dible", typeof(Single))]
            public Single MaximumDistance;
            [FieldAttribute("skip fraction#fraction of requests to play this sound that will be ignored (0 mea" +
                "ns always play.)", typeof(Single))]
            public Single SkipFraction;
            [FieldAttribute("maximum bend per second:cents", typeof(Single))]
            public Single MaximumBendPerSecond;
            [FieldAttribute("gain base:dB#sound\'s random gain will start here", typeof(Single))]
            public Single GainBase;
            [FieldAttribute("gain variance:dB#sound\'s gain will be randomly modulated within this range", typeof(Single))]
            public Single GainVariance;
            [FieldAttribute("inner cone angle:degrees#within the cone defined by this angle and the sound\'s di" +
                "rection, the sound plays with a gain of 1.0.", typeof(Single))]
            public Single InnerConeAngle;
            [FieldAttribute("outer cone angle:degrees#outside the cone defined by this angle and the sound\'s d" +
                "irection, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound doe" +
                "s not attenuate with direction.)", typeof(Single))]
            public Single OuterConeAngle;
            [FieldAttribute("outer cone gain:dB#the gain to use when the sound is directed away from the liste" +
                "ner", typeof(Single))]
            public Single OuterConeGain;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("azimuth", typeof(Single))]
            public Single Azimuth;
            [FieldAttribute("positional gain:dB", typeof(Single))]
            public Single PositionalGain;
            [FieldAttribute("first person gain:dB", typeof(Single))]
            public Single FirstPersonGain;
            public override int Size
            {
                get
                {
                    return 56;
                }
            }
            public override void Initialize()
            {
                this.MinimumDistance = 0;
                this.MaximumDistance = 0;
                this.SkipFraction = 0;
                this.MaximumBendPerSecond = 0;
                this.GainBase = 0;
                this.GainVariance = 0;
                this.InnerConeAngle = 0;
                this.OuterConeAngle = 0;
                this.OuterConeGain = 0;
                this.Flags = ((FlagsOptions)(0));
                this.Azimuth = 0;
                this.PositionalGain = 0;
                this.FirstPersonGain = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.MinimumDistance = reader.ReadSingle();
                this.MaximumDistance = reader.ReadSingle();
                this.SkipFraction = reader.ReadSingle();
                this.MaximumBendPerSecond = reader.ReadSingle();
                this.GainBase = reader.ReadSingle();
                this.GainVariance = reader.ReadSingle();
                this.InnerConeAngle = reader.ReadSingle();
                this.OuterConeAngle = reader.ReadSingle();
                this.OuterConeGain = reader.ReadSingle();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Azimuth = reader.ReadSingle();
                this.PositionalGain = reader.ReadSingle();
                this.FirstPersonGain = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                OverrideAzimuth = 1,
                Override3dGain = 2,
                OverrideSpeakerGain = 4,
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class SoundScaleModifiersStructBlock : AbideTagBlock
        {
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
            }
            public override void Read(BinaryReader reader)
            {
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(28, 4)]
        public sealed class SoundPromotionParametersStructBlock : AbideTagBlock
        {
            private TagBlockList<SoundPromotionRuleBlock> promotionRulesList = new TagBlockList<SoundPromotionRuleBlock>(9);
            private TagBlockList<SoundPromotionRuntimeTimerBlock> emptyStringList = new TagBlockList<SoundPromotionRuntimeTimerBlock>(9);
            [FieldAttribute("promotion rules", typeof(TagBlock))]
            [BlockAttribute("sound_promotion_rule_block", 9, typeof(SoundPromotionRuleBlock))]
            public TagBlock PromotionRules;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("sound_promotion_runtime_timer_block", 9, typeof(SoundPromotionRuntimeTimerBlock))]
            public TagBlock EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString1;
            public TagBlockList<SoundPromotionRuleBlock> PromotionRulesList
            {
                get
                {
                    return this.promotionRulesList;
                }
            }
            public TagBlockList<SoundPromotionRuntimeTimerBlock> EmptyStringList
            {
                get
                {
                    return this.emptyStringList;
                }
            }
            public override int Size
            {
                get
                {
                    return 28;
                }
            }
            public override void Initialize()
            {
                this.promotionRulesList.Clear();
                this.emptyStringList.Clear();
                this.PromotionRules = TagBlock.Zero;
                this.EmptyString = TagBlock.Zero;
                this.EmptyString1 = new byte[12];
            }
            public override void Read(BinaryReader reader)
            {
                this.PromotionRules = reader.ReadInt64();
                this.promotionRulesList.Read(reader, this.PromotionRules);
                this.EmptyString = reader.ReadInt64();
                this.emptyStringList.Read(reader, this.EmptyString);
                this.EmptyString1 = reader.ReadBytes(12);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class SoundPromotionRuleBlock : AbideTagBlock
            {
                [FieldAttribute("pitch range^", typeof(Int16))]
                public Int16 PitchRange;
                [FieldAttribute("maximum playing count", typeof(Int16))]
                public Int16 MaximumPlayingCount;
                [FieldAttribute("suppression time:seconds#time from when first permutation plays to when another s" +
                    "ound from an equal or lower promotion can play", typeof(Single))]
                public Single SuppressionTime;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.PitchRange = 0;
                    this.MaximumPlayingCount = 0;
                    this.SuppressionTime = 0;
                    this.EmptyString = new byte[8];
                }
                public override void Read(BinaryReader reader)
                {
                    this.PitchRange = reader.ReadInt16();
                    this.MaximumPlayingCount = reader.ReadInt16();
                    this.SuppressionTime = reader.ReadSingle();
                    this.EmptyString = reader.ReadBytes(8);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class SoundPromotionRuntimeTimerBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Int32))]
                public Int32 EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        public enum FlagsOptions : Int32
        {
            FitToAdpcmBlocksize = 1,
            SplitLongSoundIntoPermutations = 2,
            AlwaysSpatialize = 4,
            NeverObstruct = 8,
            InternalDontTouch = 16,
            UseHugeSoundTransmission = 32,
            LinkCountToOwnerUnit = 64,
            PitchRangeIsLanguage = 128,
            DontUseSoundClassSpeakerFlag = 256,
            DontUseLipsyncData = 512,
        }
        public enum ClassOptions : Byte
        {
            ProjectileImpact = 0,
            ProjectileDetonation = 1,
            ProjectileFlyby = 2,
            EmptyString = 3,
            WeaponFire = 4,
            WeaponReady = 5,
            WeaponReload = 6,
            WeaponEmpty = 7,
            WeaponCharge = 8,
            WeaponOverheat = 9,
            WeaponIdle = 10,
            WeaponMelee = 11,
            WeaponAnimation = 12,
            ObjectImpacts = 13,
            ParticleImpacts = 14,
            EmptyString1 = 15,
            EmptyString2 = 16,
            EmptyString3 = 17,
            UnitFootsteps = 18,
            UnitDialog = 19,
            UnitAnimation = 20,
            EmptyString4 = 21,
            VehicleCollision = 22,
            VehicleEngine = 23,
            VehicleAnimation = 24,
            EmptyString5 = 25,
            DeviceDoor = 26,
            EmptyString6 = 27,
            DeviceMachinery = 28,
            DeviceStationary = 29,
            EmptyString7 = 30,
            EmptyString8 = 31,
            Music = 32,
            AmbientNature = 33,
            AmbientMachinery = 34,
            EmptyString9 = 35,
            HugeAss = 36,
            ObjectLooping = 37,
            CinematicMusic = 38,
            EmptyString10 = 39,
            EmptyString11 = 40,
            EmptyString12 = 41,
            EmptyString13 = 42,
            EmptyString14 = 43,
            EmptyString15 = 44,
            CortanaMission = 45,
            CortanaCinematic = 46,
            MissionDialog = 47,
            CinematicDialog = 48,
            ScriptedCinematicFoley = 49,
            GameEvent = 50,
            Ui = 51,
            Test = 52,
            MultilingualTest = 53,
        }
        public enum SampleRateOptions : Byte
        {
            _22khz = 0,
            _44khz = 1,
            _32khz = 2,
        }
        public enum EmptyStringOptions : Byte
        {
            None = 0,
            OutputFrontSpeakers = 1,
            OutputRearSpeakers = 2,
            OutputCenterSpeakers = 3,
        }
        public enum ImportTypeOptions : Byte
        {
            Unknown = 0,
            SingleShot = 1,
            SingleLayer = 2,
            MultiLayer = 3,
        }
        public enum EncodingOptions : Byte
        {
            Mono = 0,
            Stereo = 1,
            Codec = 2,
        }
        public enum CompressionOptions : Byte
        {
            NoneBigEndian = 0,
            XboxAdpcm = 1,
            ImaAdpcm = 2,
            NoneLittleEndian = 3,
            Wma = 4,
        }
    }
}
#pragma warning restore CS1591
