#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("multiplayer_globals", 1836412007u, 4294967293u, typeof(MultiplayerGlobalsBlock))]
    public sealed class MultiplayerGlobalsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("universal", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("multiplayer_universal_block", 1, typeof(MultiplayerUniversalBlock))]
        public TagBlock Universal;
        [Abide.Guerilla.Tags.FieldAttribute("runtime", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("multiplayer_runtime_block", 1, typeof(MultiplayerRuntimeBlock))]
        public TagBlock Runtime;
        public int Size
        {
            get
            {
                return 24;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
        public sealed class MultiplayerUniversalBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("random player names", typeof(TagReference))]
            public TagReference RandomPlayerNames;
            [Abide.Guerilla.Tags.FieldAttribute("team names", typeof(TagReference))]
            public TagReference TeamNames;
            [Abide.Guerilla.Tags.FieldAttribute("team colors", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("multiplayer_color_block", 32, typeof(MultiplayerColorBlock))]
            public TagBlock TeamColors;
            [Abide.Guerilla.Tags.FieldAttribute("multiplayer text", typeof(TagReference))]
            public TagReference MultiplayerText;
            public int Size
            {
                get
                {
                    return 60;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class MultiplayerColorBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(1640, 4)]
        public sealed class MultiplayerRuntimeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flag", typeof(TagReference))]
            public TagReference Flag;
            [Abide.Guerilla.Tags.FieldAttribute("ball", typeof(TagReference))]
            public TagReference Ball;
            [Abide.Guerilla.Tags.FieldAttribute("unit", typeof(TagReference))]
            public TagReference Unit;
            [Abide.Guerilla.Tags.FieldAttribute("flag shader", typeof(TagReference))]
            public TagReference FlagShader;
            [Abide.Guerilla.Tags.FieldAttribute("hill shader", typeof(TagReference))]
            public TagReference HillShader;
            [Abide.Guerilla.Tags.FieldAttribute("head", typeof(TagReference))]
            public TagReference Head;
            [Abide.Guerilla.Tags.FieldAttribute("juggernaut powerup", typeof(TagReference))]
            public TagReference JuggernautPowerup;
            [Abide.Guerilla.Tags.FieldAttribute("da bomb", typeof(TagReference))]
            public TagReference DaBomb;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("weapons", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("weapons_block", 20, typeof(WeaponsBlock))]
            public TagBlock Weapons;
            [Abide.Guerilla.Tags.FieldAttribute("vehicles", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("vehicles_block", 20, typeof(VehiclesBlock))]
            public TagBlock Vehicles;
            [Abide.Guerilla.Tags.FieldAttribute("arr!", typeof(GrenadeAndPowerupStructBlock))]
            public GrenadeAndPowerupStructBlock Arr;
            [Abide.Guerilla.Tags.FieldAttribute("in game text", typeof(TagReference))]
            public TagReference InGameText;
            [Abide.Guerilla.Tags.FieldAttribute("sounds", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sounds_block", 60, typeof(SoundsBlock))]
            public TagBlock Sounds;
            [Abide.Guerilla.Tags.FieldAttribute("general events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_general_event_block", 128, typeof(GameEngineGeneralEventBlock))]
            public TagBlock GeneralEvents;
            [Abide.Guerilla.Tags.FieldAttribute("flavor events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_flavor_event_block", 128, typeof(GameEngineFlavorEventBlock))]
            public TagBlock FlavorEvents;
            [Abide.Guerilla.Tags.FieldAttribute("slayer events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_slayer_event_block", 128, typeof(GameEngineSlayerEventBlock))]
            public TagBlock SlayerEvents;
            [Abide.Guerilla.Tags.FieldAttribute("ctf events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_ctf_event_block", 128, typeof(GameEngineCtfEventBlock))]
            public TagBlock CtfEvents;
            [Abide.Guerilla.Tags.FieldAttribute("oddball events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_oddball_event_block", 128, typeof(GameEngineOddballEventBlock))]
            public TagBlock OddballEvents;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("king events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_king_event_block", 128, typeof(GameEngineKingEventBlock))]
            public TagBlock KingEvents;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("juggernaut events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_juggernaut_event_block", 128, typeof(GameEngineJuggernautEventBlock))]
            public TagBlock JuggernautEvents;
            [Abide.Guerilla.Tags.FieldAttribute("territories events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_territories_event_block", 128, typeof(GameEngineTerritoriesEventBlock))]
            public TagBlock TerritoriesEvents;
            [Abide.Guerilla.Tags.FieldAttribute("invasion events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_assault_event_block", 128, typeof(GameEngineAssaultEventBlock))]
            public TagBlock InvasionEvents;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString7;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString8;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString9;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString10;
            [Abide.Guerilla.Tags.FieldAttribute("default item collection 1", typeof(TagReference))]
            public TagReference DefaultItemCollection1;
            [Abide.Guerilla.Tags.FieldAttribute("default item collection 2", typeof(TagReference))]
            public TagReference DefaultItemCollection2;
            [Abide.Guerilla.Tags.FieldAttribute("default frag grenade count", typeof(Int32))]
            public Int32 DefaultFragGrenadeCount;
            [Abide.Guerilla.Tags.FieldAttribute("default plasma grenade count", typeof(Int32))]
            public Int32 DefaultPlasmaGrenadeCount;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString11;
            [Abide.Guerilla.Tags.FieldAttribute("dynamic zone upper height", typeof(Single))]
            public Single DynamicZoneUpperHeight;
            [Abide.Guerilla.Tags.FieldAttribute("dynamic zone lower height", typeof(Single))]
            public Single DynamicZoneLowerHeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString12;
            [Abide.Guerilla.Tags.FieldAttribute("enemy inner radius", typeof(Single))]
            public Single EnemyInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("enemy outer radius", typeof(Single))]
            public Single EnemyOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("enemy weight", typeof(Single))]
            public Single EnemyWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString13;
            [Abide.Guerilla.Tags.FieldAttribute("friend inner radius", typeof(Single))]
            public Single FriendInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("friend outer radius", typeof(Single))]
            public Single FriendOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("friend weight", typeof(Single))]
            public Single FriendWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString14;
            [Abide.Guerilla.Tags.FieldAttribute("enemy vehicle inner radius", typeof(Single))]
            public Single EnemyVehicleInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("enemy vehicle outer radius", typeof(Single))]
            public Single EnemyVehicleOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("enemy vehicle weight", typeof(Single))]
            public Single EnemyVehicleWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString15;
            [Abide.Guerilla.Tags.FieldAttribute("friendly vehicle inner radius", typeof(Single))]
            public Single FriendlyVehicleInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("friendly vehicle outer radius", typeof(Single))]
            public Single FriendlyVehicleOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("friendly vehicle weight", typeof(Single))]
            public Single FriendlyVehicleWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString16;
            [Abide.Guerilla.Tags.FieldAttribute("empty vehicle inner radius", typeof(Single))]
            public Single EmptyVehicleInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("empty vehicle outer radius", typeof(Single))]
            public Single EmptyVehicleOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("empty vehicle weight", typeof(Single))]
            public Single EmptyVehicleWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString17;
            [Abide.Guerilla.Tags.FieldAttribute("oddball inclusion inner radius", typeof(Single))]
            public Single OddballInclusionInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("oddball inclusion outer radius", typeof(Single))]
            public Single OddballInclusionOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("oddball inclusion weight", typeof(Single))]
            public Single OddballInclusionWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString18;
            [Abide.Guerilla.Tags.FieldAttribute("oddball exclusion inner radius", typeof(Single))]
            public Single OddballExclusionInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("oddball exclusion outer radius", typeof(Single))]
            public Single OddballExclusionOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("oddball exclusion weight", typeof(Single))]
            public Single OddballExclusionWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString19;
            [Abide.Guerilla.Tags.FieldAttribute("hill inclusion inner radius", typeof(Single))]
            public Single HillInclusionInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("hill inclusion outer radius", typeof(Single))]
            public Single HillInclusionOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("hill inclusion weight", typeof(Single))]
            public Single HillInclusionWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString20;
            [Abide.Guerilla.Tags.FieldAttribute("hill exclusion inner radius", typeof(Single))]
            public Single HillExclusionInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("hill exclusion outer radius", typeof(Single))]
            public Single HillExclusionOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("hill exclusion weight", typeof(Single))]
            public Single HillExclusionWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString21;
            [Abide.Guerilla.Tags.FieldAttribute("last race flag inner radius", typeof(Single))]
            public Single LastRaceFlagInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("last race flag outer radius", typeof(Single))]
            public Single LastRaceFlagOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("last race flag weight", typeof(Single))]
            public Single LastRaceFlagWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString22;
            [Abide.Guerilla.Tags.FieldAttribute("dead ally inner radius", typeof(Single))]
            public Single DeadAllyInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("dead ally outer radius", typeof(Single))]
            public Single DeadAllyOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("dead ally weight", typeof(Single))]
            public Single DeadAllyWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString23;
            [Abide.Guerilla.Tags.FieldAttribute("controlled territory inner radius", typeof(Single))]
            public Single ControlledTerritoryInnerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("controlled territory outer radius", typeof(Single))]
            public Single ControlledTerritoryOuterRadius;
            [Abide.Guerilla.Tags.FieldAttribute("controlled territory weight", typeof(Single))]
            public Single ControlledTerritoryWeight;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString24;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(560)]
            public Byte[] EmptyString25;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(48)]
            public Byte[] EmptyString26;
            [Abide.Guerilla.Tags.FieldAttribute("multiplayer constants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("multiplayer_constants_block", 1, typeof(MultiplayerConstantsBlock))]
            public TagBlock MultiplayerConstants;
            [Abide.Guerilla.Tags.FieldAttribute("state responses", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_status_response_block", 32, typeof(GameEngineStatusResponseBlock))]
            public TagBlock StateResponses;
            [Abide.Guerilla.Tags.FieldAttribute("scoreboard hud definition", typeof(TagReference))]
            public TagReference ScoreboardHudDefinition;
            [Abide.Guerilla.Tags.FieldAttribute("scoreboard emblem shader", typeof(TagReference))]
            public TagReference ScoreboardEmblemShader;
            [Abide.Guerilla.Tags.FieldAttribute("scoreboard emblem bitmap", typeof(TagReference))]
            public TagReference ScoreboardEmblemBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("scoreboard dead emblem shader", typeof(TagReference))]
            public TagReference ScoreboardDeadEmblemShader;
            [Abide.Guerilla.Tags.FieldAttribute("scoreboard dead emblem bitmap", typeof(TagReference))]
            public TagReference ScoreboardDeadEmblemBitmap;
            public int Size
            {
                get
                {
                    return 1640;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class WeaponsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("weapon^", typeof(TagReference))]
                public TagReference Weapon;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class VehiclesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("vehicle^", typeof(TagReference))]
                public TagReference Vehicle;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class SoundsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineGeneralEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    Kill = 0,
                    Suicide = 1,
                    KillTeammate = 2,
                    Victory = 3,
                    TeamVictory = 4,
                    Unused1 = 5,
                    Unused2 = 6,
                    _1MinToWin = 7,
                    Team1MinToWin = 8,
                    _30SecsToWin = 9,
                    Team30SecsToWin = 10,
                    PlayerQuit = 11,
                    PlayerJoined = 12,
                    KilledByUnknown = 13,
                    _30MinutesLeft = 14,
                    _15MinutesLeft = 15,
                    _5MinutesLeft = 16,
                    _1MinuteLeft = 17,
                    TimeExpired = 18,
                    GameOver = 19,
                    RespawnTick = 20,
                    LastRespawnTick = 21,
                    TeleporterUsed = 22,
                    PlayerChangedTeam = 23,
                    PlayerRejoined = 24,
                    GainedLead = 25,
                    GainedTeamLead = 26,
                    LostLead = 27,
                    LostTeamLead = 28,
                    TiedLeader = 29,
                    TiedTeamLeader = 30,
                    RoundOver = 31,
                    _30SecondsLeft = 32,
                    _10SecondsLeft = 33,
                    KillFalling = 34,
                    KillCollision = 35,
                    KillMelee = 36,
                    SuddenDeath = 37,
                    PlayerBootedPlayer = 38,
                    KillFlagCarrier = 39,
                    KillBombCarrier = 40,
                    KillStickyGrenade = 41,
                    KillSniper = 42,
                    KillStMelee = 43,
                    BoardedVehicle = 44,
                    StartTeamNoti = 45,
                    Telefrag = 46,
                    _10SecsToWin = 47,
                    Team10SecsToWin = 48,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineFlavorEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    DoubleKill = 0,
                    TripleKill = 1,
                    Killtacular = 2,
                    KillingSpree = 3,
                    RunningRiot = 4,
                    WellPlacedKill = 5,
                    BrokeKillingSpree = 6,
                    KillFrenzy = 7,
                    Killtrocity = 8,
                    Killimajaro = 9,
                    _15InARow = 10,
                    _20InARow = 11,
                    _25InARow = 12,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineSlayerEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    NewTarget = 1,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineCtfEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    FlagTaken = 1,
                    FlagDropped = 2,
                    FlagReturnedByPlayer = 3,
                    FlagReturnedByTimeout = 4,
                    FlagCaptured = 5,
                    FlagNewDefensiveTeam = 6,
                    FlagReturnFaliure = 7,
                    SideSwitchTick = 8,
                    SideSwitchFinalTick = 9,
                    SideSwitch30Seconds = 10,
                    SideSwitch10Seconds = 11,
                    FlagContested = 12,
                    FlagCaptureFaliure = 13,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineOddballEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    BallSpawned = 1,
                    BallPickedUp = 2,
                    BallDropped = 3,
                    BallReset = 4,
                    BallTick = 5,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineKingEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    HillControlled = 1,
                    HillContested = 2,
                    HillTick = 3,
                    HillMove = 4,
                    HillControlledTeam = 5,
                    HillContestedTeam = 6,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineJuggernautEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    NewJuggernaut = 1,
                    JuggernautKilled = 2,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineTerritoriesEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    TerritoryControlGained = 1,
                    TerritoryContestLost = 2,
                    AllTerritoriesCntrld = 3,
                    TeamTerritoryCtrlGained = 4,
                    TeamTerritoryCtrlLost = 5,
                    TeamAllTerritoriesCntrld = 6,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineAssaultEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    BombTaken = 1,
                    BombDropped = 2,
                    BombReturnedByPlayer = 3,
                    BombReturnedByTimeout = 4,
                    BombCaptured = 5,
                    BombNewDefensiveTeam = 6,
                    BombReturnFaliure = 7,
                    SideSwitchTick = 8,
                    SideSwitchFinalTick = 9,
                    SideSwitch30Seconds = 10,
                    SideSwitch10Seconds = 11,
                    BombReturnedByDefusing = 12,
                    BombPlacedOnEnemyPost = 13,
                    BombArmingStarted = 14,
                    BombArmingCompleted = 15,
                    BombContested = 16,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(384, 4)]
            public sealed class MultiplayerConstantsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("maximum random spawn bias", typeof(Single))]
                public Single MaximumRandomSpawnBias;
                [Abide.Guerilla.Tags.FieldAttribute("teleporter recharge time:seconds", typeof(Single))]
                public Single TeleporterRechargeTime;
                [Abide.Guerilla.Tags.FieldAttribute("grenade danger weight", typeof(Single))]
                public Single GrenadeDangerWeight;
                [Abide.Guerilla.Tags.FieldAttribute("grenade danger inner radius", typeof(Single))]
                public Single GrenadeDangerInnerRadius;
                [Abide.Guerilla.Tags.FieldAttribute("grenade danger outer radius", typeof(Single))]
                public Single GrenadeDangerOuterRadius;
                [Abide.Guerilla.Tags.FieldAttribute("grenade danger lead time:seconds", typeof(Single))]
                public Single GrenadeDangerLeadTime;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle danger min speed:wu/sec", typeof(Single))]
                public Single VehicleDangerMinSpeed;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle danger weight", typeof(Single))]
                public Single VehicleDangerWeight;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle danger radius", typeof(Single))]
                public Single VehicleDangerRadius;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle danger lead time:seconds", typeof(Single))]
                public Single VehicleDangerLeadTime;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle nearby player dist#how nearby a player is to count a vehicle as \'occupied" +
                    "\'", typeof(Single))]
                public Single VehicleNearbyPlayerDist;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(84)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(32)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(32)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("hill shader", typeof(TagReference))]
                public TagReference HillShader;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("flag reset stop distance", typeof(Single))]
                public Single FlagResetStopDistance;
                [Abide.Guerilla.Tags.FieldAttribute("bomb explode effect", typeof(TagReference))]
                public TagReference BombExplodeEffect;
                [Abide.Guerilla.Tags.FieldAttribute("bomb explode dmg effect", typeof(TagReference))]
                public TagReference BombExplodeDmgEffect;
                [Abide.Guerilla.Tags.FieldAttribute("bomb defuse effect", typeof(TagReference))]
                public TagReference BombDefuseEffect;
                [Abide.Guerilla.Tags.FieldAttribute("bomb defusal string", typeof(StringId))]
                public StringId BombDefusalString;
                [Abide.Guerilla.Tags.FieldAttribute("blocked teleporter string", typeof(StringId))]
                public StringId BlockedTeleporterString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(32)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(32)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(32)]
                public Byte[] EmptyString7;
                public int Size
                {
                    get
                    {
                        return 384;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
            public sealed class GameEngineStatusResponseBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("state^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(StateOptions), false)]
                public Int16 State;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("ffa message", typeof(StringId))]
                public StringId FfaMessage;
                [Abide.Guerilla.Tags.FieldAttribute("team message", typeof(StringId))]
                public StringId TeamMessage;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
                public TagReference EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                public int Size
                {
                    get
                    {
                        return 36;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Unused = 1,
                }
                public enum StateOptions
                {
                    WaitingForSpaceToClear = 0,
                    Observing = 1,
                    RespawningSoon = 2,
                    SittingOut = 3,
                    OutOfLives = 4,
                    PlayingWinning = 5,
                    PlayingTied = 6,
                    PlayingLosing = 7,
                    GameOverWon = 8,
                    GameOverTied = 9,
                    GameOverLost = 10,
                    YouHaveFlag = 11,
                    EnemyHasFlag = 12,
                    FlagNotHome = 13,
                    CarryingOddball = 14,
                    YouAreJuggy = 15,
                    YouControlHill = 16,
                    SwitchingSidesSoon = 17,
                    PlayerRecentlyStarted = 18,
                    YouHaveBomb = 19,
                    FlagContested = 20,
                    BombContested = 21,
                    LimitedLivesLeftMultiple = 22,
                    LimitedLivesLeftSingle = 23,
                    LimitedLivesLeftFinal = 24,
                    PlayingWinningUnlimited = 25,
                    PlayingTiedUnlimited = 26,
                    PlayingLosingUnlimited = 27,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class GrenadeAndPowerupStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("grenades", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("grenade_block", 20, typeof(GrenadeBlock))]
                public TagBlock Grenades;
                [Abide.Guerilla.Tags.FieldAttribute("powerups", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("powerup_block", 20, typeof(PowerupBlock))]
                public TagBlock Powerups;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class GrenadeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("weapon^", typeof(TagReference))]
                    public TagReference Weapon;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class PowerupBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("weapon^", typeof(TagReference))]
                    public TagReference Weapon;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
        }
    }
}
#pragma warning restore CS1591
