#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(24, 4)]
    [TagGroupAttribute("multiplayer_globals", 1836412007u, 4294967293u, typeof(MultiplayerGlobalsBlock))]
    public sealed class MultiplayerGlobalsBlock : AbideTagBlock
    {
        private TagBlockList<MultiplayerUniversalBlock> universalList = new TagBlockList<MultiplayerUniversalBlock>(1);
        private TagBlockList<MultiplayerRuntimeBlock> runtimeList = new TagBlockList<MultiplayerRuntimeBlock>(1);
        [FieldAttribute("universal", typeof(TagBlock))]
        [BlockAttribute("multiplayer_universal_block", 1, typeof(MultiplayerUniversalBlock))]
        public TagBlock Universal;
        [FieldAttribute("runtime", typeof(TagBlock))]
        [BlockAttribute("multiplayer_runtime_block", 1, typeof(MultiplayerRuntimeBlock))]
        public TagBlock Runtime;
        public TagBlockList<MultiplayerUniversalBlock> UniversalList
        {
            get
            {
                return this.universalList;
            }
        }
        public TagBlockList<MultiplayerRuntimeBlock> RuntimeList
        {
            get
            {
                return this.runtimeList;
            }
        }
        public override int Size
        {
            get
            {
                return 24;
            }
        }
        public override void Initialize()
        {
            this.universalList.Clear();
            this.runtimeList.Clear();
            this.Universal = TagBlock.Zero;
            this.Runtime = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Universal = reader.ReadInt64();
            this.universalList.Read(reader, this.Universal);
            this.Runtime = reader.ReadInt64();
            this.runtimeList.Read(reader, this.Runtime);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(60, 4)]
        public sealed class MultiplayerUniversalBlock : AbideTagBlock
        {
            private TagBlockList<MultiplayerColorBlock> teamColorsList = new TagBlockList<MultiplayerColorBlock>(32);
            [FieldAttribute("random player names", typeof(TagReference))]
            public TagReference RandomPlayerNames;
            [FieldAttribute("team names", typeof(TagReference))]
            public TagReference TeamNames;
            [FieldAttribute("team colors", typeof(TagBlock))]
            [BlockAttribute("multiplayer_color_block", 32, typeof(MultiplayerColorBlock))]
            public TagBlock TeamColors;
            [FieldAttribute("multiplayer text", typeof(TagReference))]
            public TagReference MultiplayerText;
            public TagBlockList<MultiplayerColorBlock> TeamColorsList
            {
                get
                {
                    return this.teamColorsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 60;
                }
            }
            public override void Initialize()
            {
                this.teamColorsList.Clear();
                this.RandomPlayerNames = TagReference.Null;
                this.TeamNames = TagReference.Null;
                this.TeamColors = TagBlock.Zero;
                this.MultiplayerText = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.RandomPlayerNames = reader.Read<TagReference>();
                this.TeamNames = reader.Read<TagReference>();
                this.TeamColors = reader.ReadInt64();
                this.teamColorsList.Read(reader, this.TeamColors);
                this.MultiplayerText = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class MultiplayerColorBlock : AbideTagBlock
            {
                [FieldAttribute("color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Color = ColorRgbF.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Color = reader.Read<ColorRgbF>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(1640, 4)]
        public sealed class MultiplayerRuntimeBlock : AbideTagBlock
        {
            private TagBlockList<WeaponsBlock> weaponsList = new TagBlockList<WeaponsBlock>(20);
            private TagBlockList<VehiclesBlock> vehiclesList = new TagBlockList<VehiclesBlock>(20);
            private TagBlockList<SoundsBlock> soundsList = new TagBlockList<SoundsBlock>(60);
            private TagBlockList<GameEngineGeneralEventBlock> generalEventsList = new TagBlockList<GameEngineGeneralEventBlock>(128);
            private TagBlockList<GameEngineFlavorEventBlock> flavorEventsList = new TagBlockList<GameEngineFlavorEventBlock>(128);
            private TagBlockList<GameEngineSlayerEventBlock> slayerEventsList = new TagBlockList<GameEngineSlayerEventBlock>(128);
            private TagBlockList<GameEngineCtfEventBlock> ctfEventsList = new TagBlockList<GameEngineCtfEventBlock>(128);
            private TagBlockList<GameEngineOddballEventBlock> oddballEventsList = new TagBlockList<GameEngineOddballEventBlock>(128);
            private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
            private TagBlockList<GameEngineKingEventBlock> kingEventsList = new TagBlockList<GameEngineKingEventBlock>(128);
            private TagBlockList<GameEngineJuggernautEventBlock> juggernautEventsList = new TagBlockList<GameEngineJuggernautEventBlock>(128);
            private TagBlockList<GameEngineTerritoriesEventBlock> territoriesEventsList = new TagBlockList<GameEngineTerritoriesEventBlock>(128);
            private TagBlockList<GameEngineAssaultEventBlock> invasionEventsList = new TagBlockList<GameEngineAssaultEventBlock>(128);
            private TagBlockList<MultiplayerConstantsBlock> multiplayerConstantsList = new TagBlockList<MultiplayerConstantsBlock>(1);
            private TagBlockList<GameEngineStatusResponseBlock> stateResponsesList = new TagBlockList<GameEngineStatusResponseBlock>(32);
            [FieldAttribute("flag", typeof(TagReference))]
            public TagReference Flag;
            [FieldAttribute("ball", typeof(TagReference))]
            public TagReference Ball;
            [FieldAttribute("unit", typeof(TagReference))]
            public TagReference Unit;
            [FieldAttribute("flag shader", typeof(TagReference))]
            public TagReference FlagShader;
            [FieldAttribute("hill shader", typeof(TagReference))]
            public TagReference HillShader;
            [FieldAttribute("head", typeof(TagReference))]
            public TagReference Head;
            [FieldAttribute("juggernaut powerup", typeof(TagReference))]
            public TagReference JuggernautPowerup;
            [FieldAttribute("da bomb", typeof(TagReference))]
            public TagReference DaBomb;
            [FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString;
            [FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString1;
            [FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString2;
            [FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString3;
            [FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString4;
            [FieldAttribute("weapons", typeof(TagBlock))]
            [BlockAttribute("weapons_block", 20, typeof(WeaponsBlock))]
            public TagBlock Weapons;
            [FieldAttribute("vehicles", typeof(TagBlock))]
            [BlockAttribute("vehicles_block", 20, typeof(VehiclesBlock))]
            public TagBlock Vehicles;
            [FieldAttribute("arr!", typeof(GrenadeAndPowerupStructBlock))]
            public GrenadeAndPowerupStructBlock Arr;
            [FieldAttribute("in game text", typeof(TagReference))]
            public TagReference InGameText;
            [FieldAttribute("sounds", typeof(TagBlock))]
            [BlockAttribute("sounds_block", 60, typeof(SoundsBlock))]
            public TagBlock Sounds;
            [FieldAttribute("general events", typeof(TagBlock))]
            [BlockAttribute("game_engine_general_event_block", 128, typeof(GameEngineGeneralEventBlock))]
            public TagBlock GeneralEvents;
            [FieldAttribute("flavor events", typeof(TagBlock))]
            [BlockAttribute("game_engine_flavor_event_block", 128, typeof(GameEngineFlavorEventBlock))]
            public TagBlock FlavorEvents;
            [FieldAttribute("slayer events", typeof(TagBlock))]
            [BlockAttribute("game_engine_slayer_event_block", 128, typeof(GameEngineSlayerEventBlock))]
            public TagBlock SlayerEvents;
            [FieldAttribute("ctf events", typeof(TagBlock))]
            [BlockAttribute("game_engine_ctf_event_block", 128, typeof(GameEngineCtfEventBlock))]
            public TagBlock CtfEvents;
            [FieldAttribute("oddball events", typeof(TagBlock))]
            [BlockAttribute("game_engine_oddball_event_block", 128, typeof(GameEngineOddballEventBlock))]
            public TagBlock OddballEvents;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString5;
            [FieldAttribute("king events", typeof(TagBlock))]
            [BlockAttribute("game_engine_king_event_block", 128, typeof(GameEngineKingEventBlock))]
            public TagBlock KingEvents;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString6;
            [FieldAttribute("juggernaut events", typeof(TagBlock))]
            [BlockAttribute("game_engine_juggernaut_event_block", 128, typeof(GameEngineJuggernautEventBlock))]
            public TagBlock JuggernautEvents;
            [FieldAttribute("territories events", typeof(TagBlock))]
            [BlockAttribute("game_engine_territories_event_block", 128, typeof(GameEngineTerritoriesEventBlock))]
            public TagBlock TerritoriesEvents;
            [FieldAttribute("invasion events", typeof(TagBlock))]
            [BlockAttribute("game_engine_assault_event_block", 128, typeof(GameEngineAssaultEventBlock))]
            public TagBlock InvasionEvents;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString7;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString8;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString9;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString10;
            [FieldAttribute("default item collection 1", typeof(TagReference))]
            public TagReference DefaultItemCollection1;
            [FieldAttribute("default item collection 2", typeof(TagReference))]
            public TagReference DefaultItemCollection2;
            [FieldAttribute("default frag grenade count", typeof(Int32))]
            public Int32 DefaultFragGrenadeCount;
            [FieldAttribute("default plasma grenade count", typeof(Int32))]
            public Int32 DefaultPlasmaGrenadeCount;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString11;
            [FieldAttribute("dynamic zone upper height", typeof(Single))]
            public Single DynamicZoneUpperHeight;
            [FieldAttribute("dynamic zone lower height", typeof(Single))]
            public Single DynamicZoneLowerHeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString12;
            [FieldAttribute("enemy inner radius", typeof(Single))]
            public Single EnemyInnerRadius;
            [FieldAttribute("enemy outer radius", typeof(Single))]
            public Single EnemyOuterRadius;
            [FieldAttribute("enemy weight", typeof(Single))]
            public Single EnemyWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString13;
            [FieldAttribute("friend inner radius", typeof(Single))]
            public Single FriendInnerRadius;
            [FieldAttribute("friend outer radius", typeof(Single))]
            public Single FriendOuterRadius;
            [FieldAttribute("friend weight", typeof(Single))]
            public Single FriendWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString14;
            [FieldAttribute("enemy vehicle inner radius", typeof(Single))]
            public Single EnemyVehicleInnerRadius;
            [FieldAttribute("enemy vehicle outer radius", typeof(Single))]
            public Single EnemyVehicleOuterRadius;
            [FieldAttribute("enemy vehicle weight", typeof(Single))]
            public Single EnemyVehicleWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString15;
            [FieldAttribute("friendly vehicle inner radius", typeof(Single))]
            public Single FriendlyVehicleInnerRadius;
            [FieldAttribute("friendly vehicle outer radius", typeof(Single))]
            public Single FriendlyVehicleOuterRadius;
            [FieldAttribute("friendly vehicle weight", typeof(Single))]
            public Single FriendlyVehicleWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString16;
            [FieldAttribute("empty vehicle inner radius", typeof(Single))]
            public Single EmptyVehicleInnerRadius;
            [FieldAttribute("empty vehicle outer radius", typeof(Single))]
            public Single EmptyVehicleOuterRadius;
            [FieldAttribute("empty vehicle weight", typeof(Single))]
            public Single EmptyVehicleWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString17;
            [FieldAttribute("oddball inclusion inner radius", typeof(Single))]
            public Single OddballInclusionInnerRadius;
            [FieldAttribute("oddball inclusion outer radius", typeof(Single))]
            public Single OddballInclusionOuterRadius;
            [FieldAttribute("oddball inclusion weight", typeof(Single))]
            public Single OddballInclusionWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString18;
            [FieldAttribute("oddball exclusion inner radius", typeof(Single))]
            public Single OddballExclusionInnerRadius;
            [FieldAttribute("oddball exclusion outer radius", typeof(Single))]
            public Single OddballExclusionOuterRadius;
            [FieldAttribute("oddball exclusion weight", typeof(Single))]
            public Single OddballExclusionWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString19;
            [FieldAttribute("hill inclusion inner radius", typeof(Single))]
            public Single HillInclusionInnerRadius;
            [FieldAttribute("hill inclusion outer radius", typeof(Single))]
            public Single HillInclusionOuterRadius;
            [FieldAttribute("hill inclusion weight", typeof(Single))]
            public Single HillInclusionWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString20;
            [FieldAttribute("hill exclusion inner radius", typeof(Single))]
            public Single HillExclusionInnerRadius;
            [FieldAttribute("hill exclusion outer radius", typeof(Single))]
            public Single HillExclusionOuterRadius;
            [FieldAttribute("hill exclusion weight", typeof(Single))]
            public Single HillExclusionWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString21;
            [FieldAttribute("last race flag inner radius", typeof(Single))]
            public Single LastRaceFlagInnerRadius;
            [FieldAttribute("last race flag outer radius", typeof(Single))]
            public Single LastRaceFlagOuterRadius;
            [FieldAttribute("last race flag weight", typeof(Single))]
            public Single LastRaceFlagWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString22;
            [FieldAttribute("dead ally inner radius", typeof(Single))]
            public Single DeadAllyInnerRadius;
            [FieldAttribute("dead ally outer radius", typeof(Single))]
            public Single DeadAllyOuterRadius;
            [FieldAttribute("dead ally weight", typeof(Single))]
            public Single DeadAllyWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString23;
            [FieldAttribute("controlled territory inner radius", typeof(Single))]
            public Single ControlledTerritoryInnerRadius;
            [FieldAttribute("controlled territory outer radius", typeof(Single))]
            public Single ControlledTerritoryOuterRadius;
            [FieldAttribute("controlled territory weight", typeof(Single))]
            public Single ControlledTerritoryWeight;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString24;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(560)]
            public Byte[] EmptyString25;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(48)]
            public Byte[] EmptyString26;
            [FieldAttribute("multiplayer constants", typeof(TagBlock))]
            [BlockAttribute("multiplayer_constants_block", 1, typeof(MultiplayerConstantsBlock))]
            public TagBlock MultiplayerConstants;
            [FieldAttribute("state responses", typeof(TagBlock))]
            [BlockAttribute("game_engine_status_response_block", 32, typeof(GameEngineStatusResponseBlock))]
            public TagBlock StateResponses;
            [FieldAttribute("scoreboard hud definition", typeof(TagReference))]
            public TagReference ScoreboardHudDefinition;
            [FieldAttribute("scoreboard emblem shader", typeof(TagReference))]
            public TagReference ScoreboardEmblemShader;
            [FieldAttribute("scoreboard emblem bitmap", typeof(TagReference))]
            public TagReference ScoreboardEmblemBitmap;
            [FieldAttribute("scoreboard dead emblem shader", typeof(TagReference))]
            public TagReference ScoreboardDeadEmblemShader;
            [FieldAttribute("scoreboard dead emblem bitmap", typeof(TagReference))]
            public TagReference ScoreboardDeadEmblemBitmap;
            public TagBlockList<WeaponsBlock> WeaponsList
            {
                get
                {
                    return this.weaponsList;
                }
            }
            public TagBlockList<VehiclesBlock> VehiclesList
            {
                get
                {
                    return this.vehiclesList;
                }
            }
            public TagBlockList<SoundsBlock> SoundsList
            {
                get
                {
                    return this.soundsList;
                }
            }
            public TagBlockList<GameEngineGeneralEventBlock> GeneralEventsList
            {
                get
                {
                    return this.generalEventsList;
                }
            }
            public TagBlockList<GameEngineFlavorEventBlock> FlavorEventsList
            {
                get
                {
                    return this.flavorEventsList;
                }
            }
            public TagBlockList<GameEngineSlayerEventBlock> SlayerEventsList
            {
                get
                {
                    return this.slayerEventsList;
                }
            }
            public TagBlockList<GameEngineCtfEventBlock> CtfEventsList
            {
                get
                {
                    return this.ctfEventsList;
                }
            }
            public TagBlockList<GameEngineOddballEventBlock> OddballEventsList
            {
                get
                {
                    return this.oddballEventsList;
                }
            }
            public TagBlockList<GNullBlock> EmptyStringList
            {
                get
                {
                    return this.emptyStringList;
                }
            }
            public TagBlockList<GameEngineKingEventBlock> KingEventsList
            {
                get
                {
                    return this.kingEventsList;
                }
            }
            public TagBlockList<GameEngineJuggernautEventBlock> JuggernautEventsList
            {
                get
                {
                    return this.juggernautEventsList;
                }
            }
            public TagBlockList<GameEngineTerritoriesEventBlock> TerritoriesEventsList
            {
                get
                {
                    return this.territoriesEventsList;
                }
            }
            public TagBlockList<GameEngineAssaultEventBlock> InvasionEventsList
            {
                get
                {
                    return this.invasionEventsList;
                }
            }
            public TagBlockList<MultiplayerConstantsBlock> MultiplayerConstantsList
            {
                get
                {
                    return this.multiplayerConstantsList;
                }
            }
            public TagBlockList<GameEngineStatusResponseBlock> StateResponsesList
            {
                get
                {
                    return this.stateResponsesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 1640;
                }
            }
            public override void Initialize()
            {
                this.weaponsList.Clear();
                this.vehiclesList.Clear();
                this.soundsList.Clear();
                this.generalEventsList.Clear();
                this.flavorEventsList.Clear();
                this.slayerEventsList.Clear();
                this.ctfEventsList.Clear();
                this.oddballEventsList.Clear();
                this.emptyStringList.Clear();
                this.kingEventsList.Clear();
                this.juggernautEventsList.Clear();
                this.territoriesEventsList.Clear();
                this.invasionEventsList.Clear();
                this.multiplayerConstantsList.Clear();
                this.stateResponsesList.Clear();
                this.Flag = TagReference.Null;
                this.Ball = TagReference.Null;
                this.Unit = TagReference.Null;
                this.FlagShader = TagReference.Null;
                this.HillShader = TagReference.Null;
                this.Head = TagReference.Null;
                this.JuggernautPowerup = TagReference.Null;
                this.DaBomb = TagReference.Null;
                this.EmptyString = TagReference.Null;
                this.EmptyString1 = TagReference.Null;
                this.EmptyString2 = TagReference.Null;
                this.EmptyString3 = TagReference.Null;
                this.EmptyString4 = TagReference.Null;
                this.Weapons = TagBlock.Zero;
                this.Vehicles = TagBlock.Zero;
                this.Arr = new GrenadeAndPowerupStructBlock();
                this.InGameText = TagReference.Null;
                this.Sounds = TagBlock.Zero;
                this.GeneralEvents = TagBlock.Zero;
                this.FlavorEvents = TagBlock.Zero;
                this.SlayerEvents = TagBlock.Zero;
                this.CtfEvents = TagBlock.Zero;
                this.OddballEvents = TagBlock.Zero;
                this.EmptyString5 = TagBlock.Zero;
                this.KingEvents = TagBlock.Zero;
                this.EmptyString6 = TagBlock.Zero;
                this.JuggernautEvents = TagBlock.Zero;
                this.TerritoriesEvents = TagBlock.Zero;
                this.InvasionEvents = TagBlock.Zero;
                this.EmptyString7 = TagBlock.Zero;
                this.EmptyString8 = TagBlock.Zero;
                this.EmptyString9 = TagBlock.Zero;
                this.EmptyString10 = TagBlock.Zero;
                this.DefaultItemCollection1 = TagReference.Null;
                this.DefaultItemCollection2 = TagReference.Null;
                this.DefaultFragGrenadeCount = 0;
                this.DefaultPlasmaGrenadeCount = 0;
                this.EmptyString11 = new byte[40];
                this.DynamicZoneUpperHeight = 0;
                this.DynamicZoneLowerHeight = 0;
                this.EmptyString12 = new byte[40];
                this.EnemyInnerRadius = 0;
                this.EnemyOuterRadius = 0;
                this.EnemyWeight = 0;
                this.EmptyString13 = new byte[16];
                this.FriendInnerRadius = 0;
                this.FriendOuterRadius = 0;
                this.FriendWeight = 0;
                this.EmptyString14 = new byte[16];
                this.EnemyVehicleInnerRadius = 0;
                this.EnemyVehicleOuterRadius = 0;
                this.EnemyVehicleWeight = 0;
                this.EmptyString15 = new byte[16];
                this.FriendlyVehicleInnerRadius = 0;
                this.FriendlyVehicleOuterRadius = 0;
                this.FriendlyVehicleWeight = 0;
                this.EmptyString16 = new byte[16];
                this.EmptyVehicleInnerRadius = 0;
                this.EmptyVehicleOuterRadius = 0;
                this.EmptyVehicleWeight = 0;
                this.EmptyString17 = new byte[16];
                this.OddballInclusionInnerRadius = 0;
                this.OddballInclusionOuterRadius = 0;
                this.OddballInclusionWeight = 0;
                this.EmptyString18 = new byte[16];
                this.OddballExclusionInnerRadius = 0;
                this.OddballExclusionOuterRadius = 0;
                this.OddballExclusionWeight = 0;
                this.EmptyString19 = new byte[16];
                this.HillInclusionInnerRadius = 0;
                this.HillInclusionOuterRadius = 0;
                this.HillInclusionWeight = 0;
                this.EmptyString20 = new byte[16];
                this.HillExclusionInnerRadius = 0;
                this.HillExclusionOuterRadius = 0;
                this.HillExclusionWeight = 0;
                this.EmptyString21 = new byte[16];
                this.LastRaceFlagInnerRadius = 0;
                this.LastRaceFlagOuterRadius = 0;
                this.LastRaceFlagWeight = 0;
                this.EmptyString22 = new byte[16];
                this.DeadAllyInnerRadius = 0;
                this.DeadAllyOuterRadius = 0;
                this.DeadAllyWeight = 0;
                this.EmptyString23 = new byte[16];
                this.ControlledTerritoryInnerRadius = 0;
                this.ControlledTerritoryOuterRadius = 0;
                this.ControlledTerritoryWeight = 0;
                this.EmptyString24 = new byte[16];
                this.EmptyString25 = new byte[560];
                this.EmptyString26 = new byte[48];
                this.MultiplayerConstants = TagBlock.Zero;
                this.StateResponses = TagBlock.Zero;
                this.ScoreboardHudDefinition = TagReference.Null;
                this.ScoreboardEmblemShader = TagReference.Null;
                this.ScoreboardEmblemBitmap = TagReference.Null;
                this.ScoreboardDeadEmblemShader = TagReference.Null;
                this.ScoreboardDeadEmblemBitmap = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flag = reader.Read<TagReference>();
                this.Ball = reader.Read<TagReference>();
                this.Unit = reader.Read<TagReference>();
                this.FlagShader = reader.Read<TagReference>();
                this.HillShader = reader.Read<TagReference>();
                this.Head = reader.Read<TagReference>();
                this.JuggernautPowerup = reader.Read<TagReference>();
                this.DaBomb = reader.Read<TagReference>();
                this.EmptyString = reader.Read<TagReference>();
                this.EmptyString1 = reader.Read<TagReference>();
                this.EmptyString2 = reader.Read<TagReference>();
                this.EmptyString3 = reader.Read<TagReference>();
                this.EmptyString4 = reader.Read<TagReference>();
                this.Weapons = reader.ReadInt64();
                this.weaponsList.Read(reader, this.Weapons);
                this.Vehicles = reader.ReadInt64();
                this.vehiclesList.Read(reader, this.Vehicles);
                this.Arr = reader.ReadDataStructure<GrenadeAndPowerupStructBlock>();
                this.InGameText = reader.Read<TagReference>();
                this.Sounds = reader.ReadInt64();
                this.soundsList.Read(reader, this.Sounds);
                this.GeneralEvents = reader.ReadInt64();
                this.generalEventsList.Read(reader, this.GeneralEvents);
                this.FlavorEvents = reader.ReadInt64();
                this.flavorEventsList.Read(reader, this.FlavorEvents);
                this.SlayerEvents = reader.ReadInt64();
                this.slayerEventsList.Read(reader, this.SlayerEvents);
                this.CtfEvents = reader.ReadInt64();
                this.ctfEventsList.Read(reader, this.CtfEvents);
                this.OddballEvents = reader.ReadInt64();
                this.oddballEventsList.Read(reader, this.OddballEvents);
                this.EmptyString5 = reader.ReadInt64();
                this.emptyStringList.Read(reader, this.EmptyString5);
                this.KingEvents = reader.ReadInt64();
                this.kingEventsList.Read(reader, this.KingEvents);
                this.EmptyString6 = reader.ReadInt64();
                this.kingEventsList.Read(reader, this.EmptyString6);
                this.JuggernautEvents = reader.ReadInt64();
                this.juggernautEventsList.Read(reader, this.JuggernautEvents);
                this.TerritoriesEvents = reader.ReadInt64();
                this.territoriesEventsList.Read(reader, this.TerritoriesEvents);
                this.InvasionEvents = reader.ReadInt64();
                this.invasionEventsList.Read(reader, this.InvasionEvents);
                this.EmptyString7 = reader.ReadInt64();
                this.invasionEventsList.Read(reader, this.EmptyString7);
                this.EmptyString8 = reader.ReadInt64();
                this.invasionEventsList.Read(reader, this.EmptyString8);
                this.EmptyString9 = reader.ReadInt64();
                this.invasionEventsList.Read(reader, this.EmptyString9);
                this.EmptyString10 = reader.ReadInt64();
                this.invasionEventsList.Read(reader, this.EmptyString10);
                this.DefaultItemCollection1 = reader.Read<TagReference>();
                this.DefaultItemCollection2 = reader.Read<TagReference>();
                this.DefaultFragGrenadeCount = reader.ReadInt32();
                this.DefaultPlasmaGrenadeCount = reader.ReadInt32();
                this.EmptyString11 = reader.ReadBytes(40);
                this.DynamicZoneUpperHeight = reader.ReadSingle();
                this.DynamicZoneLowerHeight = reader.ReadSingle();
                this.EmptyString12 = reader.ReadBytes(40);
                this.EnemyInnerRadius = reader.ReadSingle();
                this.EnemyOuterRadius = reader.ReadSingle();
                this.EnemyWeight = reader.ReadSingle();
                this.EmptyString13 = reader.ReadBytes(16);
                this.FriendInnerRadius = reader.ReadSingle();
                this.FriendOuterRadius = reader.ReadSingle();
                this.FriendWeight = reader.ReadSingle();
                this.EmptyString14 = reader.ReadBytes(16);
                this.EnemyVehicleInnerRadius = reader.ReadSingle();
                this.EnemyVehicleOuterRadius = reader.ReadSingle();
                this.EnemyVehicleWeight = reader.ReadSingle();
                this.EmptyString15 = reader.ReadBytes(16);
                this.FriendlyVehicleInnerRadius = reader.ReadSingle();
                this.FriendlyVehicleOuterRadius = reader.ReadSingle();
                this.FriendlyVehicleWeight = reader.ReadSingle();
                this.EmptyString16 = reader.ReadBytes(16);
                this.EmptyVehicleInnerRadius = reader.ReadSingle();
                this.EmptyVehicleOuterRadius = reader.ReadSingle();
                this.EmptyVehicleWeight = reader.ReadSingle();
                this.EmptyString17 = reader.ReadBytes(16);
                this.OddballInclusionInnerRadius = reader.ReadSingle();
                this.OddballInclusionOuterRadius = reader.ReadSingle();
                this.OddballInclusionWeight = reader.ReadSingle();
                this.EmptyString18 = reader.ReadBytes(16);
                this.OddballExclusionInnerRadius = reader.ReadSingle();
                this.OddballExclusionOuterRadius = reader.ReadSingle();
                this.OddballExclusionWeight = reader.ReadSingle();
                this.EmptyString19 = reader.ReadBytes(16);
                this.HillInclusionInnerRadius = reader.ReadSingle();
                this.HillInclusionOuterRadius = reader.ReadSingle();
                this.HillInclusionWeight = reader.ReadSingle();
                this.EmptyString20 = reader.ReadBytes(16);
                this.HillExclusionInnerRadius = reader.ReadSingle();
                this.HillExclusionOuterRadius = reader.ReadSingle();
                this.HillExclusionWeight = reader.ReadSingle();
                this.EmptyString21 = reader.ReadBytes(16);
                this.LastRaceFlagInnerRadius = reader.ReadSingle();
                this.LastRaceFlagOuterRadius = reader.ReadSingle();
                this.LastRaceFlagWeight = reader.ReadSingle();
                this.EmptyString22 = reader.ReadBytes(16);
                this.DeadAllyInnerRadius = reader.ReadSingle();
                this.DeadAllyOuterRadius = reader.ReadSingle();
                this.DeadAllyWeight = reader.ReadSingle();
                this.EmptyString23 = reader.ReadBytes(16);
                this.ControlledTerritoryInnerRadius = reader.ReadSingle();
                this.ControlledTerritoryOuterRadius = reader.ReadSingle();
                this.ControlledTerritoryWeight = reader.ReadSingle();
                this.EmptyString24 = reader.ReadBytes(16);
                this.EmptyString25 = reader.ReadBytes(560);
                this.EmptyString26 = reader.ReadBytes(48);
                this.MultiplayerConstants = reader.ReadInt64();
                this.multiplayerConstantsList.Read(reader, this.MultiplayerConstants);
                this.StateResponses = reader.ReadInt64();
                this.stateResponsesList.Read(reader, this.StateResponses);
                this.ScoreboardHudDefinition = reader.Read<TagReference>();
                this.ScoreboardEmblemShader = reader.Read<TagReference>();
                this.ScoreboardEmblemBitmap = reader.Read<TagReference>();
                this.ScoreboardDeadEmblemShader = reader.Read<TagReference>();
                this.ScoreboardDeadEmblemBitmap = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class WeaponsBlock : AbideTagBlock
            {
                [FieldAttribute("weapon^", typeof(TagReference))]
                public TagReference Weapon;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Weapon = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Weapon = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class VehiclesBlock : AbideTagBlock
            {
                [FieldAttribute("vehicle^", typeof(TagReference))]
                public TagReference Vehicle;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Vehicle = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Vehicle = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class SoundsBlock : AbideTagBlock
            {
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Sound = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Sound = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineGeneralEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    Kill = 0,
                    Suicide = 1,
                    KillTeammate = 2,
                    Victory = 3,
                    TeamVictory = 4,
                    Unused1 = 5,
                    Unused2 = 6,
                    _1MinToWin = 7,
                    Team1MinToWin = 8,
                    _30SecsToWin = 9,
                    Team30SecsToWin = 10,
                    PlayerQuit = 11,
                    PlayerJoined = 12,
                    KilledByUnknown = 13,
                    _30MinutesLeft = 14,
                    _15MinutesLeft = 15,
                    _5MinutesLeft = 16,
                    _1MinuteLeft = 17,
                    TimeExpired = 18,
                    GameOver = 19,
                    RespawnTick = 20,
                    LastRespawnTick = 21,
                    TeleporterUsed = 22,
                    PlayerChangedTeam = 23,
                    PlayerRejoined = 24,
                    GainedLead = 25,
                    GainedTeamLead = 26,
                    LostLead = 27,
                    LostTeamLead = 28,
                    TiedLeader = 29,
                    TiedTeamLeader = 30,
                    RoundOver = 31,
                    _30SecondsLeft = 32,
                    _10SecondsLeft = 33,
                    KillFalling = 34,
                    KillCollision = 35,
                    KillMelee = 36,
                    SuddenDeath = 37,
                    PlayerBootedPlayer = 38,
                    KillFlagCarrier = 39,
                    KillBombCarrier = 40,
                    KillStickyGrenade = 41,
                    KillSniper = 42,
                    KillStMelee = 43,
                    BoardedVehicle = 44,
                    StartTeamNoti = 45,
                    Telefrag = 46,
                    _10SecsToWin = 47,
                    Team10SecsToWin = 48,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineFlavorEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    DoubleKill = 0,
                    TripleKill = 1,
                    Killtacular = 2,
                    KillingSpree = 3,
                    RunningRiot = 4,
                    WellPlacedKill = 5,
                    BrokeKillingSpree = 6,
                    KillFrenzy = 7,
                    Killtrocity = 8,
                    Killimajaro = 9,
                    _15InARow = 10,
                    _20InARow = 11,
                    _25InARow = 12,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineSlayerEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    GameStart = 0,
                    NewTarget = 1,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineCtfEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    GameStart = 0,
                    FlagTaken = 1,
                    FlagDropped = 2,
                    FlagReturnedByPlayer = 3,
                    FlagReturnedByTimeout = 4,
                    FlagCaptured = 5,
                    FlagNewDefensiveTeam = 6,
                    FlagReturnFaliure = 7,
                    SideSwitchTick = 8,
                    SideSwitchFinalTick = 9,
                    SideSwitch30Seconds = 10,
                    SideSwitch10Seconds = 11,
                    FlagContested = 12,
                    FlagCaptureFaliure = 13,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineOddballEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    GameStart = 0,
                    BallSpawned = 1,
                    BallPickedUp = 2,
                    BallDropped = 3,
                    BallReset = 4,
                    BallTick = 5,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : AbideTagBlock
            {
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineKingEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    GameStart = 0,
                    HillControlled = 1,
                    HillContested = 2,
                    HillTick = 3,
                    HillMove = 4,
                    HillControlledTeam = 5,
                    HillContestedTeam = 6,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineJuggernautEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    GameStart = 0,
                    NewJuggernaut = 1,
                    JuggernautKilled = 2,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineTerritoriesEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    GameStart = 0,
                    TerritoryControlGained = 1,
                    TerritoryContestLost = 2,
                    AllTerritoriesCntrld = 3,
                    TeamTerritoryCtrlGained = 4,
                    TeamTerritoryCtrlLost = 5,
                    TeamAllTerritoriesCntrld = 6,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(244, 4)]
            public sealed class GameEngineAssaultEventBlock : AbideTagBlock
            {
                private TagBlockList<SoundResponseDefinitionBlock> soundPermutationsList = new TagBlockList<SoundResponseDefinitionBlock>(10);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("event^", typeof(EventOptions))]
                [OptionsAttribute(typeof(EventOptions), false)]
                public EventOptions Event;
                [FieldAttribute("audience^", typeof(AudienceOptions))]
                [OptionsAttribute(typeof(AudienceOptions), false)]
                public AudienceOptions Audience;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("required field", typeof(RequiredFieldOptions))]
                [OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public RequiredFieldOptions RequiredField;
                [FieldAttribute("excluded audience", typeof(ExcludedAudienceOptions))]
                [OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public ExcludedAudienceOptions ExcludedAudience;
                [FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public SoundFlagsOptions SoundFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [FieldAttribute("sound permutations", typeof(TagBlock))]
                [BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public TagBlockList<SoundResponseDefinitionBlock> SoundPermutationsList
                {
                    get
                    {
                        return this.soundPermutationsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public override void Initialize()
                {
                    this.soundPermutationsList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Event = ((EventOptions)(0));
                    this.Audience = ((AudienceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                    this.DisplayString = StringId.Zero;
                    this.RequiredField = ((RequiredFieldOptions)(0));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(0));
                    this.PrimaryString = StringId.Zero;
                    this.PrimaryStringDuration = 0;
                    this.PluralDisplayString = StringId.Zero;
                    this.EmptyString3 = new byte[28];
                    this.SoundDelayAnnouncerOnly = 0;
                    this.SoundFlags = ((SoundFlagsOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.Sound = TagReference.Null;
                    this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                    this.EmptyString5 = new byte[4];
                    this.EmptyString6 = new byte[16];
                    this.SoundPermutations = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Event = ((EventOptions)(reader.ReadInt16()));
                    this.Audience = ((AudienceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.DisplayString = reader.ReadInt32();
                    this.RequiredField = ((RequiredFieldOptions)(reader.ReadInt16()));
                    this.ExcludedAudience = ((ExcludedAudienceOptions)(reader.ReadInt16()));
                    this.PrimaryString = reader.ReadInt32();
                    this.PrimaryStringDuration = reader.ReadInt32();
                    this.PluralDisplayString = reader.ReadInt32();
                    this.EmptyString3 = reader.ReadBytes(28);
                    this.SoundDelayAnnouncerOnly = reader.ReadSingle();
                    this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.Sound = reader.Read<TagReference>();
                    this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.EmptyString6 = reader.ReadBytes(16);
                    this.SoundPermutations = reader.ReadInt64();
                    this.soundPermutationsList.Read(reader, this.SoundPermutations);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("sound flags", typeof(SoundFlagsOptions))]
                    [OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public SoundFlagsOptions SoundFlags;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public override int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(0));
                        this.EmptyString = new byte[2];
                        this.EnglishSound = TagReference.Null;
                        this.ExtraSounds = new SoundResponseExtraSoundsStructBlock();
                        this.Probability = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SoundFlags = ((SoundFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadBytes(2);
                        this.EnglishSound = reader.Read<TagReference>();
                        this.ExtraSounds = reader.ReadDataStructure<SoundResponseExtraSoundsStructBlock>();
                        this.Probability = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public override int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public override void Initialize()
                        {
                            this.JapaneseSound = TagReference.Null;
                            this.GermanSound = TagReference.Null;
                            this.FrenchSound = TagReference.Null;
                            this.SpanishSound = TagReference.Null;
                            this.ItalianSound = TagReference.Null;
                            this.KoreanSound = TagReference.Null;
                            this.ChineseSound = TagReference.Null;
                            this.PortugueseSound = TagReference.Null;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.JapaneseSound = reader.Read<TagReference>();
                            this.GermanSound = reader.Read<TagReference>();
                            this.FrenchSound = reader.Read<TagReference>();
                            this.SpanishSound = reader.Read<TagReference>();
                            this.ItalianSound = reader.Read<TagReference>();
                            this.KoreanSound = reader.Read<TagReference>();
                            this.ChineseSound = reader.Read<TagReference>();
                            this.PortugueseSound = reader.Read<TagReference>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions : Int16
                    {
                        AnnouncerSound = 1,
                    }
                }
                [FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : AbideTagBlock
                {
                    [FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public override int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public override void Initialize()
                    {
                        this.JapaneseSound = TagReference.Null;
                        this.GermanSound = TagReference.Null;
                        this.FrenchSound = TagReference.Null;
                        this.SpanishSound = TagReference.Null;
                        this.ItalianSound = TagReference.Null;
                        this.KoreanSound = TagReference.Null;
                        this.ChineseSound = TagReference.Null;
                        this.PortugueseSound = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.JapaneseSound = reader.Read<TagReference>();
                        this.GermanSound = reader.Read<TagReference>();
                        this.FrenchSound = reader.Read<TagReference>();
                        this.SpanishSound = reader.Read<TagReference>();
                        this.ItalianSound = reader.Read<TagReference>();
                        this.KoreanSound = reader.Read<TagReference>();
                        this.ChineseSound = reader.Read<TagReference>();
                        this.PortugueseSound = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int16
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions : Int16
                {
                    GameStart = 0,
                    BombTaken = 1,
                    BombDropped = 2,
                    BombReturnedByPlayer = 3,
                    BombReturnedByTimeout = 4,
                    BombCaptured = 5,
                    BombNewDefensiveTeam = 6,
                    BombReturnFaliure = 7,
                    SideSwitchTick = 8,
                    SideSwitchFinalTick = 9,
                    SideSwitch30Seconds = 10,
                    SideSwitch10Seconds = 11,
                    BombReturnedByDefusing = 12,
                    BombPlacedOnEnemyPost = 13,
                    BombArmingStarted = 14,
                    BombArmingCompleted = 15,
                    BombContested = 16,
                }
                public enum AudienceOptions : Int16
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions : Int16
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions : Int16
                {
                    AnnouncerSound = 1,
                }
            }
            [FieldSetAttribute(384, 4)]
            public sealed class MultiplayerConstantsBlock : AbideTagBlock
            {
                [FieldAttribute("maximum random spawn bias", typeof(Single))]
                public Single MaximumRandomSpawnBias;
                [FieldAttribute("teleporter recharge time:seconds", typeof(Single))]
                public Single TeleporterRechargeTime;
                [FieldAttribute("grenade danger weight", typeof(Single))]
                public Single GrenadeDangerWeight;
                [FieldAttribute("grenade danger inner radius", typeof(Single))]
                public Single GrenadeDangerInnerRadius;
                [FieldAttribute("grenade danger outer radius", typeof(Single))]
                public Single GrenadeDangerOuterRadius;
                [FieldAttribute("grenade danger lead time:seconds", typeof(Single))]
                public Single GrenadeDangerLeadTime;
                [FieldAttribute("vehicle danger min speed:wu/sec", typeof(Single))]
                public Single VehicleDangerMinSpeed;
                [FieldAttribute("vehicle danger weight", typeof(Single))]
                public Single VehicleDangerWeight;
                [FieldAttribute("vehicle danger radius", typeof(Single))]
                public Single VehicleDangerRadius;
                [FieldAttribute("vehicle danger lead time:seconds", typeof(Single))]
                public Single VehicleDangerLeadTime;
                [FieldAttribute("vehicle nearby player dist#how nearby a player is to count a vehicle as \'occupied" +
                    "\'", typeof(Single))]
                public Single VehicleNearbyPlayerDist;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(84)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString2;
                [FieldAttribute("hill shader", typeof(TagReference))]
                public TagReference HillShader;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString3;
                [FieldAttribute("flag reset stop distance", typeof(Single))]
                public Single FlagResetStopDistance;
                [FieldAttribute("bomb explode effect", typeof(TagReference))]
                public TagReference BombExplodeEffect;
                [FieldAttribute("bomb explode dmg effect", typeof(TagReference))]
                public TagReference BombExplodeDmgEffect;
                [FieldAttribute("bomb defuse effect", typeof(TagReference))]
                public TagReference BombDefuseEffect;
                [FieldAttribute("bomb defusal string", typeof(StringId))]
                public StringId BombDefusalString;
                [FieldAttribute("blocked teleporter string", typeof(StringId))]
                public StringId BlockedTeleporterString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString4;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString5;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString6;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString7;
                public override int Size
                {
                    get
                    {
                        return 384;
                    }
                }
                public override void Initialize()
                {
                    this.MaximumRandomSpawnBias = 0;
                    this.TeleporterRechargeTime = 0;
                    this.GrenadeDangerWeight = 0;
                    this.GrenadeDangerInnerRadius = 0;
                    this.GrenadeDangerOuterRadius = 0;
                    this.GrenadeDangerLeadTime = 0;
                    this.VehicleDangerMinSpeed = 0;
                    this.VehicleDangerWeight = 0;
                    this.VehicleDangerRadius = 0;
                    this.VehicleDangerLeadTime = 0;
                    this.VehicleNearbyPlayerDist = 0;
                    this.EmptyString = new byte[84];
                    this.EmptyString1 = new byte[32];
                    this.EmptyString2 = new byte[32];
                    this.HillShader = TagReference.Null;
                    this.EmptyString3 = new byte[16];
                    this.FlagResetStopDistance = 0;
                    this.BombExplodeEffect = TagReference.Null;
                    this.BombExplodeDmgEffect = TagReference.Null;
                    this.BombDefuseEffect = TagReference.Null;
                    this.BombDefusalString = StringId.Zero;
                    this.BlockedTeleporterString = StringId.Zero;
                    this.EmptyString4 = new byte[4];
                    this.EmptyString5 = new byte[32];
                    this.EmptyString6 = new byte[32];
                    this.EmptyString7 = new byte[32];
                }
                public override void Read(BinaryReader reader)
                {
                    this.MaximumRandomSpawnBias = reader.ReadSingle();
                    this.TeleporterRechargeTime = reader.ReadSingle();
                    this.GrenadeDangerWeight = reader.ReadSingle();
                    this.GrenadeDangerInnerRadius = reader.ReadSingle();
                    this.GrenadeDangerOuterRadius = reader.ReadSingle();
                    this.GrenadeDangerLeadTime = reader.ReadSingle();
                    this.VehicleDangerMinSpeed = reader.ReadSingle();
                    this.VehicleDangerWeight = reader.ReadSingle();
                    this.VehicleDangerRadius = reader.ReadSingle();
                    this.VehicleDangerLeadTime = reader.ReadSingle();
                    this.VehicleNearbyPlayerDist = reader.ReadSingle();
                    this.EmptyString = reader.ReadBytes(84);
                    this.EmptyString1 = reader.ReadBytes(32);
                    this.EmptyString2 = reader.ReadBytes(32);
                    this.HillShader = reader.Read<TagReference>();
                    this.EmptyString3 = reader.ReadBytes(16);
                    this.FlagResetStopDistance = reader.ReadSingle();
                    this.BombExplodeEffect = reader.Read<TagReference>();
                    this.BombExplodeDmgEffect = reader.Read<TagReference>();
                    this.BombDefuseEffect = reader.Read<TagReference>();
                    this.BombDefusalString = reader.ReadInt32();
                    this.BlockedTeleporterString = reader.ReadInt32();
                    this.EmptyString4 = reader.ReadBytes(4);
                    this.EmptyString5 = reader.ReadBytes(32);
                    this.EmptyString6 = reader.ReadBytes(32);
                    this.EmptyString7 = reader.ReadBytes(32);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(36, 4)]
            public sealed class GameEngineStatusResponseBlock : AbideTagBlock
            {
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("state^", typeof(StateOptions))]
                [OptionsAttribute(typeof(StateOptions), false)]
                public StateOptions State;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("ffa message", typeof(StringId))]
                public StringId FfaMessage;
                [FieldAttribute("team message", typeof(StringId))]
                public StringId TeamMessage;
                [FieldAttribute("", typeof(TagReference))]
                public TagReference EmptyString2;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString3;
                public override int Size
                {
                    get
                    {
                        return 36;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.State = ((StateOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.FfaMessage = StringId.Zero;
                    this.TeamMessage = StringId.Zero;
                    this.EmptyString2 = TagReference.Null;
                    this.EmptyString3 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.State = ((StateOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.FfaMessage = reader.ReadInt32();
                    this.TeamMessage = reader.ReadInt32();
                    this.EmptyString2 = reader.Read<TagReference>();
                    this.EmptyString3 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    Unused = 1,
                }
                public enum StateOptions : Int16
                {
                    WaitingForSpaceToClear = 0,
                    Observing = 1,
                    RespawningSoon = 2,
                    SittingOut = 3,
                    OutOfLives = 4,
                    PlayingWinning = 5,
                    PlayingTied = 6,
                    PlayingLosing = 7,
                    GameOverWon = 8,
                    GameOverTied = 9,
                    GameOverLost = 10,
                    YouHaveFlag = 11,
                    EnemyHasFlag = 12,
                    FlagNotHome = 13,
                    CarryingOddball = 14,
                    YouAreJuggy = 15,
                    YouControlHill = 16,
                    SwitchingSidesSoon = 17,
                    PlayerRecentlyStarted = 18,
                    YouHaveBomb = 19,
                    FlagContested = 20,
                    BombContested = 21,
                    LimitedLivesLeftMultiple = 22,
                    LimitedLivesLeftSingle = 23,
                    LimitedLivesLeftFinal = 24,
                    PlayingWinningUnlimited = 25,
                    PlayingTiedUnlimited = 26,
                    PlayingLosingUnlimited = 27,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class GrenadeAndPowerupStructBlock : AbideTagBlock
            {
                private TagBlockList<GrenadeBlock> grenadesList = new TagBlockList<GrenadeBlock>(20);
                private TagBlockList<PowerupBlock> powerupsList = new TagBlockList<PowerupBlock>(20);
                [FieldAttribute("grenades", typeof(TagBlock))]
                [BlockAttribute("grenade_block", 20, typeof(GrenadeBlock))]
                public TagBlock Grenades;
                [FieldAttribute("powerups", typeof(TagBlock))]
                [BlockAttribute("powerup_block", 20, typeof(PowerupBlock))]
                public TagBlock Powerups;
                public TagBlockList<GrenadeBlock> GrenadesList
                {
                    get
                    {
                        return this.grenadesList;
                    }
                }
                public TagBlockList<PowerupBlock> PowerupsList
                {
                    get
                    {
                        return this.powerupsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.grenadesList.Clear();
                    this.powerupsList.Clear();
                    this.Grenades = TagBlock.Zero;
                    this.Powerups = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Grenades = reader.ReadInt64();
                    this.grenadesList.Read(reader, this.Grenades);
                    this.Powerups = reader.ReadInt64();
                    this.powerupsList.Read(reader, this.Powerups);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class GrenadeBlock : AbideTagBlock
                {
                    [FieldAttribute("weapon^", typeof(TagReference))]
                    public TagReference Weapon;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Weapon = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Weapon = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(16, 4)]
                public sealed class PowerupBlock : AbideTagBlock
                {
                    [FieldAttribute("weapon^", typeof(TagReference))]
                    public TagReference Weapon;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Weapon = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Weapon = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
    }
}
#pragma warning restore CS1591
