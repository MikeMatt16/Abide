#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("shader_pass", 1936744819u, 4294967293u, typeof(ShaderPassBlock))]
    public sealed class ShaderPassBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("Parameters", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("parameter", 64, typeof(ShaderPassParameterBlock))]
        public TagBlock Parameters;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("Implementations", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("implementation", 32, typeof(ShaderPassImplementationBlock))]
        public TagBlock Implementations;
        [Abide.Guerilla.Tags.FieldAttribute("Postprocess Definition*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_definition_new_block", 1, typeof(ShaderPassPostprocessDefinitionNewBlock))]
        public TagBlock PostprocessDefinition;
        public int Size
        {
            get
            {
                return 60;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class ShaderPassParameterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Default Bitmap", typeof(TagReference))]
            public TagReference DefaultBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("Default Const Value", typeof(Single))]
            public Single DefaultConstValue;
            [Abide.Guerilla.Tags.FieldAttribute("Default Const Color", typeof(ColorRgbF))]
            public ColorRgbF DefaultConstColor;
            [Abide.Guerilla.Tags.FieldAttribute("Source Extern", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceExternOptions), false)]
            public Int16 SourceExtern;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum TypeOptions
            {
                Bitmap = 0,
                Value = 1,
                Color = 2,
                Switch = 3,
            }
            public enum FlagsOptions
            {
                NoBitmapLod = 1,
                RequiredParameter = 2,
            }
            public enum SourceExternOptions
            {
                None = 0,
                Global = 1,
                Global1 = 2,
                Global2 = 3,
                Object = 4,
                Object1 = 5,
                Object2 = 6,
                Light = 7,
                Light1 = 8,
                Light2 = 9,
                Light3 = 10,
                Light4 = 11,
                Light5 = 12,
                Light6 = 13,
                Light7 = 14,
                Light8 = 15,
                Light9 = 16,
                Lightmap = 17,
                Lightmap1 = 18,
                Lightmap2 = 19,
                Lightmap3 = 20,
                Lightmap4 = 21,
                OldFog = 22,
                OldFog1 = 23,
                OldFog2 = 24,
                OldFog3 = 25,
                OldFog4 = 26,
                OldFog5 = 27,
                OldFog6 = 28,
                OldFog7 = 29,
                OldFog8 = 30,
                Object3 = 31,
                Object4 = 32,
                Light10 = 33,
                Light11 = 34,
                Light12 = 35,
                Light13 = 36,
                Shader = 37,
                Pad3 = 38,
                Pad3Scale = 39,
                PadThai = 40,
                TacoSalad = 41,
                AnisotropicBinormal = 42,
                ObjectLight = 43,
                Light14 = 44,
                OldFog9 = 45,
                OldFog10 = 46,
                OldFog11 = 47,
                Object5 = 48,
                Object6 = 49,
                Lightmap5 = 50,
                Shader1 = 51,
                Lightmap6 = 52,
                Shader2 = 53,
                Global3 = 54,
                Lightmap7 = 55,
                Fog = 56,
                Fog1 = 57,
                Fog2 = 58,
                Fog3 = 59,
                Fog4 = 60,
                Fog5 = 61,
                Fog6 = 62,
                Fog7 = 63,
                Fog8 = 64,
                Fog9 = 65,
                Fog10 = 66,
                Fog11 = 67,
                Fog12 = 68,
                Fog13 = 69,
                Fog14 = 70,
                Fog15 = 71,
                Fog16 = 72,
                Fog17 = 73,
                Fog18 = 74,
                Fog19 = 75,
                Fog20 = 76,
                Hud = 77,
                Hud1 = 78,
                Lightmap8 = 79,
                Light15 = 80,
                Light16 = 81,
                Object7 = 82,
                Object8 = 83,
                Hud2 = 84,
                Hud3 = 85,
                Hud4 = 86,
                Hud5 = 87,
                Object9 = 88,
                Fog21 = 89,
                Fog22 = 90,
                Hud6 = 91,
                ScreenEffect = 92,
                ScreenEffect1 = 93,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(184, 4)]
        public sealed class ShaderPassImplementationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Textures", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("texture stage", 8, typeof(ShaderPassTextureBlock))]
            public TagBlock Textures;
            [Abide.Guerilla.Tags.FieldAttribute("Vertex Shader", typeof(TagReference))]
            public TagReference VertexShader1;
            [Abide.Guerilla.Tags.FieldAttribute("vs Constants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("vs constant", 32, typeof(ShaderPassVertexShaderConstantBlock))]
            public TagBlock VsConstants;
            [Abide.Guerilla.Tags.FieldAttribute("channels", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ChannelsOptions), false)]
            public Int16 Channels;
            [Abide.Guerilla.Tags.FieldAttribute("alpha-blend", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(AlphaBlendOptions), false)]
            public Int16 AlphaBlend;
            [Abide.Guerilla.Tags.FieldAttribute("depth", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(DepthOptions), false)]
            public Int16 Depth;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("channel state", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("channels", 1, typeof(ShaderStateChannelsStateBlock))]
            public TagBlock ChannelState;
            [Abide.Guerilla.Tags.FieldAttribute("alpha-blend state", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("alpha-blend state", 1, typeof(ShaderStateAlphaBlendStateBlock))]
            public TagBlock AlphaBlendState;
            [Abide.Guerilla.Tags.FieldAttribute("alpha-test state", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("alpha-test state", 1, typeof(ShaderStateAlphaTestStateBlock))]
            public TagBlock AlphaTestState;
            [Abide.Guerilla.Tags.FieldAttribute("depth state", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("depth state", 1, typeof(ShaderStateDepthStateBlock))]
            public TagBlock DepthState;
            [Abide.Guerilla.Tags.FieldAttribute("cull state", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("cull state", 1, typeof(ShaderStateCullStateBlock))]
            public TagBlock CullState;
            [Abide.Guerilla.Tags.FieldAttribute("fill state", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("fill state", 1, typeof(ShaderStateFillStateBlock))]
            public TagBlock FillState;
            [Abide.Guerilla.Tags.FieldAttribute("misc state", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("misc state", 1, typeof(ShaderStateMiscStateBlock))]
            public TagBlock MiscState;
            [Abide.Guerilla.Tags.FieldAttribute("constants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("render state constant", 7, typeof(ShaderStateConstantBlock))]
            public TagBlock Constants;
            [Abide.Guerilla.Tags.FieldAttribute("Pixel Shader", typeof(TagReference))]
            public TagReference PixelShader;
            public int Size
            {
                get
                {
                    return 184;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
            public sealed class ShaderPassTextureBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Source Parameter", typeof(StringId))]
                public StringId SourceParameter;
                [Abide.Guerilla.Tags.FieldAttribute("Source Extern", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceExternOptions), false)]
                public Int16 SourceExtern;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ModeOptions), false)]
                public Int16 Mode;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("Dot Mapping", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DotMappingOptions), false)]
                public Int16 DotMapping;
                [Abide.Guerilla.Tags.FieldAttribute("Input Stage:[0,3]", typeof(Int16))]
                public Int16 InputStage;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("address state", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("address state", 1, typeof(ShaderTextureStateAddressStateBlock))]
                public TagBlock AddressState;
                [Abide.Guerilla.Tags.FieldAttribute("filter state", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("filter state", 1, typeof(ShaderTextureStateFilterStateBlock))]
                public TagBlock FilterState;
                [Abide.Guerilla.Tags.FieldAttribute("kill state", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("kill state", 1, typeof(ShaderTextureStateKillStateBlock))]
                public TagBlock KillState;
                [Abide.Guerilla.Tags.FieldAttribute("misc state", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("misc state", 1, typeof(ShaderTextureStateMiscStateBlock))]
                public TagBlock MiscState;
                [Abide.Guerilla.Tags.FieldAttribute("constants", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("texture constant", 10, typeof(ShaderTextureStateConstantBlock))]
                public TagBlock Constants;
                public int Size
                {
                    get
                    {
                        return 80;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ShaderTextureStateAddressStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("U address mode", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(UAddressModeOptions), false)]
                    public Int16 UAddressMode;
                    [Abide.Guerilla.Tags.FieldAttribute("V address mode", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(VAddressModeOptions), false)]
                    public Int16 VAddressMode;
                    [Abide.Guerilla.Tags.FieldAttribute("W address mode", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(WAddressModeOptions), false)]
                    public Int16 WAddressMode;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum UAddressModeOptions
                    {
                        Wrap = 0,
                        Mirror = 1,
                        Clamp = 2,
                        Border = 3,
                        ClampToEdge = 4,
                    }
                    public enum VAddressModeOptions
                    {
                        Wrap = 0,
                        Mirror = 1,
                        Clamp = 2,
                        Border = 3,
                        ClampToEdge = 4,
                    }
                    public enum WAddressModeOptions
                    {
                        Wrap = 0,
                        Mirror = 1,
                        Clamp = 2,
                        Border = 3,
                        ClampToEdge = 4,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class ShaderTextureStateFilterStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("mag filter", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(MagFilterOptions), false)]
                    public Int16 MagFilter;
                    [Abide.Guerilla.Tags.FieldAttribute("min filter", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(MinFilterOptions), false)]
                    public Int16 MinFilter;
                    [Abide.Guerilla.Tags.FieldAttribute("mip filter", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(MipFilterOptions), false)]
                    public Int16 MipFilter;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("mipmap bias", typeof(Single))]
                    public Single MipmapBias;
                    [Abide.Guerilla.Tags.FieldAttribute("max mipmap index#0 means all mipmap levels are used", typeof(Int16))]
                    public Int16 MaxMipmapIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("anisotropy", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(AnisotropyOptions), false)]
                    public Int16 Anisotropy;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum MagFilterOptions
                    {
                        None = 0,
                        PointSampled = 1,
                        Linear = 2,
                        Anisotropic = 3,
                        Quincunx = 4,
                        GaussianCubic = 5,
                    }
                    public enum MinFilterOptions
                    {
                        None = 0,
                        PointSampled = 1,
                        Linear = 2,
                        Anisotropic = 3,
                        Quincunx = 4,
                        GaussianCubic = 5,
                    }
                    public enum MipFilterOptions
                    {
                        None = 0,
                        PointSampled = 1,
                        Linear = 2,
                        Anisotropic = 3,
                        Quincunx = 4,
                        GaussianCubic = 5,
                    }
                    public enum AnisotropyOptions
                    {
                        NonAnisotropic = 0,
                        _2Tap = 1,
                        _3Tap = 2,
                        _4Tap = 3,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class ShaderTextureStateKillStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int16 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("colorkey mode", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ColorkeyModeOptions), false)]
                    public Int16 ColorkeyMode;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("colorkey color", typeof(ColorRgb))]
                    public ColorRgb ColorkeyColor;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions
                    {
                        AlphaKill = 1,
                    }
                    public enum ColorkeyModeOptions
                    {
                        Disabled = 0,
                        ZeroAlpha = 1,
                        ZeroArgb = 2,
                        Kill = 3,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ShaderTextureStateMiscStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("component sign flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ComponentSignFlagsOptions), true)]
                    public Int16 ComponentSignFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("border color", typeof(ColorArgb))]
                    public ColorArgb BorderColor;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum ComponentSignFlagsOptions
                    {
                        RSigned = 1,
                        GSigned = 2,
                        BSigned = 4,
                        ASigned = 8,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ShaderTextureStateConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("source parameter", typeof(StringId))]
                    public StringId SourceParameter;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("constant^", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ConstantOptions), false)]
                    public Int16 Constant;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum ConstantOptions
                    {
                        MipmapBiasValue = 0,
                        ColorkeyColor = 1,
                        BorderColor = 2,
                        BorderAlphaValue = 3,
                        BumpenvMat00 = 4,
                        BumpenvMat01 = 5,
                        BumpenvMat10 = 6,
                        BumpenvMat11 = 7,
                        BumpenvLumScaleValue = 8,
                        BumpenvLumOffsetValue = 9,
                    }
                }
                public enum SourceExternOptions
                {
                    None = 0,
                    Global = 1,
                    Unused = 2,
                    Global1 = 3,
                    Unused1 = 4,
                    Global2 = 5,
                    Globa = 6,
                    Unused2 = 7,
                    Global3 = 8,
                    Light = 9,
                    Light1 = 10,
                    Lightmap = 11,
                    Unused3 = 12,
                    Global4 = 13,
                    Global5 = 14,
                    Global6 = 15,
                    Hud = 16,
                    Global7 = 17,
                    Global8 = 18,
                    Global9 = 19,
                    Global10 = 20,
                    Global11 = 21,
                    Global12 = 22,
                    Global13 = 23,
                    Global14 = 24,
                    Global15 = 25,
                    Shader = 26,
                    FirstPerson = 27,
                }
                public enum ModeOptions
                {
                    _2d = 0,
                    _3d = 1,
                    CubeMap = 2,
                    Passthrough = 3,
                    Texkill = 4,
                    _2dDependentAr = 5,
                    _2dDependentGb = 6,
                    _2dBumpenv = 7,
                    _2dBumpenvLuminance = 8,
                    _3dBrdf = 9,
                    DotProduct = 10,
                    DotProduct2d = 11,
                    DotProduct3d = 12,
                    DotProductCubeMap = 13,
                    DotProductZw = 14,
                    DotReflectDiffuse = 15,
                    DotReflectSpecular = 16,
                    DotReflectSpecularConst = 17,
                    None = 18,
                }
                public enum DotMappingOptions
                {
                    _0To1 = 0,
                    SignedD3d = 1,
                    SignedGl = 2,
                    SignedNv = 3,
                    Hilo = 4,
                    Hilo1 = 5,
                    Hilo2 = 6,
                    Hilo3 = 7,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ShaderPassVertexShaderConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Source Parameter", typeof(StringId))]
                public StringId SourceParameter;
                [Abide.Guerilla.Tags.FieldAttribute("Scale by Texture Stage", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScaleByTextureStageOptions), false)]
                public Int16 ScaleByTextureStage;
                [Abide.Guerilla.Tags.FieldAttribute("Register Bank", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RegisterBankOptions), false)]
                public Int16 RegisterBank;
                [Abide.Guerilla.Tags.FieldAttribute("Register Index", typeof(Int16))]
                public Int16 RegisterIndex;
                [Abide.Guerilla.Tags.FieldAttribute("Component Mask", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ComponentMaskOptions), false)]
                public Int16 ComponentMask;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ScaleByTextureStageOptions
                {
                    None = 0,
                    Stage0 = 1,
                    Stage1 = 2,
                    Stage2 = 3,
                    Stage3 = 4,
                }
                public enum RegisterBankOptions
                {
                    Vn015 = 0,
                    Cn012 = 1,
                }
                public enum ComponentMaskOptions
                {
                    XValue = 0,
                    YValue = 1,
                    ZValue = 2,
                    WValue = 3,
                    XyzrgbColor = 4,
                    XUniformScale = 5,
                    YUniformScale = 6,
                    ZUniformScale = 7,
                    WUniformScale = 8,
                    Xy2dScale = 9,
                    Zw2dScale = 10,
                    Xy2dTranslation = 11,
                    Zw2dTranslation = 12,
                    Xyzw2dSimpleXform = 13,
                    XywRow12dAffineXform = 14,
                    XywRow22dAffineXform = 15,
                    Xyz3dScale = 16,
                    Xyz3dTranslation = 17,
                    XyzwRow13dAffineXform = 18,
                    XyzwRow23dAffineXform = 19,
                    XyzwRow33dAffineXform = 20,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderStateChannelsStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    R = 1,
                    G = 2,
                    B = 4,
                    A = 8,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class ShaderStateAlphaBlendStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("blend function", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BlendFunctionOptions), false)]
                public Int16 BlendFunction;
                [Abide.Guerilla.Tags.FieldAttribute("blend src factor", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BlendSrcFactorOptions), false)]
                public Int16 BlendSrcFactor;
                [Abide.Guerilla.Tags.FieldAttribute("blend dst factor", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BlendDstFactorOptions), false)]
                public Int16 BlendDstFactor;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("blend color", typeof(ColorArgb))]
                public ColorArgb BlendColor;
                [Abide.Guerilla.Tags.FieldAttribute("logic-op flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(LogicOpFlagsOptions), true)]
                public Int16 LogicOpFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum BlendFunctionOptions
                {
                    Add = 0,
                    Subtract = 1,
                    ReverseSubtract = 2,
                    Min = 3,
                    Max = 4,
                    AddSigned = 5,
                    ReverseSubtractSigned = 6,
                    LogicOp = 7,
                }
                public enum BlendSrcFactorOptions
                {
                    Zero = 0,
                    One = 1,
                    Srccolor = 2,
                    SrccolorInverse = 3,
                    Srcalpha = 4,
                    SrcalphaInverse = 5,
                    Dstcolor = 6,
                    DstcolorInverse = 7,
                    Dstalpha = 8,
                    DstalphaInverse = 9,
                    SrcalphaSaturate = 10,
                    ConstantColor = 11,
                    ConstantColorInverse = 12,
                    ConstantAlpha = 13,
                    ConstantAlphaInverse = 14,
                }
                public enum BlendDstFactorOptions
                {
                    Zero = 0,
                    One = 1,
                    Srccolor = 2,
                    SrccolorInverse = 3,
                    Srcalpha = 4,
                    SrcalphaInverse = 5,
                    Dstcolor = 6,
                    DstcolorInverse = 7,
                    Dstalpha = 8,
                    DstalphaInverse = 9,
                    SrcalphaSaturate = 10,
                    ConstantColor = 11,
                    ConstantColorInverse = 12,
                    ConstantAlpha = 13,
                    ConstantAlphaInverse = 14,
                }
                public enum LogicOpFlagsOptions
                {
                    SrcEquals0DstEquals0 = 1,
                    SrcEquals0DstEquals1 = 2,
                    SrcEquals1DstEquals0 = 4,
                    SrcEquals1DstEquals1 = 8,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ShaderStateAlphaTestStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("alpha compare function", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AlphaCompareFunctionOptions), false)]
                public Int16 AlphaCompareFunction;
                [Abide.Guerilla.Tags.FieldAttribute("alpha-test ref:[0,255]", typeof(Int16))]
                public Int16 AlphaTestRef;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    AlphaTestEnabled = 1,
                    SampleAlphaToCoverage = 2,
                    SampleAlphaToOne = 4,
                }
                public enum AlphaCompareFunctionOptions
                {
                    Never = 0,
                    Less = 1,
                    Equal = 2,
                    LessOrEqual = 3,
                    Greater = 4,
                    NotEqual = 5,
                    GreaterOrEqual = 6,
                    Always = 7,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class ShaderStateDepthStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ModeOptions), false)]
                public Int16 Mode;
                [Abide.Guerilla.Tags.FieldAttribute("depth compare function", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DepthCompareFunctionOptions), false)]
                public Int16 DepthCompareFunction;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("depth bias slope scale", typeof(Single))]
                public Single DepthBiasSlopeScale;
                [Abide.Guerilla.Tags.FieldAttribute("depth bias", typeof(Single))]
                public Single DepthBias;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ModeOptions
                {
                    UseZ = 0,
                    UseW = 1,
                }
                public enum DepthCompareFunctionOptions
                {
                    Never = 0,
                    Less = 1,
                    Equal = 2,
                    LessOrEqual = 3,
                    Greater = 4,
                    NotEqual = 5,
                    GreaterOrEqual = 6,
                    Always = 7,
                }
                public enum FlagsOptions
                {
                    DepthWrite = 1,
                    OffsetPoints = 2,
                    OffsetLines = 4,
                    OffsetTriangles = 8,
                    ClipControlDontCullPrimitive = 16,
                    ClipControlClamp = 32,
                    ClipControlIgnoreWSign = 64,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderStateCullStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ModeOptions), false)]
                public Int16 Mode;
                [Abide.Guerilla.Tags.FieldAttribute("front face", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FrontFaceOptions), false)]
                public Int16 FrontFace;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ModeOptions
                {
                    None = 0,
                    Cw = 1,
                    Ccw = 2,
                }
                public enum FrontFaceOptions
                {
                    Cw = 0,
                    Ccw = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class ShaderStateFillStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("fill mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FillModeOptions), false)]
                public Int16 FillMode;
                [Abide.Guerilla.Tags.FieldAttribute("back fill mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BackFillModeOptions), false)]
                public Int16 BackFillMode;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("line width", typeof(Single))]
                public Single LineWidth;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    FlatShading = 1,
                    EdgeAntialiasing = 2,
                }
                public enum FillModeOptions
                {
                    Solid = 0,
                    Wireframe = 1,
                    Points = 2,
                }
                public enum BackFillModeOptions
                {
                    Solid = 0,
                    Wireframe = 1,
                    Points = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ShaderStateMiscStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("fog color", typeof(ColorRgb))]
                public ColorRgb FogColor;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    YuvToRgb = 1,
                    _16BitDither = 2,
                    _32BitDxt1Noise = 4,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ShaderStateConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("source parameter", typeof(StringId))]
                public StringId SourceParameter;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("constant^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ConstantOptions), false)]
                public Int16 Constant;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ConstantOptions
                {
                    ConstantBlendColor = 0,
                    ConstantBlendAlphaValue = 1,
                    AlphaTestRefValue = 2,
                    DepthBiasSlopeScaleValue = 3,
                    DepthBiasValue = 4,
                    LineWidthValue = 5,
                    FogColor = 6,
                }
            }
            public enum FlagsOptions
            {
                DeleteFromCacheFile = 1,
                Critical = 2,
            }
            public enum ChannelsOptions
            {
                All = 0,
                ColorOnly = 1,
                AlphaOnly = 2,
                Custom = 3,
            }
            public enum AlphaBlendOptions
            {
                Disabled = 0,
                Add = 1,
                Multiply = 2,
                AddSrcTimesDstalpha = 3,
                AddSrcTimesSrcalpha = 4,
                AddDstTimesSrcalphaInverse = 5,
                AlphaBlend = 6,
                Custom = 7,
            }
            public enum DepthOptions
            {
                Disabled = 0,
                DefaultOpaque = 1,
                DefaultOpaqueWrite = 2,
                DefaultTransparent = 3,
                Custom = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(132, 4)]
        public sealed class ShaderPassPostprocessDefinitionNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("implementations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_implementation_new_block", 1024, typeof(ShaderPassPostprocessImplementationNewBlock))]
            public TagBlock Implementations;
            [Abide.Guerilla.Tags.FieldAttribute("textures", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_texture_new_block", 1024, typeof(ShaderPassPostprocessTextureNewBlock))]
            public TagBlock Textures;
            [Abide.Guerilla.Tags.FieldAttribute("render states", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("render_state_block", 1024, typeof(RenderStateBlock))]
            public TagBlock RenderStates;
            [Abide.Guerilla.Tags.FieldAttribute("texture states", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_texture_state_block", 1024, typeof(ShaderPassPostprocessTextureStateBlock))]
            public TagBlock TextureStates;
            [Abide.Guerilla.Tags.FieldAttribute("ps fragments", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_fragment_block", 1024, typeof(PixelShaderFragmentBlock))]
            public TagBlock PsFragments;
            [Abide.Guerilla.Tags.FieldAttribute("ps permutations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_permutation_new_block", 1024, typeof(PixelShaderPermutationNewBlock))]
            public TagBlock PsPermutations;
            [Abide.Guerilla.Tags.FieldAttribute("ps combiners", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_combiner_block", 1024, typeof(PixelShaderCombinerBlock))]
            public TagBlock PsCombiners;
            [Abide.Guerilla.Tags.FieldAttribute("externs", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_extern_new_block", 1024, typeof(ShaderPassPostprocessExternNewBlock))]
            public TagBlock Externs;
            [Abide.Guerilla.Tags.FieldAttribute("constants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_constant_new_block", 1024, typeof(ShaderPassPostprocessConstantNewBlock))]
            public TagBlock Constants;
            [Abide.Guerilla.Tags.FieldAttribute("constant info", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_constant_info_new_block", 1024, typeof(ShaderPassPostprocessConstantInfoNewBlock))]
            public TagBlock ConstantInfo;
            [Abide.Guerilla.Tags.FieldAttribute("old implementations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("shader_pass_postprocess_implementation_block", 1024, typeof(ShaderPassPostprocessImplementationBlock))]
            public TagBlock OldImplementations;
            public int Size
            {
                get
                {
                    return 132;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(350, 4)]
            public sealed class ShaderPassPostprocessImplementationNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("textures", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock Textures;
                [Abide.Guerilla.Tags.FieldAttribute("render states", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock RenderStates;
                [Abide.Guerilla.Tags.FieldAttribute("texture states", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock TextureStates;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(240)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("ps fragments", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PsFragments;
                [Abide.Guerilla.Tags.FieldAttribute("ps permutations", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PsPermutations;
                [Abide.Guerilla.Tags.FieldAttribute("ps combiners", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PsCombiners;
                [Abide.Guerilla.Tags.FieldAttribute("vertex shader", typeof(TagReference))]
                public TagReference VertexShader;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("default render states", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock DefaultRenderStates;
                [Abide.Guerilla.Tags.FieldAttribute("render state externs", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock RenderStateExterns;
                [Abide.Guerilla.Tags.FieldAttribute("texture state externs", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock TextureStateExterns;
                [Abide.Guerilla.Tags.FieldAttribute("pixel constant externs", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PixelConstantExterns;
                [Abide.Guerilla.Tags.FieldAttribute("vertex constant externs", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock VertexConstantExterns;
                [Abide.Guerilla.Tags.FieldAttribute("ps constants", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PsConstants;
                [Abide.Guerilla.Tags.FieldAttribute("vs constants", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock VsConstants;
                [Abide.Guerilla.Tags.FieldAttribute("pixel constant info", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PixelConstantInfo;
                [Abide.Guerilla.Tags.FieldAttribute("vertex constant info", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock VertexConstantInfo;
                [Abide.Guerilla.Tags.FieldAttribute("render state info", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock RenderStateInfo;
                [Abide.Guerilla.Tags.FieldAttribute("texture state info", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock TextureStateInfo;
                [Abide.Guerilla.Tags.FieldAttribute("pixel shader", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_pixel_shader", 100, typeof(ShaderPostprocessPixelShader))]
                public TagBlock PixelShader;
                [Abide.Guerilla.Tags.FieldAttribute("pixel shader switch extern map", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_extern_map_block", 6, typeof(PixelShaderExternMapBlock))]
                public TagBlock PixelShaderSwitchExternMap;
                [Abide.Guerilla.Tags.FieldAttribute("pixel shader index block", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_index_block", 100, typeof(PixelShaderIndexBlock))]
                public TagBlock PixelShaderIndexBlock1;
                public int Size
                {
                    get
                    {
                        return 350;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
                public sealed class ShaderPostprocessPixelShader : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("pixel shader handle (runtime)", typeof(Int32))]
                    public Int32 PixelShaderHandleRuntime;
                    [Abide.Guerilla.Tags.FieldAttribute("pixel shader handle (runtime)", typeof(Int32))]
                    public Int32 PixelShaderHandleRuntime1;
                    [Abide.Guerilla.Tags.FieldAttribute("pixel shader handle (runtime)", typeof(Int32))]
                    public Int32 PixelShaderHandleRuntime2;
                    [Abide.Guerilla.Tags.FieldAttribute("constant register defaults", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("shader_postprocess_pixel_shader_constant_defaults", 32, typeof(ShaderPostprocessPixelShaderConstantDefaults))]
                    public TagBlock ConstantRegisterDefaults;
                    public int Size
                    {
                        get
                        {
                            return 84;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                    public sealed class ShaderPostprocessPixelShaderConstantDefaults : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("defaults", typeof(Int32))]
                        public Int32 Defaults;
                        public int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class PixelShaderExternMapBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("switch parameter", typeof(Byte))]
                    public Byte SwitchParameter;
                    [Abide.Guerilla.Tags.FieldAttribute("case scalar", typeof(Byte))]
                    public Byte CaseScalar;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                public sealed class PixelShaderIndexBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("pixel shader index", typeof(Byte))]
                    public Byte PixelShaderIndex;
                    public int Size
                    {
                        get
                        {
                            return 1;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                    public Int16 BlockIndexData;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderPassPostprocessTextureNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bitmap parameter index", typeof(Byte))]
                public Byte BitmapParameterIndex;
                [Abide.Guerilla.Tags.FieldAttribute("bitmap extern index", typeof(Byte))]
                public Byte BitmapExternIndex;
                [Abide.Guerilla.Tags.FieldAttribute("texture stage index", typeof(Byte))]
                public Byte TextureStageIndex;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
                public Byte Flags;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(5, 4)]
            public sealed class RenderStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                public Byte StateIndex;
                [Abide.Guerilla.Tags.FieldAttribute("state value", typeof(Int32))]
                public Int32 StateValue;
                public int Size
                {
                    get
                    {
                        return 5;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ShaderPassPostprocessTextureStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(24)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(3, 4)]
            public sealed class PixelShaderFragmentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("switch parameter index", typeof(Byte))]
                public Byte SwitchParameterIndex;
                [Abide.Guerilla.Tags.FieldAttribute("permutations index", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock PermutationsIndex;
                public int Size
                {
                    get
                    {
                        return 3;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                    public Int16 BlockIndexData;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(6, 4)]
            public sealed class PixelShaderPermutationNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("enum index", typeof(Int16))]
                public Int16 EnumIndex;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("combiners", typeof(TagBlockIndexStructBlock))]
                public TagBlockIndexStructBlock Combiners;
                public int Size
                {
                    get
                    {
                        return 6;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                    public Int16 BlockIndexData;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class PixelShaderCombinerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("constant color0", typeof(ColorArgb))]
                public ColorArgb ConstantColor0;
                [Abide.Guerilla.Tags.FieldAttribute("constant color1", typeof(ColorArgb))]
                public ColorArgb ConstantColor1;
                [Abide.Guerilla.Tags.FieldAttribute("color A register ptr index", typeof(Byte))]
                public Byte ColorARegisterPtrIndex;
                [Abide.Guerilla.Tags.FieldAttribute("color B register ptr index", typeof(Byte))]
                public Byte ColorBRegisterPtrIndex;
                [Abide.Guerilla.Tags.FieldAttribute("color C register ptr index", typeof(Byte))]
                public Byte ColorCRegisterPtrIndex;
                [Abide.Guerilla.Tags.FieldAttribute("color D register ptr index", typeof(Byte))]
                public Byte ColorDRegisterPtrIndex;
                [Abide.Guerilla.Tags.FieldAttribute("alpha A register ptr index", typeof(Byte))]
                public Byte AlphaARegisterPtrIndex;
                [Abide.Guerilla.Tags.FieldAttribute("alpha B register ptr index", typeof(Byte))]
                public Byte AlphaBRegisterPtrIndex;
                [Abide.Guerilla.Tags.FieldAttribute("alpha C register ptr index", typeof(Byte))]
                public Byte AlphaCRegisterPtrIndex;
                [Abide.Guerilla.Tags.FieldAttribute("alpha D register ptr index", typeof(Byte))]
                public Byte AlphaDRegisterPtrIndex;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class ShaderPassPostprocessExternNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(3)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("extern index", typeof(Byte))]
                public Byte ExternIndex;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(7, 4)]
            public sealed class ShaderPassPostprocessConstantNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("parameter name", typeof(StringId))]
                public StringId ParameterName;
                [Abide.Guerilla.Tags.FieldAttribute("component mask", typeof(Byte))]
                public Byte ComponentMask;
                [Abide.Guerilla.Tags.FieldAttribute("scale by texture stage", typeof(Byte))]
                public Byte ScaleByTextureStage;
                [Abide.Guerilla.Tags.FieldAttribute("function index", typeof(Byte))]
                public Byte FunctionIndex;
                public int Size
                {
                    get
                    {
                        return 7;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(7, 4)]
            public sealed class ShaderPassPostprocessConstantInfoNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("parameter name", typeof(StringId))]
                public StringId ParameterName;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(3)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 7;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(502, 4)]
            public sealed class ShaderPassPostprocessImplementationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("GPU State", typeof(ShaderGpuStateStructBlock))]
                public ShaderGpuStateStructBlock GpuState;
                [Abide.Guerilla.Tags.FieldAttribute("GPU Constant State", typeof(ShaderGpuStateReferenceStructBlock))]
                public ShaderGpuStateReferenceStructBlock GpuConstantState;
                [Abide.Guerilla.Tags.FieldAttribute("GPU Volatile State", typeof(ShaderGpuStateReferenceStructBlock))]
                public ShaderGpuStateReferenceStructBlock GpuVolatileState;
                [Abide.Guerilla.Tags.FieldAttribute("GPU default state", typeof(ShaderGpuStateReferenceStructBlock))]
                public ShaderGpuStateReferenceStructBlock GpuDefaultState;
                [Abide.Guerilla.Tags.FieldAttribute("vertex shader", typeof(TagReference))]
                public TagReference VertexShader;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("value externs", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("extern_reference_block", 1024, typeof(ExternReferenceBlock))]
                public TagBlock ValueExterns;
                [Abide.Guerilla.Tags.FieldAttribute("color externs", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("extern_reference_block", 1024, typeof(ExternReferenceBlock))]
                public TagBlock ColorExterns;
                [Abide.Guerilla.Tags.FieldAttribute("switch externs", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("extern_reference_block", 1024, typeof(ExternReferenceBlock))]
                public TagBlock SwitchExterns;
                [Abide.Guerilla.Tags.FieldAttribute("bitmap parameter count", typeof(Int16))]
                public Int16 BitmapParameterCount;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(240)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("pixel shader fragments", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_fragment_block", 1024, typeof(PixelShaderFragmentBlock))]
                public TagBlock PixelShaderFragments;
                [Abide.Guerilla.Tags.FieldAttribute("pixel shader permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_permutation_block", 1024, typeof(PixelShaderPermutationBlock))]
                public TagBlock PixelShaderPermutations;
                [Abide.Guerilla.Tags.FieldAttribute("pixel shader combiners", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_combiner_block", 1024, typeof(PixelShaderCombinerBlock))]
                public TagBlock PixelShaderCombiners;
                [Abide.Guerilla.Tags.FieldAttribute("pixel shader constants", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("pixel_shader_constant_block", 1024, typeof(PixelShaderConstantBlock))]
                public TagBlock PixelShaderConstants;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString7;
                public int Size
                {
                    get
                    {
                        return 502;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                public sealed class ExternReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                    public Byte ParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("extern index", typeof(Byte))]
                    public Byte ExternIndex;
                    public int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(3, 4)]
                public sealed class PixelShaderFragmentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("switch parameter index", typeof(Byte))]
                    public Byte SwitchParameterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("permutations index", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock PermutationsIndex;
                    public int Size
                    {
                        get
                        {
                            return 3;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                    public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                        public Int16 BlockIndexData;
                        public int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class PixelShaderPermutationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("enum index", typeof(Int16))]
                    public Int16 EnumIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int16 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("constants", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock Constants;
                    [Abide.Guerilla.Tags.FieldAttribute("combiners", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock Combiners;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString1;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                    public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                        public Int16 BlockIndexData;
                        public int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum FlagsOptions
                    {
                        HasFinalCombiner = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
                public sealed class PixelShaderCombinerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(16)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("constant color0", typeof(ColorArgb))]
                    public ColorArgb ConstantColor0;
                    [Abide.Guerilla.Tags.FieldAttribute("constant color1", typeof(ColorArgb))]
                    public ColorArgb ConstantColor1;
                    [Abide.Guerilla.Tags.FieldAttribute("color A register ptr index", typeof(Byte))]
                    public Byte ColorARegisterPtrIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("color B register ptr index", typeof(Byte))]
                    public Byte ColorBRegisterPtrIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("color C register ptr index", typeof(Byte))]
                    public Byte ColorCRegisterPtrIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("color D register ptr index", typeof(Byte))]
                    public Byte ColorDRegisterPtrIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("alpha A register ptr index", typeof(Byte))]
                    public Byte AlphaARegisterPtrIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("alpha B register ptr index", typeof(Byte))]
                    public Byte AlphaBRegisterPtrIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("alpha C register ptr index", typeof(Byte))]
                    public Byte AlphaCRegisterPtrIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("alpha D register ptr index", typeof(Byte))]
                    public Byte AlphaDRegisterPtrIndex;
                    public int Size
                    {
                        get
                        {
                            return 32;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(6, 4)]
                public sealed class PixelShaderConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("parameter type", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ParameterTypeOptions), false)]
                    public Byte ParameterType;
                    [Abide.Guerilla.Tags.FieldAttribute("combiner index", typeof(Byte))]
                    public Byte CombinerIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("register index", typeof(Byte))]
                    public Byte RegisterIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("component mask", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(ComponentMaskOptions), false)]
                    public Byte ComponentMask;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(1)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(1)]
                    public Byte[] EmptyString1;
                    public int Size
                    {
                        get
                        {
                            return 6;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum ParameterTypeOptions
                    {
                        Bitmap = 0,
                        Value = 1,
                        Color = 2,
                        Switch = 3,
                    }
                    public enum ComponentMaskOptions
                    {
                        XValue = 0,
                        YValue = 1,
                        ZValue = 2,
                        WValue = 3,
                        XyzrgbColor = 4,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
                public sealed class ShaderGpuStateStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("render states", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("render_state_block", 1024, typeof(RenderStateBlock))]
                    public TagBlock RenderStates;
                    [Abide.Guerilla.Tags.FieldAttribute("texture stage states", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("texture_stage_state_block", 1024, typeof(TextureStageStateBlock))]
                    public TagBlock TextureStageStates;
                    [Abide.Guerilla.Tags.FieldAttribute("render state parameters", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("render_state_parameter_block", 1024, typeof(RenderStateParameterBlock))]
                    public TagBlock RenderStateParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("texture stage parameters", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("texture_stage_state_parameter_block", 1024, typeof(TextureStageStateParameterBlock))]
                    public TagBlock TextureStageParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("textures", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("texture_block", 1024, typeof(TextureBlock))]
                    public TagBlock Textures;
                    [Abide.Guerilla.Tags.FieldAttribute("Vn Constants", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("vertex_shader_constant_block", 1024, typeof(VertexShaderConstantBlock))]
                    public TagBlock VnConstants;
                    [Abide.Guerilla.Tags.FieldAttribute("Cn Constants", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("vertex_shader_constant_block", 1024, typeof(VertexShaderConstantBlock))]
                    public TagBlock CnConstants;
                    public int Size
                    {
                        get
                        {
                            return 84;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(5, 4)]
                    public sealed class RenderStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("state value", typeof(Int32))]
                        public Int32 StateValue;
                        public int Size
                        {
                            get
                            {
                                return 5;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(6, 4)]
                    public sealed class TextureStageStateBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("stage index", typeof(Byte))]
                        public Byte StageIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("state value", typeof(Int32))]
                        public Int32 StateValue;
                        public int Size
                        {
                            get
                            {
                                return 6;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(3, 4)]
                    public sealed class RenderStateParameterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter type", typeof(Byte))]
                        public Byte ParameterType;
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        public int Size
                        {
                            get
                            {
                                return 3;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                    public sealed class TextureStageStateParameterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter type", typeof(Byte))]
                        public Byte ParameterType;
                        [Abide.Guerilla.Tags.FieldAttribute("state index", typeof(Byte))]
                        public Byte StateIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("stage index", typeof(Byte))]
                        public Byte StageIndex;
                        public int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                    public sealed class TextureBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("stage index", typeof(Byte))]
                        public Byte StageIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("global texture index", typeof(Byte))]
                        public Byte GlobalTextureIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
                        public Byte Flags;
                        public int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                    public sealed class VertexShaderConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("register index", typeof(Byte))]
                        public Byte RegisterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("parameter index", typeof(Byte))]
                        public Byte ParameterIndex;
                        [Abide.Guerilla.Tags.FieldAttribute("destination mask", typeof(Byte))]
                        public Byte DestinationMask;
                        [Abide.Guerilla.Tags.FieldAttribute("scale by texture stage", typeof(Byte))]
                        public Byte ScaleByTextureStage;
                        public int Size
                        {
                            get
                            {
                                return 4;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(14, 4)]
                public sealed class ShaderGpuStateReferenceStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("render states", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock RenderStates;
                    [Abide.Guerilla.Tags.FieldAttribute("texture stage states", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock TextureStageStates;
                    [Abide.Guerilla.Tags.FieldAttribute("render state parameters", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock RenderStateParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("texture stage parameters", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock TextureStageParameters;
                    [Abide.Guerilla.Tags.FieldAttribute("textures", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock Textures;
                    [Abide.Guerilla.Tags.FieldAttribute("Vn Constants", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock VnConstants;
                    [Abide.Guerilla.Tags.FieldAttribute("Cn Constants", typeof(TagBlockIndexStructBlock))]
                    public TagBlockIndexStructBlock CnConstants;
                    public int Size
                    {
                        get
                        {
                            return 14;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(2, 4)]
                    public sealed class TagBlockIndexStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("block index data", typeof(Int16))]
                        public Int16 BlockIndexData;
                        public int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
    }
}
#pragma warning restore CS1591
