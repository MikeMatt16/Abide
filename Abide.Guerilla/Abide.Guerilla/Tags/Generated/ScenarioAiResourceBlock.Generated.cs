#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(228, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("scenario_ai_resource", 1634282026u, 4294967293u, typeof(ScenarioAiResourceBlock))]
    public sealed class ScenarioAiResourceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("Style Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("style_palette_block", 50, typeof(StylePaletteBlock))]
        public TagBlock StylePalette;
        [Abide.Guerilla.Tags.FieldAttribute("Squad Groups", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("squad_groups_block", 100, typeof(SquadGroupsBlock))]
        public TagBlock SquadGroups;
        [Abide.Guerilla.Tags.FieldAttribute("Squads", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("squads_block", 335, typeof(SquadsBlock))]
        public TagBlock Squads;
        [Abide.Guerilla.Tags.FieldAttribute("Zones", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("zone_block", 128, typeof(ZoneBlock))]
        public TagBlock Zones;
        [Abide.Guerilla.Tags.FieldAttribute("Character Palette", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("character_palette_block", 64, typeof(CharacterPaletteBlock))]
        public TagBlock CharacterPalette;
        [Abide.Guerilla.Tags.FieldAttribute("AI Animation References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_animation_reference_block", 128, typeof(AiAnimationReferenceBlock))]
        public TagBlock AiAnimationReferences;
        [Abide.Guerilla.Tags.FieldAttribute("AI Script References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_script_reference_block", 128, typeof(AiScriptReferenceBlock))]
        public TagBlock AiScriptReferences;
        [Abide.Guerilla.Tags.FieldAttribute("AI Recording References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_recording_reference_block", 128, typeof(AiRecordingReferenceBlock))]
        public TagBlock AiRecordingReferences;
        [Abide.Guerilla.Tags.FieldAttribute("AI Conversations", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_conversation_block", 128, typeof(AiConversationBlock))]
        public TagBlock AiConversations;
        [Abide.Guerilla.Tags.FieldAttribute("Scripting Data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("cs_script_data_block", 1, typeof(CsScriptDataBlock))]
        public TagBlock ScriptingData;
        [Abide.Guerilla.Tags.FieldAttribute("Orders", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("orders_block", 300, typeof(OrdersBlock))]
        public TagBlock Orders;
        [Abide.Guerilla.Tags.FieldAttribute("Triggers", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("triggers_block", 256, typeof(TriggersBlock))]
        public TagBlock Triggers;
        [Abide.Guerilla.Tags.FieldAttribute("BSP Preferences", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_structure_bsp_reference_block", 16, typeof(ScenarioStructureBspReferenceBlock))]
        public TagBlock BspPreferences;
        [Abide.Guerilla.Tags.FieldAttribute("Weapon References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_weapon_palette_block", 256, typeof(ScenarioWeaponPaletteBlock))]
        public TagBlock WeaponReferences;
        [Abide.Guerilla.Tags.FieldAttribute("Vehicle References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_vehicle_palette_block", 256, typeof(ScenarioVehiclePaletteBlock))]
        public TagBlock VehicleReferences;
        [Abide.Guerilla.Tags.FieldAttribute("Vehicle Datum References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_vehicle_block", 256, typeof(ScenarioVehicleBlock))]
        public TagBlock VehicleDatumReferences;
        [Abide.Guerilla.Tags.FieldAttribute("Mission Dialogue Scenes", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_scene_block", 100, typeof(AiSceneBlock))]
        public TagBlock MissionDialogueScenes;
        [Abide.Guerilla.Tags.FieldAttribute("Flocks", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("flock_definition_block", 20, typeof(FlockDefinitionBlock))]
        public TagBlock Flocks;
        [Abide.Guerilla.Tags.FieldAttribute("Trigger Volume References", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("scenario_trigger_volume_block", 256, typeof(ScenarioTriggerVolumeBlock))]
        public TagBlock TriggerVolumeReferences;
        public int Size
        {
            get
            {
                return 228;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class StylePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("reference^", typeof(TagReference))]
            public TagReference Reference;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class SquadGroupsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("parent", typeof(Int16))]
            public Int16 Parent;
            [Abide.Guerilla.Tags.FieldAttribute("initial orders", typeof(Int16))]
            public Int16 InitialOrders;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(120, 4)]
        public sealed class SquadsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("team", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TeamOptions), false)]
            public Int16 Team;
            [Abide.Guerilla.Tags.FieldAttribute("parent", typeof(Int16))]
            public Int16 Parent;
            [Abide.Guerilla.Tags.FieldAttribute("squad delay time:seconds", typeof(Single))]
            public Single SquadDelayTime;
            [Abide.Guerilla.Tags.FieldAttribute("normal diff count#initial number of actors on normal difficulty", typeof(Int16))]
            public Int16 NormalDiffCount;
            [Abide.Guerilla.Tags.FieldAttribute("insane diff count#initial number of actors on insane difficulty (hard difficulty " +
                "is midway between normal and insane)", typeof(Int16))]
            public Int16 InsaneDiffCount;
            [Abide.Guerilla.Tags.FieldAttribute("major upgrade", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(MajorUpgradeOptions), false)]
            public Int16 MajorUpgrade;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle type", typeof(Int16))]
            public Int16 VehicleType;
            [Abide.Guerilla.Tags.FieldAttribute("character type", typeof(Int16))]
            public Int16 CharacterType;
            [Abide.Guerilla.Tags.FieldAttribute("initial zone", typeof(Int16))]
            public Int16 InitialZone;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("initial weapon", typeof(Int16))]
            public Int16 InitialWeapon;
            [Abide.Guerilla.Tags.FieldAttribute("initial secondary weapon", typeof(Int16))]
            public Int16 InitialSecondaryWeapon;
            [Abide.Guerilla.Tags.FieldAttribute("grenade type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(GrenadeTypeOptions), false)]
            public Int16 GrenadeType;
            [Abide.Guerilla.Tags.FieldAttribute("initial order", typeof(Int16))]
            public Int16 InitialOrder;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle variant", typeof(StringId))]
            public StringId VehicleVariant;
            [Abide.Guerilla.Tags.FieldAttribute("starting locations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("actor_starting_locations_block", 32, typeof(ActorStartingLocationsBlock))]
            public TagBlock StartingLocations;
            [Abide.Guerilla.Tags.FieldAttribute("Placement script", typeof(String32))]
            public String32 PlacementScript;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString6;
            public int Size
            {
                get
                {
                    return 120;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(100, 4)]
            public sealed class ActorStartingLocationsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                public Int16 ReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("facing (yaw, pitch):degrees", typeof(Vector2))]
                public Vector2 FacingYawPitch;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("character type", typeof(Int16))]
                public Int16 CharacterType;
                [Abide.Guerilla.Tags.FieldAttribute("initial weapon", typeof(Int16))]
                public Int16 InitialWeapon;
                [Abide.Guerilla.Tags.FieldAttribute("initial secondary weapon", typeof(Int16))]
                public Int16 InitialSecondaryWeapon;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle type", typeof(Int16))]
                public Int16 VehicleType;
                [Abide.Guerilla.Tags.FieldAttribute("seat type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SeatTypeOptions), false)]
                public Int16 SeatType;
                [Abide.Guerilla.Tags.FieldAttribute("grenade type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(GrenadeTypeOptions), false)]
                public Int16 GrenadeType;
                [Abide.Guerilla.Tags.FieldAttribute("swarm count#number of cretures in swarm if a swarm is spawned at this location", typeof(Int16))]
                public Int16 SwarmCount;
                [Abide.Guerilla.Tags.FieldAttribute("actor variant name", typeof(StringId))]
                public StringId ActorVariantName;
                [Abide.Guerilla.Tags.FieldAttribute("vehicle variant name", typeof(StringId))]
                public StringId VehicleVariantName;
                [Abide.Guerilla.Tags.FieldAttribute("initial movement distance#before doing anything else, the actor will travel the g" +
                    "iven distance in its forward direction", typeof(Single))]
                public Single InitialMovementDistance;
                [Abide.Guerilla.Tags.FieldAttribute("emitter vehicle", typeof(Int16))]
                public Int16 EmitterVehicle;
                [Abide.Guerilla.Tags.FieldAttribute("initial movement mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(InitialMovementModeOptions), false)]
                public Int16 InitialMovementMode;
                [Abide.Guerilla.Tags.FieldAttribute("Placement script", typeof(String32))]
                public String32 PlacementScript;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                public int Size
                {
                    get
                    {
                        return 100;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    InitiallyAsleep = 1,
                    InfectionFormExplode = 2,
                    Na = 4,
                    AlwaysPlace = 8,
                    InitiallyHidden = 16,
                }
                public enum SeatTypeOptions
                {
                    Default = 0,
                    Passenger = 1,
                    Gunner = 2,
                    Driver = 3,
                    SmallCargo = 4,
                    LargeCargo = 5,
                    NoDriver = 6,
                    NoVehicle = 7,
                }
                public enum GrenadeTypeOptions
                {
                    None = 0,
                    HumanGrenade = 1,
                    CovenantPlasma = 2,
                }
                public enum InitialMovementModeOptions
                {
                    Default = 0,
                    Climbing = 1,
                    Flying = 2,
                }
            }
            public enum FlagsOptions
            {
                Unused = 1,
                NeverSearch = 2,
                StartTimerImmediately = 4,
                NoTimerDelayForever = 8,
                MagicSightAfterTimer = 16,
                AutomaticMigration = 32,
                Deprecated = 64,
                RespawnEnabled = 128,
                Blind = 256,
                Deaf = 512,
                Braindead = 1024,
                _3dFiringPositions = 2048,
                InitiallyPlaced = 4096,
                UnitsNotEnterableByPlayer = 8192,
            }
            public enum TeamOptions
            {
                Default = 0,
                Player = 1,
                Human = 2,
                Covenant = 3,
                Flood = 4,
                Sentinel = 5,
                Heretic = 6,
                Prophet = 7,
                Unused8 = 8,
                Unused9 = 9,
                Unused10 = 10,
                Unused11 = 11,
                Unused12 = 12,
                Unused13 = 13,
                Unused14 = 14,
                Unused15 = 15,
            }
            public enum MajorUpgradeOptions
            {
                Normal = 0,
                Few = 1,
                Many = 2,
                None = 3,
                All = 4,
            }
            public enum GrenadeTypeOptions
            {
                None = 0,
                HumanGrenade = 1,
                CovenantPlasma = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
        public sealed class ZoneBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("manual bsp", typeof(Int16))]
            public Int16 ManualBsp;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("firing positions", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("firing_positions_block", 512, typeof(FiringPositionsBlock))]
            public TagBlock FiringPositions;
            [Abide.Guerilla.Tags.FieldAttribute("areas", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("areas_block", 64, typeof(AreasBlock))]
            public TagBlock Areas;
            public int Size
            {
                get
                {
                    return 64;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class FiringPositionsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("position (local)", typeof(Vector3))]
                public Vector3 PositionLocal;
                [Abide.Guerilla.Tags.FieldAttribute("reference frame", typeof(Int16))]
                public Int16 ReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("flags*", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                [Abide.Guerilla.Tags.FieldAttribute("cluster index*", typeof(Int16))]
                public Int16 ClusterIndex;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("normal", typeof(Vector2))]
                public Vector2 Normal;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Open = 1,
                    Partial = 2,
                    Closed = 4,
                    Mobile = 8,
                    WallLean = 16,
                    Perch = 32,
                    GroundPoint = 64,
                    DynamicCoverPoint = 128,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(140, 4)]
            public sealed class AreasBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^`", typeof(String32))]
                public String32 Name;
                [Abide.Guerilla.Tags.FieldAttribute("area flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AreaFlagsOptions), true)]
                public Int32 AreaFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(20)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(64)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("manual reference frame", typeof(Int16))]
                public Int16 ManualReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("flight_hints", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("flight_reference_block", 10, typeof(FlightReferenceBlock))]
                public TagBlock FlightHints;
                public int Size
                {
                    get
                    {
                        return 140;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class FlightReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("flight hint index", typeof(Int16))]
                    public Int16 FlightHintIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("poit index", typeof(Int16))]
                    public Int16 PoitIndex;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum AreaFlagsOptions
                {
                    VehicleArea = 1,
                    Perch = 2,
                    ManualReferenceFrame = 4,
                }
            }
            public enum FlagsOptions
            {
                ManualBspIndex = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class CharacterPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("reference^", typeof(TagReference))]
            public TagReference Reference;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
        public sealed class AiAnimationReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("animation name^", typeof(String32))]
            public String32 AnimationName;
            [Abide.Guerilla.Tags.FieldAttribute("animation graph#leave this blank to use the unit\'s normal animation graph", typeof(TagReference))]
            public TagReference AnimationGraph;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 60;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class AiScriptReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("script name^", typeof(String32))]
            public String32 ScriptName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
        public sealed class AiRecordingReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("recording name^", typeof(String32))]
            public String32 RecordingName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 40;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(116, 4)]
        public sealed class AiConversationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("trigger distance:world units#distance the player must enter before the conversati" +
                "on can trigger", typeof(Single))]
            public Single TriggerDistance;
            [Abide.Guerilla.Tags.FieldAttribute("run-to-player dist:world units#if the \'involves player\' flag is set, when trigger" +
                "ed the conversation\'s participant(s) will run to within this distance of the pla" +
                "yer", typeof(Single))]
            public Single RunToPlayerDist;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(36)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("participants", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_conversation_participant_block", 8, typeof(AiConversationParticipantBlock))]
            public TagBlock Participants;
            [Abide.Guerilla.Tags.FieldAttribute("lines", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_conversation_line_block", 32, typeof(AiConversationLineBlock))]
            public TagBlock Lines;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString2;
            public int Size
            {
                get
                {
                    return 116;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
            public sealed class AiConversationParticipantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(8)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("use this object#if a unit with this name exists, we try to pick them to start the" +
                    " conversation", typeof(Int16))]
                public Int16 UseThisObject;
                [Abide.Guerilla.Tags.FieldAttribute("set new name#once we pick a unit, we name it this", typeof(Int16))]
                public Int16 SetNewName;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("encounter name", typeof(String32))]
                public String32 EncounterName;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString4;
                public int Size
                {
                    get
                    {
                        return 84;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(124, 4)]
            public sealed class AiConversationLineBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("participant", typeof(Int16))]
                public Int16 Participant;
                [Abide.Guerilla.Tags.FieldAttribute("addressee", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AddresseeOptions), false)]
                public Int16 Addressee;
                [Abide.Guerilla.Tags.FieldAttribute("addressee participant#this field is only used if the addressee type is \'participa" +
                    "nt\'", typeof(Int16))]
                public Int16 AddresseeParticipant;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("line delay time", typeof(Single))]
                public Single LineDelayTime;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("variant 1", typeof(TagReference))]
                public TagReference Variant1;
                [Abide.Guerilla.Tags.FieldAttribute("variant 2", typeof(TagReference))]
                public TagReference Variant2;
                [Abide.Guerilla.Tags.FieldAttribute("variant 3", typeof(TagReference))]
                public TagReference Variant3;
                [Abide.Guerilla.Tags.FieldAttribute("variant 4", typeof(TagReference))]
                public TagReference Variant4;
                [Abide.Guerilla.Tags.FieldAttribute("variant 5", typeof(TagReference))]
                public TagReference Variant5;
                [Abide.Guerilla.Tags.FieldAttribute("variant 6", typeof(TagReference))]
                public TagReference Variant6;
                public int Size
                {
                    get
                    {
                        return 124;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    AddresseeLookAtSpeaker = 1,
                    EveryoneLookAtSpeaker = 2,
                    EveryoneLookAtAddressee = 4,
                    WaitAfterUntilToldToAdvance = 8,
                    WaitUntilSpeakerNearby = 16,
                    WaitUntilEveryoneNearby = 32,
                }
                public enum AddresseeOptions
                {
                    None = 0,
                    Player = 1,
                    Participant = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions
            {
                StopIfDeath = 1,
                StopIfDamaged = 2,
                StopIfVisibleEnemy = 4,
                StopIfAlertedToEnemy = 8,
                PlayerMustBeVisible = 16,
                StopOtherActions = 32,
                KeepTryingToPlay = 64,
                PlayerMustBeLooking = 128,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(132, 4)]
        public sealed class CsScriptDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("point sets", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("cs_point_set_block", 200, typeof(CsPointSetBlock))]
            public TagBlock PointSets;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(120)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 132;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
            public sealed class CsPointSetBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
                public String32 Name;
                [Abide.Guerilla.Tags.FieldAttribute("points", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("cs_point_block", 20, typeof(CsPointBlock))]
                public TagBlock Points;
                [Abide.Guerilla.Tags.FieldAttribute("bsp index", typeof(Int16))]
                public Int16 BspIndex;
                [Abide.Guerilla.Tags.FieldAttribute("manual reference frame", typeof(Int16))]
                public Int16 ManualReferenceFrame;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 52;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
                public sealed class CsPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
                    public String32 Name;
                    [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                    public Vector3 Position;
                    [Abide.Guerilla.Tags.FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("surface index", typeof(Int32))]
                    public Int32 SurfaceIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("facing direction", typeof(Vector2))]
                    public Vector2 FacingDirection;
                    public int Size
                    {
                        get
                        {
                            return 60;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    ManualReferenceFrame = 1,
                    TurretDeployment = 2,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(144, 4)]
        public sealed class OrdersBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Style", typeof(Int16))]
            public Int16 Style;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("Force combat status", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ForceCombatStatusOptions), false)]
            public Int16 ForceCombatStatus;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Entry Script", typeof(String32))]
            public String32 EntryScript;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("Follow squad", typeof(Int16))]
            public Int16 FollowSquad;
            [Abide.Guerilla.Tags.FieldAttribute("follow radius", typeof(Single))]
            public Single FollowRadius;
            [Abide.Guerilla.Tags.FieldAttribute("Primary area set", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("zone_set_block", 32, typeof(ZoneSetBlock))]
            public TagBlock PrimaryAreaSet;
            [Abide.Guerilla.Tags.FieldAttribute("Secondary area set", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("secondary_zone_set_block", 32, typeof(SecondaryZoneSetBlock))]
            public TagBlock SecondaryAreaSet;
            [Abide.Guerilla.Tags.FieldAttribute("Secondary set trigger", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("secondary_set_trigger_block", 1, typeof(SecondarySetTriggerBlock))]
            public TagBlock SecondarySetTrigger;
            [Abide.Guerilla.Tags.FieldAttribute("Special movement", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("special_movement_block", 1, typeof(SpecialMovementBlock))]
            public TagBlock SpecialMovement;
            [Abide.Guerilla.Tags.FieldAttribute("Order endings", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("order_ending_block", 12, typeof(OrderEndingBlock))]
            public TagBlock OrderEndings;
            public int Size
            {
                get
                {
                    return 144;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ZoneSetBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("area type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AreaTypeOptions), false)]
                public Int16 AreaType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("zone^", typeof(Int16))]
                public Int16 Zone;
                [Abide.Guerilla.Tags.FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum AreaTypeOptions
                {
                    Deault = 0,
                    Search = 1,
                    Goal = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class SecondaryZoneSetBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("area type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AreaTypeOptions), false)]
                public Int16 AreaType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("zone^", typeof(Int16))]
                public Int16 Zone;
                [Abide.Guerilla.Tags.FieldAttribute("area^", typeof(Int16))]
                public Int16 Area;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum AreaTypeOptions
                {
                    Deault = 0,
                    Search = 1,
                    Goal = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class SecondarySetTriggerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public Int16 CombinationRule;
                [Abide.Guerilla.Tags.FieldAttribute("dialogue type#when this ending is triggered, launch a dialogue event of the given" +
                    " type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DialogueTypeOptions), false)]
                public Int16 DialogueType;
                [Abide.Guerilla.Tags.FieldAttribute("triggers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Trigger flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public Int32 TriggerFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions
                {
                    Or = 0,
                    And = 1,
                }
                public enum DialogueTypeOptions
                {
                    None = 0,
                    Advance = 1,
                    Charge = 2,
                    FallBack = 3,
                    Retreat = 4,
                    Moveone = 5,
                    Arrival = 6,
                    EnterVehicle = 7,
                    ExitVehicle = 8,
                    FollowPlayer = 9,
                    LeavePlayer = 10,
                    Support = 11,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class SpecialMovementBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Special movement 1", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SpecialMovement1Options), true)]
                public Int32 SpecialMovement1;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum SpecialMovement1Options
                {
                    Jump = 1,
                    Climb = 2,
                    Vault = 4,
                    Mount = 8,
                    Hoist = 16,
                    WallJump = 32,
                    Na = 64,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class OrderEndingBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("next order^", typeof(Int16))]
                public Int16 NextOrder;
                [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public Int16 CombinationRule;
                [Abide.Guerilla.Tags.FieldAttribute("delay time", typeof(Single))]
                public Single DelayTime;
                [Abide.Guerilla.Tags.FieldAttribute("dialogue type#when this ending is triggered, launch a dialogue event of the given" +
                    " type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DialogueTypeOptions), false)]
                public Int16 DialogueType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("triggers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Trigger flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public Int32 TriggerFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions
                {
                    Or = 0,
                    And = 1,
                }
                public enum DialogueTypeOptions
                {
                    None = 0,
                    Advance = 1,
                    Charge = 2,
                    FallBack = 3,
                    Retreat = 4,
                    Moveone = 5,
                    Arrival = 6,
                    EnterVehicle = 7,
                    ExitVehicle = 8,
                    FollowPlayer = 9,
                    LeavePlayer = 10,
                    Support = 11,
                }
            }
            public enum FlagsOptions
            {
                Locked = 1,
                AlwaysActive = 2,
                DebugOn = 4,
                StrictAreaDef = 8,
                FollowClosestPlayer = 16,
                FollowSquad = 32,
                ActiveCamo = 64,
                SuppressCombatUntilEngaged = 128,
                InhibitVehicleUse = 256,
            }
            public enum ForceCombatStatusOptions
            {
                None = 0,
                Asleep = 1,
                Idle = 2,
                Alert = 3,
                Combat = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
        public sealed class TriggersBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("trigger flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
            public Int32 TriggerFlags;
            [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
            public Int16 CombinationRule;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("conditions", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("order_completion_condition", 5, typeof(OrderCompletionCondition))]
            public TagBlock Conditions;
            public int Size
            {
                get
                {
                    return 52;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(56, 4)]
            public sealed class OrderCompletionCondition : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("rule type^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RuleTypeOptions), false)]
                public Int16 RuleType;
                [Abide.Guerilla.Tags.FieldAttribute("squad", typeof(Int16))]
                public Int16 Squad;
                [Abide.Guerilla.Tags.FieldAttribute("squad group", typeof(Int16))]
                public Int16 SquadGroup;
                [Abide.Guerilla.Tags.FieldAttribute("a", typeof(Int16))]
                public Int16 A;
                [Abide.Guerilla.Tags.FieldAttribute("x", typeof(Single))]
                public Single X;
                [Abide.Guerilla.Tags.FieldAttribute("trigger volume", typeof(Int16))]
                public Int16 TriggerVolume;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("Exit condition script", typeof(String32))]
                public String32 ExitConditionScript;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int16))]
                public Int16 EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 56;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum RuleTypeOptions
                {
                    AOrGreaterAlive = 0,
                    AOrFewerAlive = 1,
                    XOrGreaterStrength = 2,
                    XOrLessStrength = 3,
                    IfEnemySighted = 4,
                    AfterATicks = 5,
                    IfAlertedBySquadA = 6,
                    ScriptRefTrue = 7,
                    ScriptRefFalse = 8,
                    IfPlayerInTriggerVolume = 9,
                    IfAllPlayersInTriggerVolume = 10,
                    CombatStatusAOrMore = 11,
                    CombatStatusAOrLess = 12,
                    Arrived = 13,
                    InVehicle = 14,
                    SightedPlayer = 15,
                    AOrGreaterFighting = 16,
                    AOrFewerFighting = 17,
                    PlayerWithinXWorldUnits = 18,
                    PlayerShotMoreThanXSecondsAgo = 19,
                    GameSafeToSave = 20,
                }
                public enum FlagsOptions
                {
                    Not = 1,
                }
            }
            public enum TriggerFlagsOptions
            {
                LatchOnWhenTriggered = 1,
            }
            public enum CombinationRuleOptions
            {
                Or = 0,
                And = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioStructureBspReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Structure BSP^", typeof(TagReference))]
            public TagReference StructureBsp;
            [Abide.Guerilla.Tags.FieldAttribute("Structure Lightmap^", typeof(TagReference))]
            public TagReference StructureLightmap;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED radiance est. search distance", typeof(Single))]
            public Single UnusedRadianceEstSearchDistance;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED luminels per world unit", typeof(Single))]
            public Single UnusedLuminelsPerWorldUnit;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED output white reference", typeof(Single))]
            public Single UnusedOutputWhiteReference;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("Default Sky", typeof(Int16))]
            public Int16 DefaultSky;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString5;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                DefaultSkyEnabled = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioWeaponPaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
        public sealed class ScenarioVehiclePaletteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 48;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
        public sealed class ScenarioVehicleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [Abide.Guerilla.Tags.FieldAttribute("Permutation Data", typeof(ScenarioObjectPermutationStructBlock))]
            public ScenarioObjectPermutationStructBlock PermutationData;
            [Abide.Guerilla.Tags.FieldAttribute("Unit Data", typeof(ScenarioUnitStructBlock))]
            public ScenarioUnitStructBlock UnitData;
            public int Size
            {
                get
                {
                    return 84;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Placement Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public Int32 PlacementFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [Abide.Guerilla.Tags.FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute(")Transform Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public Int16 TransformFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [Abide.Guerilla.Tags.FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [Abide.Guerilla.Tags.FieldAttribute("BSP Policy", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BspPolicyOptions), false)]
                public Byte BspPolicy;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(1)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [Abide.Guerilla.Tags.FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                    public Byte Type;
                    [Abide.Guerilla.Tags.FieldAttribute("Source*", typeof(Byte))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Byte Source;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
            public sealed class ScenarioObjectPermutationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Variant Name", typeof(StringId))]
                public StringId VariantName;
                [Abide.Guerilla.Tags.FieldAttribute("Active Change Colors", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ActiveChangeColorsOptions), true)]
                public Int32 ActiveChangeColors;
                [Abide.Guerilla.Tags.FieldAttribute("Primary Color", typeof(ColorRgb))]
                public ColorRgb PrimaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Secondary Color", typeof(ColorRgb))]
                public ColorRgb SecondaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Tertiary Color", typeof(ColorRgb))]
                public ColorRgb TertiaryColor;
                [Abide.Guerilla.Tags.FieldAttribute("Quaternary Color", typeof(ColorRgb))]
                public ColorRgb QuaternaryColor;
                public int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ActiveChangeColorsOptions
                {
                    Primary = 1,
                    Secondary = 2,
                    Tertiary = 4,
                    Quaternary = 8,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
            public sealed class ScenarioUnitStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Body Vitality:[0,1]", typeof(Single))]
                public Single BodyVitality;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                public int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Dead = 1,
                    Closed = 2,
                    NotEnterableByPlayer = 4,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
        public sealed class AiSceneBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("trigger conditions", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_scene_trigger_block", 1, typeof(AiSceneTriggerBlock))]
            public TagBlock TriggerConditions;
            [Abide.Guerilla.Tags.FieldAttribute("roles", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_scene_role_block", 10, typeof(AiSceneRoleBlock))]
            public TagBlock Roles;
            public int Size
            {
                get
                {
                    return 32;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class AiSceneTriggerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("combination rule", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CombinationRuleOptions), false)]
                public Int16 CombinationRule;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("triggers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("trigger_references", 10, typeof(TriggerReferences))]
                public TagBlock Triggers;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class TriggerReferences : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Trigger flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(TriggerFlagsOptions), true)]
                    public Int32 TriggerFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("trigger^", typeof(Int16))]
                    public Int16 Trigger;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum TriggerFlagsOptions
                    {
                        Not = 1,
                    }
                }
                public enum CombinationRuleOptions
                {
                    Or = 0,
                    And = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class AiSceneRoleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("group", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(GroupOptions), false)]
                public Int16 Group;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("role variants", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("ai_scene_role_variants_block", 10, typeof(AiSceneRoleVariantsBlock))]
                public TagBlock RoleVariants;
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class AiSceneRoleVariantsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("variant designation^", typeof(StringId))]
                    public StringId VariantDesignation;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum GroupOptions
                {
                    Group1 = 0,
                    Group2 = 1,
                    Group3 = 2,
                }
            }
            public enum FlagsOptions
            {
                SceneCanPlayMultipleTimes = 1,
                EnableCombatDialogue = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(148, 4)]
        public sealed class FlockDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("bsp", typeof(Int16))]
            public Int16 Bsp;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("bounding volume", typeof(Int16))]
            public Int16 BoundingVolume;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("ecology margin:wus#distance from ecology boundary that creature begins to be repu" +
                "lsed", typeof(Single))]
            public Single EcologyMargin;
            [Abide.Guerilla.Tags.FieldAttribute("sources", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("flock_source_block", 10, typeof(FlockSourceBlock))]
            public TagBlock Sources;
            [Abide.Guerilla.Tags.FieldAttribute("sinks", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("flock_sink_block", 10, typeof(FlockSinkBlock))]
            public TagBlock Sinks;
            [Abide.Guerilla.Tags.FieldAttribute("production frequency:boids/sec#How frequently boids are produced at one of the so" +
                "urces (limited by the max boid count)", typeof(Single))]
            public Single ProductionFrequency;
            [Abide.Guerilla.Tags.FieldAttribute("creature^", typeof(TagReference))]
            public TagReference Creature;
            [Abide.Guerilla.Tags.FieldAttribute("neighborhood radius:world units#distance within which one boid is affected by ano" +
                "ther", typeof(Single))]
            public Single NeighborhoodRadius;
            [Abide.Guerilla.Tags.FieldAttribute("avoidance radius:world units#distance that a boid tries to maintain from another", typeof(Single))]
            public Single AvoidanceRadius;
            [Abide.Guerilla.Tags.FieldAttribute("forward scale:[0..1]#weight given to boid\'s desire to fly straight ahead", typeof(Single))]
            public Single ForwardScale;
            [Abide.Guerilla.Tags.FieldAttribute("alignment scale:[0..1]#weight given to boid\'s desire to align itself with neighbo" +
                "ring boids", typeof(Single))]
            public Single AlignmentScale;
            [Abide.Guerilla.Tags.FieldAttribute("avoidance scale:[0..1]#weight given to boid\'s desire to avoid collisions with oth" +
                "er boids, when within the avoidance radius", typeof(Single))]
            public Single AvoidanceScale;
            [Abide.Guerilla.Tags.FieldAttribute("leveling force scale:[0..1]#weight given to boids desire to fly level", typeof(Single))]
            public Single LevelingForceScale;
            [Abide.Guerilla.Tags.FieldAttribute("sink scale:[0..1]#weight given to boid\'s desire to fly towards its sinks", typeof(Single))]
            public Single SinkScale;
            [Abide.Guerilla.Tags.FieldAttribute("perception angle:degrees#angle-from-forward within which one boid can perceive an" +
                "d react to another", typeof(Single))]
            public Single PerceptionAngle;
            [Abide.Guerilla.Tags.FieldAttribute("average throttle:[0..1]#throttle at which boids will naturally fly", typeof(Single))]
            public Single AverageThrottle;
            [Abide.Guerilla.Tags.FieldAttribute("maximum throttle:[0..1]#maximum throttle applicable", typeof(Single))]
            public Single MaximumThrottle;
            [Abide.Guerilla.Tags.FieldAttribute("position scale:[0..1]#weight given to boid\'s desire to be near flock center", typeof(Single))]
            public Single PositionScale;
            [Abide.Guerilla.Tags.FieldAttribute("position min radius:wus#distance to flock center beyond which an attracting force" +
                " is applied", typeof(Single))]
            public Single PositionMinRadius;
            [Abide.Guerilla.Tags.FieldAttribute("position max radius:wus#distance to flock center at which the maximum attracting " +
                "force is applied", typeof(Single))]
            public Single PositionMaxRadius;
            [Abide.Guerilla.Tags.FieldAttribute("movement weight threshold#The threshold of accumulated weight over which movement" +
                " occurs", typeof(Single))]
            public Single MovementWeightThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("danger radius:wus#distance within which boids will avoid a dangerous object (e.g." +
                " the player)", typeof(Single))]
            public Single DangerRadius;
            [Abide.Guerilla.Tags.FieldAttribute("danger scale#weight given to boid\'s desire to avoid danger", typeof(Single))]
            public Single DangerScale;
            [Abide.Guerilla.Tags.FieldAttribute("random offset scale:[0..1]#weight given to boid\'s random heading offset", typeof(Single))]
            public Single RandomOffsetScale;
            [Abide.Guerilla.Tags.FieldAttribute("flock name", typeof(StringId))]
            public StringId FlockName;
            public int Size
            {
                get
                {
                    return 148;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
            public sealed class FlockSourceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("starting yaw, pitch:degrees", typeof(Vector2))]
                public Vector2 StartingYawPitch;
                [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                [Abide.Guerilla.Tags.FieldAttribute("weight#probability of producing at this source", typeof(Single))]
                public Single Weight;
                public int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class FlockSinkBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
                public Vector3 Position;
                [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
                public Single Radius;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions
            {
                HardBoundariesOnVolume = 1,
                FlockInitiallyStopped = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
        public sealed class ScenarioTriggerVolumeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Object Name", typeof(Int16))]
            public Int16 ObjectName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("Node Name", typeof(StringId))]
            public StringId NodeName;
            [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(EmptyStringElement[]))]
            [Abide.Guerilla.Tags.ArrayAttribute(6, typeof(EmptyStringElement))]
            public EmptyStringElement[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("Extents", typeof(Vector3))]
            public Vector3 Extents;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("~Kill Trigger Volume*", typeof(Int16))]
            public Int16 KillTriggerVolume;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 68;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public sealed class EmptyStringElement : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("EMPTY STRING", typeof(Single))]
                public Single EmptyString;
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
    }
}
#pragma warning restore CS1591
