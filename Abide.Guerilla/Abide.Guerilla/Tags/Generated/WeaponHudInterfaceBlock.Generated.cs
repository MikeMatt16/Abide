#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(380, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("weapon_hud_interface", 2003855465u, 4294967293u, typeof(WeaponHudInterfaceBlock))]
    public sealed class WeaponHudInterfaceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("child hud", typeof(TagReference))]
        public TagReference ChildHud;
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int16 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("inventory ammo cutoff", typeof(Int16))]
        public Int16 InventoryAmmoCutoff;
        [Abide.Guerilla.Tags.FieldAttribute("loaded ammo cutoff", typeof(Int16))]
        public Int16 LoadedAmmoCutoff;
        [Abide.Guerilla.Tags.FieldAttribute("heat cutoff", typeof(Int16))]
        public Int16 HeatCutoff;
        [Abide.Guerilla.Tags.FieldAttribute("age cutoff", typeof(Int16))]
        public Int16 AgeCutoff;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(32)]
        public Byte[] EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("anchor", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(AnchorOptions), false)]
        public Int16 Anchor;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(32)]
        public Byte[] EmptyString3;
        [Abide.Guerilla.Tags.FieldAttribute("static elements", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("weapon_hud_static_block", 16, typeof(WeaponHudStaticBlock))]
        public TagBlock StaticElements;
        [Abide.Guerilla.Tags.FieldAttribute("meter elements", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("weapon_hud_meter_block", 16, typeof(WeaponHudMeterBlock))]
        public TagBlock MeterElements;
        [Abide.Guerilla.Tags.FieldAttribute("number elements", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("weapon_hud_number_block", 16, typeof(WeaponHudNumberBlock))]
        public TagBlock NumberElements;
        [Abide.Guerilla.Tags.FieldAttribute("crosshairs", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("weapon_hud_crosshair_block", 19, typeof(WeaponHudCrosshairBlock))]
        public TagBlock Crosshairs1;
        [Abide.Guerilla.Tags.FieldAttribute("overlay elements", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("weapon_hud_overlays_block", 16, typeof(WeaponHudOverlaysBlock))]
        public TagBlock OverlayElements;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString4;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString5;
        [Abide.Guerilla.Tags.FieldAttribute("screen effect", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("global_hud_screen_effect_definition", 1, typeof(GlobalHudScreenEffectDefinition))]
        public TagBlock ScreenEffect;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(132)]
        public Byte[] EmptyString6;
        [Abide.Guerilla.Tags.FieldAttribute("sequence index#sequence index into the global hud icon bitmap", typeof(Int16))]
        public Int16 SequenceIndex;
        [Abide.Guerilla.Tags.FieldAttribute("width offset#extra spacing beyond bitmap width for text alignment", typeof(Int16))]
        public Int16 WidthOffset;
        [Abide.Guerilla.Tags.FieldAttribute("offset from reference corner", typeof(Vector2))]
        public Vector2 OffsetFromReferenceCorner;
        [Abide.Guerilla.Tags.FieldAttribute("override icon color", typeof(ColorArgb))]
        public ColorArgb OverrideIconColor;
        [Abide.Guerilla.Tags.FieldAttribute("frame rate [0,30]", typeof(Byte))]
        public Byte FrameRate030;
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions1), true)]
        public Byte Flags1;
        [Abide.Guerilla.Tags.FieldAttribute("text index", typeof(Int16))]
        public Int16 TextIndex;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(48)]
        public Byte[] EmptyString7;
        public int Size
        {
            get
            {
                return 380;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(180, 4)]
        public sealed class WeaponHudStaticBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("state attached to", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public Int16 StateAttachedTo;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("can use on map type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public Int16 CanUseOnMapType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [Abide.Guerilla.Tags.FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [Abide.Guerilla.Tags.FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [Abide.Guerilla.Tags.FieldAttribute("scaling flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public Int16 ScalingFlags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("interface bitmap", typeof(TagReference))]
            public TagReference InterfaceBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
            public ColorArgb DefaultColor;
            [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
            public ColorArgb FlashingColor;
            [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
            public Single FlashPeriod;
            [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
            public Single FlashDelay;
            [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
            public Int16 NumberOfFlashes;
            [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions), true)]
            public Int16 FlashFlags;
            [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
            public Single FlashLength;
            [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("sequence index", typeof(Int16))]
            public Int16 SequenceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("multitex overlay", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
            public TagBlock MultitexOverlay;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString7;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString8;
            public int Size
            {
                get
                {
                    return 180;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(480, 4)]
            public sealed class GlobalHudMultitextureOverlayDefinition : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("type", typeof(Int16))]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("framebuffer blend func", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FramebufferBlendFuncOptions), false)]
                public Int16 FramebufferBlendFunc;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(32)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("primary anchor", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PrimaryAnchorOptions), false)]
                public Int16 PrimaryAnchor;
                [Abide.Guerilla.Tags.FieldAttribute("secondary anchor", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SecondaryAnchorOptions), false)]
                public Int16 SecondaryAnchor;
                [Abide.Guerilla.Tags.FieldAttribute("tertiary anchor", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TertiaryAnchorOptions), false)]
                public Int16 TertiaryAnchor;
                [Abide.Guerilla.Tags.FieldAttribute("0 to 1 blend func", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(_0To1BlendFuncOptions), false)]
                public Int16 _0To1BlendFunc;
                [Abide.Guerilla.Tags.FieldAttribute("1 to 2 blend func", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(_1To2BlendFuncOptions), false)]
                public Int16 _1To2BlendFunc;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("primary scale", typeof(Vector2))]
                public Vector2 PrimaryScale;
                [Abide.Guerilla.Tags.FieldAttribute("secondary scale", typeof(Vector2))]
                public Vector2 SecondaryScale;
                [Abide.Guerilla.Tags.FieldAttribute("tertiary scale", typeof(Vector2))]
                public Vector2 TertiaryScale;
                [Abide.Guerilla.Tags.FieldAttribute("primary offset", typeof(Vector2))]
                public Vector2 PrimaryOffset;
                [Abide.Guerilla.Tags.FieldAttribute("secondary offset", typeof(Vector2))]
                public Vector2 SecondaryOffset;
                [Abide.Guerilla.Tags.FieldAttribute("tertiary offset", typeof(Vector2))]
                public Vector2 TertiaryOffset;
                [Abide.Guerilla.Tags.FieldAttribute("primary", typeof(TagReference))]
                public TagReference Primary;
                [Abide.Guerilla.Tags.FieldAttribute("secondary", typeof(TagReference))]
                public TagReference Secondary;
                [Abide.Guerilla.Tags.FieldAttribute("tertiary", typeof(TagReference))]
                public TagReference Tertiary;
                [Abide.Guerilla.Tags.FieldAttribute("primary wrap mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(PrimaryWrapModeOptions), false)]
                public Int16 PrimaryWrapMode;
                [Abide.Guerilla.Tags.FieldAttribute("secondary wrap mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SecondaryWrapModeOptions), false)]
                public Int16 SecondaryWrapMode;
                [Abide.Guerilla.Tags.FieldAttribute("tertiary wrap mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TertiaryWrapModeOptions), false)]
                public Int16 TertiaryWrapMode;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(184)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("effectors", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("global_hud_multitexture_overlay_effector_definition", 30, typeof(GlobalHudMultitextureOverlayEffectorDefinition))]
                public TagBlock Effectors;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(128)]
                public Byte[] EmptyString6;
                public int Size
                {
                    get
                    {
                        return 480;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(220, 4)]
                public sealed class GlobalHudMultitextureOverlayEffectorDefinition : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(64)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("destination type", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(DestinationTypeOptions), false)]
                    public Int16 DestinationType;
                    [Abide.Guerilla.Tags.FieldAttribute("destination", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(DestinationOptions), false)]
                    public Int16 Destination;
                    [Abide.Guerilla.Tags.FieldAttribute("source", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SourceOptions), false)]
                    public Int16 Source;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(64)]
                    public Byte[] EmptyString2;
                    [Abide.Guerilla.Tags.FieldAttribute("tint color lower bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorLowerBound;
                    [Abide.Guerilla.Tags.FieldAttribute("tint color upper bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorUpperBound;
                    [Abide.Guerilla.Tags.FieldAttribute("periodic function", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(PeriodicFunctionOptions), false)]
                    public Int16 PeriodicFunction;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString3;
                    [Abide.Guerilla.Tags.FieldAttribute("function period:seconds", typeof(Single))]
                    public Single FunctionPeriod;
                    [Abide.Guerilla.Tags.FieldAttribute("function phase:seconds", typeof(Single))]
                    public Single FunctionPhase;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(32)]
                    public Byte[] EmptyString4;
                    public int Size
                    {
                        get
                        {
                            return 220;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    public enum DestinationTypeOptions
                    {
                        Tint01 = 0,
                        HorizontalOffset = 1,
                        VerticalOffset = 2,
                        Fade01 = 3,
                    }
                    public enum DestinationOptions
                    {
                        GeometryOffset = 0,
                        PrimaryMap = 1,
                        SecondaryMap = 2,
                        TertiaryMap = 3,
                    }
                    public enum SourceOptions
                    {
                        PlayerPitch = 0,
                        PlayerPitchTangent = 1,
                        PlayerYaw = 2,
                        WeaponRoundsLoaded = 3,
                        WeaponRoundsInventory = 4,
                        WeaponHeat = 5,
                        ExplicitUsesLowBound = 6,
                        WeaponZoomLevel = 7,
                    }
                    public enum PeriodicFunctionOptions
                    {
                        One = 0,
                        Zero = 1,
                        Cosine = 2,
                        CosineVariablePeriod = 3,
                        DiagonalWave = 4,
                        DiagonalWaveVariablePeriod = 5,
                        Slide = 6,
                        SlideVariablePeriod = 7,
                        Noise = 8,
                        Jitter = 9,
                        Wander = 10,
                        Spark = 11,
                    }
                }
                public enum FramebufferBlendFuncOptions
                {
                    AlphaBlend = 0,
                    Multiply = 1,
                    DoubleMultiply = 2,
                    Add = 3,
                    Subtract = 4,
                    ComponentMin = 5,
                    ComponentMax = 6,
                    AlphaMultiplyAdd = 7,
                    ConstantColorBlend = 8,
                    InverseConstantColorBlend = 9,
                    None = 10,
                }
                public enum PrimaryAnchorOptions
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum SecondaryAnchorOptions
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum TertiaryAnchorOptions
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum _0To1BlendFuncOptions
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum _1To2BlendFuncOptions
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum PrimaryWrapModeOptions
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum SecondaryWrapModeOptions
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum TertiaryWrapModeOptions
                {
                    Clamp = 0,
                    Wrap = 1,
                }
            }
            public enum StateAttachedToOptions
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
            public enum ScalingFlagsOptions
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlashFlagsOptions
            {
                ReverseDefaultflashingColors = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(180, 4)]
        public sealed class WeaponHudMeterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("state attached to", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public Int16 StateAttachedTo;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("can use on map type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public Int16 CanUseOnMapType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [Abide.Guerilla.Tags.FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [Abide.Guerilla.Tags.FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [Abide.Guerilla.Tags.FieldAttribute("scaling flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public Int16 ScalingFlags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("meter bitmap", typeof(TagReference))]
            public TagReference MeterBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("color at meter minimum", typeof(ColorRgb))]
            public ColorRgb ColorAtMeterMinimum;
            [Abide.Guerilla.Tags.FieldAttribute("color at meter maximum", typeof(ColorRgb))]
            public ColorRgb ColorAtMeterMaximum;
            [Abide.Guerilla.Tags.FieldAttribute("flash color", typeof(ColorRgb))]
            public ColorRgb FlashColor;
            [Abide.Guerilla.Tags.FieldAttribute("empty color", typeof(ColorArgb))]
            public ColorArgb EmptyColor;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Byte Flags;
            [Abide.Guerilla.Tags.FieldAttribute("minumum meter value", typeof(Byte))]
            public Byte MinumumMeterValue;
            [Abide.Guerilla.Tags.FieldAttribute("sequence index", typeof(Int16))]
            public Int16 SequenceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("alpha multiplier", typeof(Byte))]
            public Byte AlphaMultiplier;
            [Abide.Guerilla.Tags.FieldAttribute("alpha bias", typeof(Byte))]
            public Byte AlphaBias;
            [Abide.Guerilla.Tags.FieldAttribute("value scale#used for non-integral values, i.e. health and shields", typeof(Int16))]
            public Int16 ValueScale;
            [Abide.Guerilla.Tags.FieldAttribute("opacity", typeof(Single))]
            public Single Opacity;
            [Abide.Guerilla.Tags.FieldAttribute("translucency", typeof(Single))]
            public Single Translucency;
            [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString7;
            public int Size
            {
                get
                {
                    return 180;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum StateAttachedToOptions
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
            public enum ScalingFlagsOptions
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlagsOptions
            {
                UseMinmaxForStateChanges = 1,
                InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
                InterpolateColorAlongHsvSpace = 4,
                MoreColorsForHsvInterpolation = 8,
                InvertInterpolation = 16,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(160, 4)]
        public sealed class WeaponHudNumberBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("state attached to", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public Int16 StateAttachedTo;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("can use on map type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public Int16 CanUseOnMapType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [Abide.Guerilla.Tags.FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [Abide.Guerilla.Tags.FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [Abide.Guerilla.Tags.FieldAttribute("scaling flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public Int16 ScalingFlags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
            public ColorArgb DefaultColor;
            [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
            public ColorArgb FlashingColor;
            [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
            public Single FlashPeriod;
            [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
            public Single FlashDelay;
            [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
            public Int16 NumberOfFlashes;
            [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions), true)]
            public Int16 FlashFlags;
            [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
            public Single FlashLength;
            [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("maximum number of digits", typeof(Byte))]
            public Byte MaximumNumberOfDigits;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Byte Flags;
            [Abide.Guerilla.Tags.FieldAttribute("number of fractional digits", typeof(Byte))]
            public Byte NumberOfFractionalDigits;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(1)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString7;
            [Abide.Guerilla.Tags.FieldAttribute("weapon specific flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(WeaponSpecificFlagsOptions), true)]
            public Int16 WeaponSpecificFlags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString8;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(36)]
            public Byte[] EmptyString9;
            public int Size
            {
                get
                {
                    return 160;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum StateAttachedToOptions
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
            public enum ScalingFlagsOptions
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlashFlagsOptions
            {
                ReverseDefaultflashingColors = 1,
            }
            public enum FlagsOptions
            {
                ShowLeadingZeros = 1,
                OnlyShowWhenZoomed = 2,
                DrawATrailingM = 4,
            }
            public enum WeaponSpecificFlagsOptions
            {
                DivideNumberByClipSize = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(104, 4)]
        public sealed class WeaponHudCrosshairBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("crosshair type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CrosshairTypeOptions), false)]
            public Int16 CrosshairType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("can use on map type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public Int16 CanUseOnMapType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Crosshair bitmap", typeof(TagReference))]
            public TagReference CrosshairBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("Crosshair overlays", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("weapon_hud_crosshair_item_block", 16, typeof(WeaponHudCrosshairItemBlock))]
            public TagBlock CrosshairOverlays;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 104;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(108, 4)]
            public sealed class WeaponHudCrosshairItemBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("anchor offset", typeof(Vector2))]
                public Vector2 AnchorOffset;
                [Abide.Guerilla.Tags.FieldAttribute("width scale", typeof(Single))]
                public Single WidthScale;
                [Abide.Guerilla.Tags.FieldAttribute("height scale", typeof(Single))]
                public Single HeightScale;
                [Abide.Guerilla.Tags.FieldAttribute("scaling flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScalingFlagsOptions), true)]
                public Int16 ScalingFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(20)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
                public ColorArgb DefaultColor;
                [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
                public ColorArgb FlashingColor;
                [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
                public Single FlashPeriod;
                [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
                public Single FlashDelay;
                [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
                public Int16 NumberOfFlashes;
                [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions), true)]
                public Int16 FlashFlags;
                [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
                public Single FlashLength;
                [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
                public ColorArgb DisabledColor;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("frame rate", typeof(Int16))]
                public Int16 FrameRate;
                [Abide.Guerilla.Tags.FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(32)]
                public Byte[] EmptyString3;
                public int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ScalingFlagsOptions
                {
                    DontScaleOffset = 1,
                    DontScaleSize = 2,
                }
                public enum FlashFlagsOptions
                {
                    ReverseDefaultflashingColors = 1,
                }
                public enum FlagsOptions
                {
                    FlashesWhenActive = 1,
                    NotASprite = 2,
                    ShowOnlyWhenZoomed = 4,
                    ShowSniperData = 8,
                    HideAreaOutsideReticle = 16,
                    OneZoomLevel = 32,
                    DontShowWhenZoomed = 64,
                }
            }
            public enum CrosshairTypeOptions
            {
                Aim = 0,
                Zoom = 1,
                Charge = 2,
                ShouldReload = 3,
                FlashHeat = 4,
                FlashInventoryAmmo = 5,
                FlashBattery = 6,
                Reloadoverheat = 7,
                FlashWhenFiringAndNoAmmo = 8,
                FlashWhenThrowingAndNoGrenade = 9,
                LowAmmoAndNoneLeftToReload = 10,
                ShouldReloadSecondaryTrigger = 11,
                FlashSecondaryInventoryAmmo = 12,
                FlashSecondaryReload = 13,
                FlashWhenFiringSecondaryTriggerWithNoAmmo = 14,
                LowSecondaryAmmoAndNoneLeftToReload = 15,
                PrimaryTriggerReady = 16,
                SecondaryTriggerReady = 17,
                FlashWhenFiringWithDepletedBattery = 18,
            }
            public enum CanUseOnMapTypeOptions
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(104, 4)]
        public sealed class WeaponHudOverlaysBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("state attached to", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public Int16 StateAttachedTo;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("can use on map type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public Int16 CanUseOnMapType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("Overlay bitmap", typeof(TagReference))]
            public TagReference OverlayBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("Overlays", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("weapon_hud_overlay_block", 16, typeof(WeaponHudOverlayBlock))]
            public TagBlock Overlays;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 104;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(136, 4)]
            public sealed class WeaponHudOverlayBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("anchor offset", typeof(Vector2))]
                public Vector2 AnchorOffset;
                [Abide.Guerilla.Tags.FieldAttribute("width scale", typeof(Single))]
                public Single WidthScale;
                [Abide.Guerilla.Tags.FieldAttribute("height scale", typeof(Single))]
                public Single HeightScale;
                [Abide.Guerilla.Tags.FieldAttribute("scaling flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScalingFlagsOptions), true)]
                public Int16 ScalingFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(20)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
                public ColorArgb DefaultColor;
                [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
                public ColorArgb FlashingColor;
                [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
                public Single FlashPeriod;
                [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
                public Single FlashDelay;
                [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
                public Int16 NumberOfFlashes;
                [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions), true)]
                public Int16 FlashFlags;
                [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
                public Single FlashLength;
                [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
                public ColorArgb DisabledColor;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("frame rate", typeof(Int16))]
                public Int16 FrameRate;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [Abide.Guerilla.Tags.FieldAttribute("type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), true)]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(40)]
                public Byte[] EmptyString5;
                public int Size
                {
                    get
                    {
                        return 136;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum ScalingFlagsOptions
                {
                    DontScaleOffset = 1,
                    DontScaleSize = 2,
                }
                public enum FlashFlagsOptions
                {
                    ReverseDefaultflashingColors = 1,
                }
                public enum TypeOptions
                {
                    ShowOnFlashing = 1,
                    ShowOnEmpty = 2,
                    ShowOnReloadoverheating = 4,
                    ShowOnDefault = 8,
                    ShowAlways = 16,
                }
                public enum FlagsOptions
                {
                    FlashesWhenActive = 1,
                }
            }
            public enum StateAttachedToOptions
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
        public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            public int Size
            {
                get
                {
                    return 0;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(352, 4)]
        public sealed class GlobalHudScreenEffectDefinition : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("mask (fullscreen)", typeof(TagReference))]
            public TagReference MaskFullscreen;
            [Abide.Guerilla.Tags.FieldAttribute("mask (splitscreen)", typeof(TagReference))]
            public TagReference MaskSplitscreen;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(24)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(24)]
            public Byte[] EmptyString7;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString8;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(24)]
            public Byte[] EmptyString9;
            [Abide.Guerilla.Tags.FieldAttribute("screen effect flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScreenEffectFlagsOptions), true)]
            public Int32 ScreenEffectFlags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString10;
            [Abide.Guerilla.Tags.FieldAttribute("screen effect", typeof(TagReference))]
            public TagReference ScreenEffect;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString11;
            [Abide.Guerilla.Tags.FieldAttribute("screen effect flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScreenEffectFlagsOptions1), true)]
            public Int32 ScreenEffectFlags1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString12;
            [Abide.Guerilla.Tags.FieldAttribute("screen effect", typeof(TagReference))]
            public TagReference ScreenEffect1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString13;
            public int Size
            {
                get
                {
                    return 352;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                OnlyWhenZoomed = 1,
                MirrorHorizontally = 2,
                MirrorVertically = 4,
                UseNewHotness = 8,
            }
            public enum ScreenEffectFlagsOptions
            {
                OnlyWhenZoomed = 1,
            }
            public enum ScreenEffectFlagsOptions1
            {
                OnlyWhenZoomed = 1,
            }
        }
        public enum FlagsOptions
        {
            UseParentHudFlashingParameters = 1,
        }
        public enum AnchorOptions
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        public enum FlagsOptions1
        {
            UseTextFromStringListInstead = 1,
            OverrideDefaultColor = 2,
            WidthOffsetIsAbsoluteIconWidth = 4,
        }
    }
}
#pragma warning restore CS1591
