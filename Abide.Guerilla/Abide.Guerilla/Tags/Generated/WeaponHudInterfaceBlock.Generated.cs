#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(380, 4)]
    [TagGroupAttribute("weapon_hud_interface", 2003855465u, 4294967293u, typeof(WeaponHudInterfaceBlock))]
    public sealed class WeaponHudInterfaceBlock : AbideTagBlock
    {
        private TagBlockList<WeaponHudStaticBlock> staticElementsList = new TagBlockList<WeaponHudStaticBlock>(16);
        private TagBlockList<WeaponHudMeterBlock> meterElementsList = new TagBlockList<WeaponHudMeterBlock>(16);
        private TagBlockList<WeaponHudNumberBlock> numberElementsList = new TagBlockList<WeaponHudNumberBlock>(16);
        private TagBlockList<WeaponHudCrosshairBlock> crosshairsList = new TagBlockList<WeaponHudCrosshairBlock>(19);
        private TagBlockList<WeaponHudOverlaysBlock> overlayElementsList = new TagBlockList<WeaponHudOverlaysBlock>(16);
        private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
        private TagBlockList<GlobalHudScreenEffectDefinition> screenEffectList = new TagBlockList<GlobalHudScreenEffectDefinition>(1);
        [FieldAttribute("child hud", typeof(TagReference))]
        public TagReference ChildHud;
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("inventory ammo cutoff", typeof(Int16))]
        public Int16 InventoryAmmoCutoff;
        [FieldAttribute("loaded ammo cutoff", typeof(Int16))]
        public Int16 LoadedAmmoCutoff;
        [FieldAttribute("heat cutoff", typeof(Int16))]
        public Int16 HeatCutoff;
        [FieldAttribute("age cutoff", typeof(Int16))]
        public Int16 AgeCutoff;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString1;
        [FieldAttribute("anchor", typeof(AnchorOptions))]
        [OptionsAttribute(typeof(AnchorOptions), false)]
        public AnchorOptions Anchor;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString3;
        [FieldAttribute("static elements", typeof(TagBlock))]
        [BlockAttribute("weapon_hud_static_block", 16, typeof(WeaponHudStaticBlock))]
        public TagBlock StaticElements;
        [FieldAttribute("meter elements", typeof(TagBlock))]
        [BlockAttribute("weapon_hud_meter_block", 16, typeof(WeaponHudMeterBlock))]
        public TagBlock MeterElements;
        [FieldAttribute("number elements", typeof(TagBlock))]
        [BlockAttribute("weapon_hud_number_block", 16, typeof(WeaponHudNumberBlock))]
        public TagBlock NumberElements;
        [FieldAttribute("crosshairs", typeof(TagBlock))]
        [BlockAttribute("weapon_hud_crosshair_block", 19, typeof(WeaponHudCrosshairBlock))]
        public TagBlock Crosshairs;
        [FieldAttribute("overlay elements", typeof(TagBlock))]
        [BlockAttribute("weapon_hud_overlays_block", 16, typeof(WeaponHudOverlaysBlock))]
        public TagBlock OverlayElements;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString4;
        [FieldAttribute("", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString5;
        [FieldAttribute("screen effect", typeof(TagBlock))]
        [BlockAttribute("global_hud_screen_effect_definition", 1, typeof(GlobalHudScreenEffectDefinition))]
        public TagBlock ScreenEffect;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(132)]
        public Byte[] EmptyString6;
        [FieldAttribute("sequence index#sequence index into the global hud icon bitmap", typeof(Int16))]
        public Int16 SequenceIndex;
        [FieldAttribute("width offset#extra spacing beyond bitmap width for text alignment", typeof(Int16))]
        public Int16 WidthOffset;
        [FieldAttribute("offset from reference corner", typeof(Vector2))]
        public Vector2 OffsetFromReferenceCorner;
        [FieldAttribute("override icon color", typeof(ColorArgb))]
        public ColorArgb OverrideIconColor;
        [FieldAttribute("frame rate [0,30]", typeof(Byte))]
        public Byte FrameRate030;
        [FieldAttribute("flags", typeof(FlagsOptions1))]
        [OptionsAttribute(typeof(FlagsOptions1), true)]
        public FlagsOptions1 Flags1;
        [FieldAttribute("text index", typeof(Int16))]
        public Int16 TextIndex;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(48)]
        public Byte[] EmptyString7;
        public TagBlockList<WeaponHudStaticBlock> StaticElementsList
        {
            get
            {
                return this.staticElementsList;
            }
        }
        public TagBlockList<WeaponHudMeterBlock> MeterElementsList
        {
            get
            {
                return this.meterElementsList;
            }
        }
        public TagBlockList<WeaponHudNumberBlock> NumberElementsList
        {
            get
            {
                return this.numberElementsList;
            }
        }
        public TagBlockList<WeaponHudCrosshairBlock> CrosshairsList
        {
            get
            {
                return this.crosshairsList;
            }
        }
        public TagBlockList<WeaponHudOverlaysBlock> OverlayElementsList
        {
            get
            {
                return this.overlayElementsList;
            }
        }
        public TagBlockList<GNullBlock> EmptyStringList
        {
            get
            {
                return this.emptyStringList;
            }
        }
        public TagBlockList<GlobalHudScreenEffectDefinition> ScreenEffectList
        {
            get
            {
                return this.screenEffectList;
            }
        }
        public override int Size
        {
            get
            {
                return 380;
            }
        }
        public override void Initialize()
        {
            this.staticElementsList.Clear();
            this.meterElementsList.Clear();
            this.numberElementsList.Clear();
            this.crosshairsList.Clear();
            this.overlayElementsList.Clear();
            this.emptyStringList.Clear();
            this.screenEffectList.Clear();
            this.ChildHud = TagReference.Null;
            this.Flags = ((FlagsOptions)(0));
            this.EmptyString = new byte[2];
            this.InventoryAmmoCutoff = 0;
            this.LoadedAmmoCutoff = 0;
            this.HeatCutoff = 0;
            this.AgeCutoff = 0;
            this.EmptyString1 = new byte[32];
            this.Anchor = ((AnchorOptions)(0));
            this.EmptyString2 = new byte[2];
            this.EmptyString3 = new byte[32];
            this.StaticElements = TagBlock.Zero;
            this.MeterElements = TagBlock.Zero;
            this.NumberElements = TagBlock.Zero;
            this.Crosshairs = TagBlock.Zero;
            this.OverlayElements = TagBlock.Zero;
            this.EmptyString4 = new byte[4];
            this.EmptyString5 = TagBlock.Zero;
            this.ScreenEffect = TagBlock.Zero;
            this.EmptyString6 = new byte[132];
            this.SequenceIndex = 0;
            this.WidthOffset = 0;
            this.OffsetFromReferenceCorner = Vector2.Zero;
            this.OverrideIconColor = ColorArgb.Zero;
            this.FrameRate030 = 0;
            this.Flags1 = ((FlagsOptions1)(0));
            this.TextIndex = 0;
            this.EmptyString7 = new byte[48];
        }
        public override void Read(BinaryReader reader)
        {
            this.ChildHud = reader.Read<TagReference>();
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.InventoryAmmoCutoff = reader.ReadInt16();
            this.LoadedAmmoCutoff = reader.ReadInt16();
            this.HeatCutoff = reader.ReadInt16();
            this.AgeCutoff = reader.ReadInt16();
            this.EmptyString1 = reader.ReadBytes(32);
            this.Anchor = ((AnchorOptions)(reader.ReadInt16()));
            this.EmptyString2 = reader.ReadBytes(2);
            this.EmptyString3 = reader.ReadBytes(32);
            this.StaticElements = reader.ReadInt64();
            this.staticElementsList.Read(reader, this.StaticElements);
            this.MeterElements = reader.ReadInt64();
            this.meterElementsList.Read(reader, this.MeterElements);
            this.NumberElements = reader.ReadInt64();
            this.numberElementsList.Read(reader, this.NumberElements);
            this.Crosshairs = reader.ReadInt64();
            this.crosshairsList.Read(reader, this.Crosshairs);
            this.OverlayElements = reader.ReadInt64();
            this.overlayElementsList.Read(reader, this.OverlayElements);
            this.EmptyString4 = reader.ReadBytes(4);
            this.EmptyString5 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString5);
            this.ScreenEffect = reader.ReadInt64();
            this.screenEffectList.Read(reader, this.ScreenEffect);
            this.EmptyString6 = reader.ReadBytes(132);
            this.SequenceIndex = reader.ReadInt16();
            this.WidthOffset = reader.ReadInt16();
            this.OffsetFromReferenceCorner = reader.Read<Vector2>();
            this.OverrideIconColor = reader.Read<ColorArgb>();
            this.FrameRate030 = reader.ReadByte();
            this.Flags1 = ((FlagsOptions1)(reader.ReadByte()));
            this.TextIndex = reader.ReadInt16();
            this.EmptyString7 = reader.ReadBytes(48);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(180, 4)]
        public sealed class WeaponHudStaticBlock : AbideTagBlock
        {
            private TagBlockList<GlobalHudMultitextureOverlayDefinition> multitexOverlayList = new TagBlockList<GlobalHudMultitextureOverlayDefinition>(30);
            [FieldAttribute("state attached to", typeof(StateAttachedToOptions))]
            [OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public StateAttachedToOptions StateAttachedTo;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("can use on map type", typeof(CanUseOnMapTypeOptions))]
            [OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public CanUseOnMapTypeOptions CanUseOnMapType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
            [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public ScalingFlagsOptions ScalingFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [FieldAttribute("interface bitmap", typeof(TagReference))]
            public TagReference InterfaceBitmap;
            [FieldAttribute("default color", typeof(ColorArgb))]
            public ColorArgb DefaultColor;
            [FieldAttribute("flashing color", typeof(ColorArgb))]
            public ColorArgb FlashingColor;
            [FieldAttribute("flash period", typeof(Single))]
            public Single FlashPeriod;
            [FieldAttribute("flash delay#time between flashes", typeof(Single))]
            public Single FlashDelay;
            [FieldAttribute("number of flashes", typeof(Int16))]
            public Int16 NumberOfFlashes;
            [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
            [OptionsAttribute(typeof(FlashFlagsOptions), true)]
            public FlashFlagsOptions FlashFlags;
            [FieldAttribute("flash length#time of each flash", typeof(Single))]
            public Single FlashLength;
            [FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [FieldAttribute("sequence index", typeof(Int16))]
            public Int16 SequenceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString6;
            [FieldAttribute("multitex overlay", typeof(TagBlock))]
            [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
            public TagBlock MultitexOverlay;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString7;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString8;
            public TagBlockList<GlobalHudMultitextureOverlayDefinition> MultitexOverlayList
            {
                get
                {
                    return this.multitexOverlayList;
                }
            }
            public override int Size
            {
                get
                {
                    return 180;
                }
            }
            public override void Initialize()
            {
                this.multitexOverlayList.Clear();
                this.StateAttachedTo = ((StateAttachedToOptions)(0));
                this.EmptyString = new byte[2];
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[28];
                this.AnchorOffset = Vector2.Zero;
                this.WidthScale = 0;
                this.HeightScale = 0;
                this.ScalingFlags = ((ScalingFlagsOptions)(0));
                this.EmptyString3 = new byte[2];
                this.EmptyString4 = new byte[20];
                this.InterfaceBitmap = TagReference.Null;
                this.DefaultColor = ColorArgb.Zero;
                this.FlashingColor = ColorArgb.Zero;
                this.FlashPeriod = 0;
                this.FlashDelay = 0;
                this.NumberOfFlashes = 0;
                this.FlashFlags = ((FlashFlagsOptions)(0));
                this.FlashLength = 0;
                this.DisabledColor = ColorArgb.Zero;
                this.EmptyString5 = new byte[4];
                this.SequenceIndex = 0;
                this.EmptyString6 = new byte[2];
                this.MultitexOverlay = TagBlock.Zero;
                this.EmptyString7 = new byte[4];
                this.EmptyString8 = new byte[40];
            }
            public override void Read(BinaryReader reader)
            {
                this.StateAttachedTo = ((StateAttachedToOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(28);
                this.AnchorOffset = reader.Read<Vector2>();
                this.WidthScale = reader.ReadSingle();
                this.HeightScale = reader.ReadSingle();
                this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
                this.EmptyString3 = reader.ReadBytes(2);
                this.EmptyString4 = reader.ReadBytes(20);
                this.InterfaceBitmap = reader.Read<TagReference>();
                this.DefaultColor = reader.Read<ColorArgb>();
                this.FlashingColor = reader.Read<ColorArgb>();
                this.FlashPeriod = reader.ReadSingle();
                this.FlashDelay = reader.ReadSingle();
                this.NumberOfFlashes = reader.ReadInt16();
                this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
                this.FlashLength = reader.ReadSingle();
                this.DisabledColor = reader.Read<ColorArgb>();
                this.EmptyString5 = reader.ReadBytes(4);
                this.SequenceIndex = reader.ReadInt16();
                this.EmptyString6 = reader.ReadBytes(2);
                this.MultitexOverlay = reader.ReadInt64();
                this.multitexOverlayList.Read(reader, this.MultitexOverlay);
                this.EmptyString7 = reader.ReadBytes(4);
                this.EmptyString8 = reader.ReadBytes(40);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(480, 4)]
            public sealed class GlobalHudMultitextureOverlayDefinition : AbideTagBlock
            {
                private TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> effectorsList = new TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition>(30);
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("type", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("framebuffer blend func", typeof(FramebufferBlendFuncOptions))]
                [OptionsAttribute(typeof(FramebufferBlendFuncOptions), false)]
                public FramebufferBlendFuncOptions FramebufferBlendFunc;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString2;
                [FieldAttribute("primary anchor", typeof(PrimaryAnchorOptions))]
                [OptionsAttribute(typeof(PrimaryAnchorOptions), false)]
                public PrimaryAnchorOptions PrimaryAnchor;
                [FieldAttribute("secondary anchor", typeof(SecondaryAnchorOptions))]
                [OptionsAttribute(typeof(SecondaryAnchorOptions), false)]
                public SecondaryAnchorOptions SecondaryAnchor;
                [FieldAttribute("tertiary anchor", typeof(TertiaryAnchorOptions))]
                [OptionsAttribute(typeof(TertiaryAnchorOptions), false)]
                public TertiaryAnchorOptions TertiaryAnchor;
                [FieldAttribute("0 to 1 blend func", typeof(_0To1BlendFuncOptions))]
                [OptionsAttribute(typeof(_0To1BlendFuncOptions), false)]
                public _0To1BlendFuncOptions _0To1BlendFunc;
                [FieldAttribute("1 to 2 blend func", typeof(_1To2BlendFuncOptions))]
                [OptionsAttribute(typeof(_1To2BlendFuncOptions), false)]
                public _1To2BlendFuncOptions _1To2BlendFunc;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [FieldAttribute("primary scale", typeof(Vector2))]
                public Vector2 PrimaryScale;
                [FieldAttribute("secondary scale", typeof(Vector2))]
                public Vector2 SecondaryScale;
                [FieldAttribute("tertiary scale", typeof(Vector2))]
                public Vector2 TertiaryScale;
                [FieldAttribute("primary offset", typeof(Vector2))]
                public Vector2 PrimaryOffset;
                [FieldAttribute("secondary offset", typeof(Vector2))]
                public Vector2 SecondaryOffset;
                [FieldAttribute("tertiary offset", typeof(Vector2))]
                public Vector2 TertiaryOffset;
                [FieldAttribute("primary", typeof(TagReference))]
                public TagReference Primary;
                [FieldAttribute("secondary", typeof(TagReference))]
                public TagReference Secondary;
                [FieldAttribute("tertiary", typeof(TagReference))]
                public TagReference Tertiary;
                [FieldAttribute("primary wrap mode", typeof(PrimaryWrapModeOptions))]
                [OptionsAttribute(typeof(PrimaryWrapModeOptions), false)]
                public PrimaryWrapModeOptions PrimaryWrapMode;
                [FieldAttribute("secondary wrap mode", typeof(SecondaryWrapModeOptions))]
                [OptionsAttribute(typeof(SecondaryWrapModeOptions), false)]
                public SecondaryWrapModeOptions SecondaryWrapMode;
                [FieldAttribute("tertiary wrap mode", typeof(TertiaryWrapModeOptions))]
                [OptionsAttribute(typeof(TertiaryWrapModeOptions), false)]
                public TertiaryWrapModeOptions TertiaryWrapMode;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(184)]
                public Byte[] EmptyString5;
                [FieldAttribute("effectors", typeof(TagBlock))]
                [BlockAttribute("global_hud_multitexture_overlay_effector_definition", 30, typeof(GlobalHudMultitextureOverlayEffectorDefinition))]
                public TagBlock Effectors;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(128)]
                public Byte[] EmptyString6;
                public TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> EffectorsList
                {
                    get
                    {
                        return this.effectorsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 480;
                    }
                }
                public override void Initialize()
                {
                    this.effectorsList.Clear();
                    this.EmptyString = new byte[2];
                    this.Type = 0;
                    this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[32];
                    this.PrimaryAnchor = ((PrimaryAnchorOptions)(0));
                    this.SecondaryAnchor = ((SecondaryAnchorOptions)(0));
                    this.TertiaryAnchor = ((TertiaryAnchorOptions)(0));
                    this._0To1BlendFunc = ((_0To1BlendFuncOptions)(0));
                    this._1To2BlendFunc = ((_1To2BlendFuncOptions)(0));
                    this.EmptyString3 = new byte[2];
                    this.PrimaryScale = Vector2.Zero;
                    this.SecondaryScale = Vector2.Zero;
                    this.TertiaryScale = Vector2.Zero;
                    this.PrimaryOffset = Vector2.Zero;
                    this.SecondaryOffset = Vector2.Zero;
                    this.TertiaryOffset = Vector2.Zero;
                    this.Primary = TagReference.Null;
                    this.Secondary = TagReference.Null;
                    this.Tertiary = TagReference.Null;
                    this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(0));
                    this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(0));
                    this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.EmptyString5 = new byte[184];
                    this.Effectors = TagBlock.Zero;
                    this.EmptyString6 = new byte[128];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(2);
                    this.Type = reader.ReadInt16();
                    this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(32);
                    this.PrimaryAnchor = ((PrimaryAnchorOptions)(reader.ReadInt16()));
                    this.SecondaryAnchor = ((SecondaryAnchorOptions)(reader.ReadInt16()));
                    this.TertiaryAnchor = ((TertiaryAnchorOptions)(reader.ReadInt16()));
                    this._0To1BlendFunc = ((_0To1BlendFuncOptions)(reader.ReadInt16()));
                    this._1To2BlendFunc = ((_1To2BlendFuncOptions)(reader.ReadInt16()));
                    this.EmptyString3 = reader.ReadBytes(2);
                    this.PrimaryScale = reader.Read<Vector2>();
                    this.SecondaryScale = reader.Read<Vector2>();
                    this.TertiaryScale = reader.Read<Vector2>();
                    this.PrimaryOffset = reader.Read<Vector2>();
                    this.SecondaryOffset = reader.Read<Vector2>();
                    this.TertiaryOffset = reader.Read<Vector2>();
                    this.Primary = reader.Read<TagReference>();
                    this.Secondary = reader.Read<TagReference>();
                    this.Tertiary = reader.Read<TagReference>();
                    this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(reader.ReadInt16()));
                    this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(reader.ReadInt16()));
                    this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.EmptyString5 = reader.ReadBytes(184);
                    this.Effectors = reader.ReadInt64();
                    this.effectorsList.Read(reader, this.Effectors);
                    this.EmptyString6 = reader.ReadBytes(128);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(220, 4)]
                public sealed class GlobalHudMultitextureOverlayEffectorDefinition : AbideTagBlock
                {
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(64)]
                    public Byte[] EmptyString;
                    [FieldAttribute("destination type", typeof(DestinationTypeOptions))]
                    [OptionsAttribute(typeof(DestinationTypeOptions), false)]
                    public DestinationTypeOptions DestinationType;
                    [FieldAttribute("destination", typeof(DestinationOptions))]
                    [OptionsAttribute(typeof(DestinationOptions), false)]
                    public DestinationOptions Destination;
                    [FieldAttribute("source", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(64)]
                    public Byte[] EmptyString2;
                    [FieldAttribute("tint color lower bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorLowerBound;
                    [FieldAttribute("tint color upper bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorUpperBound;
                    [FieldAttribute("periodic function", typeof(PeriodicFunctionOptions))]
                    [OptionsAttribute(typeof(PeriodicFunctionOptions), false)]
                    public PeriodicFunctionOptions PeriodicFunction;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString3;
                    [FieldAttribute("function period:seconds", typeof(Single))]
                    public Single FunctionPeriod;
                    [FieldAttribute("function phase:seconds", typeof(Single))]
                    public Single FunctionPhase;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(32)]
                    public Byte[] EmptyString4;
                    public override int Size
                    {
                        get
                        {
                            return 220;
                        }
                    }
                    public override void Initialize()
                    {
                        this.EmptyString = new byte[64];
                        this.DestinationType = ((DestinationTypeOptions)(0));
                        this.Destination = ((DestinationOptions)(0));
                        this.Source = ((SourceOptions)(0));
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[64];
                        this.TintColorLowerBound = ColorRgbF.Zero;
                        this.TintColorUpperBound = ColorRgbF.Zero;
                        this.PeriodicFunction = ((PeriodicFunctionOptions)(0));
                        this.EmptyString3 = new byte[2];
                        this.FunctionPeriod = 0;
                        this.FunctionPhase = 0;
                        this.EmptyString4 = new byte[32];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.EmptyString = reader.ReadBytes(64);
                        this.DestinationType = ((DestinationTypeOptions)(reader.ReadInt16()));
                        this.Destination = ((DestinationOptions)(reader.ReadInt16()));
                        this.Source = ((SourceOptions)(reader.ReadInt16()));
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(64);
                        this.TintColorLowerBound = reader.Read<ColorRgbF>();
                        this.TintColorUpperBound = reader.Read<ColorRgbF>();
                        this.PeriodicFunction = ((PeriodicFunctionOptions)(reader.ReadInt16()));
                        this.EmptyString3 = reader.ReadBytes(2);
                        this.FunctionPeriod = reader.ReadSingle();
                        this.FunctionPhase = reader.ReadSingle();
                        this.EmptyString4 = reader.ReadBytes(32);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum DestinationTypeOptions : Int16
                    {
                        Tint01 = 0,
                        HorizontalOffset = 1,
                        VerticalOffset = 2,
                        Fade01 = 3,
                    }
                    public enum DestinationOptions : Int16
                    {
                        GeometryOffset = 0,
                        PrimaryMap = 1,
                        SecondaryMap = 2,
                        TertiaryMap = 3,
                    }
                    public enum SourceOptions : Int16
                    {
                        PlayerPitch = 0,
                        PlayerPitchTangent = 1,
                        PlayerYaw = 2,
                        WeaponRoundsLoaded = 3,
                        WeaponRoundsInventory = 4,
                        WeaponHeat = 5,
                        ExplicitUsesLowBound = 6,
                        WeaponZoomLevel = 7,
                    }
                    public enum PeriodicFunctionOptions : Int16
                    {
                        One = 0,
                        Zero = 1,
                        Cosine = 2,
                        CosineVariablePeriod = 3,
                        DiagonalWave = 4,
                        DiagonalWaveVariablePeriod = 5,
                        Slide = 6,
                        SlideVariablePeriod = 7,
                        Noise = 8,
                        Jitter = 9,
                        Wander = 10,
                        Spark = 11,
                    }
                }
                public enum FramebufferBlendFuncOptions : Int16
                {
                    AlphaBlend = 0,
                    Multiply = 1,
                    DoubleMultiply = 2,
                    Add = 3,
                    Subtract = 4,
                    ComponentMin = 5,
                    ComponentMax = 6,
                    AlphaMultiplyAdd = 7,
                    ConstantColorBlend = 8,
                    InverseConstantColorBlend = 9,
                    None = 10,
                }
                public enum PrimaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum SecondaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum TertiaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum _0To1BlendFuncOptions : Int16
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum _1To2BlendFuncOptions : Int16
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum PrimaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum SecondaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum TertiaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
            }
            public enum StateAttachedToOptions : Int16
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions : Int16
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
            public enum ScalingFlagsOptions : Int16
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlashFlagsOptions : Int16
            {
                ReverseDefaultflashingColors = 1,
            }
        }
        [FieldSetAttribute(180, 4)]
        public sealed class WeaponHudMeterBlock : AbideTagBlock
        {
            private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
            [FieldAttribute("state attached to", typeof(StateAttachedToOptions))]
            [OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public StateAttachedToOptions StateAttachedTo;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("can use on map type", typeof(CanUseOnMapTypeOptions))]
            [OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public CanUseOnMapTypeOptions CanUseOnMapType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
            [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public ScalingFlagsOptions ScalingFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [FieldAttribute("meter bitmap", typeof(TagReference))]
            public TagReference MeterBitmap;
            [FieldAttribute("color at meter minimum", typeof(ColorRgb))]
            public ColorRgb ColorAtMeterMinimum;
            [FieldAttribute("color at meter maximum", typeof(ColorRgb))]
            public ColorRgb ColorAtMeterMaximum;
            [FieldAttribute("flash color", typeof(ColorRgb))]
            public ColorRgb FlashColor;
            [FieldAttribute("empty color", typeof(ColorArgb))]
            public ColorArgb EmptyColor;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("minumum meter value", typeof(Byte))]
            public Byte MinumumMeterValue;
            [FieldAttribute("sequence index", typeof(Int16))]
            public Int16 SequenceIndex;
            [FieldAttribute("alpha multiplier", typeof(Byte))]
            public Byte AlphaMultiplier;
            [FieldAttribute("alpha bias", typeof(Byte))]
            public Byte AlphaBias;
            [FieldAttribute("value scale#used for non-integral values, i.e. health and shields", typeof(Int16))]
            public Int16 ValueScale;
            [FieldAttribute("opacity", typeof(Single))]
            public Single Opacity;
            [FieldAttribute("translucency", typeof(Single))]
            public Single Translucency;
            [FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString5;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString7;
            public TagBlockList<GNullBlock> EmptyStringList
            {
                get
                {
                    return this.emptyStringList;
                }
            }
            public override int Size
            {
                get
                {
                    return 180;
                }
            }
            public override void Initialize()
            {
                this.emptyStringList.Clear();
                this.StateAttachedTo = ((StateAttachedToOptions)(0));
                this.EmptyString = new byte[2];
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[28];
                this.AnchorOffset = Vector2.Zero;
                this.WidthScale = 0;
                this.HeightScale = 0;
                this.ScalingFlags = ((ScalingFlagsOptions)(0));
                this.EmptyString3 = new byte[2];
                this.EmptyString4 = new byte[20];
                this.MeterBitmap = TagReference.Null;
                this.ColorAtMeterMinimum = ColorRgb.Zero;
                this.ColorAtMeterMaximum = ColorRgb.Zero;
                this.FlashColor = ColorRgb.Zero;
                this.EmptyColor = ColorArgb.Zero;
                this.Flags = ((FlagsOptions)(0));
                this.MinumumMeterValue = 0;
                this.SequenceIndex = 0;
                this.AlphaMultiplier = 0;
                this.AlphaBias = 0;
                this.ValueScale = 0;
                this.Opacity = 0;
                this.Translucency = 0;
                this.DisabledColor = ColorArgb.Zero;
                this.EmptyString5 = TagBlock.Zero;
                this.EmptyString6 = new byte[4];
                this.EmptyString7 = new byte[40];
            }
            public override void Read(BinaryReader reader)
            {
                this.StateAttachedTo = ((StateAttachedToOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(28);
                this.AnchorOffset = reader.Read<Vector2>();
                this.WidthScale = reader.ReadSingle();
                this.HeightScale = reader.ReadSingle();
                this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
                this.EmptyString3 = reader.ReadBytes(2);
                this.EmptyString4 = reader.ReadBytes(20);
                this.MeterBitmap = reader.Read<TagReference>();
                this.ColorAtMeterMinimum = reader.Read<ColorRgb>();
                this.ColorAtMeterMaximum = reader.Read<ColorRgb>();
                this.FlashColor = reader.Read<ColorRgb>();
                this.EmptyColor = reader.Read<ColorArgb>();
                this.Flags = ((FlagsOptions)(reader.ReadByte()));
                this.MinumumMeterValue = reader.ReadByte();
                this.SequenceIndex = reader.ReadInt16();
                this.AlphaMultiplier = reader.ReadByte();
                this.AlphaBias = reader.ReadByte();
                this.ValueScale = reader.ReadInt16();
                this.Opacity = reader.ReadSingle();
                this.Translucency = reader.ReadSingle();
                this.DisabledColor = reader.Read<ColorArgb>();
                this.EmptyString5 = reader.ReadInt64();
                this.emptyStringList.Read(reader, this.EmptyString5);
                this.EmptyString6 = reader.ReadBytes(4);
                this.EmptyString7 = reader.ReadBytes(40);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : AbideTagBlock
            {
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum StateAttachedToOptions : Int16
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions : Int16
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
            public enum ScalingFlagsOptions : Int16
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlagsOptions : Byte
            {
                UseMinmaxForStateChanges = 1,
                InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
                InterpolateColorAlongHsvSpace = 4,
                MoreColorsForHsvInterpolation = 8,
                InvertInterpolation = 16,
            }
        }
        [FieldSetAttribute(160, 4)]
        public sealed class WeaponHudNumberBlock : AbideTagBlock
        {
            [FieldAttribute("state attached to", typeof(StateAttachedToOptions))]
            [OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public StateAttachedToOptions StateAttachedTo;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("can use on map type", typeof(CanUseOnMapTypeOptions))]
            [OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public CanUseOnMapTypeOptions CanUseOnMapType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
            [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public ScalingFlagsOptions ScalingFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [FieldAttribute("default color", typeof(ColorArgb))]
            public ColorArgb DefaultColor;
            [FieldAttribute("flashing color", typeof(ColorArgb))]
            public ColorArgb FlashingColor;
            [FieldAttribute("flash period", typeof(Single))]
            public Single FlashPeriod;
            [FieldAttribute("flash delay#time between flashes", typeof(Single))]
            public Single FlashDelay;
            [FieldAttribute("number of flashes", typeof(Int16))]
            public Int16 NumberOfFlashes;
            [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
            [OptionsAttribute(typeof(FlashFlagsOptions), true)]
            public FlashFlagsOptions FlashFlags;
            [FieldAttribute("flash length#time of each flash", typeof(Single))]
            public Single FlashLength;
            [FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString5;
            [FieldAttribute("maximum number of digits", typeof(Byte))]
            public Byte MaximumNumberOfDigits;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("number of fractional digits", typeof(Byte))]
            public Byte NumberOfFractionalDigits;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(1)]
            public Byte[] EmptyString6;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString7;
            [FieldAttribute("weapon specific flags", typeof(WeaponSpecificFlagsOptions))]
            [OptionsAttribute(typeof(WeaponSpecificFlagsOptions), true)]
            public WeaponSpecificFlagsOptions WeaponSpecificFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString8;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(36)]
            public Byte[] EmptyString9;
            public override int Size
            {
                get
                {
                    return 160;
                }
            }
            public override void Initialize()
            {
                this.StateAttachedTo = ((StateAttachedToOptions)(0));
                this.EmptyString = new byte[2];
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[28];
                this.AnchorOffset = Vector2.Zero;
                this.WidthScale = 0;
                this.HeightScale = 0;
                this.ScalingFlags = ((ScalingFlagsOptions)(0));
                this.EmptyString3 = new byte[2];
                this.EmptyString4 = new byte[20];
                this.DefaultColor = ColorArgb.Zero;
                this.FlashingColor = ColorArgb.Zero;
                this.FlashPeriod = 0;
                this.FlashDelay = 0;
                this.NumberOfFlashes = 0;
                this.FlashFlags = ((FlashFlagsOptions)(0));
                this.FlashLength = 0;
                this.DisabledColor = ColorArgb.Zero;
                this.EmptyString5 = new byte[4];
                this.MaximumNumberOfDigits = 0;
                this.Flags = ((FlagsOptions)(0));
                this.NumberOfFractionalDigits = 0;
                this.EmptyString6 = new byte[1];
                this.EmptyString7 = new byte[12];
                this.WeaponSpecificFlags = ((WeaponSpecificFlagsOptions)(0));
                this.EmptyString8 = new byte[2];
                this.EmptyString9 = new byte[36];
            }
            public override void Read(BinaryReader reader)
            {
                this.StateAttachedTo = ((StateAttachedToOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(28);
                this.AnchorOffset = reader.Read<Vector2>();
                this.WidthScale = reader.ReadSingle();
                this.HeightScale = reader.ReadSingle();
                this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
                this.EmptyString3 = reader.ReadBytes(2);
                this.EmptyString4 = reader.ReadBytes(20);
                this.DefaultColor = reader.Read<ColorArgb>();
                this.FlashingColor = reader.Read<ColorArgb>();
                this.FlashPeriod = reader.ReadSingle();
                this.FlashDelay = reader.ReadSingle();
                this.NumberOfFlashes = reader.ReadInt16();
                this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
                this.FlashLength = reader.ReadSingle();
                this.DisabledColor = reader.Read<ColorArgb>();
                this.EmptyString5 = reader.ReadBytes(4);
                this.MaximumNumberOfDigits = reader.ReadByte();
                this.Flags = ((FlagsOptions)(reader.ReadByte()));
                this.NumberOfFractionalDigits = reader.ReadByte();
                this.EmptyString6 = reader.ReadBytes(1);
                this.EmptyString7 = reader.ReadBytes(12);
                this.WeaponSpecificFlags = ((WeaponSpecificFlagsOptions)(reader.ReadInt16()));
                this.EmptyString8 = reader.ReadBytes(2);
                this.EmptyString9 = reader.ReadBytes(36);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum StateAttachedToOptions : Int16
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions : Int16
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
            public enum ScalingFlagsOptions : Int16
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlashFlagsOptions : Int16
            {
                ReverseDefaultflashingColors = 1,
            }
            public enum FlagsOptions : Byte
            {
                ShowLeadingZeros = 1,
                OnlyShowWhenZoomed = 2,
                DrawATrailingM = 4,
            }
            public enum WeaponSpecificFlagsOptions : Int16
            {
                DivideNumberByClipSize = 1,
            }
        }
        [FieldSetAttribute(104, 4)]
        public sealed class WeaponHudCrosshairBlock : AbideTagBlock
        {
            private TagBlockList<WeaponHudCrosshairItemBlock> crosshairOverlaysList = new TagBlockList<WeaponHudCrosshairItemBlock>(16);
            [FieldAttribute("crosshair type", typeof(CrosshairTypeOptions))]
            [OptionsAttribute(typeof(CrosshairTypeOptions), false)]
            public CrosshairTypeOptions CrosshairType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("can use on map type", typeof(CanUseOnMapTypeOptions))]
            [OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public CanUseOnMapTypeOptions CanUseOnMapType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [FieldAttribute("Crosshair bitmap", typeof(TagReference))]
            public TagReference CrosshairBitmap;
            [FieldAttribute("Crosshair overlays", typeof(TagBlock))]
            [BlockAttribute("weapon_hud_crosshair_item_block", 16, typeof(WeaponHudCrosshairItemBlock))]
            public TagBlock CrosshairOverlays;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString3;
            public TagBlockList<WeaponHudCrosshairItemBlock> CrosshairOverlaysList
            {
                get
                {
                    return this.crosshairOverlaysList;
                }
            }
            public override int Size
            {
                get
                {
                    return 104;
                }
            }
            public override void Initialize()
            {
                this.crosshairOverlaysList.Clear();
                this.CrosshairType = ((CrosshairTypeOptions)(0));
                this.EmptyString = new byte[2];
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[28];
                this.CrosshairBitmap = TagReference.Null;
                this.CrosshairOverlays = TagBlock.Zero;
                this.EmptyString3 = new byte[40];
            }
            public override void Read(BinaryReader reader)
            {
                this.CrosshairType = ((CrosshairTypeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(28);
                this.CrosshairBitmap = reader.Read<TagReference>();
                this.CrosshairOverlays = reader.ReadInt64();
                this.crosshairOverlaysList.Read(reader, this.CrosshairOverlays);
                this.EmptyString3 = reader.ReadBytes(40);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(108, 4)]
            public sealed class WeaponHudCrosshairItemBlock : AbideTagBlock
            {
                [FieldAttribute("anchor offset", typeof(Vector2))]
                public Vector2 AnchorOffset;
                [FieldAttribute("width scale", typeof(Single))]
                public Single WidthScale;
                [FieldAttribute("height scale", typeof(Single))]
                public Single HeightScale;
                [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
                [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
                public ScalingFlagsOptions ScalingFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(20)]
                public Byte[] EmptyString1;
                [FieldAttribute("default color", typeof(ColorArgb))]
                public ColorArgb DefaultColor;
                [FieldAttribute("flashing color", typeof(ColorArgb))]
                public ColorArgb FlashingColor;
                [FieldAttribute("flash period", typeof(Single))]
                public Single FlashPeriod;
                [FieldAttribute("flash delay#time between flashes", typeof(Single))]
                public Single FlashDelay;
                [FieldAttribute("number of flashes", typeof(Int16))]
                public Int16 NumberOfFlashes;
                [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
                [OptionsAttribute(typeof(FlashFlagsOptions), true)]
                public FlashFlagsOptions FlashFlags;
                [FieldAttribute("flash length#time of each flash", typeof(Single))]
                public Single FlashLength;
                [FieldAttribute("disabled color", typeof(ColorArgb))]
                public ColorArgb DisabledColor;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [FieldAttribute("frame rate", typeof(Int16))]
                public Int16 FrameRate;
                [FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString3;
                public override int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public override void Initialize()
                {
                    this.AnchorOffset = Vector2.Zero;
                    this.WidthScale = 0;
                    this.HeightScale = 0;
                    this.ScalingFlags = ((ScalingFlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.EmptyString1 = new byte[20];
                    this.DefaultColor = ColorArgb.Zero;
                    this.FlashingColor = ColorArgb.Zero;
                    this.FlashPeriod = 0;
                    this.FlashDelay = 0;
                    this.NumberOfFlashes = 0;
                    this.FlashFlags = ((FlashFlagsOptions)(0));
                    this.FlashLength = 0;
                    this.DisabledColor = ColorArgb.Zero;
                    this.EmptyString2 = new byte[4];
                    this.FrameRate = 0;
                    this.SequenceIndex = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString3 = new byte[32];
                }
                public override void Read(BinaryReader reader)
                {
                    this.AnchorOffset = reader.Read<Vector2>();
                    this.WidthScale = reader.ReadSingle();
                    this.HeightScale = reader.ReadSingle();
                    this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.EmptyString1 = reader.ReadBytes(20);
                    this.DefaultColor = reader.Read<ColorArgb>();
                    this.FlashingColor = reader.Read<ColorArgb>();
                    this.FlashPeriod = reader.ReadSingle();
                    this.FlashDelay = reader.ReadSingle();
                    this.NumberOfFlashes = reader.ReadInt16();
                    this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
                    this.FlashLength = reader.ReadSingle();
                    this.DisabledColor = reader.Read<ColorArgb>();
                    this.EmptyString2 = reader.ReadBytes(4);
                    this.FrameRate = reader.ReadInt16();
                    this.SequenceIndex = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.EmptyString3 = reader.ReadBytes(32);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ScalingFlagsOptions : Int16
                {
                    DontScaleOffset = 1,
                    DontScaleSize = 2,
                }
                public enum FlashFlagsOptions : Int16
                {
                    ReverseDefaultflashingColors = 1,
                }
                public enum FlagsOptions : Int32
                {
                    FlashesWhenActive = 1,
                    NotASprite = 2,
                    ShowOnlyWhenZoomed = 4,
                    ShowSniperData = 8,
                    HideAreaOutsideReticle = 16,
                    OneZoomLevel = 32,
                    DontShowWhenZoomed = 64,
                }
            }
            public enum CrosshairTypeOptions : Int16
            {
                Aim = 0,
                Zoom = 1,
                Charge = 2,
                ShouldReload = 3,
                FlashHeat = 4,
                FlashInventoryAmmo = 5,
                FlashBattery = 6,
                Reloadoverheat = 7,
                FlashWhenFiringAndNoAmmo = 8,
                FlashWhenThrowingAndNoGrenade = 9,
                LowAmmoAndNoneLeftToReload = 10,
                ShouldReloadSecondaryTrigger = 11,
                FlashSecondaryInventoryAmmo = 12,
                FlashSecondaryReload = 13,
                FlashWhenFiringSecondaryTriggerWithNoAmmo = 14,
                LowSecondaryAmmoAndNoneLeftToReload = 15,
                PrimaryTriggerReady = 16,
                SecondaryTriggerReady = 17,
                FlashWhenFiringWithDepletedBattery = 18,
            }
            public enum CanUseOnMapTypeOptions : Int16
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
        }
        [FieldSetAttribute(104, 4)]
        public sealed class WeaponHudOverlaysBlock : AbideTagBlock
        {
            private TagBlockList<WeaponHudOverlayBlock> overlaysList = new TagBlockList<WeaponHudOverlayBlock>(16);
            [FieldAttribute("state attached to", typeof(StateAttachedToOptions))]
            [OptionsAttribute(typeof(StateAttachedToOptions), false)]
            public StateAttachedToOptions StateAttachedTo;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("can use on map type", typeof(CanUseOnMapTypeOptions))]
            [OptionsAttribute(typeof(CanUseOnMapTypeOptions), false)]
            public CanUseOnMapTypeOptions CanUseOnMapType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(28)]
            public Byte[] EmptyString2;
            [FieldAttribute("Overlay bitmap", typeof(TagReference))]
            public TagReference OverlayBitmap;
            [FieldAttribute("Overlays", typeof(TagBlock))]
            [BlockAttribute("weapon_hud_overlay_block", 16, typeof(WeaponHudOverlayBlock))]
            public TagBlock Overlays;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString3;
            public TagBlockList<WeaponHudOverlayBlock> OverlaysList
            {
                get
                {
                    return this.overlaysList;
                }
            }
            public override int Size
            {
                get
                {
                    return 104;
                }
            }
            public override void Initialize()
            {
                this.overlaysList.Clear();
                this.StateAttachedTo = ((StateAttachedToOptions)(0));
                this.EmptyString = new byte[2];
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[28];
                this.OverlayBitmap = TagReference.Null;
                this.Overlays = TagBlock.Zero;
                this.EmptyString3 = new byte[40];
            }
            public override void Read(BinaryReader reader)
            {
                this.StateAttachedTo = ((StateAttachedToOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.CanUseOnMapType = ((CanUseOnMapTypeOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(28);
                this.OverlayBitmap = reader.Read<TagReference>();
                this.Overlays = reader.ReadInt64();
                this.overlaysList.Read(reader, this.Overlays);
                this.EmptyString3 = reader.ReadBytes(40);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(136, 4)]
            public sealed class WeaponHudOverlayBlock : AbideTagBlock
            {
                [FieldAttribute("anchor offset", typeof(Vector2))]
                public Vector2 AnchorOffset;
                [FieldAttribute("width scale", typeof(Single))]
                public Single WidthScale;
                [FieldAttribute("height scale", typeof(Single))]
                public Single HeightScale;
                [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
                [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
                public ScalingFlagsOptions ScalingFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(20)]
                public Byte[] EmptyString1;
                [FieldAttribute("default color", typeof(ColorArgb))]
                public ColorArgb DefaultColor;
                [FieldAttribute("flashing color", typeof(ColorArgb))]
                public ColorArgb FlashingColor;
                [FieldAttribute("flash period", typeof(Single))]
                public Single FlashPeriod;
                [FieldAttribute("flash delay#time between flashes", typeof(Single))]
                public Single FlashDelay;
                [FieldAttribute("number of flashes", typeof(Int16))]
                public Int16 NumberOfFlashes;
                [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
                [OptionsAttribute(typeof(FlashFlagsOptions), true)]
                public FlashFlagsOptions FlashFlags;
                [FieldAttribute("flash length#time of each flash", typeof(Single))]
                public Single FlashLength;
                [FieldAttribute("disabled color", typeof(ColorArgb))]
                public ColorArgb DisabledColor;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [FieldAttribute("frame rate", typeof(Int16))]
                public Int16 FrameRate;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [FieldAttribute("type", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), true)]
                public TypeOptions Type;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString4;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(40)]
                public Byte[] EmptyString5;
                public override int Size
                {
                    get
                    {
                        return 136;
                    }
                }
                public override void Initialize()
                {
                    this.AnchorOffset = Vector2.Zero;
                    this.WidthScale = 0;
                    this.HeightScale = 0;
                    this.ScalingFlags = ((ScalingFlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.EmptyString1 = new byte[20];
                    this.DefaultColor = ColorArgb.Zero;
                    this.FlashingColor = ColorArgb.Zero;
                    this.FlashPeriod = 0;
                    this.FlashDelay = 0;
                    this.NumberOfFlashes = 0;
                    this.FlashFlags = ((FlashFlagsOptions)(0));
                    this.FlashLength = 0;
                    this.DisabledColor = ColorArgb.Zero;
                    this.EmptyString2 = new byte[4];
                    this.FrameRate = 0;
                    this.EmptyString3 = new byte[2];
                    this.SequenceIndex = 0;
                    this.Type = ((TypeOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString4 = new byte[16];
                    this.EmptyString5 = new byte[40];
                }
                public override void Read(BinaryReader reader)
                {
                    this.AnchorOffset = reader.Read<Vector2>();
                    this.WidthScale = reader.ReadSingle();
                    this.HeightScale = reader.ReadSingle();
                    this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.EmptyString1 = reader.ReadBytes(20);
                    this.DefaultColor = reader.Read<ColorArgb>();
                    this.FlashingColor = reader.Read<ColorArgb>();
                    this.FlashPeriod = reader.ReadSingle();
                    this.FlashDelay = reader.ReadSingle();
                    this.NumberOfFlashes = reader.ReadInt16();
                    this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
                    this.FlashLength = reader.ReadSingle();
                    this.DisabledColor = reader.Read<ColorArgb>();
                    this.EmptyString2 = reader.ReadBytes(4);
                    this.FrameRate = reader.ReadInt16();
                    this.EmptyString3 = reader.ReadBytes(2);
                    this.SequenceIndex = reader.ReadInt16();
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.EmptyString4 = reader.ReadBytes(16);
                    this.EmptyString5 = reader.ReadBytes(40);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ScalingFlagsOptions : Int16
                {
                    DontScaleOffset = 1,
                    DontScaleSize = 2,
                }
                public enum FlashFlagsOptions : Int16
                {
                    ReverseDefaultflashingColors = 1,
                }
                public enum TypeOptions : Int16
                {
                    ShowOnFlashing = 1,
                    ShowOnEmpty = 2,
                    ShowOnReloadoverheating = 4,
                    ShowOnDefault = 8,
                    ShowAlways = 16,
                }
                public enum FlagsOptions : Int32
                {
                    FlashesWhenActive = 1,
                }
            }
            public enum StateAttachedToOptions : Int16
            {
                InventoryAmmo = 0,
                LoadedAmmo = 1,
                Heat = 2,
                Age = 3,
                SecondaryWeaponInventoryAmmo = 4,
                SecondaryWeaponLoadedAmmo = 5,
                DistanceToTarget = 6,
                ElevationToTarget = 7,
            }
            public enum CanUseOnMapTypeOptions : Int16
            {
                Any = 0,
                Solo = 1,
                Multiplayer = 2,
            }
        }
        [FieldSetAttribute(0, 4)]
        public sealed class GNullBlock : AbideTagBlock
        {
            public override int Size
            {
                get
                {
                    return 0;
                }
            }
            public override void Initialize()
            {
            }
            public override void Read(BinaryReader reader)
            {
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(352, 4)]
        public sealed class GlobalHudScreenEffectDefinition : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString2;
            [FieldAttribute("mask (fullscreen)", typeof(TagReference))]
            public TagReference MaskFullscreen;
            [FieldAttribute("mask (splitscreen)", typeof(TagReference))]
            public TagReference MaskSplitscreen;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString3;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString5;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString6;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString7;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString8;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString9;
            [FieldAttribute("screen effect flags", typeof(ScreenEffectFlagsOptions))]
            [OptionsAttribute(typeof(ScreenEffectFlagsOptions), true)]
            public ScreenEffectFlagsOptions ScreenEffectFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString10;
            [FieldAttribute("screen effect", typeof(TagReference))]
            public TagReference ScreenEffect;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString11;
            [FieldAttribute("screen effect flags", typeof(ScreenEffectFlagsOptions1))]
            [OptionsAttribute(typeof(ScreenEffectFlagsOptions1), true)]
            public ScreenEffectFlagsOptions1 ScreenEffectFlags1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString12;
            [FieldAttribute("screen effect", typeof(TagReference))]
            public TagReference ScreenEffect1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString13;
            public override int Size
            {
                get
                {
                    return 352;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[4];
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[16];
                this.MaskFullscreen = TagReference.Null;
                this.MaskSplitscreen = TagReference.Null;
                this.EmptyString3 = new byte[8];
                this.EmptyString4 = new byte[20];
                this.EmptyString5 = new byte[24];
                this.EmptyString6 = new byte[8];
                this.EmptyString7 = new byte[24];
                this.EmptyString8 = new byte[20];
                this.EmptyString9 = new byte[24];
                this.ScreenEffectFlags = ((ScreenEffectFlagsOptions)(0));
                this.EmptyString10 = new byte[32];
                this.ScreenEffect = TagReference.Null;
                this.EmptyString11 = new byte[32];
                this.ScreenEffectFlags1 = ((ScreenEffectFlagsOptions1)(0));
                this.EmptyString12 = new byte[32];
                this.ScreenEffect1 = TagReference.Null;
                this.EmptyString13 = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(4);
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(16);
                this.MaskFullscreen = reader.Read<TagReference>();
                this.MaskSplitscreen = reader.Read<TagReference>();
                this.EmptyString3 = reader.ReadBytes(8);
                this.EmptyString4 = reader.ReadBytes(20);
                this.EmptyString5 = reader.ReadBytes(24);
                this.EmptyString6 = reader.ReadBytes(8);
                this.EmptyString7 = reader.ReadBytes(24);
                this.EmptyString8 = reader.ReadBytes(20);
                this.EmptyString9 = reader.ReadBytes(24);
                this.ScreenEffectFlags = ((ScreenEffectFlagsOptions)(reader.ReadInt32()));
                this.EmptyString10 = reader.ReadBytes(32);
                this.ScreenEffect = reader.Read<TagReference>();
                this.EmptyString11 = reader.ReadBytes(32);
                this.ScreenEffectFlags1 = ((ScreenEffectFlagsOptions1)(reader.ReadInt32()));
                this.EmptyString12 = reader.ReadBytes(32);
                this.ScreenEffect1 = reader.Read<TagReference>();
                this.EmptyString13 = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                OnlyWhenZoomed = 1,
                MirrorHorizontally = 2,
                MirrorVertically = 4,
                UseNewHotness = 8,
            }
            public enum ScreenEffectFlagsOptions : Int32
            {
                OnlyWhenZoomed = 1,
            }
            public enum ScreenEffectFlagsOptions1 : Int32
            {
                OnlyWhenZoomed = 1,
            }
        }
        public enum FlagsOptions : Int16
        {
            UseParentHudFlashingParameters = 1,
        }
        public enum AnchorOptions : Int16
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        public enum FlagsOptions1 : Byte
        {
            UseTextFromStringListInstead = 1,
            OverrideDefaultColor = 2,
            WidthOffsetIsAbsoluteIconWidth = 4,
        }
    }
}
#pragma warning restore CS1591
