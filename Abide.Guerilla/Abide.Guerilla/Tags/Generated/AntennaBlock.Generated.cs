#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(180, 4)]
    [TagGroupAttribute("antenna", 1634628641u, 4294967293u, typeof(AntennaBlock))]
    public sealed class AntennaBlock : AbideTagBlock
    {
        private TagBlockList<AntennaVertexBlock> verticesList = new TagBlockList<AntennaVertexBlock>(20);
        [FieldAttribute("attachment marker name#the marker name where the antenna should be attached", typeof(StringId))]
        public StringId AttachmentMarkerName;
        [FieldAttribute("bitmaps", typeof(TagReference))]
        public TagReference Bitmaps;
        [FieldAttribute("physics", typeof(TagReference))]
        public TagReference Physics;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(80)]
        public Byte[] EmptyString;
        [FieldAttribute("spring strength coefficient#strength of the spring (larger values make the spring" +
            " stronger)", typeof(Single))]
        public Single SpringStrengthCoefficient;
        [FieldAttribute("falloff pixels", typeof(Single))]
        public Single FalloffPixels;
        [FieldAttribute("cutoff pixels", typeof(Single))]
        public Single CutoffPixels;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(40)]
        public Byte[] EmptyString1;
        [FieldAttribute("vertices", typeof(TagBlock))]
        [BlockAttribute("antenna_vertex_block", 20, typeof(AntennaVertexBlock))]
        public TagBlock Vertices;
        public TagBlockList<AntennaVertexBlock> VerticesList
        {
            get
            {
                return this.verticesList;
            }
        }
        public override int Size
        {
            get
            {
                return 180;
            }
        }
        public override void Initialize()
        {
            this.verticesList.Clear();
            this.AttachmentMarkerName = StringId.Zero;
            this.Bitmaps = TagReference.Null;
            this.Physics = TagReference.Null;
            this.EmptyString = new byte[80];
            this.SpringStrengthCoefficient = 0;
            this.FalloffPixels = 0;
            this.CutoffPixels = 0;
            this.EmptyString1 = new byte[40];
            this.Vertices = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.AttachmentMarkerName = reader.ReadInt32();
            this.Bitmaps = reader.Read<TagReference>();
            this.Physics = reader.Read<TagReference>();
            this.EmptyString = reader.ReadBytes(80);
            this.SpringStrengthCoefficient = reader.ReadSingle();
            this.FalloffPixels = reader.ReadSingle();
            this.CutoffPixels = reader.ReadSingle();
            this.EmptyString1 = reader.ReadBytes(40);
            this.Vertices = reader.ReadInt64();
            this.verticesList.Read(reader, this.Vertices);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(128, 4)]
        public sealed class AntennaVertexBlock : AbideTagBlock
        {
            [FieldAttribute("spring strength coefficient#strength of the spring (larger values make the spring" +
                " stronger)", typeof(Single))]
            public Single SpringStrengthCoefficient;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString;
            [FieldAttribute("angles#direction toward next vertex", typeof(Vector2))]
            public Vector2 Angles;
            [FieldAttribute("length:world units#distance between this vertex and the next", typeof(Single))]
            public Single Length;
            [FieldAttribute("sequence index#bitmap group sequence index for this vertex\'s texture", typeof(Int16))]
            public Int16 SequenceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("color#color at this vertex", typeof(ColorArgbF))]
            public ColorArgbF Color;
            [FieldAttribute("LOD color#color at this vertex for the low-LOD line primitives", typeof(ColorArgbF))]
            public ColorArgbF LodColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(40)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString3;
            public override int Size
            {
                get
                {
                    return 128;
                }
            }
            public override void Initialize()
            {
                this.SpringStrengthCoefficient = 0;
                this.EmptyString = new byte[24];
                this.Angles = Vector2.Zero;
                this.Length = 0;
                this.SequenceIndex = 0;
                this.EmptyString1 = new byte[2];
                this.Color = ColorArgbF.Zero;
                this.LodColor = ColorArgbF.Zero;
                this.EmptyString2 = new byte[40];
                this.EmptyString3 = new byte[12];
            }
            public override void Read(BinaryReader reader)
            {
                this.SpringStrengthCoefficient = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(24);
                this.Angles = reader.Read<Vector2>();
                this.Length = reader.ReadSingle();
                this.SequenceIndex = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(2);
                this.Color = reader.Read<ColorArgbF>();
                this.LodColor = reader.Read<ColorArgbF>();
                this.EmptyString2 = reader.ReadBytes(40);
                this.EmptyString3 = reader.ReadBytes(12);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
    }
}
#pragma warning restore CS1591
