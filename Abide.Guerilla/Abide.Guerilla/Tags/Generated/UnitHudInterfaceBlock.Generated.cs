#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(1404, 4)]
    [TagGroupAttribute("unit_hud_interface", 1970169961u, 4294967293u, typeof(UnitHudInterfaceBlock))]
    public sealed class UnitHudInterfaceBlock : AbideTagBlock
    {
        private TagBlockList<GlobalHudMultitextureOverlayDefinition> multitexOverlayList = new TagBlockList<GlobalHudMultitextureOverlayDefinition>(30);
        private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
        private TagBlockList<UnitHudAuxilaryOverlayBlock> overlaysList = new TagBlockList<UnitHudAuxilaryOverlayBlock>(16);
        private TagBlockList<UnitHudSoundBlock> soundsList = new TagBlockList<UnitHudSoundBlock>(12);
        private TagBlockList<UnitHudAuxilaryPanelBlock> metersList = new TagBlockList<UnitHudAuxilaryPanelBlock>(16);
        [FieldAttribute("anchor", typeof(AnchorOptions))]
        [OptionsAttribute(typeof(AnchorOptions), false)]
        public AnchorOptions Anchor;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString1;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
        [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
        public ScalingFlagsOptions ScalingFlags;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString3;
        [FieldAttribute("interface bitmap", typeof(TagReference))]
        public TagReference InterfaceBitmap;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
        [OptionsAttribute(typeof(FlashFlagsOptions), true)]
        public FlashFlagsOptions FlashFlags;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString4;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString5;
        [FieldAttribute("multitex overlay", typeof(TagBlock))]
        [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
        public TagBlock MultitexOverlay;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString6;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset1;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale1;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale1;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions1))]
        [OptionsAttribute(typeof(ScalingFlagsOptions1), true)]
        public ScalingFlagsOptions1 ScalingFlags1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString7;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString8;
        [FieldAttribute("interface bitmap", typeof(TagReference))]
        public TagReference InterfaceBitmap1;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor1;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor1;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod1;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay1;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes1;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions1))]
        [OptionsAttribute(typeof(FlashFlagsOptions1), true)]
        public FlashFlagsOptions1 FlashFlags1;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength1;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString9;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString10;
        [FieldAttribute("multitex overlay", typeof(TagBlock))]
        [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
        public TagBlock MultitexOverlay1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString11;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset2;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale2;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale2;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions2))]
        [OptionsAttribute(typeof(ScalingFlagsOptions2), true)]
        public ScalingFlagsOptions2 ScalingFlags2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString12;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString13;
        [FieldAttribute("meter bitmap", typeof(TagReference))]
        public TagReference MeterBitmap;
        [FieldAttribute("color at meter minimum", typeof(ColorRgb))]
        public ColorRgb ColorAtMeterMinimum;
        [FieldAttribute("color at meter maximum", typeof(ColorRgb))]
        public ColorRgb ColorAtMeterMaximum;
        [FieldAttribute("flash color", typeof(ColorRgb))]
        public ColorRgb FlashColor;
        [FieldAttribute("empty color", typeof(ColorArgb))]
        public ColorArgb EmptyColor;
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("minumum meter value", typeof(Byte))]
        public Byte MinumumMeterValue;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex2;
        [FieldAttribute("alpha multiplier", typeof(Byte))]
        public Byte AlphaMultiplier;
        [FieldAttribute("alpha bias", typeof(Byte))]
        public Byte AlphaBias;
        [FieldAttribute("value scale#used for non-integral values, i.e. health and shields", typeof(Int16))]
        public Int16 ValueScale;
        [FieldAttribute("opacity", typeof(Single))]
        public Single Opacity;
        [FieldAttribute("translucency", typeof(Single))]
        public Single Translucency;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor2;
        [FieldAttribute("", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString14;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString15;
        [FieldAttribute("overcharge minimum color", typeof(ColorRgb))]
        public ColorRgb OverchargeMinimumColor;
        [FieldAttribute("overcharge maximum color", typeof(ColorRgb))]
        public ColorRgb OverchargeMaximumColor;
        [FieldAttribute("overcharge flash color", typeof(ColorRgb))]
        public ColorRgb OverchargeFlashColor;
        [FieldAttribute("overcharge empty color", typeof(ColorRgb))]
        public ColorRgb OverchargeEmptyColor;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(16)]
        public Byte[] EmptyString16;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset3;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale3;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale3;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions3))]
        [OptionsAttribute(typeof(ScalingFlagsOptions3), true)]
        public ScalingFlagsOptions3 ScalingFlags3;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString17;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString18;
        [FieldAttribute("interface bitmap", typeof(TagReference))]
        public TagReference InterfaceBitmap2;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor2;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor2;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod2;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay2;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes2;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions2))]
        [OptionsAttribute(typeof(FlashFlagsOptions2), true)]
        public FlashFlagsOptions2 FlashFlags2;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength2;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor3;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString19;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex3;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString20;
        [FieldAttribute("multitex overlay", typeof(TagBlock))]
        [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
        public TagBlock MultitexOverlay2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString21;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset4;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale4;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale4;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions4))]
        [OptionsAttribute(typeof(ScalingFlagsOptions4), true)]
        public ScalingFlagsOptions4 ScalingFlags4;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString22;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString23;
        [FieldAttribute("meter bitmap", typeof(TagReference))]
        public TagReference MeterBitmap1;
        [FieldAttribute("color at meter minimum", typeof(ColorRgb))]
        public ColorRgb ColorAtMeterMinimum1;
        [FieldAttribute("color at meter maximum", typeof(ColorRgb))]
        public ColorRgb ColorAtMeterMaximum1;
        [FieldAttribute("flash color", typeof(ColorRgb))]
        public ColorRgb FlashColor1;
        [FieldAttribute("empty color", typeof(ColorArgb))]
        public ColorArgb EmptyColor1;
        [FieldAttribute("flags", typeof(FlagsOptions1))]
        [OptionsAttribute(typeof(FlagsOptions1), true)]
        public FlagsOptions1 Flags1;
        [FieldAttribute("minumum meter value", typeof(Byte))]
        public Byte MinumumMeterValue1;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex4;
        [FieldAttribute("alpha multiplier", typeof(Byte))]
        public Byte AlphaMultiplier1;
        [FieldAttribute("alpha bias", typeof(Byte))]
        public Byte AlphaBias1;
        [FieldAttribute("value scale#used for non-integral values, i.e. health and shields", typeof(Int16))]
        public Int16 ValueScale1;
        [FieldAttribute("opacity", typeof(Single))]
        public Single Opacity1;
        [FieldAttribute("translucency", typeof(Single))]
        public Single Translucency1;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor4;
        [FieldAttribute("", typeof(TagBlock))]
        [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString24;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString25;
        [FieldAttribute("medium health left color", typeof(ColorRgb))]
        public ColorRgb MediumHealthLeftColor;
        [FieldAttribute("max color health fraction cutoff", typeof(Single))]
        public Single MaxColorHealthFractionCutoff;
        [FieldAttribute("min color health fraction cutoff", typeof(Single))]
        public Single MinColorHealthFractionCutoff;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString26;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset5;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale5;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale5;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions5))]
        [OptionsAttribute(typeof(ScalingFlagsOptions5), true)]
        public ScalingFlagsOptions5 ScalingFlags5;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString27;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString28;
        [FieldAttribute("interface bitmap", typeof(TagReference))]
        public TagReference InterfaceBitmap3;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor3;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor3;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod3;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay3;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes3;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions3))]
        [OptionsAttribute(typeof(FlashFlagsOptions3), true)]
        public FlashFlagsOptions3 FlashFlags3;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength3;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor5;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString29;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex5;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString30;
        [FieldAttribute("multitex overlay", typeof(TagBlock))]
        [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
        public TagBlock MultitexOverlay3;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString31;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset6;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale6;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale6;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions6))]
        [OptionsAttribute(typeof(ScalingFlagsOptions6), true)]
        public ScalingFlagsOptions6 ScalingFlags6;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString32;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString33;
        [FieldAttribute("interface bitmap", typeof(TagReference))]
        public TagReference InterfaceBitmap4;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor4;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor4;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod4;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay4;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes4;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions4))]
        [OptionsAttribute(typeof(FlashFlagsOptions4), true)]
        public FlashFlagsOptions4 FlashFlags4;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength4;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor6;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString34;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex6;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString35;
        [FieldAttribute("multitex overlay", typeof(TagBlock))]
        [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
        public TagBlock MultitexOverlay4;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString36;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString37;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset7;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale7;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale7;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions7))]
        [OptionsAttribute(typeof(ScalingFlagsOptions7), true)]
        public ScalingFlagsOptions7 ScalingFlags7;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString38;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString39;
        [FieldAttribute("anchor", typeof(AnchorOptions1))]
        [OptionsAttribute(typeof(AnchorOptions1), false)]
        public AnchorOptions1 Anchor1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString40;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString41;
        [FieldAttribute("overlays", typeof(TagBlock))]
        [BlockAttribute("unit_hud_auxilary_overlay_block", 16, typeof(UnitHudAuxilaryOverlayBlock))]
        public TagBlock Overlays;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(16)]
        public Byte[] EmptyString42;
        [FieldAttribute("sounds", typeof(TagBlock))]
        [BlockAttribute("unit_hud_sound_block", 12, typeof(UnitHudSoundBlock))]
        public TagBlock Sounds;
        [FieldAttribute("meters", typeof(TagBlock))]
        [BlockAttribute("unit_hud_auxilary_panel_block", 16, typeof(UnitHudAuxilaryPanelBlock))]
        public TagBlock Meters;
        [FieldAttribute("new hud", typeof(TagReference))]
        public TagReference NewHud;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(356)]
        public Byte[] EmptyString43;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(48)]
        public Byte[] EmptyString44;
        public TagBlockList<GlobalHudMultitextureOverlayDefinition> MultitexOverlayList
        {
            get
            {
                return this.multitexOverlayList;
            }
        }
        public TagBlockList<GNullBlock> EmptyStringList
        {
            get
            {
                return this.emptyStringList;
            }
        }
        public TagBlockList<UnitHudAuxilaryOverlayBlock> OverlaysList
        {
            get
            {
                return this.overlaysList;
            }
        }
        public TagBlockList<UnitHudSoundBlock> SoundsList
        {
            get
            {
                return this.soundsList;
            }
        }
        public TagBlockList<UnitHudAuxilaryPanelBlock> MetersList
        {
            get
            {
                return this.metersList;
            }
        }
        public override int Size
        {
            get
            {
                return 1404;
            }
        }
        public override void Initialize()
        {
            this.multitexOverlayList.Clear();
            this.emptyStringList.Clear();
            this.overlaysList.Clear();
            this.soundsList.Clear();
            this.metersList.Clear();
            this.Anchor = ((AnchorOptions)(0));
            this.EmptyString = new byte[2];
            this.EmptyString1 = new byte[32];
            this.AnchorOffset = Vector2.Zero;
            this.WidthScale = 0;
            this.HeightScale = 0;
            this.ScalingFlags = ((ScalingFlagsOptions)(0));
            this.EmptyString2 = new byte[2];
            this.EmptyString3 = new byte[20];
            this.InterfaceBitmap = TagReference.Null;
            this.DefaultColor = ColorArgb.Zero;
            this.FlashingColor = ColorArgb.Zero;
            this.FlashPeriod = 0;
            this.FlashDelay = 0;
            this.NumberOfFlashes = 0;
            this.FlashFlags = ((FlashFlagsOptions)(0));
            this.FlashLength = 0;
            this.DisabledColor = ColorArgb.Zero;
            this.EmptyString4 = new byte[4];
            this.SequenceIndex = 0;
            this.EmptyString5 = new byte[2];
            this.MultitexOverlay = TagBlock.Zero;
            this.EmptyString6 = new byte[4];
            this.AnchorOffset1 = Vector2.Zero;
            this.WidthScale1 = 0;
            this.HeightScale1 = 0;
            this.ScalingFlags1 = ((ScalingFlagsOptions1)(0));
            this.EmptyString7 = new byte[2];
            this.EmptyString8 = new byte[20];
            this.InterfaceBitmap1 = TagReference.Null;
            this.DefaultColor1 = ColorArgb.Zero;
            this.FlashingColor1 = ColorArgb.Zero;
            this.FlashPeriod1 = 0;
            this.FlashDelay1 = 0;
            this.NumberOfFlashes1 = 0;
            this.FlashFlags1 = ((FlashFlagsOptions1)(0));
            this.FlashLength1 = 0;
            this.DisabledColor1 = ColorArgb.Zero;
            this.EmptyString9 = new byte[4];
            this.SequenceIndex1 = 0;
            this.EmptyString10 = new byte[2];
            this.MultitexOverlay1 = TagBlock.Zero;
            this.EmptyString11 = new byte[4];
            this.AnchorOffset2 = Vector2.Zero;
            this.WidthScale2 = 0;
            this.HeightScale2 = 0;
            this.ScalingFlags2 = ((ScalingFlagsOptions2)(0));
            this.EmptyString12 = new byte[2];
            this.EmptyString13 = new byte[20];
            this.MeterBitmap = TagReference.Null;
            this.ColorAtMeterMinimum = ColorRgb.Zero;
            this.ColorAtMeterMaximum = ColorRgb.Zero;
            this.FlashColor = ColorRgb.Zero;
            this.EmptyColor = ColorArgb.Zero;
            this.Flags = ((FlagsOptions)(0));
            this.MinumumMeterValue = 0;
            this.SequenceIndex2 = 0;
            this.AlphaMultiplier = 0;
            this.AlphaBias = 0;
            this.ValueScale = 0;
            this.Opacity = 0;
            this.Translucency = 0;
            this.DisabledColor2 = ColorArgb.Zero;
            this.EmptyString14 = TagBlock.Zero;
            this.EmptyString15 = new byte[4];
            this.OverchargeMinimumColor = ColorRgb.Zero;
            this.OverchargeMaximumColor = ColorRgb.Zero;
            this.OverchargeFlashColor = ColorRgb.Zero;
            this.OverchargeEmptyColor = ColorRgb.Zero;
            this.EmptyString16 = new byte[16];
            this.AnchorOffset3 = Vector2.Zero;
            this.WidthScale3 = 0;
            this.HeightScale3 = 0;
            this.ScalingFlags3 = ((ScalingFlagsOptions3)(0));
            this.EmptyString17 = new byte[2];
            this.EmptyString18 = new byte[20];
            this.InterfaceBitmap2 = TagReference.Null;
            this.DefaultColor2 = ColorArgb.Zero;
            this.FlashingColor2 = ColorArgb.Zero;
            this.FlashPeriod2 = 0;
            this.FlashDelay2 = 0;
            this.NumberOfFlashes2 = 0;
            this.FlashFlags2 = ((FlashFlagsOptions2)(0));
            this.FlashLength2 = 0;
            this.DisabledColor3 = ColorArgb.Zero;
            this.EmptyString19 = new byte[4];
            this.SequenceIndex3 = 0;
            this.EmptyString20 = new byte[2];
            this.MultitexOverlay2 = TagBlock.Zero;
            this.EmptyString21 = new byte[4];
            this.AnchorOffset4 = Vector2.Zero;
            this.WidthScale4 = 0;
            this.HeightScale4 = 0;
            this.ScalingFlags4 = ((ScalingFlagsOptions4)(0));
            this.EmptyString22 = new byte[2];
            this.EmptyString23 = new byte[20];
            this.MeterBitmap1 = TagReference.Null;
            this.ColorAtMeterMinimum1 = ColorRgb.Zero;
            this.ColorAtMeterMaximum1 = ColorRgb.Zero;
            this.FlashColor1 = ColorRgb.Zero;
            this.EmptyColor1 = ColorArgb.Zero;
            this.Flags1 = ((FlagsOptions1)(0));
            this.MinumumMeterValue1 = 0;
            this.SequenceIndex4 = 0;
            this.AlphaMultiplier1 = 0;
            this.AlphaBias1 = 0;
            this.ValueScale1 = 0;
            this.Opacity1 = 0;
            this.Translucency1 = 0;
            this.DisabledColor4 = ColorArgb.Zero;
            this.EmptyString24 = TagBlock.Zero;
            this.EmptyString25 = new byte[4];
            this.MediumHealthLeftColor = ColorRgb.Zero;
            this.MaxColorHealthFractionCutoff = 0;
            this.MinColorHealthFractionCutoff = 0;
            this.EmptyString26 = new byte[20];
            this.AnchorOffset5 = Vector2.Zero;
            this.WidthScale5 = 0;
            this.HeightScale5 = 0;
            this.ScalingFlags5 = ((ScalingFlagsOptions5)(0));
            this.EmptyString27 = new byte[2];
            this.EmptyString28 = new byte[20];
            this.InterfaceBitmap3 = TagReference.Null;
            this.DefaultColor3 = ColorArgb.Zero;
            this.FlashingColor3 = ColorArgb.Zero;
            this.FlashPeriod3 = 0;
            this.FlashDelay3 = 0;
            this.NumberOfFlashes3 = 0;
            this.FlashFlags3 = ((FlashFlagsOptions3)(0));
            this.FlashLength3 = 0;
            this.DisabledColor5 = ColorArgb.Zero;
            this.EmptyString29 = new byte[4];
            this.SequenceIndex5 = 0;
            this.EmptyString30 = new byte[2];
            this.MultitexOverlay3 = TagBlock.Zero;
            this.EmptyString31 = new byte[4];
            this.AnchorOffset6 = Vector2.Zero;
            this.WidthScale6 = 0;
            this.HeightScale6 = 0;
            this.ScalingFlags6 = ((ScalingFlagsOptions6)(0));
            this.EmptyString32 = new byte[2];
            this.EmptyString33 = new byte[20];
            this.InterfaceBitmap4 = TagReference.Null;
            this.DefaultColor4 = ColorArgb.Zero;
            this.FlashingColor4 = ColorArgb.Zero;
            this.FlashPeriod4 = 0;
            this.FlashDelay4 = 0;
            this.NumberOfFlashes4 = 0;
            this.FlashFlags4 = ((FlashFlagsOptions4)(0));
            this.FlashLength4 = 0;
            this.DisabledColor6 = ColorArgb.Zero;
            this.EmptyString34 = new byte[4];
            this.SequenceIndex6 = 0;
            this.EmptyString35 = new byte[2];
            this.MultitexOverlay4 = TagBlock.Zero;
            this.EmptyString36 = new byte[4];
            this.EmptyString37 = new byte[32];
            this.AnchorOffset7 = Vector2.Zero;
            this.WidthScale7 = 0;
            this.HeightScale7 = 0;
            this.ScalingFlags7 = ((ScalingFlagsOptions7)(0));
            this.EmptyString38 = new byte[2];
            this.EmptyString39 = new byte[20];
            this.Anchor1 = ((AnchorOptions1)(0));
            this.EmptyString40 = new byte[2];
            this.EmptyString41 = new byte[32];
            this.Overlays = TagBlock.Zero;
            this.EmptyString42 = new byte[16];
            this.Sounds = TagBlock.Zero;
            this.Meters = TagBlock.Zero;
            this.NewHud = TagReference.Null;
            this.EmptyString43 = new byte[356];
            this.EmptyString44 = new byte[48];
        }
        public override void Read(BinaryReader reader)
        {
            this.Anchor = ((AnchorOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.EmptyString1 = reader.ReadBytes(32);
            this.AnchorOffset = reader.Read<Vector2>();
            this.WidthScale = reader.ReadSingle();
            this.HeightScale = reader.ReadSingle();
            this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
            this.EmptyString2 = reader.ReadBytes(2);
            this.EmptyString3 = reader.ReadBytes(20);
            this.InterfaceBitmap = reader.Read<TagReference>();
            this.DefaultColor = reader.Read<ColorArgb>();
            this.FlashingColor = reader.Read<ColorArgb>();
            this.FlashPeriod = reader.ReadSingle();
            this.FlashDelay = reader.ReadSingle();
            this.NumberOfFlashes = reader.ReadInt16();
            this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
            this.FlashLength = reader.ReadSingle();
            this.DisabledColor = reader.Read<ColorArgb>();
            this.EmptyString4 = reader.ReadBytes(4);
            this.SequenceIndex = reader.ReadInt16();
            this.EmptyString5 = reader.ReadBytes(2);
            this.MultitexOverlay = reader.ReadInt64();
            this.multitexOverlayList.Read(reader, this.MultitexOverlay);
            this.EmptyString6 = reader.ReadBytes(4);
            this.AnchorOffset1 = reader.Read<Vector2>();
            this.WidthScale1 = reader.ReadSingle();
            this.HeightScale1 = reader.ReadSingle();
            this.ScalingFlags1 = ((ScalingFlagsOptions1)(reader.ReadInt16()));
            this.EmptyString7 = reader.ReadBytes(2);
            this.EmptyString8 = reader.ReadBytes(20);
            this.InterfaceBitmap1 = reader.Read<TagReference>();
            this.DefaultColor1 = reader.Read<ColorArgb>();
            this.FlashingColor1 = reader.Read<ColorArgb>();
            this.FlashPeriod1 = reader.ReadSingle();
            this.FlashDelay1 = reader.ReadSingle();
            this.NumberOfFlashes1 = reader.ReadInt16();
            this.FlashFlags1 = ((FlashFlagsOptions1)(reader.ReadInt16()));
            this.FlashLength1 = reader.ReadSingle();
            this.DisabledColor1 = reader.Read<ColorArgb>();
            this.EmptyString9 = reader.ReadBytes(4);
            this.SequenceIndex1 = reader.ReadInt16();
            this.EmptyString10 = reader.ReadBytes(2);
            this.MultitexOverlay1 = reader.ReadInt64();
            this.multitexOverlayList.Read(reader, this.MultitexOverlay1);
            this.EmptyString11 = reader.ReadBytes(4);
            this.AnchorOffset2 = reader.Read<Vector2>();
            this.WidthScale2 = reader.ReadSingle();
            this.HeightScale2 = reader.ReadSingle();
            this.ScalingFlags2 = ((ScalingFlagsOptions2)(reader.ReadInt16()));
            this.EmptyString12 = reader.ReadBytes(2);
            this.EmptyString13 = reader.ReadBytes(20);
            this.MeterBitmap = reader.Read<TagReference>();
            this.ColorAtMeterMinimum = reader.Read<ColorRgb>();
            this.ColorAtMeterMaximum = reader.Read<ColorRgb>();
            this.FlashColor = reader.Read<ColorRgb>();
            this.EmptyColor = reader.Read<ColorArgb>();
            this.Flags = ((FlagsOptions)(reader.ReadByte()));
            this.MinumumMeterValue = reader.ReadByte();
            this.SequenceIndex2 = reader.ReadInt16();
            this.AlphaMultiplier = reader.ReadByte();
            this.AlphaBias = reader.ReadByte();
            this.ValueScale = reader.ReadInt16();
            this.Opacity = reader.ReadSingle();
            this.Translucency = reader.ReadSingle();
            this.DisabledColor2 = reader.Read<ColorArgb>();
            this.EmptyString14 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString14);
            this.EmptyString15 = reader.ReadBytes(4);
            this.OverchargeMinimumColor = reader.Read<ColorRgb>();
            this.OverchargeMaximumColor = reader.Read<ColorRgb>();
            this.OverchargeFlashColor = reader.Read<ColorRgb>();
            this.OverchargeEmptyColor = reader.Read<ColorRgb>();
            this.EmptyString16 = reader.ReadBytes(16);
            this.AnchorOffset3 = reader.Read<Vector2>();
            this.WidthScale3 = reader.ReadSingle();
            this.HeightScale3 = reader.ReadSingle();
            this.ScalingFlags3 = ((ScalingFlagsOptions3)(reader.ReadInt16()));
            this.EmptyString17 = reader.ReadBytes(2);
            this.EmptyString18 = reader.ReadBytes(20);
            this.InterfaceBitmap2 = reader.Read<TagReference>();
            this.DefaultColor2 = reader.Read<ColorArgb>();
            this.FlashingColor2 = reader.Read<ColorArgb>();
            this.FlashPeriod2 = reader.ReadSingle();
            this.FlashDelay2 = reader.ReadSingle();
            this.NumberOfFlashes2 = reader.ReadInt16();
            this.FlashFlags2 = ((FlashFlagsOptions2)(reader.ReadInt16()));
            this.FlashLength2 = reader.ReadSingle();
            this.DisabledColor3 = reader.Read<ColorArgb>();
            this.EmptyString19 = reader.ReadBytes(4);
            this.SequenceIndex3 = reader.ReadInt16();
            this.EmptyString20 = reader.ReadBytes(2);
            this.MultitexOverlay2 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.MultitexOverlay2);
            this.EmptyString21 = reader.ReadBytes(4);
            this.AnchorOffset4 = reader.Read<Vector2>();
            this.WidthScale4 = reader.ReadSingle();
            this.HeightScale4 = reader.ReadSingle();
            this.ScalingFlags4 = ((ScalingFlagsOptions4)(reader.ReadInt16()));
            this.EmptyString22 = reader.ReadBytes(2);
            this.EmptyString23 = reader.ReadBytes(20);
            this.MeterBitmap1 = reader.Read<TagReference>();
            this.ColorAtMeterMinimum1 = reader.Read<ColorRgb>();
            this.ColorAtMeterMaximum1 = reader.Read<ColorRgb>();
            this.FlashColor1 = reader.Read<ColorRgb>();
            this.EmptyColor1 = reader.Read<ColorArgb>();
            this.Flags1 = ((FlagsOptions1)(reader.ReadByte()));
            this.MinumumMeterValue1 = reader.ReadByte();
            this.SequenceIndex4 = reader.ReadInt16();
            this.AlphaMultiplier1 = reader.ReadByte();
            this.AlphaBias1 = reader.ReadByte();
            this.ValueScale1 = reader.ReadInt16();
            this.Opacity1 = reader.ReadSingle();
            this.Translucency1 = reader.ReadSingle();
            this.DisabledColor4 = reader.Read<ColorArgb>();
            this.EmptyString24 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.EmptyString24);
            this.EmptyString25 = reader.ReadBytes(4);
            this.MediumHealthLeftColor = reader.Read<ColorRgb>();
            this.MaxColorHealthFractionCutoff = reader.ReadSingle();
            this.MinColorHealthFractionCutoff = reader.ReadSingle();
            this.EmptyString26 = reader.ReadBytes(20);
            this.AnchorOffset5 = reader.Read<Vector2>();
            this.WidthScale5 = reader.ReadSingle();
            this.HeightScale5 = reader.ReadSingle();
            this.ScalingFlags5 = ((ScalingFlagsOptions5)(reader.ReadInt16()));
            this.EmptyString27 = reader.ReadBytes(2);
            this.EmptyString28 = reader.ReadBytes(20);
            this.InterfaceBitmap3 = reader.Read<TagReference>();
            this.DefaultColor3 = reader.Read<ColorArgb>();
            this.FlashingColor3 = reader.Read<ColorArgb>();
            this.FlashPeriod3 = reader.ReadSingle();
            this.FlashDelay3 = reader.ReadSingle();
            this.NumberOfFlashes3 = reader.ReadInt16();
            this.FlashFlags3 = ((FlashFlagsOptions3)(reader.ReadInt16()));
            this.FlashLength3 = reader.ReadSingle();
            this.DisabledColor5 = reader.Read<ColorArgb>();
            this.EmptyString29 = reader.ReadBytes(4);
            this.SequenceIndex5 = reader.ReadInt16();
            this.EmptyString30 = reader.ReadBytes(2);
            this.MultitexOverlay3 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.MultitexOverlay3);
            this.EmptyString31 = reader.ReadBytes(4);
            this.AnchorOffset6 = reader.Read<Vector2>();
            this.WidthScale6 = reader.ReadSingle();
            this.HeightScale6 = reader.ReadSingle();
            this.ScalingFlags6 = ((ScalingFlagsOptions6)(reader.ReadInt16()));
            this.EmptyString32 = reader.ReadBytes(2);
            this.EmptyString33 = reader.ReadBytes(20);
            this.InterfaceBitmap4 = reader.Read<TagReference>();
            this.DefaultColor4 = reader.Read<ColorArgb>();
            this.FlashingColor4 = reader.Read<ColorArgb>();
            this.FlashPeriod4 = reader.ReadSingle();
            this.FlashDelay4 = reader.ReadSingle();
            this.NumberOfFlashes4 = reader.ReadInt16();
            this.FlashFlags4 = ((FlashFlagsOptions4)(reader.ReadInt16()));
            this.FlashLength4 = reader.ReadSingle();
            this.DisabledColor6 = reader.Read<ColorArgb>();
            this.EmptyString34 = reader.ReadBytes(4);
            this.SequenceIndex6 = reader.ReadInt16();
            this.EmptyString35 = reader.ReadBytes(2);
            this.MultitexOverlay4 = reader.ReadInt64();
            this.emptyStringList.Read(reader, this.MultitexOverlay4);
            this.EmptyString36 = reader.ReadBytes(4);
            this.EmptyString37 = reader.ReadBytes(32);
            this.AnchorOffset7 = reader.Read<Vector2>();
            this.WidthScale7 = reader.ReadSingle();
            this.HeightScale7 = reader.ReadSingle();
            this.ScalingFlags7 = ((ScalingFlagsOptions7)(reader.ReadInt16()));
            this.EmptyString38 = reader.ReadBytes(2);
            this.EmptyString39 = reader.ReadBytes(20);
            this.Anchor1 = ((AnchorOptions1)(reader.ReadInt16()));
            this.EmptyString40 = reader.ReadBytes(2);
            this.EmptyString41 = reader.ReadBytes(32);
            this.Overlays = reader.ReadInt64();
            this.overlaysList.Read(reader, this.Overlays);
            this.EmptyString42 = reader.ReadBytes(16);
            this.Sounds = reader.ReadInt64();
            this.soundsList.Read(reader, this.Sounds);
            this.Meters = reader.ReadInt64();
            this.metersList.Read(reader, this.Meters);
            this.NewHud = reader.Read<TagReference>();
            this.EmptyString43 = reader.ReadBytes(356);
            this.EmptyString44 = reader.ReadBytes(48);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(480, 4)]
        public sealed class GlobalHudMultitextureOverlayDefinition : AbideTagBlock
        {
            private TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> effectorsList = new TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition>(30);
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("framebuffer blend func", typeof(FramebufferBlendFuncOptions))]
            [OptionsAttribute(typeof(FramebufferBlendFuncOptions), false)]
            public FramebufferBlendFuncOptions FramebufferBlendFunc;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString2;
            [FieldAttribute("primary anchor", typeof(PrimaryAnchorOptions))]
            [OptionsAttribute(typeof(PrimaryAnchorOptions), false)]
            public PrimaryAnchorOptions PrimaryAnchor;
            [FieldAttribute("secondary anchor", typeof(SecondaryAnchorOptions))]
            [OptionsAttribute(typeof(SecondaryAnchorOptions), false)]
            public SecondaryAnchorOptions SecondaryAnchor;
            [FieldAttribute("tertiary anchor", typeof(TertiaryAnchorOptions))]
            [OptionsAttribute(typeof(TertiaryAnchorOptions), false)]
            public TertiaryAnchorOptions TertiaryAnchor;
            [FieldAttribute("0 to 1 blend func", typeof(_0To1BlendFuncOptions))]
            [OptionsAttribute(typeof(_0To1BlendFuncOptions), false)]
            public _0To1BlendFuncOptions _0To1BlendFunc;
            [FieldAttribute("1 to 2 blend func", typeof(_1To2BlendFuncOptions))]
            [OptionsAttribute(typeof(_1To2BlendFuncOptions), false)]
            public _1To2BlendFuncOptions _1To2BlendFunc;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [FieldAttribute("primary scale", typeof(Vector2))]
            public Vector2 PrimaryScale;
            [FieldAttribute("secondary scale", typeof(Vector2))]
            public Vector2 SecondaryScale;
            [FieldAttribute("tertiary scale", typeof(Vector2))]
            public Vector2 TertiaryScale;
            [FieldAttribute("primary offset", typeof(Vector2))]
            public Vector2 PrimaryOffset;
            [FieldAttribute("secondary offset", typeof(Vector2))]
            public Vector2 SecondaryOffset;
            [FieldAttribute("tertiary offset", typeof(Vector2))]
            public Vector2 TertiaryOffset;
            [FieldAttribute("primary", typeof(TagReference))]
            public TagReference Primary;
            [FieldAttribute("secondary", typeof(TagReference))]
            public TagReference Secondary;
            [FieldAttribute("tertiary", typeof(TagReference))]
            public TagReference Tertiary;
            [FieldAttribute("primary wrap mode", typeof(PrimaryWrapModeOptions))]
            [OptionsAttribute(typeof(PrimaryWrapModeOptions), false)]
            public PrimaryWrapModeOptions PrimaryWrapMode;
            [FieldAttribute("secondary wrap mode", typeof(SecondaryWrapModeOptions))]
            [OptionsAttribute(typeof(SecondaryWrapModeOptions), false)]
            public SecondaryWrapModeOptions SecondaryWrapMode;
            [FieldAttribute("tertiary wrap mode", typeof(TertiaryWrapModeOptions))]
            [OptionsAttribute(typeof(TertiaryWrapModeOptions), false)]
            public TertiaryWrapModeOptions TertiaryWrapMode;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(184)]
            public Byte[] EmptyString5;
            [FieldAttribute("effectors", typeof(TagBlock))]
            [BlockAttribute("global_hud_multitexture_overlay_effector_definition", 30, typeof(GlobalHudMultitextureOverlayEffectorDefinition))]
            public TagBlock Effectors;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(128)]
            public Byte[] EmptyString6;
            public TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> EffectorsList
            {
                get
                {
                    return this.effectorsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 480;
                }
            }
            public override void Initialize()
            {
                this.effectorsList.Clear();
                this.EmptyString = new byte[2];
                this.Type = 0;
                this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(0));
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[32];
                this.PrimaryAnchor = ((PrimaryAnchorOptions)(0));
                this.SecondaryAnchor = ((SecondaryAnchorOptions)(0));
                this.TertiaryAnchor = ((TertiaryAnchorOptions)(0));
                this._0To1BlendFunc = ((_0To1BlendFuncOptions)(0));
                this._1To2BlendFunc = ((_1To2BlendFuncOptions)(0));
                this.EmptyString3 = new byte[2];
                this.PrimaryScale = Vector2.Zero;
                this.SecondaryScale = Vector2.Zero;
                this.TertiaryScale = Vector2.Zero;
                this.PrimaryOffset = Vector2.Zero;
                this.SecondaryOffset = Vector2.Zero;
                this.TertiaryOffset = Vector2.Zero;
                this.Primary = TagReference.Null;
                this.Secondary = TagReference.Null;
                this.Tertiary = TagReference.Null;
                this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(0));
                this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(0));
                this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(0));
                this.EmptyString4 = new byte[2];
                this.EmptyString5 = new byte[184];
                this.Effectors = TagBlock.Zero;
                this.EmptyString6 = new byte[128];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(2);
                this.Type = reader.ReadInt16();
                this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(reader.ReadInt16()));
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(32);
                this.PrimaryAnchor = ((PrimaryAnchorOptions)(reader.ReadInt16()));
                this.SecondaryAnchor = ((SecondaryAnchorOptions)(reader.ReadInt16()));
                this.TertiaryAnchor = ((TertiaryAnchorOptions)(reader.ReadInt16()));
                this._0To1BlendFunc = ((_0To1BlendFuncOptions)(reader.ReadInt16()));
                this._1To2BlendFunc = ((_1To2BlendFuncOptions)(reader.ReadInt16()));
                this.EmptyString3 = reader.ReadBytes(2);
                this.PrimaryScale = reader.Read<Vector2>();
                this.SecondaryScale = reader.Read<Vector2>();
                this.TertiaryScale = reader.Read<Vector2>();
                this.PrimaryOffset = reader.Read<Vector2>();
                this.SecondaryOffset = reader.Read<Vector2>();
                this.TertiaryOffset = reader.Read<Vector2>();
                this.Primary = reader.Read<TagReference>();
                this.Secondary = reader.Read<TagReference>();
                this.Tertiary = reader.Read<TagReference>();
                this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(reader.ReadInt16()));
                this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(reader.ReadInt16()));
                this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(reader.ReadInt16()));
                this.EmptyString4 = reader.ReadBytes(2);
                this.EmptyString5 = reader.ReadBytes(184);
                this.Effectors = reader.ReadInt64();
                this.effectorsList.Read(reader, this.Effectors);
                this.EmptyString6 = reader.ReadBytes(128);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(220, 4)]
            public sealed class GlobalHudMultitextureOverlayEffectorDefinition : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(64)]
                public Byte[] EmptyString;
                [FieldAttribute("destination type", typeof(DestinationTypeOptions))]
                [OptionsAttribute(typeof(DestinationTypeOptions), false)]
                public DestinationTypeOptions DestinationType;
                [FieldAttribute("destination", typeof(DestinationOptions))]
                [OptionsAttribute(typeof(DestinationOptions), false)]
                public DestinationOptions Destination;
                [FieldAttribute("source", typeof(SourceOptions))]
                [OptionsAttribute(typeof(SourceOptions), false)]
                public SourceOptions Source;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(64)]
                public Byte[] EmptyString2;
                [FieldAttribute("tint color lower bound", typeof(ColorRgbF))]
                public ColorRgbF TintColorLowerBound;
                [FieldAttribute("tint color upper bound", typeof(ColorRgbF))]
                public ColorRgbF TintColorUpperBound;
                [FieldAttribute("periodic function", typeof(PeriodicFunctionOptions))]
                [OptionsAttribute(typeof(PeriodicFunctionOptions), false)]
                public PeriodicFunctionOptions PeriodicFunction;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [FieldAttribute("function period:seconds", typeof(Single))]
                public Single FunctionPeriod;
                [FieldAttribute("function phase:seconds", typeof(Single))]
                public Single FunctionPhase;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString4;
                public override int Size
                {
                    get
                    {
                        return 220;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[64];
                    this.DestinationType = ((DestinationTypeOptions)(0));
                    this.Destination = ((DestinationOptions)(0));
                    this.Source = ((SourceOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[64];
                    this.TintColorLowerBound = ColorRgbF.Zero;
                    this.TintColorUpperBound = ColorRgbF.Zero;
                    this.PeriodicFunction = ((PeriodicFunctionOptions)(0));
                    this.EmptyString3 = new byte[2];
                    this.FunctionPeriod = 0;
                    this.FunctionPhase = 0;
                    this.EmptyString4 = new byte[32];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(64);
                    this.DestinationType = ((DestinationTypeOptions)(reader.ReadInt16()));
                    this.Destination = ((DestinationOptions)(reader.ReadInt16()));
                    this.Source = ((SourceOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(64);
                    this.TintColorLowerBound = reader.Read<ColorRgbF>();
                    this.TintColorUpperBound = reader.Read<ColorRgbF>();
                    this.PeriodicFunction = ((PeriodicFunctionOptions)(reader.ReadInt16()));
                    this.EmptyString3 = reader.ReadBytes(2);
                    this.FunctionPeriod = reader.ReadSingle();
                    this.FunctionPhase = reader.ReadSingle();
                    this.EmptyString4 = reader.ReadBytes(32);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum DestinationTypeOptions : Int16
                {
                    Tint01 = 0,
                    HorizontalOffset = 1,
                    VerticalOffset = 2,
                    Fade01 = 3,
                }
                public enum DestinationOptions : Int16
                {
                    GeometryOffset = 0,
                    PrimaryMap = 1,
                    SecondaryMap = 2,
                    TertiaryMap = 3,
                }
                public enum SourceOptions : Int16
                {
                    PlayerPitch = 0,
                    PlayerPitchTangent = 1,
                    PlayerYaw = 2,
                    WeaponRoundsLoaded = 3,
                    WeaponRoundsInventory = 4,
                    WeaponHeat = 5,
                    ExplicitUsesLowBound = 6,
                    WeaponZoomLevel = 7,
                }
                public enum PeriodicFunctionOptions : Int16
                {
                    One = 0,
                    Zero = 1,
                    Cosine = 2,
                    CosineVariablePeriod = 3,
                    DiagonalWave = 4,
                    DiagonalWaveVariablePeriod = 5,
                    Slide = 6,
                    SlideVariablePeriod = 7,
                    Noise = 8,
                    Jitter = 9,
                    Wander = 10,
                    Spark = 11,
                }
            }
            public enum FramebufferBlendFuncOptions : Int16
            {
                AlphaBlend = 0,
                Multiply = 1,
                DoubleMultiply = 2,
                Add = 3,
                Subtract = 4,
                ComponentMin = 5,
                ComponentMax = 6,
                AlphaMultiplyAdd = 7,
                ConstantColorBlend = 8,
                InverseConstantColorBlend = 9,
                None = 10,
            }
            public enum PrimaryAnchorOptions : Int16
            {
                Texture = 0,
                Screen = 1,
            }
            public enum SecondaryAnchorOptions : Int16
            {
                Texture = 0,
                Screen = 1,
            }
            public enum TertiaryAnchorOptions : Int16
            {
                Texture = 0,
                Screen = 1,
            }
            public enum _0To1BlendFuncOptions : Int16
            {
                Add = 0,
                Subtract = 1,
                Multiply = 2,
                Multiply2x = 3,
                Dot = 4,
            }
            public enum _1To2BlendFuncOptions : Int16
            {
                Add = 0,
                Subtract = 1,
                Multiply = 2,
                Multiply2x = 3,
                Dot = 4,
            }
            public enum PrimaryWrapModeOptions : Int16
            {
                Clamp = 0,
                Wrap = 1,
            }
            public enum SecondaryWrapModeOptions : Int16
            {
                Clamp = 0,
                Wrap = 1,
            }
            public enum TertiaryWrapModeOptions : Int16
            {
                Clamp = 0,
                Wrap = 1,
            }
        }
        [FieldSetAttribute(0, 4)]
        public sealed class GNullBlock : AbideTagBlock
        {
            public override int Size
            {
                get
                {
                    return 0;
                }
            }
            public override void Initialize()
            {
            }
            public override void Read(BinaryReader reader)
            {
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(132, 4)]
        public sealed class UnitHudAuxilaryOverlayBlock : AbideTagBlock
        {
            private TagBlockList<GlobalHudMultitextureOverlayDefinition> multitexOverlayList = new TagBlockList<GlobalHudMultitextureOverlayDefinition>(30);
            [FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
            [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public ScalingFlagsOptions ScalingFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString1;
            [FieldAttribute("interface bitmap", typeof(TagReference))]
            public TagReference InterfaceBitmap;
            [FieldAttribute("default color", typeof(ColorArgb))]
            public ColorArgb DefaultColor;
            [FieldAttribute("flashing color", typeof(ColorArgb))]
            public ColorArgb FlashingColor;
            [FieldAttribute("flash period", typeof(Single))]
            public Single FlashPeriod;
            [FieldAttribute("flash delay#time between flashes", typeof(Single))]
            public Single FlashDelay;
            [FieldAttribute("number of flashes", typeof(Int16))]
            public Int16 NumberOfFlashes;
            [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
            [OptionsAttribute(typeof(FlashFlagsOptions), true)]
            public FlashFlagsOptions FlashFlags;
            [FieldAttribute("flash length#time of each flash", typeof(Single))]
            public Single FlashLength;
            [FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("sequence index", typeof(Int16))]
            public Int16 SequenceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [FieldAttribute("multitex overlay", typeof(TagBlock))]
            [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
            public TagBlock MultitexOverlay;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString5;
            public TagBlockList<GlobalHudMultitextureOverlayDefinition> MultitexOverlayList
            {
                get
                {
                    return this.multitexOverlayList;
                }
            }
            public override int Size
            {
                get
                {
                    return 132;
                }
            }
            public override void Initialize()
            {
                this.multitexOverlayList.Clear();
                this.AnchorOffset = Vector2.Zero;
                this.WidthScale = 0;
                this.HeightScale = 0;
                this.ScalingFlags = ((ScalingFlagsOptions)(0));
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[20];
                this.InterfaceBitmap = TagReference.Null;
                this.DefaultColor = ColorArgb.Zero;
                this.FlashingColor = ColorArgb.Zero;
                this.FlashPeriod = 0;
                this.FlashDelay = 0;
                this.NumberOfFlashes = 0;
                this.FlashFlags = ((FlashFlagsOptions)(0));
                this.FlashLength = 0;
                this.DisabledColor = ColorArgb.Zero;
                this.EmptyString2 = new byte[4];
                this.SequenceIndex = 0;
                this.EmptyString3 = new byte[2];
                this.MultitexOverlay = TagBlock.Zero;
                this.EmptyString4 = new byte[4];
                this.Type = ((TypeOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString5 = new byte[24];
            }
            public override void Read(BinaryReader reader)
            {
                this.AnchorOffset = reader.Read<Vector2>();
                this.WidthScale = reader.ReadSingle();
                this.HeightScale = reader.ReadSingle();
                this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(20);
                this.InterfaceBitmap = reader.Read<TagReference>();
                this.DefaultColor = reader.Read<ColorArgb>();
                this.FlashingColor = reader.Read<ColorArgb>();
                this.FlashPeriod = reader.ReadSingle();
                this.FlashDelay = reader.ReadSingle();
                this.NumberOfFlashes = reader.ReadInt16();
                this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
                this.FlashLength = reader.ReadSingle();
                this.DisabledColor = reader.Read<ColorArgb>();
                this.EmptyString2 = reader.ReadBytes(4);
                this.SequenceIndex = reader.ReadInt16();
                this.EmptyString3 = reader.ReadBytes(2);
                this.MultitexOverlay = reader.ReadInt64();
                this.multitexOverlayList.Read(reader, this.MultitexOverlay);
                this.EmptyString4 = reader.ReadBytes(4);
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString5 = reader.ReadBytes(24);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(480, 4)]
            public sealed class GlobalHudMultitextureOverlayDefinition : AbideTagBlock
            {
                private TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> effectorsList = new TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition>(30);
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("type", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("framebuffer blend func", typeof(FramebufferBlendFuncOptions))]
                [OptionsAttribute(typeof(FramebufferBlendFuncOptions), false)]
                public FramebufferBlendFuncOptions FramebufferBlendFunc;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString2;
                [FieldAttribute("primary anchor", typeof(PrimaryAnchorOptions))]
                [OptionsAttribute(typeof(PrimaryAnchorOptions), false)]
                public PrimaryAnchorOptions PrimaryAnchor;
                [FieldAttribute("secondary anchor", typeof(SecondaryAnchorOptions))]
                [OptionsAttribute(typeof(SecondaryAnchorOptions), false)]
                public SecondaryAnchorOptions SecondaryAnchor;
                [FieldAttribute("tertiary anchor", typeof(TertiaryAnchorOptions))]
                [OptionsAttribute(typeof(TertiaryAnchorOptions), false)]
                public TertiaryAnchorOptions TertiaryAnchor;
                [FieldAttribute("0 to 1 blend func", typeof(_0To1BlendFuncOptions))]
                [OptionsAttribute(typeof(_0To1BlendFuncOptions), false)]
                public _0To1BlendFuncOptions _0To1BlendFunc;
                [FieldAttribute("1 to 2 blend func", typeof(_1To2BlendFuncOptions))]
                [OptionsAttribute(typeof(_1To2BlendFuncOptions), false)]
                public _1To2BlendFuncOptions _1To2BlendFunc;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [FieldAttribute("primary scale", typeof(Vector2))]
                public Vector2 PrimaryScale;
                [FieldAttribute("secondary scale", typeof(Vector2))]
                public Vector2 SecondaryScale;
                [FieldAttribute("tertiary scale", typeof(Vector2))]
                public Vector2 TertiaryScale;
                [FieldAttribute("primary offset", typeof(Vector2))]
                public Vector2 PrimaryOffset;
                [FieldAttribute("secondary offset", typeof(Vector2))]
                public Vector2 SecondaryOffset;
                [FieldAttribute("tertiary offset", typeof(Vector2))]
                public Vector2 TertiaryOffset;
                [FieldAttribute("primary", typeof(TagReference))]
                public TagReference Primary;
                [FieldAttribute("secondary", typeof(TagReference))]
                public TagReference Secondary;
                [FieldAttribute("tertiary", typeof(TagReference))]
                public TagReference Tertiary;
                [FieldAttribute("primary wrap mode", typeof(PrimaryWrapModeOptions))]
                [OptionsAttribute(typeof(PrimaryWrapModeOptions), false)]
                public PrimaryWrapModeOptions PrimaryWrapMode;
                [FieldAttribute("secondary wrap mode", typeof(SecondaryWrapModeOptions))]
                [OptionsAttribute(typeof(SecondaryWrapModeOptions), false)]
                public SecondaryWrapModeOptions SecondaryWrapMode;
                [FieldAttribute("tertiary wrap mode", typeof(TertiaryWrapModeOptions))]
                [OptionsAttribute(typeof(TertiaryWrapModeOptions), false)]
                public TertiaryWrapModeOptions TertiaryWrapMode;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(184)]
                public Byte[] EmptyString5;
                [FieldAttribute("effectors", typeof(TagBlock))]
                [BlockAttribute("global_hud_multitexture_overlay_effector_definition", 30, typeof(GlobalHudMultitextureOverlayEffectorDefinition))]
                public TagBlock Effectors;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(128)]
                public Byte[] EmptyString6;
                public TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> EffectorsList
                {
                    get
                    {
                        return this.effectorsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 480;
                    }
                }
                public override void Initialize()
                {
                    this.effectorsList.Clear();
                    this.EmptyString = new byte[2];
                    this.Type = 0;
                    this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[32];
                    this.PrimaryAnchor = ((PrimaryAnchorOptions)(0));
                    this.SecondaryAnchor = ((SecondaryAnchorOptions)(0));
                    this.TertiaryAnchor = ((TertiaryAnchorOptions)(0));
                    this._0To1BlendFunc = ((_0To1BlendFuncOptions)(0));
                    this._1To2BlendFunc = ((_1To2BlendFuncOptions)(0));
                    this.EmptyString3 = new byte[2];
                    this.PrimaryScale = Vector2.Zero;
                    this.SecondaryScale = Vector2.Zero;
                    this.TertiaryScale = Vector2.Zero;
                    this.PrimaryOffset = Vector2.Zero;
                    this.SecondaryOffset = Vector2.Zero;
                    this.TertiaryOffset = Vector2.Zero;
                    this.Primary = TagReference.Null;
                    this.Secondary = TagReference.Null;
                    this.Tertiary = TagReference.Null;
                    this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(0));
                    this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(0));
                    this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.EmptyString5 = new byte[184];
                    this.Effectors = TagBlock.Zero;
                    this.EmptyString6 = new byte[128];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(2);
                    this.Type = reader.ReadInt16();
                    this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(32);
                    this.PrimaryAnchor = ((PrimaryAnchorOptions)(reader.ReadInt16()));
                    this.SecondaryAnchor = ((SecondaryAnchorOptions)(reader.ReadInt16()));
                    this.TertiaryAnchor = ((TertiaryAnchorOptions)(reader.ReadInt16()));
                    this._0To1BlendFunc = ((_0To1BlendFuncOptions)(reader.ReadInt16()));
                    this._1To2BlendFunc = ((_1To2BlendFuncOptions)(reader.ReadInt16()));
                    this.EmptyString3 = reader.ReadBytes(2);
                    this.PrimaryScale = reader.Read<Vector2>();
                    this.SecondaryScale = reader.Read<Vector2>();
                    this.TertiaryScale = reader.Read<Vector2>();
                    this.PrimaryOffset = reader.Read<Vector2>();
                    this.SecondaryOffset = reader.Read<Vector2>();
                    this.TertiaryOffset = reader.Read<Vector2>();
                    this.Primary = reader.Read<TagReference>();
                    this.Secondary = reader.Read<TagReference>();
                    this.Tertiary = reader.Read<TagReference>();
                    this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(reader.ReadInt16()));
                    this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(reader.ReadInt16()));
                    this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.EmptyString5 = reader.ReadBytes(184);
                    this.Effectors = reader.ReadInt64();
                    this.effectorsList.Read(reader, this.Effectors);
                    this.EmptyString6 = reader.ReadBytes(128);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(220, 4)]
                public sealed class GlobalHudMultitextureOverlayEffectorDefinition : AbideTagBlock
                {
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(64)]
                    public Byte[] EmptyString;
                    [FieldAttribute("destination type", typeof(DestinationTypeOptions))]
                    [OptionsAttribute(typeof(DestinationTypeOptions), false)]
                    public DestinationTypeOptions DestinationType;
                    [FieldAttribute("destination", typeof(DestinationOptions))]
                    [OptionsAttribute(typeof(DestinationOptions), false)]
                    public DestinationOptions Destination;
                    [FieldAttribute("source", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(64)]
                    public Byte[] EmptyString2;
                    [FieldAttribute("tint color lower bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorLowerBound;
                    [FieldAttribute("tint color upper bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorUpperBound;
                    [FieldAttribute("periodic function", typeof(PeriodicFunctionOptions))]
                    [OptionsAttribute(typeof(PeriodicFunctionOptions), false)]
                    public PeriodicFunctionOptions PeriodicFunction;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString3;
                    [FieldAttribute("function period:seconds", typeof(Single))]
                    public Single FunctionPeriod;
                    [FieldAttribute("function phase:seconds", typeof(Single))]
                    public Single FunctionPhase;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(32)]
                    public Byte[] EmptyString4;
                    public override int Size
                    {
                        get
                        {
                            return 220;
                        }
                    }
                    public override void Initialize()
                    {
                        this.EmptyString = new byte[64];
                        this.DestinationType = ((DestinationTypeOptions)(0));
                        this.Destination = ((DestinationOptions)(0));
                        this.Source = ((SourceOptions)(0));
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[64];
                        this.TintColorLowerBound = ColorRgbF.Zero;
                        this.TintColorUpperBound = ColorRgbF.Zero;
                        this.PeriodicFunction = ((PeriodicFunctionOptions)(0));
                        this.EmptyString3 = new byte[2];
                        this.FunctionPeriod = 0;
                        this.FunctionPhase = 0;
                        this.EmptyString4 = new byte[32];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.EmptyString = reader.ReadBytes(64);
                        this.DestinationType = ((DestinationTypeOptions)(reader.ReadInt16()));
                        this.Destination = ((DestinationOptions)(reader.ReadInt16()));
                        this.Source = ((SourceOptions)(reader.ReadInt16()));
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(64);
                        this.TintColorLowerBound = reader.Read<ColorRgbF>();
                        this.TintColorUpperBound = reader.Read<ColorRgbF>();
                        this.PeriodicFunction = ((PeriodicFunctionOptions)(reader.ReadInt16()));
                        this.EmptyString3 = reader.ReadBytes(2);
                        this.FunctionPeriod = reader.ReadSingle();
                        this.FunctionPhase = reader.ReadSingle();
                        this.EmptyString4 = reader.ReadBytes(32);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum DestinationTypeOptions : Int16
                    {
                        Tint01 = 0,
                        HorizontalOffset = 1,
                        VerticalOffset = 2,
                        Fade01 = 3,
                    }
                    public enum DestinationOptions : Int16
                    {
                        GeometryOffset = 0,
                        PrimaryMap = 1,
                        SecondaryMap = 2,
                        TertiaryMap = 3,
                    }
                    public enum SourceOptions : Int16
                    {
                        PlayerPitch = 0,
                        PlayerPitchTangent = 1,
                        PlayerYaw = 2,
                        WeaponRoundsLoaded = 3,
                        WeaponRoundsInventory = 4,
                        WeaponHeat = 5,
                        ExplicitUsesLowBound = 6,
                        WeaponZoomLevel = 7,
                    }
                    public enum PeriodicFunctionOptions : Int16
                    {
                        One = 0,
                        Zero = 1,
                        Cosine = 2,
                        CosineVariablePeriod = 3,
                        DiagonalWave = 4,
                        DiagonalWaveVariablePeriod = 5,
                        Slide = 6,
                        SlideVariablePeriod = 7,
                        Noise = 8,
                        Jitter = 9,
                        Wander = 10,
                        Spark = 11,
                    }
                }
                public enum FramebufferBlendFuncOptions : Int16
                {
                    AlphaBlend = 0,
                    Multiply = 1,
                    DoubleMultiply = 2,
                    Add = 3,
                    Subtract = 4,
                    ComponentMin = 5,
                    ComponentMax = 6,
                    AlphaMultiplyAdd = 7,
                    ConstantColorBlend = 8,
                    InverseConstantColorBlend = 9,
                    None = 10,
                }
                public enum PrimaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum SecondaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum TertiaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum _0To1BlendFuncOptions : Int16
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum _1To2BlendFuncOptions : Int16
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum PrimaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum SecondaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum TertiaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
            }
            public enum ScalingFlagsOptions : Int16
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlashFlagsOptions : Int16
            {
                ReverseDefaultflashingColors = 1,
            }
            public enum TypeOptions : Int16
            {
                TeamIcon = 0,
            }
            public enum FlagsOptions : Int16
            {
                UseTeamColor = 1,
            }
        }
        [FieldSetAttribute(56, 4)]
        public sealed class UnitHudSoundBlock : AbideTagBlock
        {
            [FieldAttribute("sound^", typeof(TagReference))]
            public TagReference Sound;
            [FieldAttribute("latched to", typeof(LatchedToOptions))]
            [OptionsAttribute(typeof(LatchedToOptions), true)]
            public LatchedToOptions LatchedTo;
            [FieldAttribute("scale", typeof(Single))]
            public Single Scale;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 56;
                }
            }
            public override void Initialize()
            {
                this.Sound = TagReference.Null;
                this.LatchedTo = ((LatchedToOptions)(0));
                this.Scale = 0;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Sound = reader.Read<TagReference>();
                this.LatchedTo = ((LatchedToOptions)(reader.ReadInt32()));
                this.Scale = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum LatchedToOptions : Int32
            {
                ShieldRecharging = 1,
                ShieldDamaged = 2,
                ShieldLow = 4,
                ShieldEmpty = 8,
                HealthLow = 16,
                HealthEmpty = 32,
                HealthMinorDamage = 64,
                HealthMajorDamage = 128,
            }
        }
        [FieldSetAttribute(324, 4)]
        public sealed class UnitHudAuxilaryPanelBlock : AbideTagBlock
        {
            private TagBlockList<GlobalHudMultitextureOverlayDefinition> multitexOverlayList = new TagBlockList<GlobalHudMultitextureOverlayDefinition>(30);
            private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
            [FieldAttribute("type", typeof(TypeOptions))]
            [OptionsAttribute(typeof(TypeOptions), false)]
            public TypeOptions Type;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString1;
            [FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset;
            [FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale;
            [FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale;
            [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
            [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
            public ScalingFlagsOptions ScalingFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString3;
            [FieldAttribute("interface bitmap", typeof(TagReference))]
            public TagReference InterfaceBitmap;
            [FieldAttribute("default color", typeof(ColorArgb))]
            public ColorArgb DefaultColor;
            [FieldAttribute("flashing color", typeof(ColorArgb))]
            public ColorArgb FlashingColor;
            [FieldAttribute("flash period", typeof(Single))]
            public Single FlashPeriod;
            [FieldAttribute("flash delay#time between flashes", typeof(Single))]
            public Single FlashDelay;
            [FieldAttribute("number of flashes", typeof(Int16))]
            public Int16 NumberOfFlashes;
            [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
            [OptionsAttribute(typeof(FlashFlagsOptions), true)]
            public FlashFlagsOptions FlashFlags;
            [FieldAttribute("flash length#time of each flash", typeof(Single))]
            public Single FlashLength;
            [FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString4;
            [FieldAttribute("sequence index", typeof(Int16))]
            public Int16 SequenceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString5;
            [FieldAttribute("multitex overlay", typeof(TagBlock))]
            [BlockAttribute("global_hud_multitexture_overlay_definition", 30, typeof(GlobalHudMultitextureOverlayDefinition))]
            public TagBlock MultitexOverlay;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString6;
            [FieldAttribute("anchor offset", typeof(Vector2))]
            public Vector2 AnchorOffset1;
            [FieldAttribute("width scale", typeof(Single))]
            public Single WidthScale1;
            [FieldAttribute("height scale", typeof(Single))]
            public Single HeightScale1;
            [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions1))]
            [OptionsAttribute(typeof(ScalingFlagsOptions1), true)]
            public ScalingFlagsOptions1 ScalingFlags1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString7;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString8;
            [FieldAttribute("meter bitmap", typeof(TagReference))]
            public TagReference MeterBitmap;
            [FieldAttribute("color at meter minimum", typeof(ColorRgb))]
            public ColorRgb ColorAtMeterMinimum;
            [FieldAttribute("color at meter maximum", typeof(ColorRgb))]
            public ColorRgb ColorAtMeterMaximum;
            [FieldAttribute("flash color", typeof(ColorRgb))]
            public ColorRgb FlashColor;
            [FieldAttribute("empty color", typeof(ColorArgb))]
            public ColorArgb EmptyColor;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("minumum meter value", typeof(Byte))]
            public Byte MinumumMeterValue;
            [FieldAttribute("sequence index", typeof(Int16))]
            public Int16 SequenceIndex1;
            [FieldAttribute("alpha multiplier", typeof(Byte))]
            public Byte AlphaMultiplier;
            [FieldAttribute("alpha bias", typeof(Byte))]
            public Byte AlphaBias;
            [FieldAttribute("value scale#used for non-integral values, i.e. health and shields", typeof(Int16))]
            public Int16 ValueScale;
            [FieldAttribute("opacity", typeof(Single))]
            public Single Opacity;
            [FieldAttribute("translucency", typeof(Single))]
            public Single Translucency;
            [FieldAttribute("disabled color", typeof(ColorArgb))]
            public ColorArgb DisabledColor1;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString9;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString10;
            [FieldAttribute("minimum fraction cutoff", typeof(Single))]
            public Single MinimumFractionCutoff;
            [FieldAttribute("flags", typeof(FlagsOptions1))]
            [OptionsAttribute(typeof(FlagsOptions1), true)]
            public FlagsOptions1 Flags1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString11;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(64)]
            public Byte[] EmptyString12;
            public TagBlockList<GlobalHudMultitextureOverlayDefinition> MultitexOverlayList
            {
                get
                {
                    return this.multitexOverlayList;
                }
            }
            public TagBlockList<GNullBlock> EmptyStringList
            {
                get
                {
                    return this.emptyStringList;
                }
            }
            public override int Size
            {
                get
                {
                    return 324;
                }
            }
            public override void Initialize()
            {
                this.multitexOverlayList.Clear();
                this.emptyStringList.Clear();
                this.Type = ((TypeOptions)(0));
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[16];
                this.AnchorOffset = Vector2.Zero;
                this.WidthScale = 0;
                this.HeightScale = 0;
                this.ScalingFlags = ((ScalingFlagsOptions)(0));
                this.EmptyString2 = new byte[2];
                this.EmptyString3 = new byte[20];
                this.InterfaceBitmap = TagReference.Null;
                this.DefaultColor = ColorArgb.Zero;
                this.FlashingColor = ColorArgb.Zero;
                this.FlashPeriod = 0;
                this.FlashDelay = 0;
                this.NumberOfFlashes = 0;
                this.FlashFlags = ((FlashFlagsOptions)(0));
                this.FlashLength = 0;
                this.DisabledColor = ColorArgb.Zero;
                this.EmptyString4 = new byte[4];
                this.SequenceIndex = 0;
                this.EmptyString5 = new byte[2];
                this.MultitexOverlay = TagBlock.Zero;
                this.EmptyString6 = new byte[4];
                this.AnchorOffset1 = Vector2.Zero;
                this.WidthScale1 = 0;
                this.HeightScale1 = 0;
                this.ScalingFlags1 = ((ScalingFlagsOptions1)(0));
                this.EmptyString7 = new byte[2];
                this.EmptyString8 = new byte[20];
                this.MeterBitmap = TagReference.Null;
                this.ColorAtMeterMinimum = ColorRgb.Zero;
                this.ColorAtMeterMaximum = ColorRgb.Zero;
                this.FlashColor = ColorRgb.Zero;
                this.EmptyColor = ColorArgb.Zero;
                this.Flags = ((FlagsOptions)(0));
                this.MinumumMeterValue = 0;
                this.SequenceIndex1 = 0;
                this.AlphaMultiplier = 0;
                this.AlphaBias = 0;
                this.ValueScale = 0;
                this.Opacity = 0;
                this.Translucency = 0;
                this.DisabledColor1 = ColorArgb.Zero;
                this.EmptyString9 = TagBlock.Zero;
                this.EmptyString10 = new byte[4];
                this.MinimumFractionCutoff = 0;
                this.Flags1 = ((FlagsOptions1)(0));
                this.EmptyString11 = new byte[24];
                this.EmptyString12 = new byte[64];
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = ((TypeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(16);
                this.AnchorOffset = reader.Read<Vector2>();
                this.WidthScale = reader.ReadSingle();
                this.HeightScale = reader.ReadSingle();
                this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
                this.EmptyString2 = reader.ReadBytes(2);
                this.EmptyString3 = reader.ReadBytes(20);
                this.InterfaceBitmap = reader.Read<TagReference>();
                this.DefaultColor = reader.Read<ColorArgb>();
                this.FlashingColor = reader.Read<ColorArgb>();
                this.FlashPeriod = reader.ReadSingle();
                this.FlashDelay = reader.ReadSingle();
                this.NumberOfFlashes = reader.ReadInt16();
                this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
                this.FlashLength = reader.ReadSingle();
                this.DisabledColor = reader.Read<ColorArgb>();
                this.EmptyString4 = reader.ReadBytes(4);
                this.SequenceIndex = reader.ReadInt16();
                this.EmptyString5 = reader.ReadBytes(2);
                this.MultitexOverlay = reader.ReadInt64();
                this.multitexOverlayList.Read(reader, this.MultitexOverlay);
                this.EmptyString6 = reader.ReadBytes(4);
                this.AnchorOffset1 = reader.Read<Vector2>();
                this.WidthScale1 = reader.ReadSingle();
                this.HeightScale1 = reader.ReadSingle();
                this.ScalingFlags1 = ((ScalingFlagsOptions1)(reader.ReadInt16()));
                this.EmptyString7 = reader.ReadBytes(2);
                this.EmptyString8 = reader.ReadBytes(20);
                this.MeterBitmap = reader.Read<TagReference>();
                this.ColorAtMeterMinimum = reader.Read<ColorRgb>();
                this.ColorAtMeterMaximum = reader.Read<ColorRgb>();
                this.FlashColor = reader.Read<ColorRgb>();
                this.EmptyColor = reader.Read<ColorArgb>();
                this.Flags = ((FlagsOptions)(reader.ReadByte()));
                this.MinumumMeterValue = reader.ReadByte();
                this.SequenceIndex1 = reader.ReadInt16();
                this.AlphaMultiplier = reader.ReadByte();
                this.AlphaBias = reader.ReadByte();
                this.ValueScale = reader.ReadInt16();
                this.Opacity = reader.ReadSingle();
                this.Translucency = reader.ReadSingle();
                this.DisabledColor1 = reader.Read<ColorArgb>();
                this.EmptyString9 = reader.ReadInt64();
                this.emptyStringList.Read(reader, this.EmptyString9);
                this.EmptyString10 = reader.ReadBytes(4);
                this.MinimumFractionCutoff = reader.ReadSingle();
                this.Flags1 = ((FlagsOptions1)(reader.ReadInt32()));
                this.EmptyString11 = reader.ReadBytes(24);
                this.EmptyString12 = reader.ReadBytes(64);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(480, 4)]
            public sealed class GlobalHudMultitextureOverlayDefinition : AbideTagBlock
            {
                private TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> effectorsList = new TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition>(30);
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("type", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("framebuffer blend func", typeof(FramebufferBlendFuncOptions))]
                [OptionsAttribute(typeof(FramebufferBlendFuncOptions), false)]
                public FramebufferBlendFuncOptions FramebufferBlendFunc;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString2;
                [FieldAttribute("primary anchor", typeof(PrimaryAnchorOptions))]
                [OptionsAttribute(typeof(PrimaryAnchorOptions), false)]
                public PrimaryAnchorOptions PrimaryAnchor;
                [FieldAttribute("secondary anchor", typeof(SecondaryAnchorOptions))]
                [OptionsAttribute(typeof(SecondaryAnchorOptions), false)]
                public SecondaryAnchorOptions SecondaryAnchor;
                [FieldAttribute("tertiary anchor", typeof(TertiaryAnchorOptions))]
                [OptionsAttribute(typeof(TertiaryAnchorOptions), false)]
                public TertiaryAnchorOptions TertiaryAnchor;
                [FieldAttribute("0 to 1 blend func", typeof(_0To1BlendFuncOptions))]
                [OptionsAttribute(typeof(_0To1BlendFuncOptions), false)]
                public _0To1BlendFuncOptions _0To1BlendFunc;
                [FieldAttribute("1 to 2 blend func", typeof(_1To2BlendFuncOptions))]
                [OptionsAttribute(typeof(_1To2BlendFuncOptions), false)]
                public _1To2BlendFuncOptions _1To2BlendFunc;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString3;
                [FieldAttribute("primary scale", typeof(Vector2))]
                public Vector2 PrimaryScale;
                [FieldAttribute("secondary scale", typeof(Vector2))]
                public Vector2 SecondaryScale;
                [FieldAttribute("tertiary scale", typeof(Vector2))]
                public Vector2 TertiaryScale;
                [FieldAttribute("primary offset", typeof(Vector2))]
                public Vector2 PrimaryOffset;
                [FieldAttribute("secondary offset", typeof(Vector2))]
                public Vector2 SecondaryOffset;
                [FieldAttribute("tertiary offset", typeof(Vector2))]
                public Vector2 TertiaryOffset;
                [FieldAttribute("primary", typeof(TagReference))]
                public TagReference Primary;
                [FieldAttribute("secondary", typeof(TagReference))]
                public TagReference Secondary;
                [FieldAttribute("tertiary", typeof(TagReference))]
                public TagReference Tertiary;
                [FieldAttribute("primary wrap mode", typeof(PrimaryWrapModeOptions))]
                [OptionsAttribute(typeof(PrimaryWrapModeOptions), false)]
                public PrimaryWrapModeOptions PrimaryWrapMode;
                [FieldAttribute("secondary wrap mode", typeof(SecondaryWrapModeOptions))]
                [OptionsAttribute(typeof(SecondaryWrapModeOptions), false)]
                public SecondaryWrapModeOptions SecondaryWrapMode;
                [FieldAttribute("tertiary wrap mode", typeof(TertiaryWrapModeOptions))]
                [OptionsAttribute(typeof(TertiaryWrapModeOptions), false)]
                public TertiaryWrapModeOptions TertiaryWrapMode;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(184)]
                public Byte[] EmptyString5;
                [FieldAttribute("effectors", typeof(TagBlock))]
                [BlockAttribute("global_hud_multitexture_overlay_effector_definition", 30, typeof(GlobalHudMultitextureOverlayEffectorDefinition))]
                public TagBlock Effectors;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(128)]
                public Byte[] EmptyString6;
                public TagBlockList<GlobalHudMultitextureOverlayEffectorDefinition> EffectorsList
                {
                    get
                    {
                        return this.effectorsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 480;
                    }
                }
                public override void Initialize()
                {
                    this.effectorsList.Clear();
                    this.EmptyString = new byte[2];
                    this.Type = 0;
                    this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[32];
                    this.PrimaryAnchor = ((PrimaryAnchorOptions)(0));
                    this.SecondaryAnchor = ((SecondaryAnchorOptions)(0));
                    this.TertiaryAnchor = ((TertiaryAnchorOptions)(0));
                    this._0To1BlendFunc = ((_0To1BlendFuncOptions)(0));
                    this._1To2BlendFunc = ((_1To2BlendFuncOptions)(0));
                    this.EmptyString3 = new byte[2];
                    this.PrimaryScale = Vector2.Zero;
                    this.SecondaryScale = Vector2.Zero;
                    this.TertiaryScale = Vector2.Zero;
                    this.PrimaryOffset = Vector2.Zero;
                    this.SecondaryOffset = Vector2.Zero;
                    this.TertiaryOffset = Vector2.Zero;
                    this.Primary = TagReference.Null;
                    this.Secondary = TagReference.Null;
                    this.Tertiary = TagReference.Null;
                    this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(0));
                    this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(0));
                    this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(0));
                    this.EmptyString4 = new byte[2];
                    this.EmptyString5 = new byte[184];
                    this.Effectors = TagBlock.Zero;
                    this.EmptyString6 = new byte[128];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(2);
                    this.Type = reader.ReadInt16();
                    this.FramebufferBlendFunc = ((FramebufferBlendFuncOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(32);
                    this.PrimaryAnchor = ((PrimaryAnchorOptions)(reader.ReadInt16()));
                    this.SecondaryAnchor = ((SecondaryAnchorOptions)(reader.ReadInt16()));
                    this.TertiaryAnchor = ((TertiaryAnchorOptions)(reader.ReadInt16()));
                    this._0To1BlendFunc = ((_0To1BlendFuncOptions)(reader.ReadInt16()));
                    this._1To2BlendFunc = ((_1To2BlendFuncOptions)(reader.ReadInt16()));
                    this.EmptyString3 = reader.ReadBytes(2);
                    this.PrimaryScale = reader.Read<Vector2>();
                    this.SecondaryScale = reader.Read<Vector2>();
                    this.TertiaryScale = reader.Read<Vector2>();
                    this.PrimaryOffset = reader.Read<Vector2>();
                    this.SecondaryOffset = reader.Read<Vector2>();
                    this.TertiaryOffset = reader.Read<Vector2>();
                    this.Primary = reader.Read<TagReference>();
                    this.Secondary = reader.Read<TagReference>();
                    this.Tertiary = reader.Read<TagReference>();
                    this.PrimaryWrapMode = ((PrimaryWrapModeOptions)(reader.ReadInt16()));
                    this.SecondaryWrapMode = ((SecondaryWrapModeOptions)(reader.ReadInt16()));
                    this.TertiaryWrapMode = ((TertiaryWrapModeOptions)(reader.ReadInt16()));
                    this.EmptyString4 = reader.ReadBytes(2);
                    this.EmptyString5 = reader.ReadBytes(184);
                    this.Effectors = reader.ReadInt64();
                    this.effectorsList.Read(reader, this.Effectors);
                    this.EmptyString6 = reader.ReadBytes(128);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(220, 4)]
                public sealed class GlobalHudMultitextureOverlayEffectorDefinition : AbideTagBlock
                {
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(64)]
                    public Byte[] EmptyString;
                    [FieldAttribute("destination type", typeof(DestinationTypeOptions))]
                    [OptionsAttribute(typeof(DestinationTypeOptions), false)]
                    public DestinationTypeOptions DestinationType;
                    [FieldAttribute("destination", typeof(DestinationOptions))]
                    [OptionsAttribute(typeof(DestinationOptions), false)]
                    public DestinationOptions Destination;
                    [FieldAttribute("source", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(64)]
                    public Byte[] EmptyString2;
                    [FieldAttribute("tint color lower bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorLowerBound;
                    [FieldAttribute("tint color upper bound", typeof(ColorRgbF))]
                    public ColorRgbF TintColorUpperBound;
                    [FieldAttribute("periodic function", typeof(PeriodicFunctionOptions))]
                    [OptionsAttribute(typeof(PeriodicFunctionOptions), false)]
                    public PeriodicFunctionOptions PeriodicFunction;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString3;
                    [FieldAttribute("function period:seconds", typeof(Single))]
                    public Single FunctionPeriod;
                    [FieldAttribute("function phase:seconds", typeof(Single))]
                    public Single FunctionPhase;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(32)]
                    public Byte[] EmptyString4;
                    public override int Size
                    {
                        get
                        {
                            return 220;
                        }
                    }
                    public override void Initialize()
                    {
                        this.EmptyString = new byte[64];
                        this.DestinationType = ((DestinationTypeOptions)(0));
                        this.Destination = ((DestinationOptions)(0));
                        this.Source = ((SourceOptions)(0));
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[64];
                        this.TintColorLowerBound = ColorRgbF.Zero;
                        this.TintColorUpperBound = ColorRgbF.Zero;
                        this.PeriodicFunction = ((PeriodicFunctionOptions)(0));
                        this.EmptyString3 = new byte[2];
                        this.FunctionPeriod = 0;
                        this.FunctionPhase = 0;
                        this.EmptyString4 = new byte[32];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.EmptyString = reader.ReadBytes(64);
                        this.DestinationType = ((DestinationTypeOptions)(reader.ReadInt16()));
                        this.Destination = ((DestinationOptions)(reader.ReadInt16()));
                        this.Source = ((SourceOptions)(reader.ReadInt16()));
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(64);
                        this.TintColorLowerBound = reader.Read<ColorRgbF>();
                        this.TintColorUpperBound = reader.Read<ColorRgbF>();
                        this.PeriodicFunction = ((PeriodicFunctionOptions)(reader.ReadInt16()));
                        this.EmptyString3 = reader.ReadBytes(2);
                        this.FunctionPeriod = reader.ReadSingle();
                        this.FunctionPhase = reader.ReadSingle();
                        this.EmptyString4 = reader.ReadBytes(32);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum DestinationTypeOptions : Int16
                    {
                        Tint01 = 0,
                        HorizontalOffset = 1,
                        VerticalOffset = 2,
                        Fade01 = 3,
                    }
                    public enum DestinationOptions : Int16
                    {
                        GeometryOffset = 0,
                        PrimaryMap = 1,
                        SecondaryMap = 2,
                        TertiaryMap = 3,
                    }
                    public enum SourceOptions : Int16
                    {
                        PlayerPitch = 0,
                        PlayerPitchTangent = 1,
                        PlayerYaw = 2,
                        WeaponRoundsLoaded = 3,
                        WeaponRoundsInventory = 4,
                        WeaponHeat = 5,
                        ExplicitUsesLowBound = 6,
                        WeaponZoomLevel = 7,
                    }
                    public enum PeriodicFunctionOptions : Int16
                    {
                        One = 0,
                        Zero = 1,
                        Cosine = 2,
                        CosineVariablePeriod = 3,
                        DiagonalWave = 4,
                        DiagonalWaveVariablePeriod = 5,
                        Slide = 6,
                        SlideVariablePeriod = 7,
                        Noise = 8,
                        Jitter = 9,
                        Wander = 10,
                        Spark = 11,
                    }
                }
                public enum FramebufferBlendFuncOptions : Int16
                {
                    AlphaBlend = 0,
                    Multiply = 1,
                    DoubleMultiply = 2,
                    Add = 3,
                    Subtract = 4,
                    ComponentMin = 5,
                    ComponentMax = 6,
                    AlphaMultiplyAdd = 7,
                    ConstantColorBlend = 8,
                    InverseConstantColorBlend = 9,
                    None = 10,
                }
                public enum PrimaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum SecondaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum TertiaryAnchorOptions : Int16
                {
                    Texture = 0,
                    Screen = 1,
                }
                public enum _0To1BlendFuncOptions : Int16
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum _1To2BlendFuncOptions : Int16
                {
                    Add = 0,
                    Subtract = 1,
                    Multiply = 2,
                    Multiply2x = 3,
                    Dot = 4,
                }
                public enum PrimaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum SecondaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
                public enum TertiaryWrapModeOptions : Int16
                {
                    Clamp = 0,
                    Wrap = 1,
                }
            }
            [FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : AbideTagBlock
            {
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum TypeOptions : Int16
            {
                IntegratedLight = 0,
            }
            public enum ScalingFlagsOptions : Int16
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlashFlagsOptions : Int16
            {
                ReverseDefaultflashingColors = 1,
            }
            public enum ScalingFlagsOptions1 : Int16
            {
                DontScaleOffset = 1,
                DontScaleSize = 2,
            }
            public enum FlagsOptions : Byte
            {
                UseMinmaxForStateChanges = 1,
                InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
                InterpolateColorAlongHsvSpace = 4,
                MoreColorsForHsvInterpolation = 8,
                InvertInterpolation = 16,
            }
            public enum FlagsOptions1 : Int32
            {
                ShowOnlyWhenActive = 1,
                FlashOnceIfActivatedWhileDisabled = 2,
            }
        }
        public enum AnchorOptions : Int16
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        public enum ScalingFlagsOptions : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlashFlagsOptions : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum ScalingFlagsOptions1 : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlashFlagsOptions1 : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum ScalingFlagsOptions2 : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlagsOptions : Byte
        {
            UseMinmaxForStateChanges = 1,
            InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
            InterpolateColorAlongHsvSpace = 4,
            MoreColorsForHsvInterpolation = 8,
            InvertInterpolation = 16,
        }
        public enum ScalingFlagsOptions3 : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlashFlagsOptions2 : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum ScalingFlagsOptions4 : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlagsOptions1 : Byte
        {
            UseMinmaxForStateChanges = 1,
            InterpolateBetweenMinmaxFlashColorsAsStateChanges = 2,
            InterpolateColorAlongHsvSpace = 4,
            MoreColorsForHsvInterpolation = 8,
            InvertInterpolation = 16,
        }
        public enum ScalingFlagsOptions5 : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlashFlagsOptions3 : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum ScalingFlagsOptions6 : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlashFlagsOptions4 : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum ScalingFlagsOptions7 : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum AnchorOptions1 : Int16
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
    }
}
#pragma warning restore CS1591
