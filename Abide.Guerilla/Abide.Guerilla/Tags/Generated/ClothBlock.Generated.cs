#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(132, 4)]
    [TagGroupAttribute("cloth", 1668052836u, 4294967293u, typeof(ClothBlock))]
    public sealed class ClothBlock : AbideTagBlock
    {
        private TagBlockList<ClothVerticesBlock> verticesList = new TagBlockList<ClothVerticesBlock>(128);
        private TagBlockList<ClothIndicesBlock> indicesList = new TagBlockList<ClothIndicesBlock>(768);
        private TagBlockList<ClothLinksBlock> linksList = new TagBlockList<ClothLinksBlock>(640);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("marker attachment name", typeof(StringId))]
        public StringId MarkerAttachmentName;
        [FieldAttribute("Shader", typeof(TagReference))]
        public TagReference Shader;
        [FieldAttribute("grid x dimension", typeof(Int16))]
        public Int16 GridXDimension;
        [FieldAttribute("grid y dimension", typeof(Int16))]
        public Int16 GridYDimension;
        [FieldAttribute("grid spacing x", typeof(Single))]
        public Single GridSpacingX;
        [FieldAttribute("grid spacing y", typeof(Single))]
        public Single GridSpacingY;
        [FieldAttribute("properties", typeof(ClothPropertiesBlock))]
        public ClothPropertiesBlock Properties;
        [FieldAttribute("vertices*", typeof(TagBlock))]
        [BlockAttribute("cloth_vertices_block", 128, typeof(ClothVerticesBlock))]
        public TagBlock Vertices;
        [FieldAttribute("indices*", typeof(TagBlock))]
        [BlockAttribute("cloth_indices_block", 768, typeof(ClothIndicesBlock))]
        public TagBlock Indices;
        [FieldAttribute("strip indices*", typeof(TagBlock))]
        [BlockAttribute("cloth_indices_block", 768, typeof(ClothIndicesBlock))]
        public TagBlock StripIndices;
        [FieldAttribute("links*", typeof(TagBlock))]
        [BlockAttribute("cloth_links_block", 640, typeof(ClothLinksBlock))]
        public TagBlock Links;
        public TagBlockList<ClothVerticesBlock> VerticesList
        {
            get
            {
                return this.verticesList;
            }
        }
        public TagBlockList<ClothIndicesBlock> IndicesList
        {
            get
            {
                return this.indicesList;
            }
        }
        public TagBlockList<ClothLinksBlock> LinksList
        {
            get
            {
                return this.linksList;
            }
        }
        public override int Size
        {
            get
            {
                return 132;
            }
        }
        public override void Initialize()
        {
            this.verticesList.Clear();
            this.indicesList.Clear();
            this.linksList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.MarkerAttachmentName = StringId.Zero;
            this.Shader = TagReference.Null;
            this.GridXDimension = 0;
            this.GridYDimension = 0;
            this.GridSpacingX = 0;
            this.GridSpacingY = 0;
            this.Properties = new ClothPropertiesBlock();
            this.Vertices = TagBlock.Zero;
            this.Indices = TagBlock.Zero;
            this.StripIndices = TagBlock.Zero;
            this.Links = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.MarkerAttachmentName = reader.ReadInt32();
            this.Shader = reader.Read<TagReference>();
            this.GridXDimension = reader.ReadInt16();
            this.GridYDimension = reader.ReadInt16();
            this.GridSpacingX = reader.ReadSingle();
            this.GridSpacingY = reader.ReadSingle();
            this.Properties = reader.ReadDataStructure<ClothPropertiesBlock>();
            this.Vertices = reader.ReadInt64();
            this.verticesList.Read(reader, this.Vertices);
            this.Indices = reader.ReadInt64();
            this.indicesList.Read(reader, this.Indices);
            this.StripIndices = reader.ReadInt64();
            this.indicesList.Read(reader, this.StripIndices);
            this.Links = reader.ReadInt64();
            this.linksList.Read(reader, this.Links);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(20, 4)]
        public sealed class ClothVerticesBlock : AbideTagBlock
        {
            [FieldAttribute("initial position*", typeof(Vector3))]
            public Vector3 InitialPosition;
            [FieldAttribute("uv*", typeof(Vector2))]
            public Vector2 Uv;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.InitialPosition = Vector3.Zero;
                this.Uv = Vector2.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.InitialPosition = reader.Read<Vector3>();
                this.Uv = reader.Read<Vector2>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(2, 4)]
        public sealed class ClothIndicesBlock : AbideTagBlock
        {
            [FieldAttribute("index*", typeof(Int16))]
            public Int16 Index;
            public override int Size
            {
                get
                {
                    return 2;
                }
            }
            public override void Initialize()
            {
                this.Index = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Index = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ClothLinksBlock : AbideTagBlock
        {
            [FieldAttribute("attachment bits*", typeof(Int32))]
            public Int32 AttachmentBits;
            [FieldAttribute("index1*", typeof(Int16))]
            public Int16 Index1;
            [FieldAttribute("index2*", typeof(Int16))]
            public Int16 Index2;
            [FieldAttribute("default_distance*", typeof(Single))]
            public Single DefaultDistance;
            [FieldAttribute("damping_multiplier*", typeof(Single))]
            public Single DampingMultiplier;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.AttachmentBits = 0;
                this.Index1 = 0;
                this.Index2 = 0;
                this.DefaultDistance = 0;
                this.DampingMultiplier = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.AttachmentBits = reader.ReadInt32();
                this.Index1 = reader.ReadInt16();
                this.Index2 = reader.ReadInt16();
                this.DefaultDistance = reader.ReadSingle();
                this.DampingMultiplier = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ClothPropertiesBlock : AbideTagBlock
        {
            [FieldAttribute("Integration type*", typeof(IntegrationTypeOptions))]
            [OptionsAttribute(typeof(IntegrationTypeOptions), false)]
            public IntegrationTypeOptions IntegrationType;
            [FieldAttribute("Number iterations#[1-8] sug 1", typeof(Int16))]
            public Int16 NumberIterations;
            [FieldAttribute("weight#[-10.0 - 10.0] sug 1.0", typeof(Single))]
            public Single Weight;
            [FieldAttribute("drag#[0.0 - 0.5] sug 0.07", typeof(Single))]
            public Single Drag;
            [FieldAttribute("wind_scale#[0.0 - 3.0] sug 1.0", typeof(Single))]
            public Single WindScale;
            [FieldAttribute("wind_flappiness_scale#[0.0 - 1.0] sug 0.75", typeof(Single))]
            public Single WindFlappinessScale;
            [FieldAttribute("longest_rod#[1.0 - 10.0] sug 3.5", typeof(Single))]
            public Single LongestRod;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.IntegrationType = ((IntegrationTypeOptions)(0));
                this.NumberIterations = 0;
                this.Weight = 0;
                this.Drag = 0;
                this.WindScale = 0;
                this.WindFlappinessScale = 0;
                this.LongestRod = 0;
                this.EmptyString = new byte[24];
            }
            public override void Read(BinaryReader reader)
            {
                this.IntegrationType = ((IntegrationTypeOptions)(reader.ReadInt16()));
                this.NumberIterations = reader.ReadInt16();
                this.Weight = reader.ReadSingle();
                this.Drag = reader.ReadSingle();
                this.WindScale = reader.ReadSingle();
                this.WindFlappinessScale = reader.ReadSingle();
                this.LongestRod = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(24);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum IntegrationTypeOptions : Int16
            {
                Verlet = 0,
            }
        }
        public enum FlagsOptions : Int32
        {
            DoesntUseWind = 1,
            UsesGridAttachTop = 2,
        }
    }
}
#pragma warning restore CS1591
