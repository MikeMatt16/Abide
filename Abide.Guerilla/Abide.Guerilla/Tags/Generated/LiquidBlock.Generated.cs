#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(116, 4)]
    [TagGroupAttribute("liquid", 1952740460u, 4294967293u, typeof(LiquidBlock))]
    public sealed class LiquidBlock : AbideTagBlock
    {
        private TagBlockList<LiquidArcBlock> arcsList = new TagBlockList<LiquidArcBlock>(3);
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("type", typeof(TypeOptions))]
        [OptionsAttribute(typeof(TypeOptions), false)]
        public TypeOptions Type;
        [FieldAttribute("attachment marker name", typeof(StringId))]
        public StringId AttachmentMarkerName;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(56)]
        public Byte[] EmptyString1;
        [FieldAttribute("falloff distance from camera:world units", typeof(Single))]
        public Single FalloffDistanceFromCamera;
        [FieldAttribute("cutoff distance from camera:world units", typeof(Single))]
        public Single CutoffDistanceFromCamera;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString2;
        [FieldAttribute("arcs", typeof(TagBlock))]
        [BlockAttribute("arc", 3, typeof(LiquidArcBlock))]
        public TagBlock Arcs;
        public TagBlockList<LiquidArcBlock> ArcsList
        {
            get
            {
                return this.arcsList;
            }
        }
        public override int Size
        {
            get
            {
                return 116;
            }
        }
        public override void Initialize()
        {
            this.arcsList.Clear();
            this.EmptyString = new byte[2];
            this.Type = ((TypeOptions)(0));
            this.AttachmentMarkerName = StringId.Zero;
            this.EmptyString1 = new byte[56];
            this.FalloffDistanceFromCamera = 0;
            this.CutoffDistanceFromCamera = 0;
            this.EmptyString2 = new byte[32];
            this.Arcs = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.EmptyString = reader.ReadBytes(2);
            this.Type = ((TypeOptions)(reader.ReadInt16()));
            this.AttachmentMarkerName = reader.ReadInt32();
            this.EmptyString1 = reader.ReadBytes(56);
            this.FalloffDistanceFromCamera = reader.ReadSingle();
            this.CutoffDistanceFromCamera = reader.ReadSingle();
            this.EmptyString2 = reader.ReadBytes(32);
            this.Arcs = reader.ReadInt64();
            this.arcsList.Read(reader, this.Arcs);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(276, 4)]
        public sealed class LiquidArcBlock : AbideTagBlock
        {
            private TagBlockList<LiquidCoreBlock> coresList = new TagBlockList<LiquidCoreBlock>(4);
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("sprite count", typeof(SpriteCountOptions))]
            [OptionsAttribute(typeof(SpriteCountOptions), false)]
            public SpriteCountOptions SpriteCount;
            [FieldAttribute("natural length:world units", typeof(Single))]
            public Single NaturalLength;
            [FieldAttribute("instances", typeof(Int16))]
            public Int16 Instances;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("instance spread angle:degrees", typeof(Single))]
            public Single InstanceSpreadAngle;
            [FieldAttribute("instance rotation period:seconds", typeof(Single))]
            public Single InstanceRotationPeriod;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString1;
            [FieldAttribute("material effects", typeof(TagReference))]
            public TagReference MaterialEffects;
            [FieldAttribute("bitmap", typeof(TagReference))]
            public TagReference Bitmap;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString2;
            [FieldAttribute("horizontal range", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock HorizontalRange;
            [FieldAttribute("vertical range", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock VerticalRange;
            [FieldAttribute("vertical negative scale:[0,1]", typeof(Single))]
            public Single VerticalNegativeScale;
            [FieldAttribute("roughness", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock Roughness;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(64)]
            public Byte[] EmptyString3;
            [FieldAttribute("octave 1 frequency:cycles/second", typeof(Single))]
            public Single Octave1Frequency;
            [FieldAttribute("octave 2 frequency:cycles/second", typeof(Single))]
            public Single Octave2Frequency;
            [FieldAttribute("octave 3 frequency:cycles/second", typeof(Single))]
            public Single Octave3Frequency;
            [FieldAttribute("octave 4 frequency:cycles/second", typeof(Single))]
            public Single Octave4Frequency;
            [FieldAttribute("octave 5 frequency:cycles/second", typeof(Single))]
            public Single Octave5Frequency;
            [FieldAttribute("octave 6 frequency:cycles/second", typeof(Single))]
            public Single Octave6Frequency;
            [FieldAttribute("octave 7 frequency:cycles/second", typeof(Single))]
            public Single Octave7Frequency;
            [FieldAttribute("octave 8 frequency:cycles/second", typeof(Single))]
            public Single Octave8Frequency;
            [FieldAttribute("octave 9 frequency:cycles/second", typeof(Single))]
            public Single Octave9Frequency;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(28)]
            public Byte[] EmptyString4;
            [FieldAttribute("octave flags", typeof(OctaveFlagsOptions))]
            [OptionsAttribute(typeof(OctaveFlagsOptions), true)]
            public OctaveFlagsOptions OctaveFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString5;
            [FieldAttribute("cores", typeof(TagBlock))]
            [BlockAttribute("core", 4, typeof(LiquidCoreBlock))]
            public TagBlock Cores;
            [FieldAttribute("range-scale", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock RangeScale;
            [FieldAttribute("brightness-scale", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock BrightnessScale;
            public TagBlockList<LiquidCoreBlock> CoresList
            {
                get
                {
                    return this.coresList;
                }
            }
            public override int Size
            {
                get
                {
                    return 276;
                }
            }
            public override void Initialize()
            {
                this.coresList.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.SpriteCount = ((SpriteCountOptions)(0));
                this.NaturalLength = 0;
                this.Instances = 0;
                this.EmptyString = new byte[2];
                this.InstanceSpreadAngle = 0;
                this.InstanceRotationPeriod = 0;
                this.EmptyString1 = new byte[8];
                this.MaterialEffects = TagReference.Null;
                this.Bitmap = TagReference.Null;
                this.EmptyString2 = new byte[8];
                this.HorizontalRange = new ScalarFunctionStructBlock();
                this.VerticalRange = new ScalarFunctionStructBlock();
                this.VerticalNegativeScale = 0;
                this.Roughness = new ScalarFunctionStructBlock();
                this.EmptyString3 = new byte[64];
                this.Octave1Frequency = 0;
                this.Octave2Frequency = 0;
                this.Octave3Frequency = 0;
                this.Octave4Frequency = 0;
                this.Octave5Frequency = 0;
                this.Octave6Frequency = 0;
                this.Octave7Frequency = 0;
                this.Octave8Frequency = 0;
                this.Octave9Frequency = 0;
                this.EmptyString4 = new byte[28];
                this.OctaveFlags = ((OctaveFlagsOptions)(0));
                this.EmptyString5 = new byte[2];
                this.Cores = TagBlock.Zero;
                this.RangeScale = new ScalarFunctionStructBlock();
                this.BrightnessScale = new ScalarFunctionStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.SpriteCount = ((SpriteCountOptions)(reader.ReadInt16()));
                this.NaturalLength = reader.ReadSingle();
                this.Instances = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.InstanceSpreadAngle = reader.ReadSingle();
                this.InstanceRotationPeriod = reader.ReadSingle();
                this.EmptyString1 = reader.ReadBytes(8);
                this.MaterialEffects = reader.Read<TagReference>();
                this.Bitmap = reader.Read<TagReference>();
                this.EmptyString2 = reader.ReadBytes(8);
                this.HorizontalRange = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.VerticalRange = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.VerticalNegativeScale = reader.ReadSingle();
                this.Roughness = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.EmptyString3 = reader.ReadBytes(64);
                this.Octave1Frequency = reader.ReadSingle();
                this.Octave2Frequency = reader.ReadSingle();
                this.Octave3Frequency = reader.ReadSingle();
                this.Octave4Frequency = reader.ReadSingle();
                this.Octave5Frequency = reader.ReadSingle();
                this.Octave6Frequency = reader.ReadSingle();
                this.Octave7Frequency = reader.ReadSingle();
                this.Octave8Frequency = reader.ReadSingle();
                this.Octave9Frequency = reader.ReadSingle();
                this.EmptyString4 = reader.ReadBytes(28);
                this.OctaveFlags = ((OctaveFlagsOptions)(reader.ReadInt16()));
                this.EmptyString5 = reader.ReadBytes(2);
                this.Cores = reader.ReadInt64();
                this.coresList.Read(reader, this.Cores);
                this.RangeScale = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                this.BrightnessScale = reader.ReadDataStructure<ScalarFunctionStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(76, 4)]
            public sealed class LiquidCoreBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString;
                [FieldAttribute("bitmap index", typeof(Int16))]
                public Int16 BitmapIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("thickness", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Thickness;
                [FieldAttribute("color", typeof(ColorFunctionStructBlock))]
                public ColorFunctionStructBlock Color;
                [FieldAttribute("brightness-time", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock BrightnessTime;
                [FieldAttribute("brightness-facing", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock BrightnessFacing;
                [FieldAttribute("along-axis scale", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock AlongAxisScale;
                public override int Size
                {
                    get
                    {
                        return 76;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[12];
                    this.BitmapIndex = 0;
                    this.EmptyString1 = new byte[2];
                    this.Thickness = new ScalarFunctionStructBlock();
                    this.Color = new ColorFunctionStructBlock();
                    this.BrightnessTime = new ScalarFunctionStructBlock();
                    this.BrightnessFacing = new ScalarFunctionStructBlock();
                    this.AlongAxisScale = new ScalarFunctionStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(12);
                    this.BitmapIndex = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.Thickness = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.Color = reader.ReadDataStructure<ColorFunctionStructBlock>();
                    this.BrightnessTime = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.BrightnessFacing = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.AlongAxisScale = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class ScalarFunctionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Function = new MappingFunctionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : AbideTagBlock
                    {
                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                        [FieldAttribute("data", typeof(TagBlock))]
                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public TagBlockList<ByteBlock> DataList
                        {
                            get
                            {
                                return this.dataList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.dataList.Clear();
                            this.Data = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Data = reader.ReadInt64();
                            this.dataList.Read(reader, this.Data);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : AbideTagBlock
                        {
                            [FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public override int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Value = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Value = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
                [FieldSetAttribute(12, 4)]
                public sealed class ColorFunctionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Function = new MappingFunctionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : AbideTagBlock
                    {
                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                        [FieldAttribute("data", typeof(TagBlock))]
                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public TagBlockList<ByteBlock> DataList
                        {
                            get
                            {
                                return this.dataList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.dataList.Clear();
                            this.Data = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Data = reader.ReadInt64();
                            this.dataList.Read(reader, this.Data);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : AbideTagBlock
                        {
                            [FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public override int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Value = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Value = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScalarFunctionStructBlock : AbideTagBlock
            {
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            public enum FlagsOptions : Int16
            {
                BasisMarkerRelative = 1,
                SpreadByExternalInput = 2,
                CollideWithStuff = 4,
                NoPerspectiveMidpoints = 8,
            }
            public enum SpriteCountOptions : Int16
            {
                _4Sprites = 0,
                _8Sprites = 1,
                _16Sprites = 2,
                _32Sprites = 3,
                _64Sprites = 4,
                _128Sprites = 5,
                _256Sprites = 6,
            }
            public enum OctaveFlagsOptions : Int16
            {
                Octave1 = 1,
                Octave2 = 2,
                Octave3 = 4,
                Octave4 = 8,
                Octave5 = 16,
                Octave6 = 32,
                Octave7 = 64,
                Octave8 = 128,
                Octave9 = 256,
            }
        }
        public enum TypeOptions : Int16
        {
            Standard = 0,
            WeaponToProjectile = 1,
            ProjectileFromWeapon = 2,
        }
    }
}
#pragma warning restore CS1591
