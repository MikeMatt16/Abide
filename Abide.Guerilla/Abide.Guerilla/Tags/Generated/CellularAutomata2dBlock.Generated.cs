#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(556, 4)]
    [TagGroupAttribute("cellular_automata2d", 2003331440u, 4294967293u, typeof(CellularAutomata2dBlock))]
    public sealed class CellularAutomata2dBlock : AbideTagBlock
    {
        private TagBlockList<RulesBlock> rulesList = new TagBlockList<RulesBlock>(16);
        [FieldAttribute("updates per second:Hz", typeof(Int16))]
        public Int16 UpdatesPerSecond;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("dead cell penalty", typeof(Single))]
        public Single DeadCellPenalty;
        [FieldAttribute("live cell bonus", typeof(Single))]
        public Single LiveCellBonus;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(80)]
        public Byte[] EmptyString1;
        [FieldAttribute("width:cells", typeof(Int16))]
        public Int16 Width;
        [FieldAttribute("height:cells", typeof(Int16))]
        public Int16 Height;
        [FieldAttribute("cell width:world units", typeof(Single))]
        public Single CellWidth;
        [FieldAttribute("height:world units", typeof(Single))]
        public Single Height1;
        [FieldAttribute("velocity:cells/update", typeof(Vector2))]
        public Vector2 Velocity;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(28)]
        public Byte[] EmptyString2;
        [FieldAttribute("marker", typeof(StringId))]
        public StringId Marker;
        [FieldAttribute("interpolation flags", typeof(InterpolationFlagsOptions))]
        [OptionsAttribute(typeof(InterpolationFlagsOptions), true)]
        public InterpolationFlagsOptions InterpolationFlags;
        [FieldAttribute("base color", typeof(ColorRgbF))]
        public ColorRgbF BaseColor;
        [FieldAttribute("peak color", typeof(ColorRgbF))]
        public ColorRgbF PeakColor;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(76)]
        public Byte[] EmptyString3;
        [FieldAttribute("width:cells", typeof(Int16))]
        public Int16 Width1;
        [FieldAttribute("height:cells", typeof(Int16))]
        public Int16 Height2;
        [FieldAttribute("cell width:world units", typeof(Single))]
        public Single CellWidth1;
        [FieldAttribute("velocity:cells/update", typeof(Vector2))]
        public Vector2 Velocity1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(48)]
        public Byte[] EmptyString4;
        [FieldAttribute("marker", typeof(StringId))]
        public StringId Marker1;
        [FieldAttribute("texture width:cells", typeof(Int16))]
        public Int16 TextureWidth;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString5;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(48)]
        public Byte[] EmptyString6;
        [FieldAttribute("texture", typeof(TagReference))]
        public TagReference Texture;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(160)]
        public Byte[] EmptyString7;
        [FieldAttribute("rules", typeof(TagBlock))]
        [BlockAttribute("rules_block", 16, typeof(RulesBlock))]
        public TagBlock Rules;
        public TagBlockList<RulesBlock> RulesList
        {
            get
            {
                return this.rulesList;
            }
        }
        public override int Size
        {
            get
            {
                return 556;
            }
        }
        public override void Initialize()
        {
            this.rulesList.Clear();
            this.UpdatesPerSecond = 0;
            this.EmptyString = new byte[2];
            this.DeadCellPenalty = 0;
            this.LiveCellBonus = 0;
            this.EmptyString1 = new byte[80];
            this.Width = 0;
            this.Height = 0;
            this.CellWidth = 0;
            this.Height1 = 0;
            this.Velocity = Vector2.Zero;
            this.EmptyString2 = new byte[28];
            this.Marker = StringId.Zero;
            this.InterpolationFlags = ((InterpolationFlagsOptions)(0));
            this.BaseColor = ColorRgbF.Zero;
            this.PeakColor = ColorRgbF.Zero;
            this.EmptyString3 = new byte[76];
            this.Width1 = 0;
            this.Height2 = 0;
            this.CellWidth1 = 0;
            this.Velocity1 = Vector2.Zero;
            this.EmptyString4 = new byte[48];
            this.Marker1 = StringId.Zero;
            this.TextureWidth = 0;
            this.EmptyString5 = new byte[2];
            this.EmptyString6 = new byte[48];
            this.Texture = TagReference.Null;
            this.EmptyString7 = new byte[160];
            this.Rules = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.UpdatesPerSecond = reader.ReadInt16();
            this.EmptyString = reader.ReadBytes(2);
            this.DeadCellPenalty = reader.ReadSingle();
            this.LiveCellBonus = reader.ReadSingle();
            this.EmptyString1 = reader.ReadBytes(80);
            this.Width = reader.ReadInt16();
            this.Height = reader.ReadInt16();
            this.CellWidth = reader.ReadSingle();
            this.Height1 = reader.ReadSingle();
            this.Velocity = reader.Read<Vector2>();
            this.EmptyString2 = reader.ReadBytes(28);
            this.Marker = reader.ReadInt32();
            this.InterpolationFlags = ((InterpolationFlagsOptions)(reader.ReadInt32()));
            this.BaseColor = reader.Read<ColorRgbF>();
            this.PeakColor = reader.Read<ColorRgbF>();
            this.EmptyString3 = reader.ReadBytes(76);
            this.Width1 = reader.ReadInt16();
            this.Height2 = reader.ReadInt16();
            this.CellWidth1 = reader.ReadSingle();
            this.Velocity1 = reader.Read<Vector2>();
            this.EmptyString4 = reader.ReadBytes(48);
            this.Marker1 = reader.ReadInt32();
            this.TextureWidth = reader.ReadInt16();
            this.EmptyString5 = reader.ReadBytes(2);
            this.EmptyString6 = reader.ReadBytes(48);
            this.Texture = reader.Read<TagReference>();
            this.EmptyString7 = reader.ReadBytes(160);
            this.Rules = reader.ReadInt64();
            this.rulesList.Read(reader, this.Rules);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(88, 4)]
        public sealed class RulesBlock : AbideTagBlock
        {
            private TagBlockList<StatesBlock> statesList = new TagBlockList<StatesBlock>(16);
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("tint color", typeof(ColorRgbF))]
            public ColorRgbF TintColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            [FieldAttribute("states", typeof(TagBlock))]
            [BlockAttribute("states_block", 16, typeof(StatesBlock))]
            public TagBlock States;
            public TagBlockList<StatesBlock> StatesList
            {
                get
                {
                    return this.statesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 88;
                }
            }
            public override void Initialize()
            {
                this.statesList.Clear();
                this.Name = String32.Empty;
                this.TintColor = ColorRgbF.Zero;
                this.EmptyString = new byte[32];
                this.States = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.TintColor = reader.Read<ColorRgbF>();
                this.EmptyString = reader.ReadBytes(32);
                this.States = reader.ReadInt64();
                this.statesList.Read(reader, this.States);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(96, 4)]
            public sealed class StatesBlock : AbideTagBlock
            {
                [FieldAttribute("name^", typeof(String32))]
                public String32 Name;
                [FieldAttribute("color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                [FieldAttribute("counts as:neighbors", typeof(Int16))]
                public Int16 CountsAs;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("initial placement weight", typeof(Single))]
                public Single InitialPlacementWeight;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(24)]
                public Byte[] EmptyString1;
                [FieldAttribute("zero", typeof(Int16))]
                public Int16 Zero;
                [FieldAttribute("one", typeof(Int16))]
                public Int16 One;
                [FieldAttribute("two", typeof(Int16))]
                public Int16 Two;
                [FieldAttribute("three", typeof(Int16))]
                public Int16 Three;
                [FieldAttribute("four", typeof(Int16))]
                public Int16 Four;
                [FieldAttribute("five", typeof(Int16))]
                public Int16 Five;
                [FieldAttribute("six", typeof(Int16))]
                public Int16 Six;
                [FieldAttribute("seven", typeof(Int16))]
                public Int16 Seven;
                [FieldAttribute("eight", typeof(Int16))]
                public Int16 Eight;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                public override int Size
                {
                    get
                    {
                        return 96;
                    }
                }
                public override void Initialize()
                {
                    this.Name = String32.Empty;
                    this.Color = ColorRgbF.Zero;
                    this.CountsAs = 0;
                    this.EmptyString = new byte[2];
                    this.InitialPlacementWeight = 0;
                    this.EmptyString1 = new byte[24];
                    this.Zero = 0;
                    this.One = 0;
                    this.Two = 0;
                    this.Three = 0;
                    this.Four = 0;
                    this.Five = 0;
                    this.Six = 0;
                    this.Seven = 0;
                    this.Eight = 0;
                    this.EmptyString2 = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.Read<String32>();
                    this.Color = reader.Read<ColorRgbF>();
                    this.CountsAs = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.InitialPlacementWeight = reader.ReadSingle();
                    this.EmptyString1 = reader.ReadBytes(24);
                    this.Zero = reader.ReadInt16();
                    this.One = reader.ReadInt16();
                    this.Two = reader.ReadInt16();
                    this.Three = reader.ReadInt16();
                    this.Four = reader.ReadInt16();
                    this.Five = reader.ReadInt16();
                    this.Six = reader.ReadInt16();
                    this.Seven = reader.ReadInt16();
                    this.Eight = reader.ReadInt16();
                    this.EmptyString2 = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        public enum InterpolationFlagsOptions : Int32
        {
            BlendInHsv = 1,
            MoreColors = 2,
        }
    }
}
#pragma warning restore CS1591
