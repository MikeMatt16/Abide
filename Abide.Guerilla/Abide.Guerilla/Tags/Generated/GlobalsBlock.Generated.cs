#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(760, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("globals", 1835103335u, 4294967293u, typeof(GlobalsBlock))]
    public sealed class GlobalsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(172)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("language", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(LanguageOptions), false)]
        public Int32 Language;
        [Abide.Guerilla.Tags.FieldAttribute("havok cleanup resources", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("havok_cleanup_resources_block", 1, typeof(HavokCleanupResourcesBlock))]
        public TagBlock HavokCleanupResources;
        [Abide.Guerilla.Tags.FieldAttribute("collision damage", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("collision_damage_block", 1, typeof(CollisionDamageBlock))]
        public TagBlock CollisionDamage;
        [Abide.Guerilla.Tags.FieldAttribute("sound globals", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("sound_globals_block", 1, typeof(SoundGlobalsBlock))]
        public TagBlock SoundGlobals;
        [Abide.Guerilla.Tags.FieldAttribute("ai globals", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ai_globals_block", 1, typeof(AiGlobalsBlock))]
        public TagBlock AiGlobals;
        [Abide.Guerilla.Tags.FieldAttribute("damage table", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("game_globals_damage_block", 1, typeof(GameGlobalsDamageBlock))]
        public TagBlock DamageTable;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
        public TagBlock EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("sounds", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("sound_block", 2, typeof(SoundBlock))]
        public TagBlock Sounds;
        [Abide.Guerilla.Tags.FieldAttribute("camera", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("camera_block", 1, typeof(CameraBlock))]
        public TagBlock Camera;
        [Abide.Guerilla.Tags.FieldAttribute("player control", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("player_control_block", 1, typeof(PlayerControlBlock))]
        public TagBlock PlayerControl;
        [Abide.Guerilla.Tags.FieldAttribute("difficulty", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("difficulty_block", 1, typeof(DifficultyBlock))]
        public TagBlock Difficulty;
        [Abide.Guerilla.Tags.FieldAttribute("grenades", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("grenades_block", 2, typeof(GrenadesBlock))]
        public TagBlock Grenades;
        [Abide.Guerilla.Tags.FieldAttribute("rasterizer data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("rasterizer_data_block", 1, typeof(RasterizerDataBlock))]
        public TagBlock RasterizerData;
        [Abide.Guerilla.Tags.FieldAttribute("interface tags", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("interface_tag_references", 1, typeof(InterfaceTagReferences))]
        public TagBlock InterfaceTags;
        [Abide.Guerilla.Tags.FieldAttribute("@weapon list (update _weapon_list enum in game_globals.h)", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("cheat_weapons_block", 20, typeof(CheatWeaponsBlock))]
        public TagBlock @weaponListUpdateWeaponListEnumInGameGlobalsh;
        [Abide.Guerilla.Tags.FieldAttribute("@cheat powerups", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("cheat_powerups_block", 20, typeof(CheatPowerupsBlock))]
        public TagBlock @cheatPowerups;
        [Abide.Guerilla.Tags.FieldAttribute("@multiplayer information", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("multiplayer_information_block", 1, typeof(MultiplayerInformationBlock))]
        public TagBlock @multiplayerInformation;
        [Abide.Guerilla.Tags.FieldAttribute("@player information", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("player_information_block", 1, typeof(PlayerInformationBlock))]
        public TagBlock @playerInformation;
        [Abide.Guerilla.Tags.FieldAttribute("@player representation", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("player_representation_block", 4, typeof(PlayerRepresentationBlock))]
        public TagBlock @playerRepresentation;
        [Abide.Guerilla.Tags.FieldAttribute("falling damage", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("falling_damage_block", 1, typeof(FallingDamageBlock))]
        public TagBlock FallingDamage;
        [Abide.Guerilla.Tags.FieldAttribute("old materials", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("old_materials_block", 33, typeof(OldMaterialsBlock))]
        public TagBlock OldMaterials;
        [Abide.Guerilla.Tags.FieldAttribute("materials", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("materials_block", 256, typeof(MaterialsBlock))]
        public TagBlock Materials;
        [Abide.Guerilla.Tags.FieldAttribute("multiplayer UI", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("multiplayer_ui_block", 1, typeof(MultiplayerUiBlock))]
        public TagBlock MultiplayerUi;
        [Abide.Guerilla.Tags.FieldAttribute("profile colors", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("multiplayer_color_block", 32, typeof(MultiplayerColorBlock))]
        public TagBlock ProfileColors;
        [Abide.Guerilla.Tags.FieldAttribute("multiplayer globals", typeof(TagReference))]
        public TagReference MultiplayerGlobals;
        [Abide.Guerilla.Tags.FieldAttribute("runtime level data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("runtime_levels_definition_block", 1, typeof(RuntimeLevelsDefinitionBlock))]
        public TagBlock RuntimeLevelData;
        [Abide.Guerilla.Tags.FieldAttribute("ui level data", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("ui_levels_definition_block", 1, typeof(UiLevelsDefinitionBlock))]
        public TagBlock UiLevelData;
        [Abide.Guerilla.Tags.FieldAttribute("default global lighting", typeof(TagReference))]
        public TagReference DefaultGlobalLighting1;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(252)]
        public Byte[] EmptyString2;
        public int Size
        {
            get
            {
                return 760;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class HavokCleanupResourcesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("object cleanup effect", typeof(TagReference))]
            public TagReference ObjectCleanupEffect;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
        public sealed class CollisionDamageBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("collision damage", typeof(TagReference))]
            public TagReference CollisionDamage;
            [Abide.Guerilla.Tags.FieldAttribute("min game acc (default)#0-oo", typeof(Single))]
            public Single MinGameAccDefault;
            [Abide.Guerilla.Tags.FieldAttribute("max game acc (default)#0-oo", typeof(Single))]
            public Single MaxGameAccDefault;
            [Abide.Guerilla.Tags.FieldAttribute("min game scale (default)#0-1", typeof(Single))]
            public Single MinGameScaleDefault;
            [Abide.Guerilla.Tags.FieldAttribute("max game scale (default)#0-1", typeof(Single))]
            public Single MaxGameScaleDefault;
            [Abide.Guerilla.Tags.FieldAttribute("min abs acc (default)#0-oo", typeof(Single))]
            public Single MinAbsAccDefault;
            [Abide.Guerilla.Tags.FieldAttribute("max abs acc (default)#0-oo", typeof(Single))]
            public Single MaxAbsAccDefault;
            [Abide.Guerilla.Tags.FieldAttribute("min abs scale (default)#0-1", typeof(Single))]
            public Single MinAbsScaleDefault;
            [Abide.Guerilla.Tags.FieldAttribute("max abs scale (default)#0-1", typeof(Single))]
            public Single MaxAbsScaleDefault;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(32)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 80;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
        public sealed class SoundGlobalsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("sound classes", typeof(TagReference))]
            public TagReference SoundClasses;
            [Abide.Guerilla.Tags.FieldAttribute("sound effects", typeof(TagReference))]
            public TagReference SoundEffects;
            [Abide.Guerilla.Tags.FieldAttribute("sound mix", typeof(TagReference))]
            public TagReference SoundMix;
            [Abide.Guerilla.Tags.FieldAttribute("sound combat dialogue constants", typeof(TagReference))]
            public TagReference SoundCombatDialogueConstants;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int32))]
            public Int32 EmptyString;
            public int Size
            {
                get
                {
                    return 68;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(372, 4)]
        public sealed class AiGlobalsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("danger broadly facing", typeof(Single))]
            public Single DangerBroadlyFacing;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("danger shooting near", typeof(Single))]
            public Single DangerShootingNear;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("danger shooting at", typeof(Single))]
            public Single DangerShootingAt;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("danger extremely close", typeof(Single))]
            public Single DangerExtremelyClose;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("danger shield damage", typeof(Single))]
            public Single DangerShieldDamage;
            [Abide.Guerilla.Tags.FieldAttribute("danger exetended shield damage", typeof(Single))]
            public Single DangerExetendedShieldDamage;
            [Abide.Guerilla.Tags.FieldAttribute("danger body damage", typeof(Single))]
            public Single DangerBodyDamage;
            [Abide.Guerilla.Tags.FieldAttribute("danger extended body damage", typeof(Single))]
            public Single DangerExtendedBodyDamage;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(48)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("global dialogue tag", typeof(TagReference))]
            public TagReference GlobalDialogueTag;
            [Abide.Guerilla.Tags.FieldAttribute("default mission dialogue sound effect", typeof(StringId))]
            public StringId DefaultMissionDialogueSoundEffect;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("jump down:wu/tick", typeof(Single))]
            public Single JumpDown;
            [Abide.Guerilla.Tags.FieldAttribute("jump step:wu/tick", typeof(Single))]
            public Single JumpStep;
            [Abide.Guerilla.Tags.FieldAttribute("jump crouch:wu/tick", typeof(Single))]
            public Single JumpCrouch;
            [Abide.Guerilla.Tags.FieldAttribute("jump stand:wu/tick", typeof(Single))]
            public Single JumpStand;
            [Abide.Guerilla.Tags.FieldAttribute("jump storey:wu/tick", typeof(Single))]
            public Single JumpStorey;
            [Abide.Guerilla.Tags.FieldAttribute("jump tower:wu/tick", typeof(Single))]
            public Single JumpTower;
            [Abide.Guerilla.Tags.FieldAttribute("max jump down height down:wu", typeof(Single))]
            public Single MaxJumpDownHeightDown;
            [Abide.Guerilla.Tags.FieldAttribute("max jump down height step:wu", typeof(Single))]
            public Single MaxJumpDownHeightStep;
            [Abide.Guerilla.Tags.FieldAttribute("max jump down height crouch:wu", typeof(Single))]
            public Single MaxJumpDownHeightCrouch;
            [Abide.Guerilla.Tags.FieldAttribute("max jump down height stand:wu", typeof(Single))]
            public Single MaxJumpDownHeightStand;
            [Abide.Guerilla.Tags.FieldAttribute("max jump down height storey:wu", typeof(Single))]
            public Single MaxJumpDownHeightStorey;
            [Abide.Guerilla.Tags.FieldAttribute("max jump down height tower:wu", typeof(Single))]
            public Single MaxJumpDownHeightTower;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(24)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(48)]
            public Byte[] EmptyString7;
            [Abide.Guerilla.Tags.FieldAttribute("gravemind properties", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ai_globals_gravemind_block", 1, typeof(AiGlobalsGravemindBlock))]
            public TagBlock GravemindProperties;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(48)]
            public Byte[] EmptyString8;
            [Abide.Guerilla.Tags.FieldAttribute("scary target threhold#A target of this scariness is offically considered scary (b" +
                "y combat dialogue, etc.)", typeof(Single))]
            public Single ScaryTargetThrehold;
            [Abide.Guerilla.Tags.FieldAttribute("scary weapon threhold#A weapon of this scariness is offically considered scary (b" +
                "y combat dialogue, etc.)", typeof(Single))]
            public Single ScaryWeaponThrehold;
            [Abide.Guerilla.Tags.FieldAttribute("player scariness", typeof(Single))]
            public Single PlayerScariness;
            [Abide.Guerilla.Tags.FieldAttribute("berserking actor scariness", typeof(Single))]
            public Single BerserkingActorScariness;
            public int Size
            {
                get
                {
                    return 372;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class AiGlobalsGravemindBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("min retreat time:secs", typeof(Single))]
                public Single MinRetreatTime;
                [Abide.Guerilla.Tags.FieldAttribute("ideal retreat time:secs", typeof(Single))]
                public Single IdealRetreatTime;
                [Abide.Guerilla.Tags.FieldAttribute("max retreat time:secs", typeof(Single))]
                public Single MaxRetreatTime;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
        public sealed class GameGlobalsDamageBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("damage groups", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("damage_group_block", 2147483647, typeof(DamageGroupBlock))]
            public TagBlock DamageGroups;
            public int Size
            {
                get
                {
                    return 12;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class DamageGroupBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("armor modifiers", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("armor_modifier_block", 2147483647, typeof(ArmorModifierBlock))]
                public TagBlock ArmorModifiers;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                public sealed class ArmorModifierBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
                    public StringId Name;
                    [Abide.Guerilla.Tags.FieldAttribute("damage multiplier", typeof(Single))]
                    public Single DamageMultiplier;
                    public int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
        public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            public int Size
            {
                get
                {
                    return 0;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(172, 4)]
        public sealed class SoundBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("class", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ClassOptions), false)]
            public Byte Class;
            [Abide.Guerilla.Tags.FieldAttribute("sample rate*", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(SampleRateOptions), false)]
            public Byte SampleRate;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(EmptyStringOptions), false)]
            public Byte EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("import type*", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(ImportTypeOptions), false)]
            public Byte ImportType;
            [Abide.Guerilla.Tags.FieldAttribute("playback", typeof(SoundPlaybackParametersStructBlock))]
            public SoundPlaybackParametersStructBlock Playback;
            [Abide.Guerilla.Tags.FieldAttribute("scale", typeof(SoundScaleModifiersStructBlock))]
            public SoundScaleModifiersStructBlock Scale;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("encoding*", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(EncodingOptions), false)]
            public Byte Encoding;
            [Abide.Guerilla.Tags.FieldAttribute("compression*", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(CompressionOptions), false)]
            public Byte Compression;
            [Abide.Guerilla.Tags.FieldAttribute("promotion", typeof(SoundPromotionParametersStructBlock))]
            public SoundPromotionParametersStructBlock Promotion;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("pitch ranges*#pitch ranges allow multiple samples to represent the same sound at " +
                "different pitches", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sound_pitch_range_block", 9, typeof(SoundPitchRangeBlock))]
            public TagBlock PitchRanges;
            [Abide.Guerilla.Tags.FieldAttribute("platform parameters", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sound_platform_sound_playback_block", 1, typeof(SoundPlatformSoundPlaybackBlock))]
            public TagBlock PlatformParameters;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sound_extra_info_block", 1, typeof(SoundExtraInfoBlock))]
            public TagBlock EmptyString3;
            public int Size
            {
                get
                {
                    return 172;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class SoundPitchRangeBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name*#the name of the imported pitch range directory", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("natural pitch:cents#the apparent pitch when these samples are played at their rec" +
                    "orded pitch.", typeof(Int16))]
                public Int16 NaturalPitch;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("permutations*#permutations represent equivalent variations of this sound.", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_permutations_block", 32, typeof(SoundPermutationsBlock))]
                public TagBlock Permutations;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
                public sealed class SoundPermutationsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("name*^#name of the file from which this sample was imported", typeof(StringId))]
                    public StringId Name;
                    [Abide.Guerilla.Tags.FieldAttribute("skip fraction#fraction of requests to play this permutation that are ignored (a d" +
                        "ifferent permutation is selected.)", typeof(Single))]
                    public Single SkipFraction;
                    [Abide.Guerilla.Tags.FieldAttribute("gain:dB#additional attenuation when played", typeof(Single))]
                    public Single Gain;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int32))]
                    public Int32 EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int16))]
                    public Int16 EmptyString2;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int16))]
                    public Int16 EmptyString3;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("sound_permutation_chunk_block", 32767, typeof(SoundPermutationChunkBlock))]
                    public TagBlock EmptyString4;
                    public int Size
                    {
                        get
                        {
                            return 32;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class SoundPermutationChunkBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("file offset*", typeof(Int32))]
                        public Int32 FileOffset;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int32))]
                        public Int32 EmptyString;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int32))]
                        public Int32 EmptyString1;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(84, 4)]
            public sealed class SoundPlatformSoundPlaybackBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("playback definition", typeof(SimplePlatformSoundPlaybackStructBlock))]
                public SimplePlatformSoundPlaybackStructBlock PlaybackDefinition;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
                public TagBlock EmptyString;
                public int Size
                {
                    get
                    {
                        return 84;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
                public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    public int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(72, 4)]
                public sealed class SimplePlatformSoundPlaybackStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("platform_sound_override_mixbins_block", 8, typeof(PlatformSoundOverrideMixbinsBlock))]
                    public TagBlock EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                    public Int32 Flags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(8)]
                    public Byte[] EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("filter", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("platform_sound_filter_block", 1, typeof(PlatformSoundFilterBlock))]
                    public TagBlock Filter;
                    [Abide.Guerilla.Tags.FieldAttribute("pitch lfo", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("platform_sound_pitch_lfo_block", 1, typeof(PlatformSoundPitchLfoBlock))]
                    public TagBlock PitchLfo;
                    [Abide.Guerilla.Tags.FieldAttribute("filter lfo", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("platform_sound_filter_lfo_block", 1, typeof(PlatformSoundFilterLfoBlock))]
                    public TagBlock FilterLfo;
                    [Abide.Guerilla.Tags.FieldAttribute("sound effect", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("sound_effect_playback_block", 1, typeof(SoundEffectPlaybackBlock))]
                    public TagBlock SoundEffect;
                    public int Size
                    {
                        get
                        {
                            return 72;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
                    public sealed class PlatformSoundOverrideMixbinsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("mixbin", typeof(Int32))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(MixbinOptions), false)]
                        public Int32 Mixbin;
                        [Abide.Guerilla.Tags.FieldAttribute("gain:dB", typeof(Single))]
                        public Single Gain;
                        public int Size
                        {
                            get
                            {
                                return 8;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        public enum MixbinOptions
                        {
                            FrontLeft = 0,
                            FrontRight = 1,
                            BackLeft = 2,
                            BackRight = 3,
                            Center = 4,
                            LowFrequency = 5,
                            Reverb = 6,
                            _3dFrontLeft = 7,
                            _3dFrontRight = 8,
                            _3dBackLeft = 9,
                            _3dBackRight = 10,
                            DefaultLeftSpeakers = 11,
                            DefaultRightSpeakers = 12,
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(72, 4)]
                    public sealed class PlatformSoundFilterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("filter type", typeof(Int32))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FilterTypeOptions), false)]
                        public Int32 FilterType;
                        [Abide.Guerilla.Tags.FieldAttribute("filter width:[0,7]", typeof(Int32))]
                        public Int32 FilterWidth;
                        [Abide.Guerilla.Tags.FieldAttribute("left filter frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock LeftFilterFrequency1;
                        [Abide.Guerilla.Tags.FieldAttribute("left filter gain", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock LeftFilterGain1;
                        [Abide.Guerilla.Tags.FieldAttribute("right filter frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock RightFilterFrequency1;
                        [Abide.Guerilla.Tags.FieldAttribute("right filter gain", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock RightFilterGain1;
                        public int Size
                        {
                            get
                            {
                                return 72;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                        public sealed class SoundPlaybackParameterDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            public int Size
                            {
                                get
                                {
                                    return 16;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                        public enum FilterTypeOptions
                        {
                            ParametricEq = 0,
                            Dls2 = 1,
                            BothOnlyValidForMono = 2,
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
                    public sealed class PlatformSoundPitchLfoBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("delay", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock Delay1;
                        [Abide.Guerilla.Tags.FieldAttribute("frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock Frequency1;
                        [Abide.Guerilla.Tags.FieldAttribute("pitch modulation", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock PitchModulation1;
                        public int Size
                        {
                            get
                            {
                                return 48;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                        public sealed class SoundPlaybackParameterDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            public int Size
                            {
                                get
                                {
                                    return 16;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
                    public sealed class PlatformSoundFilterLfoBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("delay", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock Delay1;
                        [Abide.Guerilla.Tags.FieldAttribute("frequency", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock Frequency1;
                        [Abide.Guerilla.Tags.FieldAttribute("cutoff modulation", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock CutoffModulation1;
                        [Abide.Guerilla.Tags.FieldAttribute("gain modulation", typeof(SoundPlaybackParameterDefinitionBlock))]
                        public SoundPlaybackParameterDefinitionBlock GainModulation1;
                        public int Size
                        {
                            get
                            {
                                return 64;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                        public sealed class SoundPlaybackParameterDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            public int Size
                            {
                                get
                                {
                                    return 16;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(72, 4)]
                    public sealed class SoundEffectPlaybackBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("sound effect struct", typeof(SoundEffectStructDefinitionBlock))]
                        public SoundEffectStructDefinitionBlock SoundEffectStruct;
                        public int Size
                        {
                            get
                            {
                                return 72;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(72, 4)]
                        public sealed class SoundEffectStructDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
                            public TagReference EmptyString;
                            [Abide.Guerilla.Tags.FieldAttribute("components", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("sound_effect_component_block", 16, typeof(SoundEffectComponentBlock))]
                            public TagBlock Components;
                            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("sound_effect_overrides_block", 128, typeof(SoundEffectOverridesBlock))]
                            public TagBlock EmptyString1;
                            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("platform_sound_effect_collection_block", 1, typeof(PlatformSoundEffectCollectionBlock))]
                            public TagBlock EmptyString3;
                            public int Size
                            {
                                get
                                {
                                    return 72;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(24, 4)]
                            public sealed class SoundEffectComponentBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                                public TagReference Sound;
                                [Abide.Guerilla.Tags.FieldAttribute("gain:dB#additional attenuation to sound", typeof(Single))]
                                public Single Gain;
                                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                                public Int32 Flags;
                                public int Size
                                {
                                    get
                                    {
                                        return 24;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                                public enum FlagsOptions
                                {
                                    DontPlayAtStart = 1,
                                    PlayOnStop = 2,
                                    EmptyString = 4,
                                    PlayAlternate = 8,
                                    EmptyString1 = 16,
                                    SyncWithOriginLoopingSound = 32,
                                }
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                            public sealed class SoundEffectOverridesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("name", typeof(StringId))]
                                public StringId Name;
                                [Abide.Guerilla.Tags.FieldAttribute("overrides", typeof(TagBlock))]
                                [Abide.Guerilla.Tags.BlockAttribute("sound_effect_override_parameters_block", 128, typeof(SoundEffectOverrideParametersBlock))]
                                public TagBlock Overrides;
                                public int Size
                                {
                                    get
                                    {
                                        return 16;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                                [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
                                public sealed class SoundEffectOverrideParametersBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                {
                                    [Abide.Guerilla.Tags.FieldAttribute("name", typeof(StringId))]
                                    public StringId Name;
                                    [Abide.Guerilla.Tags.FieldAttribute("input", typeof(StringId))]
                                    public StringId Input;
                                    [Abide.Guerilla.Tags.FieldAttribute("range", typeof(StringId))]
                                    public StringId Range;
                                    [Abide.Guerilla.Tags.FieldAttribute("time period: seconds", typeof(Single))]
                                    public Single TimePeriod;
                                    [Abide.Guerilla.Tags.FieldAttribute("integer value", typeof(Int32))]
                                    public Int32 IntegerValue;
                                    [Abide.Guerilla.Tags.FieldAttribute("real value", typeof(Single))]
                                    public Single RealValue;
                                    [Abide.Guerilla.Tags.FieldAttribute("function value", typeof(MappingFunctionBlock))]
                                    public MappingFunctionBlock FunctionValue;
                                    public int Size
                                    {
                                        get
                                        {
                                            return 36;
                                        }
                                    }
                                    public void Initialize()
                                    {
                                    }
                                    public void Read(System.IO.BinaryReader reader)
                                    {
                                    }
                                    public void Write(System.IO.BinaryWriter writer)
                                    {
                                    }
                                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                                    public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                    {
                                        [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                                        [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                                        public TagBlock Data;
                                        public int Size
                                        {
                                            get
                                            {
                                                return 12;
                                            }
                                        }
                                        public void Initialize()
                                        {
                                        }
                                        public void Read(System.IO.BinaryReader reader)
                                        {
                                        }
                                        public void Write(System.IO.BinaryWriter writer)
                                        {
                                        }
                                        [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                                        public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                        {
                                            [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                            public Byte Value;
                                            public int Size
                                            {
                                                get
                                                {
                                                    return 1;
                                                }
                                            }
                                            public void Initialize()
                                            {
                                            }
                                            public void Read(System.IO.BinaryReader reader)
                                            {
                                            }
                                            public void Write(System.IO.BinaryWriter writer)
                                            {
                                            }
                                        }
                                    }
                                }
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
                            public sealed class PlatformSoundEffectCollectionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("sound effects*", typeof(TagBlock))]
                                [Abide.Guerilla.Tags.BlockAttribute("platform_sound_effect_block", 8, typeof(PlatformSoundEffectBlock))]
                                public TagBlock SoundEffects;
                                [Abide.Guerilla.Tags.FieldAttribute("low frequency input*", typeof(TagBlock))]
                                [Abide.Guerilla.Tags.BlockAttribute("platform_sound_effect_function_block", 16, typeof(PlatformSoundEffectFunctionBlock))]
                                public TagBlock LowFrequencyInput;
                                [Abide.Guerilla.Tags.FieldAttribute("sound effect overrides", typeof(Int32))]
                                public Int32 SoundEffectOverrides;
                                public int Size
                                {
                                    get
                                    {
                                        return 28;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                                [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
                                public sealed class PlatformSoundEffectBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                {
                                    [Abide.Guerilla.Tags.FieldAttribute("function inputs", typeof(TagBlock))]
                                    [Abide.Guerilla.Tags.BlockAttribute("platform_sound_effect_function_block", 16, typeof(PlatformSoundEffectFunctionBlock))]
                                    public TagBlock FunctionInputs;
                                    [Abide.Guerilla.Tags.FieldAttribute("constant inputs", typeof(TagBlock))]
                                    [Abide.Guerilla.Tags.BlockAttribute("platform_sound_effect_constant_block", 16, typeof(PlatformSoundEffectConstantBlock))]
                                    public TagBlock ConstantInputs;
                                    [Abide.Guerilla.Tags.FieldAttribute("template override descriptors", typeof(TagBlock))]
                                    [Abide.Guerilla.Tags.BlockAttribute("platform_sound_effect_override_descriptor_block", 16, typeof(PlatformSoundEffectOverrideDescriptorBlock))]
                                    public TagBlock TemplateOverrideDescriptors;
                                    [Abide.Guerilla.Tags.FieldAttribute("input overrides", typeof(Int32))]
                                    public Int32 InputOverrides;
                                    public int Size
                                    {
                                        get
                                        {
                                            return 40;
                                        }
                                    }
                                    public void Initialize()
                                    {
                                    }
                                    public void Read(System.IO.BinaryReader reader)
                                    {
                                    }
                                    public void Write(System.IO.BinaryWriter writer)
                                    {
                                    }
                                    [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
                                    public sealed class PlatformSoundEffectFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                    {
                                        [Abide.Guerilla.Tags.FieldAttribute("input", typeof(Int16))]
                                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputOptions), false)]
                                        public Int16 Input;
                                        [Abide.Guerilla.Tags.FieldAttribute("range", typeof(Int16))]
                                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeOptions), false)]
                                        public Int16 Range;
                                        [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                                        public MappingFunctionBlock Function;
                                        [Abide.Guerilla.Tags.FieldAttribute("time period: seconds", typeof(Single))]
                                        public Single TimePeriod;
                                        public int Size
                                        {
                                            get
                                            {
                                                return 20;
                                            }
                                        }
                                        public void Initialize()
                                        {
                                        }
                                        public void Read(System.IO.BinaryReader reader)
                                        {
                                        }
                                        public void Write(System.IO.BinaryWriter writer)
                                        {
                                        }
                                        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                                        public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                        {
                                            [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                                            [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                                            public TagBlock Data;
                                            public int Size
                                            {
                                                get
                                                {
                                                    return 12;
                                                }
                                            }
                                            public void Initialize()
                                            {
                                            }
                                            public void Read(System.IO.BinaryReader reader)
                                            {
                                            }
                                            public void Write(System.IO.BinaryWriter writer)
                                            {
                                            }
                                            [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                                            public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                            {
                                                [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                                public Byte Value;
                                                public int Size
                                                {
                                                    get
                                                    {
                                                        return 1;
                                                    }
                                                }
                                                public void Initialize()
                                                {
                                                }
                                                public void Read(System.IO.BinaryReader reader)
                                                {
                                                }
                                                public void Write(System.IO.BinaryWriter writer)
                                                {
                                                }
                                            }
                                        }
                                        public enum InputOptions
                                        {
                                            Zero = 0,
                                            Time = 1,
                                            Scale = 2,
                                            Rolloff = 3,
                                        }
                                        public enum RangeOptions
                                        {
                                            Zero = 0,
                                            Time = 1,
                                            Scale = 2,
                                            Rolloff = 3,
                                        }
                                    }
                                    [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                                    public sealed class PlatformSoundEffectConstantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                    {
                                        [Abide.Guerilla.Tags.FieldAttribute("constant value", typeof(Single))]
                                        public Single ConstantValue;
                                        public int Size
                                        {
                                            get
                                            {
                                                return 4;
                                            }
                                        }
                                        public void Initialize()
                                        {
                                        }
                                        public void Read(System.IO.BinaryReader reader)
                                        {
                                        }
                                        public void Write(System.IO.BinaryWriter writer)
                                        {
                                        }
                                    }
                                    [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                                    public sealed class PlatformSoundEffectOverrideDescriptorBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                    {
                                        [Abide.Guerilla.Tags.FieldAttribute("override descriptor", typeof(Byte))]
                                        public Byte OverrideDescriptor;
                                        public int Size
                                        {
                                            get
                                            {
                                                return 1;
                                            }
                                        }
                                        public void Initialize()
                                        {
                                        }
                                        public void Read(System.IO.BinaryReader reader)
                                        {
                                        }
                                        public void Write(System.IO.BinaryWriter writer)
                                        {
                                        }
                                    }
                                }
                                [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
                                public sealed class PlatformSoundEffectFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                {
                                    [Abide.Guerilla.Tags.FieldAttribute("input", typeof(Int16))]
                                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputOptions), false)]
                                    public Int16 Input;
                                    [Abide.Guerilla.Tags.FieldAttribute("range", typeof(Int16))]
                                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeOptions), false)]
                                    public Int16 Range;
                                    [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                                    public MappingFunctionBlock Function;
                                    [Abide.Guerilla.Tags.FieldAttribute("time period: seconds", typeof(Single))]
                                    public Single TimePeriod;
                                    public int Size
                                    {
                                        get
                                        {
                                            return 20;
                                        }
                                    }
                                    public void Initialize()
                                    {
                                    }
                                    public void Read(System.IO.BinaryReader reader)
                                    {
                                    }
                                    public void Write(System.IO.BinaryWriter writer)
                                    {
                                    }
                                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                                    public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                    {
                                        [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                                        [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                                        public TagBlock Data;
                                        public int Size
                                        {
                                            get
                                            {
                                                return 12;
                                            }
                                        }
                                        public void Initialize()
                                        {
                                        }
                                        public void Read(System.IO.BinaryReader reader)
                                        {
                                        }
                                        public void Write(System.IO.BinaryWriter writer)
                                        {
                                        }
                                        [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                                        public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                                        {
                                            [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                            public Byte Value;
                                            public int Size
                                            {
                                                get
                                                {
                                                    return 1;
                                                }
                                            }
                                            public void Initialize()
                                            {
                                            }
                                            public void Read(System.IO.BinaryReader reader)
                                            {
                                            }
                                            public void Write(System.IO.BinaryWriter writer)
                                            {
                                            }
                                        }
                                    }
                                    public enum InputOptions
                                    {
                                        Zero = 0,
                                        Time = 1,
                                        Scale = 2,
                                        Rolloff = 3,
                                    }
                                    public enum RangeOptions
                                    {
                                        Zero = 0,
                                        Time = 1,
                                        Scale = 2,
                                        Rolloff = 3,
                                    }
                                }
                            }
                        }
                    }
                    public enum FlagsOptions
                    {
                        Use3dRadioHack = 1,
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
            public sealed class SoundExtraInfoBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("language permutation info", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_definition_language_permutation_info_block", 576, typeof(SoundDefinitionLanguagePermutationInfoBlock))]
                public TagBlock LanguagePermutationInfo;
                [Abide.Guerilla.Tags.FieldAttribute("encoded permutation section", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_encoded_dialogue_section_block", 1, typeof(SoundEncodedDialogueSectionBlock))]
                public TagBlock EncodedPermutationSection;
                [Abide.Guerilla.Tags.FieldAttribute("geometry block info", typeof(GlobalGeometryBlockInfoStructBlock))]
                public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
                public int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class SoundDefinitionLanguagePermutationInfoBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("raw info block", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("sound_permutation_raw_info_block", 18, typeof(SoundPermutationRawInfoBlock))]
                    public TagBlock RawInfoBlock;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
                    public sealed class SoundPermutationRawInfoBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("skip fraction name", typeof(StringId))]
                        public StringId SkipFractionName;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
                        [Abide.Guerilla.Tags.BlockAttribute("sound_permutation_marker_block", 65535, typeof(SoundPermutationMarkerBlock))]
                        public TagBlock EmptyString4;
                        [Abide.Guerilla.Tags.FieldAttribute("compression*", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(CompressionOptions), false)]
                        public Int16 Compression;
                        [Abide.Guerilla.Tags.FieldAttribute("language*", typeof(Byte))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(LanguageOptions), false)]
                        public Byte Language;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                        [Abide.Guerilla.Tags.PaddingAttribute(1)]
                        public Byte[] EmptyString5;
                        public int Size
                        {
                            get
                            {
                                return 80;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                        public sealed class SoundPermutationMarkerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("marker id*", typeof(Int32))]
                            public Int32 MarkerId;
                            [Abide.Guerilla.Tags.FieldAttribute("name^*", typeof(StringId))]
                            public StringId Name;
                            [Abide.Guerilla.Tags.FieldAttribute("sample offset*", typeof(Int32))]
                            public Int32 SampleOffset;
                            public int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                        public enum CompressionOptions
                        {
                            NoneBigEndian = 0,
                            XboxAdpcm = 1,
                            ImaAdpcm = 2,
                            NoneLittleEndian = 3,
                            Wma = 4,
                        }
                        public enum LanguageOptions
                        {
                            English = 0,
                            Japanese = 1,
                            German = 2,
                            French = 3,
                            Spanish = 4,
                            Italian = 5,
                            Korean = 6,
                            Chinese = 7,
                            Portuguese = 8,
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
                public sealed class SoundEncodedDialogueSectionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound dialogue info", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("sound_permutation_dialogue_info_block", 288, typeof(SoundPermutationDialogueInfoBlock))]
                    public TagBlock SoundDialogueInfo;
                    public int Size
                    {
                        get
                        {
                            return 32;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                    public sealed class SoundPermutationDialogueInfoBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("mouth data offset", typeof(Int32))]
                        public Int32 MouthDataOffset;
                        [Abide.Guerilla.Tags.FieldAttribute("mouth data length", typeof(Int32))]
                        public Int32 MouthDataLength;
                        [Abide.Guerilla.Tags.FieldAttribute("lipsync data offset", typeof(Int32))]
                        public Int32 LipsyncDataOffset;
                        [Abide.Guerilla.Tags.FieldAttribute("lipsync data length", typeof(Int32))]
                        public Int32 LipsyncDataLength;
                        public int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
                public sealed class GlobalGeometryBlockInfoStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("Block Offset*", typeof(Int32))]
                    public Int32 BlockOffset;
                    [Abide.Guerilla.Tags.FieldAttribute("Block Size*", typeof(Int32))]
                    public Int32 BlockSize;
                    [Abide.Guerilla.Tags.FieldAttribute("Section Data Size*", typeof(Int32))]
                    public Int32 SectionDataSize;
                    [Abide.Guerilla.Tags.FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [Abide.Guerilla.Tags.FieldAttribute("Resources*", typeof(TagBlock))]
                    [Abide.Guerilla.Tags.BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                    public TagBlock Resources;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                    public Int16 OwnerTagSectionOffset;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(4)]
                    public Byte[] EmptyString2;
                    public int Size
                    {
                        get
                        {
                            return 40;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                    public sealed class GlobalGeometryBlockResourceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Type*", typeof(Byte))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                        public Byte Type;
                        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                        [Abide.Guerilla.Tags.PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        [Abide.Guerilla.Tags.FieldAttribute("Primary Locator*", typeof(Int16))]
                        public Int16 PrimaryLocator;
                        [Abide.Guerilla.Tags.FieldAttribute("Secondary Locator*", typeof(Int16))]
                        public Int16 SecondaryLocator;
                        [Abide.Guerilla.Tags.FieldAttribute("Resource Data Size*", typeof(Int32))]
                        public Int32 ResourceDataSize;
                        [Abide.Guerilla.Tags.FieldAttribute("Resource Data Offset*", typeof(Int32))]
                        public Int32 ResourceDataOffset;
                        public int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions
                        {
                            TagBlock = 0,
                            TagData = 1,
                            VertexBuffer = 2,
                        }
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(56, 4)]
            public sealed class SoundPlaybackParametersStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("minimum distance:world units#the distance below which this sound no longer gets l" +
                    "ouder", typeof(Single))]
                public Single MinimumDistance;
                [Abide.Guerilla.Tags.FieldAttribute("maximum distance:world units#the distance beyond which this sound is no longer au" +
                    "dible", typeof(Single))]
                public Single MaximumDistance;
                [Abide.Guerilla.Tags.FieldAttribute("skip fraction#fraction of requests to play this sound that will be ignored (0 mea" +
                    "ns always play.)", typeof(Single))]
                public Single SkipFraction;
                [Abide.Guerilla.Tags.FieldAttribute("maximum bend per second:cents", typeof(Single))]
                public Single MaximumBendPerSecond;
                [Abide.Guerilla.Tags.FieldAttribute("gain base:dB#sound\'s random gain will start here", typeof(Single))]
                public Single GainBase;
                [Abide.Guerilla.Tags.FieldAttribute("gain variance:dB#sound\'s gain will be randomly modulated within this range", typeof(Single))]
                public Single GainVariance;
                [Abide.Guerilla.Tags.FieldAttribute("inner cone angle:degrees#within the cone defined by this angle and the sound\'s di" +
                    "rection, the sound plays with a gain of 1.0.", typeof(Single))]
                public Single InnerConeAngle;
                [Abide.Guerilla.Tags.FieldAttribute("outer cone angle:degrees#outside the cone defined by this angle and the sound\'s d" +
                    "irection, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound doe" +
                    "s not attenuate with direction.)", typeof(Single))]
                public Single OuterConeAngle;
                [Abide.Guerilla.Tags.FieldAttribute("outer cone gain:dB#the gain to use when the sound is directed away from the liste" +
                    "ner", typeof(Single))]
                public Single OuterConeGain;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int32 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("azimuth", typeof(Single))]
                public Single Azimuth;
                [Abide.Guerilla.Tags.FieldAttribute("positional gain:dB", typeof(Single))]
                public Single PositionalGain;
                [Abide.Guerilla.Tags.FieldAttribute("first person gain:dB", typeof(Single))]
                public Single FirstPersonGain;
                public int Size
                {
                    get
                    {
                        return 56;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    OverrideAzimuth = 1,
                    Override3dGain = 2,
                    OverrideSpeakerGain = 4,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class SoundScaleModifiersStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
            public sealed class SoundPromotionParametersStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("promotion rules", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_promotion_rule_block", 9, typeof(SoundPromotionRuleBlock))]
                public TagBlock PromotionRules;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_promotion_runtime_timer_block", 9, typeof(SoundPromotionRuntimeTimerBlock))]
                public TagBlock EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString1;
                public int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class SoundPromotionRuleBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("pitch range^", typeof(Int16))]
                    public Int16 PitchRange;
                    [Abide.Guerilla.Tags.FieldAttribute("maximum playing count", typeof(Int16))]
                    public Int16 MaximumPlayingCount;
                    [Abide.Guerilla.Tags.FieldAttribute("suppression time:seconds#time from when first permutation plays to when another s" +
                        "ound from an equal or lower promotion can play", typeof(Single))]
                    public Single SuppressionTime;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(8)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
                public sealed class SoundPromotionRuntimeTimerBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Int32))]
                    public Int32 EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            public enum FlagsOptions
            {
                FitToAdpcmBlocksize = 1,
                SplitLongSoundIntoPermutations = 2,
                AlwaysSpatialize = 4,
                NeverObstruct = 8,
                InternalDontTouch = 16,
                UseHugeSoundTransmission = 32,
                LinkCountToOwnerUnit = 64,
                PitchRangeIsLanguage = 128,
                DontUseSoundClassSpeakerFlag = 256,
                DontUseLipsyncData = 512,
            }
            public enum ClassOptions
            {
                ProjectileImpact = 0,
                ProjectileDetonation = 1,
                ProjectileFlyby = 2,
                EmptyString = 3,
                WeaponFire = 4,
                WeaponReady = 5,
                WeaponReload = 6,
                WeaponEmpty = 7,
                WeaponCharge = 8,
                WeaponOverheat = 9,
                WeaponIdle = 10,
                WeaponMelee = 11,
                WeaponAnimation = 12,
                ObjectImpacts = 13,
                ParticleImpacts = 14,
                EmptyString1 = 15,
                EmptyString2 = 16,
                EmptyString3 = 17,
                UnitFootsteps = 18,
                UnitDialog = 19,
                UnitAnimation = 20,
                EmptyString4 = 21,
                VehicleCollision = 22,
                VehicleEngine = 23,
                VehicleAnimation = 24,
                EmptyString5 = 25,
                DeviceDoor = 26,
                EmptyString6 = 27,
                DeviceMachinery = 28,
                DeviceStationary = 29,
                EmptyString7 = 30,
                EmptyString8 = 31,
                Music = 32,
                AmbientNature = 33,
                AmbientMachinery = 34,
                EmptyString9 = 35,
                HugeAss = 36,
                ObjectLooping = 37,
                CinematicMusic = 38,
                EmptyString10 = 39,
                EmptyString11 = 40,
                EmptyString12 = 41,
                EmptyString13 = 42,
                EmptyString14 = 43,
                EmptyString15 = 44,
                CortanaMission = 45,
                CortanaCinematic = 46,
                MissionDialog = 47,
                CinematicDialog = 48,
                ScriptedCinematicFoley = 49,
                GameEvent = 50,
                Ui = 51,
                Test = 52,
                MultilingualTest = 53,
            }
            public enum SampleRateOptions
            {
                _22khz = 0,
                _44khz = 1,
                _32khz = 2,
            }
            public enum EmptyStringOptions
            {
                None = 0,
                OutputFrontSpeakers = 1,
                OutputRearSpeakers = 2,
                OutputCenterSpeakers = 3,
            }
            public enum ImportTypeOptions
            {
                Unknown = 0,
                SingleShot = 1,
                SingleLayer = 2,
                MultiLayer = 3,
            }
            public enum EncodingOptions
            {
                Mono = 0,
                Stereo = 1,
                Codec = 2,
            }
            public enum CompressionOptions
            {
                NoneBigEndian = 0,
                XboxAdpcm = 1,
                ImaAdpcm = 2,
                NoneLittleEndian = 3,
                Wma = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
        public sealed class CameraBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("default unit camera track", typeof(TagReference))]
            public TagReference DefaultUnitCameraTrack;
            [Abide.Guerilla.Tags.FieldAttribute("default change pause", typeof(Single))]
            public Single DefaultChangePause;
            [Abide.Guerilla.Tags.FieldAttribute("first person change pause", typeof(Single))]
            public Single FirstPersonChangePause;
            [Abide.Guerilla.Tags.FieldAttribute("following camera change pause", typeof(Single))]
            public Single FollowingCameraChangePause;
            public int Size
            {
                get
                {
                    return 28;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(132, 4)]
        public sealed class PlayerControlBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("magnetism friction#how much the crosshair slows over enemies", typeof(Single))]
            public Single MagnetismFriction;
            [Abide.Guerilla.Tags.FieldAttribute("magnetism adhesion#how much the crosshair sticks to enemies", typeof(Single))]
            public Single MagnetismAdhesion;
            [Abide.Guerilla.Tags.FieldAttribute("inconsequential target scale#scales magnetism level for inconsequential targets l" +
                "ike infection forms", typeof(Single))]
            public Single InconsequentialTargetScale;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("crosshair location#-1..1, 0 is middle of the screen", typeof(Vector2))]
            public Vector2 CrosshairLocation;
            [Abide.Guerilla.Tags.FieldAttribute("seconds to start#how long you must be pegged before you start sprinting", typeof(Single))]
            public Single SecondsToStart;
            [Abide.Guerilla.Tags.FieldAttribute("seconds to full speed#how long you must sprint before you reach top speed", typeof(Single))]
            public Single SecondsToFullSpeed;
            [Abide.Guerilla.Tags.FieldAttribute("decay rate#how fast being unpegged decays the timer (seconds per second)", typeof(Single))]
            public Single DecayRate;
            [Abide.Guerilla.Tags.FieldAttribute("full speed multiplier#how much faster we actually go when at full sprint", typeof(Single))]
            public Single FullSpeedMultiplier;
            [Abide.Guerilla.Tags.FieldAttribute("pegged magnitude#how far the stick needs to be pressed before being considered pe" +
                "gged", typeof(Single))]
            public Single PeggedMagnitude;
            [Abide.Guerilla.Tags.FieldAttribute("pegged angular threshold#how far off straight up (in degrees) we consider pegged", typeof(Single))]
            public Single PeggedAngularThreshold;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("look default pitch rate:degrees", typeof(Single))]
            public Single LookDefaultPitchRate;
            [Abide.Guerilla.Tags.FieldAttribute("look default yaw rate:degrees", typeof(Single))]
            public Single LookDefaultYawRate;
            [Abide.Guerilla.Tags.FieldAttribute("look peg threshold [0,1]#magnitude of yaw for pegged acceleration to kick in", typeof(Single))]
            public Single LookPegThreshold01;
            [Abide.Guerilla.Tags.FieldAttribute("look yaw acceleration time:seconds#time for a pegged look to reach maximum effect" +
                "", typeof(Single))]
            public Single LookYawAccelerationTime;
            [Abide.Guerilla.Tags.FieldAttribute("look yaw acceleration scale#maximum effect of a pegged look (scales last value in" +
                " the look function below)", typeof(Single))]
            public Single LookYawAccelerationScale;
            [Abide.Guerilla.Tags.FieldAttribute("look pitch acceleration time:seconds#time for a pegged look to reach maximum effe" +
                "ct", typeof(Single))]
            public Single LookPitchAccelerationTime;
            [Abide.Guerilla.Tags.FieldAttribute("look pitch acceleration scale#maximum effect of a pegged look (scales last value " +
                "in the look function below)", typeof(Single))]
            public Single LookPitchAccelerationScale;
            [Abide.Guerilla.Tags.FieldAttribute("look autolevelling scale#1 is fast, 0 is none, >1 will probably be really fast", typeof(Single))]
            public Single LookAutolevellingScale;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("gravity_scale", typeof(Single))]
            public Single GravityScale;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("minimum autolevelling ticks#amount of time player needs to move and not look up o" +
                "r down for autolevelling to kick in", typeof(Int16))]
            public Int16 MinimumAutolevellingTicks;
            [Abide.Guerilla.Tags.FieldAttribute("minimum angle for vehicle flipping#0 means the vehicle\'s up vector is along the g" +
                "round, 90 means the up vector is pointing straight up:degrees", typeof(Single))]
            public Single MinimumAngleForVehicleFlipping;
            [Abide.Guerilla.Tags.FieldAttribute("look function", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("look_function_block", 16, typeof(LookFunctionBlock))]
            public TagBlock LookFunction;
            [Abide.Guerilla.Tags.FieldAttribute("minimum action hold time:seconds#time that player needs to press ACTION to regist" +
                "er as a HOLD", typeof(Single))]
            public Single MinimumActionHoldTime;
            public int Size
            {
                get
                {
                    return 132;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
            public sealed class LookFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("scale", typeof(Single))]
                public Single Scale;
                public int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(644, 4)]
        public sealed class DifficultyBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("easy enemy damage#enemy damage multiplier on easy difficulty", typeof(Single))]
            public Single EasyEnemyDamage;
            [Abide.Guerilla.Tags.FieldAttribute("normal enemy damage#enemy damage multiplier on normal difficulty", typeof(Single))]
            public Single NormalEnemyDamage;
            [Abide.Guerilla.Tags.FieldAttribute("hard enemy damage#enemy damage multiplier on hard difficulty", typeof(Single))]
            public Single HardEnemyDamage;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. enemy damage#enemy damage multiplier on impossible difficulty", typeof(Single))]
            public Single ImpossEnemyDamage;
            [Abide.Guerilla.Tags.FieldAttribute("easy enemy vitality#enemy maximum body vitality scale on easy difficulty", typeof(Single))]
            public Single EasyEnemyVitality;
            [Abide.Guerilla.Tags.FieldAttribute("normal enemy vitality#enemy maximum body vitality scale on normal difficulty", typeof(Single))]
            public Single NormalEnemyVitality;
            [Abide.Guerilla.Tags.FieldAttribute("hard enemy vitality#enemy maximum body vitality scale on hard difficulty", typeof(Single))]
            public Single HardEnemyVitality;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. enemy vitality#enemy maximum body vitality scale on impossible difficulty" +
                "", typeof(Single))]
            public Single ImpossEnemyVitality;
            [Abide.Guerilla.Tags.FieldAttribute("easy enemy shield#enemy maximum shield vitality scale on easy difficulty", typeof(Single))]
            public Single EasyEnemyShield;
            [Abide.Guerilla.Tags.FieldAttribute("normal enemy shield#enemy maximum shield vitality scale on normal difficulty", typeof(Single))]
            public Single NormalEnemyShield;
            [Abide.Guerilla.Tags.FieldAttribute("hard enemy shield#enemy maximum shield vitality scale on hard difficulty", typeof(Single))]
            public Single HardEnemyShield;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. enemy shield#enemy maximum shield vitality scale on impossible difficulty" +
                "", typeof(Single))]
            public Single ImpossEnemyShield;
            [Abide.Guerilla.Tags.FieldAttribute("easy enemy recharge#enemy shield recharge scale on easy difficulty", typeof(Single))]
            public Single EasyEnemyRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("normal enemy recharge#enemy shield recharge scale on normal difficulty", typeof(Single))]
            public Single NormalEnemyRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("hard enemy recharge#enemy shield recharge scale on hard difficulty", typeof(Single))]
            public Single HardEnemyRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. enemy recharge#enemy shield recharge scale on impossible difficulty", typeof(Single))]
            public Single ImpossEnemyRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("easy friend damage#friend damage multiplier on easy difficulty", typeof(Single))]
            public Single EasyFriendDamage;
            [Abide.Guerilla.Tags.FieldAttribute("normal friend damage#friend damage multiplier on normal difficulty", typeof(Single))]
            public Single NormalFriendDamage;
            [Abide.Guerilla.Tags.FieldAttribute("hard friend damage#friend damage multiplier on hard difficulty", typeof(Single))]
            public Single HardFriendDamage;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. friend damage#friend damage multiplier on impossible difficulty", typeof(Single))]
            public Single ImpossFriendDamage;
            [Abide.Guerilla.Tags.FieldAttribute("easy friend vitality#friend maximum body vitality scale on easy difficulty", typeof(Single))]
            public Single EasyFriendVitality;
            [Abide.Guerilla.Tags.FieldAttribute("normal friend vitality#friend maximum body vitality scale on normal difficulty", typeof(Single))]
            public Single NormalFriendVitality;
            [Abide.Guerilla.Tags.FieldAttribute("hard friend vitality#friend maximum body vitality scale on hard difficulty", typeof(Single))]
            public Single HardFriendVitality;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. friend vitality#friend maximum body vitality scale on impossible difficul" +
                "ty", typeof(Single))]
            public Single ImpossFriendVitality;
            [Abide.Guerilla.Tags.FieldAttribute("easy friend shield#friend maximum shield vitality scale on easy difficulty", typeof(Single))]
            public Single EasyFriendShield;
            [Abide.Guerilla.Tags.FieldAttribute("normal friend shield#friend maximum shield vitality scale on normal difficulty", typeof(Single))]
            public Single NormalFriendShield;
            [Abide.Guerilla.Tags.FieldAttribute("hard friend shield#friend maximum shield vitality scale on hard difficulty", typeof(Single))]
            public Single HardFriendShield;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. friend shield#friend maximum shield vitality scale on impossible difficul" +
                "ty", typeof(Single))]
            public Single ImpossFriendShield;
            [Abide.Guerilla.Tags.FieldAttribute("easy friend recharge#friend shield recharge scale on easy difficulty", typeof(Single))]
            public Single EasyFriendRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("normal friend recharge#friend shield recharge scale on normal difficulty", typeof(Single))]
            public Single NormalFriendRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("hard friend recharge#friend shield recharge scale on hard difficulty", typeof(Single))]
            public Single HardFriendRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. friend recharge#friend shield recharge scale on impossible difficulty", typeof(Single))]
            public Single ImpossFriendRecharge;
            [Abide.Guerilla.Tags.FieldAttribute("easy infection forms#toughness of infection forms (may be negative) on easy diffi" +
                "culty", typeof(Single))]
            public Single EasyInfectionForms;
            [Abide.Guerilla.Tags.FieldAttribute("normal infection forms#toughness of infection forms (may be negative) on normal d" +
                "ifficulty", typeof(Single))]
            public Single NormalInfectionForms;
            [Abide.Guerilla.Tags.FieldAttribute("hard infection forms#toughness of infection forms (may be negative) on hard diffi" +
                "culty", typeof(Single))]
            public Single HardInfectionForms;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. infection forms#toughness of infection forms (may be negative) on impossi" +
                "ble difficulty", typeof(Single))]
            public Single ImpossInfectionForms;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("easy rate of fire#enemy rate of fire scale on easy difficulty", typeof(Single))]
            public Single EasyRateOfFire;
            [Abide.Guerilla.Tags.FieldAttribute("normal rate of fire#enemy rate of fire scale on normal difficulty", typeof(Single))]
            public Single NormalRateOfFire;
            [Abide.Guerilla.Tags.FieldAttribute("hard rate of fire#enemy rate of fire scale on hard difficulty", typeof(Single))]
            public Single HardRateOfFire;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. rate of fire#enemy rate of fire scale on impossible difficulty", typeof(Single))]
            public Single ImpossRateOfFire;
            [Abide.Guerilla.Tags.FieldAttribute("easy projectile error#enemy projectile error scale, as a fraction of their base f" +
                "iring error. on easy difficulty", typeof(Single))]
            public Single EasyProjectileError;
            [Abide.Guerilla.Tags.FieldAttribute("normal projectile error#enemy projectile error scale, as a fraction of their base" +
                " firing error. on normal difficulty", typeof(Single))]
            public Single NormalProjectileError;
            [Abide.Guerilla.Tags.FieldAttribute("hard projectile error#enemy projectile error scale, as a fraction of their base f" +
                "iring error. on hard difficulty", typeof(Single))]
            public Single HardProjectileError;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. projectile error#enemy projectile error scale, as a fraction of their bas" +
                "e firing error. on impossible difficulty", typeof(Single))]
            public Single ImpossProjectileError;
            [Abide.Guerilla.Tags.FieldAttribute("easy burst error#enemy burst error scale; reduces intra-burst shot distance. on e" +
                "asy difficulty", typeof(Single))]
            public Single EasyBurstError;
            [Abide.Guerilla.Tags.FieldAttribute("normal burst error#enemy burst error scale; reduces intra-burst shot distance. on" +
                " normal difficulty", typeof(Single))]
            public Single NormalBurstError;
            [Abide.Guerilla.Tags.FieldAttribute("hard burst error#enemy burst error scale; reduces intra-burst shot distance. on h" +
                "ard difficulty", typeof(Single))]
            public Single HardBurstError;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. burst error#enemy burst error scale; reduces intra-burst shot distance. o" +
                "n impossible difficulty", typeof(Single))]
            public Single ImpossBurstError;
            [Abide.Guerilla.Tags.FieldAttribute("easy new target delay#enemy new-target delay scale factor. on easy difficulty", typeof(Single))]
            public Single EasyNewTargetDelay;
            [Abide.Guerilla.Tags.FieldAttribute("normal new target delay#enemy new-target delay scale factor. on normal difficulty" +
                "", typeof(Single))]
            public Single NormalNewTargetDelay;
            [Abide.Guerilla.Tags.FieldAttribute("hard new target delay#enemy new-target delay scale factor. on hard difficulty", typeof(Single))]
            public Single HardNewTargetDelay;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. new target delay#enemy new-target delay scale factor. on impossible diffi" +
                "culty", typeof(Single))]
            public Single ImpossNewTargetDelay;
            [Abide.Guerilla.Tags.FieldAttribute("easy burst separation#delay time between bursts scale factor for enemies. on easy" +
                " difficulty", typeof(Single))]
            public Single EasyBurstSeparation;
            [Abide.Guerilla.Tags.FieldAttribute("normal burst separation#delay time between bursts scale factor for enemies. on no" +
                "rmal difficulty", typeof(Single))]
            public Single NormalBurstSeparation;
            [Abide.Guerilla.Tags.FieldAttribute("hard burst separation#delay time between bursts scale factor for enemies. on hard" +
                " difficulty", typeof(Single))]
            public Single HardBurstSeparation;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. burst separation#delay time between bursts scale factor for enemies. on i" +
                "mpossible difficulty", typeof(Single))]
            public Single ImpossBurstSeparation;
            [Abide.Guerilla.Tags.FieldAttribute("easy target tracking#additional target tracking fraction for enemies. on easy dif" +
                "ficulty", typeof(Single))]
            public Single EasyTargetTracking;
            [Abide.Guerilla.Tags.FieldAttribute("normal target tracking#additional target tracking fraction for enemies. on normal" +
                " difficulty", typeof(Single))]
            public Single NormalTargetTracking;
            [Abide.Guerilla.Tags.FieldAttribute("hard target tracking#additional target tracking fraction for enemies. on hard dif" +
                "ficulty", typeof(Single))]
            public Single HardTargetTracking;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. target tracking#additional target tracking fraction for enemies. on impos" +
                "sible difficulty", typeof(Single))]
            public Single ImpossTargetTracking;
            [Abide.Guerilla.Tags.FieldAttribute("easy target leading#additional target leading fraction for enemies. on easy diffi" +
                "culty", typeof(Single))]
            public Single EasyTargetLeading;
            [Abide.Guerilla.Tags.FieldAttribute("normal target leading#additional target leading fraction for enemies. on normal d" +
                "ifficulty", typeof(Single))]
            public Single NormalTargetLeading;
            [Abide.Guerilla.Tags.FieldAttribute("hard target leading#additional target leading fraction for enemies. on hard diffi" +
                "culty", typeof(Single))]
            public Single HardTargetLeading;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. target leading#additional target leading fraction for enemies. on impossi" +
                "ble difficulty", typeof(Single))]
            public Single ImpossTargetLeading;
            [Abide.Guerilla.Tags.FieldAttribute("easy overcharge chance#overcharge chance scale factor for enemies. on easy diffic" +
                "ulty", typeof(Single))]
            public Single EasyOverchargeChance;
            [Abide.Guerilla.Tags.FieldAttribute("normal overcharge chance#overcharge chance scale factor for enemies. on normal di" +
                "fficulty", typeof(Single))]
            public Single NormalOverchargeChance;
            [Abide.Guerilla.Tags.FieldAttribute("hard overcharge chance#overcharge chance scale factor for enemies. on hard diffic" +
                "ulty", typeof(Single))]
            public Single HardOverchargeChance;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. overcharge chance#overcharge chance scale factor for enemies. on impossib" +
                "le difficulty", typeof(Single))]
            public Single ImpossOverchargeChance;
            [Abide.Guerilla.Tags.FieldAttribute("easy special fire delay#delay between special-fire shots (overcharge, banshee bom" +
                "bs) scale factor for enemies. on easy difficulty", typeof(Single))]
            public Single EasySpecialFireDelay;
            [Abide.Guerilla.Tags.FieldAttribute("normal special fire delay#delay between special-fire shots (overcharge, banshee b" +
                "ombs) scale factor for enemies. on normal difficulty", typeof(Single))]
            public Single NormalSpecialFireDelay;
            [Abide.Guerilla.Tags.FieldAttribute("hard special fire delay#delay between special-fire shots (overcharge, banshee bom" +
                "bs) scale factor for enemies. on hard difficulty", typeof(Single))]
            public Single HardSpecialFireDelay;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. special fire delay#delay between special-fire shots (overcharge, banshee " +
                "bombs) scale factor for enemies. on impossible difficulty", typeof(Single))]
            public Single ImpossSpecialFireDelay;
            [Abide.Guerilla.Tags.FieldAttribute("easy guidance vs player#guidance velocity scale factor for all projectiles target" +
                "ed on a player. on easy difficulty", typeof(Single))]
            public Single EasyGuidanceVsPlayer;
            [Abide.Guerilla.Tags.FieldAttribute("normal guidance vs player#guidance velocity scale factor for all projectiles targ" +
                "eted on a player. on normal difficulty", typeof(Single))]
            public Single NormalGuidanceVsPlayer;
            [Abide.Guerilla.Tags.FieldAttribute("hard guidance vs player#guidance velocity scale factor for all projectiles target" +
                "ed on a player. on hard difficulty", typeof(Single))]
            public Single HardGuidanceVsPlayer;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. guidance vs player#guidance velocity scale factor for all projectiles tar" +
                "geted on a player. on impossible difficulty", typeof(Single))]
            public Single ImpossGuidanceVsPlayer;
            [Abide.Guerilla.Tags.FieldAttribute("easy melee delay base#delay period added to all melee attacks, even when berserk." +
                " on easy difficulty", typeof(Single))]
            public Single EasyMeleeDelayBase;
            [Abide.Guerilla.Tags.FieldAttribute("normal melee delay base#delay period added to all melee attacks, even when berser" +
                "k. on normal difficulty", typeof(Single))]
            public Single NormalMeleeDelayBase;
            [Abide.Guerilla.Tags.FieldAttribute("hard melee delay base#delay period added to all melee attacks, even when berserk." +
                " on hard difficulty", typeof(Single))]
            public Single HardMeleeDelayBase;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. melee delay base#delay period added to all melee attacks, even when berse" +
                "rk. on impossible difficulty", typeof(Single))]
            public Single ImpossMeleeDelayBase;
            [Abide.Guerilla.Tags.FieldAttribute("easy melee delay scale#multiplier for all existing non-berserk melee delay times." +
                " on easy difficulty", typeof(Single))]
            public Single EasyMeleeDelayScale;
            [Abide.Guerilla.Tags.FieldAttribute("normal melee delay scale#multiplier for all existing non-berserk melee delay time" +
                "s. on normal difficulty", typeof(Single))]
            public Single NormalMeleeDelayScale;
            [Abide.Guerilla.Tags.FieldAttribute("hard melee delay scale#multiplier for all existing non-berserk melee delay times." +
                " on hard difficulty", typeof(Single))]
            public Single HardMeleeDelayScale;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. melee delay scale#multiplier for all existing non-berserk melee delay tim" +
                "es. on impossible difficulty", typeof(Single))]
            public Single ImpossMeleeDelayScale;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("easy grenade chance scale#scale factor affecting the desicions to throw a grenade" +
                ". on easy difficulty", typeof(Single))]
            public Single EasyGrenadeChanceScale;
            [Abide.Guerilla.Tags.FieldAttribute("normal grenade chance scale#scale factor affecting the desicions to throw a grena" +
                "de. on normal difficulty", typeof(Single))]
            public Single NormalGrenadeChanceScale;
            [Abide.Guerilla.Tags.FieldAttribute("hard grenade chance scale#scale factor affecting the desicions to throw a grenade" +
                ". on hard difficulty", typeof(Single))]
            public Single HardGrenadeChanceScale;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. grenade chance scale#scale factor affecting the desicions to throw a gren" +
                "ade. on impossible difficulty", typeof(Single))]
            public Single ImpossGrenadeChanceScale;
            [Abide.Guerilla.Tags.FieldAttribute("easy grenade timer scale#scale factor affecting the delay period between grenades" +
                " thrown from the same encounter (lower is more often). on easy difficulty", typeof(Single))]
            public Single EasyGrenadeTimerScale;
            [Abide.Guerilla.Tags.FieldAttribute("normal grenade timer scale#scale factor affecting the delay period between grenad" +
                "es thrown from the same encounter (lower is more often). on normal difficulty", typeof(Single))]
            public Single NormalGrenadeTimerScale;
            [Abide.Guerilla.Tags.FieldAttribute("hard grenade timer scale#scale factor affecting the delay period between grenades" +
                " thrown from the same encounter (lower is more often). on hard difficulty", typeof(Single))]
            public Single HardGrenadeTimerScale;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. grenade timer scale#scale factor affecting the delay period between grena" +
                "des thrown from the same encounter (lower is more often). on impossible difficul" +
                "ty", typeof(Single))]
            public Single ImpossGrenadeTimerScale;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("easy major upgrade (normal)#fraction of actors upgraded to their major variant. o" +
                "n easy difficulty", typeof(Single))]
            public Single EasyMajorUpgradeNormal;
            [Abide.Guerilla.Tags.FieldAttribute("normal major upgrade (normal)#fraction of actors upgraded to their major variant." +
                " on normal difficulty", typeof(Single))]
            public Single NormalMajorUpgradeNormal;
            [Abide.Guerilla.Tags.FieldAttribute("hard major upgrade (normal)#fraction of actors upgraded to their major variant. o" +
                "n hard difficulty", typeof(Single))]
            public Single HardMajorUpgradeNormal;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. major upgrade (normal)#fraction of actors upgraded to their major variant" +
                ". on impossible difficulty", typeof(Single))]
            public Single ImpossMajorUpgradeNormal;
            [Abide.Guerilla.Tags.FieldAttribute("easy major upgrade (few)#fraction of actors upgraded to their major variant when " +
                "mix = normal. on easy difficulty", typeof(Single))]
            public Single EasyMajorUpgradeFew;
            [Abide.Guerilla.Tags.FieldAttribute("normal major upgrade (few)#fraction of actors upgraded to their major variant whe" +
                "n mix = normal. on normal difficulty", typeof(Single))]
            public Single NormalMajorUpgradeFew;
            [Abide.Guerilla.Tags.FieldAttribute("hard major upgrade (few)#fraction of actors upgraded to their major variant when " +
                "mix = normal. on hard difficulty", typeof(Single))]
            public Single HardMajorUpgradeFew;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. major upgrade (few)#fraction of actors upgraded to their major variant wh" +
                "en mix = normal. on impossible difficulty", typeof(Single))]
            public Single ImpossMajorUpgradeFew;
            [Abide.Guerilla.Tags.FieldAttribute("easy major upgrade (many)#fraction of actors upgraded to their major variant when" +
                " mix = many. on easy difficulty", typeof(Single))]
            public Single EasyMajorUpgradeMany;
            [Abide.Guerilla.Tags.FieldAttribute("normal major upgrade (many)#fraction of actors upgraded to their major variant wh" +
                "en mix = many. on normal difficulty", typeof(Single))]
            public Single NormalMajorUpgradeMany;
            [Abide.Guerilla.Tags.FieldAttribute("hard major upgrade (many)#fraction of actors upgraded to their major variant when" +
                " mix = many. on hard difficulty", typeof(Single))]
            public Single HardMajorUpgradeMany;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. major upgrade (many)#fraction of actors upgraded to their major variant w" +
                "hen mix = many. on impossible difficulty", typeof(Single))]
            public Single ImpossMajorUpgradeMany;
            [Abide.Guerilla.Tags.FieldAttribute("easy player vehicle ram chance#Chance of deciding to ram the player in a vehicle " +
                "on easy difficulty", typeof(Single))]
            public Single EasyPlayerVehicleRamChance;
            [Abide.Guerilla.Tags.FieldAttribute("normal player vehicle ram chance#Chance of deciding to ram the player in a vehicl" +
                "e on normal difficulty", typeof(Single))]
            public Single NormalPlayerVehicleRamChance;
            [Abide.Guerilla.Tags.FieldAttribute("hard player vehicle ram chance#Chance of deciding to ram the player in a vehicle " +
                "on hard difficulty", typeof(Single))]
            public Single HardPlayerVehicleRamChance;
            [Abide.Guerilla.Tags.FieldAttribute("imposs. player vehicle ram chance#Chance of deciding to ram the player in a vehic" +
                "le on impossible difficulty", typeof(Single))]
            public Single ImpossPlayerVehicleRamChance;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString7;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(84)]
            public Byte[] EmptyString8;
            public int Size
            {
                get
                {
                    return 644;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
        public sealed class GrenadesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("maximum count", typeof(Int16))]
            public Int16 MaximumCount;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("throwing effect", typeof(TagReference))]
            public TagReference ThrowingEffect;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("equipment", typeof(TagReference))]
            public TagReference Equipment;
            [Abide.Guerilla.Tags.FieldAttribute("projectile", typeof(TagReference))]
            public TagReference Projectile;
            public int Size
            {
                get
                {
                    return 68;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(428, 4)]
        public sealed class RasterizerDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("distance attenuation", typeof(TagReference))]
            public TagReference DistanceAttenuation;
            [Abide.Guerilla.Tags.FieldAttribute("vector normalization", typeof(TagReference))]
            public TagReference VectorNormalization;
            [Abide.Guerilla.Tags.FieldAttribute("gradients", typeof(TagReference))]
            public TagReference Gradients;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused1;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused2;
            [Abide.Guerilla.Tags.FieldAttribute("glow", typeof(TagReference))]
            public TagReference Glow;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused3;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused4;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("global vertex shaders", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("vertex_shader_reference_block", 32, typeof(VertexShaderReferenceBlock))]
            public TagBlock GlobalVertexShaders;
            [Abide.Guerilla.Tags.FieldAttribute("default 2D", typeof(TagReference))]
            public TagReference Default2d;
            [Abide.Guerilla.Tags.FieldAttribute("default 3D", typeof(TagReference))]
            public TagReference Default3d;
            [Abide.Guerilla.Tags.FieldAttribute("default cube map", typeof(TagReference))]
            public TagReference DefaultCubeMap;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused5;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused6;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused7;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused8;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused9;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused10;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(36)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("global shader", typeof(TagReference))]
            public TagReference GlobalShader1;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("refraction amount:pixels", typeof(Single))]
            public Single RefractionAmount;
            [Abide.Guerilla.Tags.FieldAttribute("distance falloff", typeof(Single))]
            public Single DistanceFalloff;
            [Abide.Guerilla.Tags.FieldAttribute("tint color", typeof(ColorRgbF))]
            public ColorRgbF TintColor;
            [Abide.Guerilla.Tags.FieldAttribute("hyper-stealth refraction:pixels", typeof(Single))]
            public Single HyperStealthRefraction;
            [Abide.Guerilla.Tags.FieldAttribute("hyper-stealth distance falloff", typeof(Single))]
            public Single HyperStealthDistanceFalloff;
            [Abide.Guerilla.Tags.FieldAttribute("hyper-stealth tint color", typeof(ColorRgbF))]
            public ColorRgbF HyperStealthTintColor;
            [Abide.Guerilla.Tags.FieldAttribute("UNUSED", typeof(TagReference))]
            public TagReference Unused11;
            public int Size
            {
                get
                {
                    return 428;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class VertexShaderReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("vertex shader", typeof(TagReference))]
                public TagReference VertexShader;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions
            {
                TintEdgeDensity = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(304, 4)]
        public sealed class InterfaceTagReferences : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("obsolete1", typeof(TagReference))]
            public TagReference Obsolete1;
            [Abide.Guerilla.Tags.FieldAttribute("obsolete2", typeof(TagReference))]
            public TagReference Obsolete2;
            [Abide.Guerilla.Tags.FieldAttribute("screen color table", typeof(TagReference))]
            public TagReference ScreenColorTable;
            [Abide.Guerilla.Tags.FieldAttribute("hud color table", typeof(TagReference))]
            public TagReference HudColorTable;
            [Abide.Guerilla.Tags.FieldAttribute("editor color table", typeof(TagReference))]
            public TagReference EditorColorTable;
            [Abide.Guerilla.Tags.FieldAttribute("dialog color table", typeof(TagReference))]
            public TagReference DialogColorTable;
            [Abide.Guerilla.Tags.FieldAttribute("hud globals", typeof(TagReference))]
            public TagReference HudGlobals;
            [Abide.Guerilla.Tags.FieldAttribute("motion sensor sweep bitmap", typeof(TagReference))]
            public TagReference MotionSensorSweepBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("motion sensor sweep bitmap mask", typeof(TagReference))]
            public TagReference MotionSensorSweepBitmapMask;
            [Abide.Guerilla.Tags.FieldAttribute("multiplayer hud bitmap", typeof(TagReference))]
            public TagReference MultiplayerHudBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
            public TagReference EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("hud digits definition", typeof(TagReference))]
            public TagReference HudDigitsDefinition;
            [Abide.Guerilla.Tags.FieldAttribute("motion sensor blip bitmap", typeof(TagReference))]
            public TagReference MotionSensorBlipBitmap;
            [Abide.Guerilla.Tags.FieldAttribute("interface goo map1", typeof(TagReference))]
            public TagReference InterfaceGooMap1;
            [Abide.Guerilla.Tags.FieldAttribute("interface goo map2", typeof(TagReference))]
            public TagReference InterfaceGooMap2;
            [Abide.Guerilla.Tags.FieldAttribute("interface goo map3", typeof(TagReference))]
            public TagReference InterfaceGooMap3;
            [Abide.Guerilla.Tags.FieldAttribute("mainmenu ui globals", typeof(TagReference))]
            public TagReference MainmenuUiGlobals;
            [Abide.Guerilla.Tags.FieldAttribute("singleplayer ui globals", typeof(TagReference))]
            public TagReference SingleplayerUiGlobals;
            [Abide.Guerilla.Tags.FieldAttribute("multiplayer ui globals", typeof(TagReference))]
            public TagReference MultiplayerUiGlobals;
            public int Size
            {
                get
                {
                    return 304;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class CheatWeaponsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("weapon^", typeof(TagReference))]
            public TagReference Weapon;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class CheatPowerupsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("powerup^", typeof(TagReference))]
            public TagReference Powerup;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(232, 4)]
        public sealed class MultiplayerInformationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flag", typeof(TagReference))]
            public TagReference Flag;
            [Abide.Guerilla.Tags.FieldAttribute("unit", typeof(TagReference))]
            public TagReference Unit;
            [Abide.Guerilla.Tags.FieldAttribute("vehicles", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("vehicles_block", 20, typeof(VehiclesBlock))]
            public TagBlock Vehicles;
            [Abide.Guerilla.Tags.FieldAttribute("hill shader", typeof(TagReference))]
            public TagReference HillShader;
            [Abide.Guerilla.Tags.FieldAttribute("flag shader", typeof(TagReference))]
            public TagReference FlagShader;
            [Abide.Guerilla.Tags.FieldAttribute("ball", typeof(TagReference))]
            public TagReference Ball;
            [Abide.Guerilla.Tags.FieldAttribute("sounds", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("sounds_block", 60, typeof(SoundsBlock))]
            public TagBlock Sounds;
            [Abide.Guerilla.Tags.FieldAttribute("in game text", typeof(TagReference))]
            public TagReference InGameText;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("general events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_general_event_block", 128, typeof(GameEngineGeneralEventBlock))]
            public TagBlock GeneralEvents;
            [Abide.Guerilla.Tags.FieldAttribute("slayer events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_slayer_event_block", 128, typeof(GameEngineSlayerEventBlock))]
            public TagBlock SlayerEvents;
            [Abide.Guerilla.Tags.FieldAttribute("ctf events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_ctf_event_block", 128, typeof(GameEngineCtfEventBlock))]
            public TagBlock CtfEvents;
            [Abide.Guerilla.Tags.FieldAttribute("oddball events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_oddball_event_block", 128, typeof(GameEngineOddballEventBlock))]
            public TagBlock OddballEvents;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
            public TagBlock EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("king events", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("game_engine_king_event_block", 128, typeof(GameEngineKingEventBlock))]
            public TagBlock KingEvents;
            public int Size
            {
                get
                {
                    return 232;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class VehiclesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("vehicle^", typeof(TagReference))]
                public TagReference Vehicle;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class SoundsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineGeneralEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    Kill = 0,
                    Suicide = 1,
                    KillTeammate = 2,
                    Victory = 3,
                    TeamVictory = 4,
                    Unused1 = 5,
                    Unused2 = 6,
                    _1MinToWin = 7,
                    Team1MinToWin = 8,
                    _30SecsToWin = 9,
                    Team30SecsToWin = 10,
                    PlayerQuit = 11,
                    PlayerJoined = 12,
                    KilledByUnknown = 13,
                    _30MinutesLeft = 14,
                    _15MinutesLeft = 15,
                    _5MinutesLeft = 16,
                    _1MinuteLeft = 17,
                    TimeExpired = 18,
                    GameOver = 19,
                    RespawnTick = 20,
                    LastRespawnTick = 21,
                    TeleporterUsed = 22,
                    PlayerChangedTeam = 23,
                    PlayerRejoined = 24,
                    GainedLead = 25,
                    GainedTeamLead = 26,
                    LostLead = 27,
                    LostTeamLead = 28,
                    TiedLeader = 29,
                    TiedTeamLeader = 30,
                    RoundOver = 31,
                    _30SecondsLeft = 32,
                    _10SecondsLeft = 33,
                    KillFalling = 34,
                    KillCollision = 35,
                    KillMelee = 36,
                    SuddenDeath = 37,
                    PlayerBootedPlayer = 38,
                    KillFlagCarrier = 39,
                    KillBombCarrier = 40,
                    KillStickyGrenade = 41,
                    KillSniper = 42,
                    KillStMelee = 43,
                    BoardedVehicle = 44,
                    StartTeamNoti = 45,
                    Telefrag = 46,
                    _10SecsToWin = 47,
                    Team10SecsToWin = 48,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineSlayerEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    NewTarget = 1,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineCtfEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    FlagTaken = 1,
                    FlagDropped = 2,
                    FlagReturnedByPlayer = 3,
                    FlagReturnedByTimeout = 4,
                    FlagCaptured = 5,
                    FlagNewDefensiveTeam = 6,
                    FlagReturnFaliure = 7,
                    SideSwitchTick = 8,
                    SideSwitchFinalTick = 9,
                    SideSwitch30Seconds = 10,
                    SideSwitch10Seconds = 11,
                    FlagContested = 12,
                    FlagCaptureFaliure = 13,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineOddballEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    BallSpawned = 1,
                    BallPickedUp = 2,
                    BallDropped = 3,
                    BallReset = 4,
                    BallTick = 5,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
            public sealed class GNullBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(244, 4)]
            public sealed class GameEngineKingEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("event^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EventOptions), false)]
                public Int16 Event;
                [Abide.Guerilla.Tags.FieldAttribute("audience^", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AudienceOptions), false)]
                public Int16 Audience;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("required field", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(RequiredFieldOptions), false)]
                public Int16 RequiredField;
                [Abide.Guerilla.Tags.FieldAttribute("excluded audience", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(ExcludedAudienceOptions), false)]
                public Int16 ExcludedAudience;
                [Abide.Guerilla.Tags.FieldAttribute("primary string", typeof(StringId))]
                public StringId PrimaryString;
                [Abide.Guerilla.Tags.FieldAttribute("primary string duration:seconds", typeof(Int32))]
                public Int32 PrimaryStringDuration;
                [Abide.Guerilla.Tags.FieldAttribute("plural display string", typeof(StringId))]
                public StringId PluralDisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(28)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("sound delay (announcer only)", typeof(Single))]
                public Single SoundDelayAnnouncerOnly;
                [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                public Int16 SoundFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                public SoundResponseExtraSoundsStructBlock ExtraSounds;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(16)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("sound permutations", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("sound_response_definition_block", 10, typeof(SoundResponseDefinitionBlock))]
                public TagBlock SoundPermutations;
                public int Size
                {
                    get
                    {
                        return 244;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
                public sealed class SoundResponseDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("sound flags", typeof(Int16))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(SoundFlagsOptions), true)]
                    public Int16 SoundFlags;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [Abide.Guerilla.Tags.FieldAttribute("english sound^", typeof(TagReference))]
                    public TagReference EnglishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("extra sounds", typeof(SoundResponseExtraSoundsStructBlock))]
                    public SoundResponseExtraSoundsStructBlock ExtraSounds;
                    [Abide.Guerilla.Tags.FieldAttribute("probability", typeof(Single))]
                    public Single Probability;
                    public int Size
                    {
                        get
                        {
                            return 152;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                    public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                        public TagReference JapaneseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                        public TagReference GermanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                        public TagReference FrenchSound;
                        [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                        public TagReference SpanishSound;
                        [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                        public TagReference ItalianSound;
                        [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                        public TagReference KoreanSound;
                        [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                        public TagReference ChineseSound;
                        [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                        public TagReference PortugueseSound;
                        public int Size
                        {
                            get
                            {
                                return 128;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                    }
                    public enum SoundFlagsOptions
                    {
                        AnnouncerSound = 1,
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
                public sealed class SoundResponseExtraSoundsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("japanese sound", typeof(TagReference))]
                    public TagReference JapaneseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("german sound", typeof(TagReference))]
                    public TagReference GermanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("french sound", typeof(TagReference))]
                    public TagReference FrenchSound;
                    [Abide.Guerilla.Tags.FieldAttribute("spanish sound", typeof(TagReference))]
                    public TagReference SpanishSound;
                    [Abide.Guerilla.Tags.FieldAttribute("italian sound", typeof(TagReference))]
                    public TagReference ItalianSound;
                    [Abide.Guerilla.Tags.FieldAttribute("korean sound", typeof(TagReference))]
                    public TagReference KoreanSound;
                    [Abide.Guerilla.Tags.FieldAttribute("chinese sound", typeof(TagReference))]
                    public TagReference ChineseSound;
                    [Abide.Guerilla.Tags.FieldAttribute("portuguese sound", typeof(TagReference))]
                    public TagReference PortugueseSound;
                    public int Size
                    {
                        get
                        {
                            return 128;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions
                {
                    QuantityMessage = 1,
                }
                public enum EventOptions
                {
                    GameStart = 0,
                    HillControlled = 1,
                    HillContested = 2,
                    HillTick = 3,
                    HillMove = 4,
                    HillControlledTeam = 5,
                    HillContestedTeam = 6,
                }
                public enum AudienceOptions
                {
                    CausePlayer = 0,
                    CauseTeam = 1,
                    EffectPlayer = 2,
                    EffectTeam = 3,
                    All = 4,
                }
                public enum RequiredFieldOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum ExcludedAudienceOptions
                {
                    None = 0,
                    CausePlayer = 1,
                    CauseTeam = 2,
                    EffectPlayer = 3,
                    EffectTeam = 4,
                }
                public enum SoundFlagsOptions
                {
                    AnnouncerSound = 1,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(372, 4)]
        public sealed class PlayerInformationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("unused", typeof(TagReference))]
            public TagReference Unused;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(28)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("walking speed:world units per second", typeof(Single))]
            public Single WalkingSpeed;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("run forward:world units per second", typeof(Single))]
            public Single RunForward;
            [Abide.Guerilla.Tags.FieldAttribute("run backward:world units per second", typeof(Single))]
            public Single RunBackward;
            [Abide.Guerilla.Tags.FieldAttribute("run sideways:world units per second", typeof(Single))]
            public Single RunSideways;
            [Abide.Guerilla.Tags.FieldAttribute("run acceleration:world units per second squared", typeof(Single))]
            public Single RunAcceleration;
            [Abide.Guerilla.Tags.FieldAttribute("sneak forward:world units per second", typeof(Single))]
            public Single SneakForward;
            [Abide.Guerilla.Tags.FieldAttribute("sneak backward:world units per second", typeof(Single))]
            public Single SneakBackward;
            [Abide.Guerilla.Tags.FieldAttribute("sneak sideways:world units per second", typeof(Single))]
            public Single SneakSideways;
            [Abide.Guerilla.Tags.FieldAttribute("sneak acceleration:world units per second squared", typeof(Single))]
            public Single SneakAcceleration;
            [Abide.Guerilla.Tags.FieldAttribute("airborne acceleration:world units per second squared", typeof(Single))]
            public Single AirborneAcceleration;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("grenade origin", typeof(Vector3))]
            public Vector3 GrenadeOrigin;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(12)]
            public Byte[] EmptyString3;
            [Abide.Guerilla.Tags.FieldAttribute("stun movement penalty:[0,1]#1.0 prevents moving while stunned", typeof(Single))]
            public Single StunMovementPenalty;
            [Abide.Guerilla.Tags.FieldAttribute("stun turning penalty:[0,1]#1.0 prevents turning while stunned", typeof(Single))]
            public Single StunTurningPenalty;
            [Abide.Guerilla.Tags.FieldAttribute("stun jumping penalty:[0,1]#1.0 prevents jumping while stunned", typeof(Single))]
            public Single StunJumpingPenalty;
            [Abide.Guerilla.Tags.FieldAttribute("minimum stun time:seconds#all stunning damage will last for at least this long", typeof(Single))]
            public Single MinimumStunTime;
            [Abide.Guerilla.Tags.FieldAttribute("maximum stun time:seconds#no stunning damage will last for longer than this", typeof(Single))]
            public Single MaximumStunTime;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString4;
            [Abide.Guerilla.Tags.FieldAttribute("first person skip fraction:[0,1]", typeof(Single))]
            public Single FirstPersonSkipFraction;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString5;
            [Abide.Guerilla.Tags.FieldAttribute("coop respawn effect", typeof(TagReference))]
            public TagReference CoopRespawnEffect;
            [Abide.Guerilla.Tags.FieldAttribute("binoculars zoom count", typeof(Int32))]
            public Int32 BinocularsZoomCount;
            [Abide.Guerilla.Tags.FieldAttribute("binoculars zoom in sound", typeof(TagReference))]
            public TagReference BinocularsZoomInSound;
            [Abide.Guerilla.Tags.FieldAttribute("binoculars zoom out sound", typeof(TagReference))]
            public TagReference BinocularsZoomOutSound;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString6;
            [Abide.Guerilla.Tags.FieldAttribute("active camouflage on", typeof(TagReference))]
            public TagReference ActiveCamouflageOn;
            [Abide.Guerilla.Tags.FieldAttribute("active camouflage off", typeof(TagReference))]
            public TagReference ActiveCamouflageOff;
            [Abide.Guerilla.Tags.FieldAttribute("active camouflage error", typeof(TagReference))]
            public TagReference ActiveCamouflageError;
            [Abide.Guerilla.Tags.FieldAttribute("active camouflage ready", typeof(TagReference))]
            public TagReference ActiveCamouflageReady;
            [Abide.Guerilla.Tags.FieldAttribute("flashlight on", typeof(TagReference))]
            public TagReference FlashlightOn;
            [Abide.Guerilla.Tags.FieldAttribute("flashlight off", typeof(TagReference))]
            public TagReference FlashlightOff;
            [Abide.Guerilla.Tags.FieldAttribute("ice cream", typeof(TagReference))]
            public TagReference IceCream;
            public int Size
            {
                get
                {
                    return 372;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(212, 4)]
        public sealed class PlayerRepresentationBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("first person hands", typeof(TagReference))]
            public TagReference FirstPersonHands;
            [Abide.Guerilla.Tags.FieldAttribute("first person body", typeof(TagReference))]
            public TagReference FirstPersonBody;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(40)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(120)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("third person unit", typeof(TagReference))]
            public TagReference ThirdPersonUnit;
            [Abide.Guerilla.Tags.FieldAttribute("third person variant", typeof(StringId))]
            public StringId ThirdPersonVariant;
            public int Size
            {
                get
                {
                    return 212;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(152, 4)]
        public sealed class FallingDamageBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("falling damage", typeof(TagReference))]
            public TagReference FallingDamage;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("maximum falling distance:world units", typeof(Single))]
            public Single MaximumFallingDistance;
            [Abide.Guerilla.Tags.FieldAttribute("distance damage", typeof(TagReference))]
            public TagReference DistanceDamage;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle environemtn collision damage effect", typeof(TagReference))]
            public TagReference VehicleEnvironemtnCollisionDamageEffect;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle killed unit damage effect", typeof(TagReference))]
            public TagReference VehicleKilledUnitDamageEffect;
            [Abide.Guerilla.Tags.FieldAttribute("vehicle collision damage", typeof(TagReference))]
            public TagReference VehicleCollisionDamage;
            [Abide.Guerilla.Tags.FieldAttribute("flaming death damage", typeof(TagReference))]
            public TagReference FlamingDeathDamage;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(28)]
            public Byte[] EmptyString2;
            public int Size
            {
                get
                {
                    return 152;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(44, 4)]
        public sealed class OldMaterialsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("new material name", typeof(StringId))]
            public StringId NewMaterialName;
            [Abide.Guerilla.Tags.FieldAttribute("new general material name", typeof(StringId))]
            public StringId NewGeneralMaterialName;
            [Abide.Guerilla.Tags.FieldAttribute("ground friction scale#fraction of original velocity parallel to the ground after " +
                "one tick", typeof(Single))]
            public Single GroundFrictionScale;
            [Abide.Guerilla.Tags.FieldAttribute("ground friction normal k1 scale#cosine of angle at which friction falls off", typeof(Single))]
            public Single GroundFrictionNormalK1Scale;
            [Abide.Guerilla.Tags.FieldAttribute("ground friction normal k0 scale#cosine of angle at which friction is zero", typeof(Single))]
            public Single GroundFrictionNormalK0Scale;
            [Abide.Guerilla.Tags.FieldAttribute("ground depth scale#depth a point mass rests in the ground", typeof(Single))]
            public Single GroundDepthScale;
            [Abide.Guerilla.Tags.FieldAttribute("ground damp fraction scale#fraction of original velocity perpendicular to the gro" +
                "und after one tick", typeof(Single))]
            public Single GroundDampFractionScale;
            [Abide.Guerilla.Tags.FieldAttribute("melee hit sound", typeof(TagReference))]
            public TagReference MeleeHitSound;
            public int Size
            {
                get
                {
                    return 44;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(316, 4)]
        public sealed class MaterialsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("parent name", typeof(StringId))]
            public StringId ParentName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int16 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("old material type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(OldMaterialTypeOptions), false)]
            public Int16 OldMaterialType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("general armor", typeof(StringId))]
            public StringId GeneralArmor;
            [Abide.Guerilla.Tags.FieldAttribute("specific armor", typeof(StringId))]
            public StringId SpecificArmor;
            [Abide.Guerilla.Tags.FieldAttribute("physics properties", typeof(MaterialPhysicsPropertiesStructBlock))]
            public MaterialPhysicsPropertiesStructBlock PhysicsProperties;
            [Abide.Guerilla.Tags.FieldAttribute("old material physics", typeof(TagReference))]
            public TagReference OldMaterialPhysics;
            [Abide.Guerilla.Tags.FieldAttribute("breakable surface", typeof(TagReference))]
            public TagReference BreakableSurface;
            [Abide.Guerilla.Tags.FieldAttribute("sweeteners", typeof(MaterialsSweetenersStructBlock))]
            public MaterialsSweetenersStructBlock Sweeteners;
            [Abide.Guerilla.Tags.FieldAttribute("material effects", typeof(TagReference))]
            public TagReference MaterialEffects;
            public int Size
            {
                get
                {
                    return 316;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class MaterialPhysicsPropertiesStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("friction", typeof(Single))]
                public Single Friction;
                [Abide.Guerilla.Tags.FieldAttribute("restitution", typeof(Single))]
                public Single Restitution;
                [Abide.Guerilla.Tags.FieldAttribute("density:kg/m^3", typeof(Single))]
                public Single Density;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(228, 4)]
            public sealed class MaterialsSweetenersStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("sound sweetener (small)", typeof(TagReference))]
                public TagReference SoundSweetenerSmall;
                [Abide.Guerilla.Tags.FieldAttribute("sound sweetener (medium)", typeof(TagReference))]
                public TagReference SoundSweetenerMedium;
                [Abide.Guerilla.Tags.FieldAttribute("sound sweetener (large)", typeof(TagReference))]
                public TagReference SoundSweetenerLarge;
                [Abide.Guerilla.Tags.FieldAttribute("sound sweetener rolling", typeof(TagReference))]
                public TagReference SoundSweetenerRolling;
                [Abide.Guerilla.Tags.FieldAttribute("sound sweetener grinding", typeof(TagReference))]
                public TagReference SoundSweetenerGrinding;
                [Abide.Guerilla.Tags.FieldAttribute("sound sweetener (melee)", typeof(TagReference))]
                public TagReference SoundSweetenerMelee;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
                public TagReference EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("effect sweetener (small)", typeof(TagReference))]
                public TagReference EffectSweetenerSmall;
                [Abide.Guerilla.Tags.FieldAttribute("effect sweetener (medium)", typeof(TagReference))]
                public TagReference EffectSweetenerMedium;
                [Abide.Guerilla.Tags.FieldAttribute("effect sweetener (large)", typeof(TagReference))]
                public TagReference EffectSweetenerLarge;
                [Abide.Guerilla.Tags.FieldAttribute("effect sweetener rolling", typeof(TagReference))]
                public TagReference EffectSweetenerRolling;
                [Abide.Guerilla.Tags.FieldAttribute("effect sweetener grinding", typeof(TagReference))]
                public TagReference EffectSweetenerGrinding;
                [Abide.Guerilla.Tags.FieldAttribute("effect sweetener (melee)", typeof(TagReference))]
                public TagReference EffectSweetenerMelee;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(TagReference))]
                public TagReference EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("sweetener inheritance flags", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(SweetenerInheritanceFlagsOptions), true)]
                public Int32 SweetenerInheritanceFlags1;
                public int Size
                {
                    get
                    {
                        return 228;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum SweetenerInheritanceFlagsOptions
                {
                    SoundSmall = 1,
                    SoundMedium = 2,
                    SoundLarge = 4,
                    SoundRolling = 8,
                    SoundGrinding = 16,
                    SoundMelee = 32,
                    EmptyString = 64,
                    EffectSmall = 128,
                    EffectMedium = 256,
                    EffectLarge = 512,
                    EffectRolling = 1024,
                    EffectGrinding = 2048,
                    EffectMelee = 4096,
                    EmptyString1 = 8192,
                }
            }
            public enum FlagsOptions
            {
                Flammable = 1,
                Biomass = 2,
            }
            public enum OldMaterialTypeOptions
            {
                Dirt = 0,
                Sand = 1,
                Stone = 2,
                Snow = 3,
                Wood = 4,
                MetalHollow = 5,
                MetalThin = 6,
                MetalThick = 7,
                Rubber = 8,
                Glass = 9,
                ForceField = 10,
                Grunt = 11,
                HunterArmor = 12,
                HunterSkin = 13,
                Elite = 14,
                Jackal = 15,
                JackalEnergyShield = 16,
                EngineerSkin = 17,
                EngineerForceField = 18,
                FloodCombatForm = 19,
                FloodCarrierForm = 20,
                CyborgArmor = 21,
                CyborgEnergyShield = 22,
                HumanArmor = 23,
                HumanSkin = 24,
                Sentinel = 25,
                Monitor = 26,
                Plastic = 27,
                Water = 28,
                Leaves = 29,
                EliteEnergyShield = 30,
                Ice = 31,
                HunterShield = 32,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(56, 4)]
        public sealed class MultiplayerUiBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("random player names", typeof(TagReference))]
            public TagReference RandomPlayerNames;
            [Abide.Guerilla.Tags.FieldAttribute("obsolete profile colors", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("multiplayer_color_block", 32, typeof(MultiplayerColorBlock))]
            public TagBlock ObsoleteProfileColors;
            [Abide.Guerilla.Tags.FieldAttribute("team colors", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("multiplayer_color_block", 32, typeof(MultiplayerColorBlock))]
            public TagBlock TeamColors;
            [Abide.Guerilla.Tags.FieldAttribute("team names", typeof(TagReference))]
            public TagReference TeamNames;
            public int Size
            {
                get
                {
                    return 56;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
            public sealed class MultiplayerColorBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                public int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
        public sealed class MultiplayerColorBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorRgbF))]
            public ColorRgbF Color;
            public int Size
            {
                get
                {
                    return 12;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
        public sealed class RuntimeLevelsDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Campaign Levels", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("runtime_campaign_level_block", 20, typeof(RuntimeCampaignLevelBlock))]
            public TagBlock CampaignLevels;
            public int Size
            {
                get
                {
                    return 12;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(264, 4)]
            public sealed class RuntimeCampaignLevelBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Campaign ID", typeof(Int32))]
                public Int32 CampaignId;
                [Abide.Guerilla.Tags.FieldAttribute("Map ID", typeof(Int32))]
                public Int32 MapId;
                [Abide.Guerilla.Tags.FieldAttribute("Path", typeof(String256))]
                public String256 Path;
                public int Size
                {
                    get
                    {
                        return 264;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class UiLevelsDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Campaigns", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("ui_campaign_block", 4, typeof(UiCampaignBlock))]
            public TagBlock Campaigns;
            [Abide.Guerilla.Tags.FieldAttribute("Campaign Levels", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("global_ui_campaign_level_block", 20, typeof(GlobalUiCampaignLevelBlock))]
            public TagBlock CampaignLevels;
            [Abide.Guerilla.Tags.FieldAttribute("Multiplayer Levels", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("global_ui_multiplayer_level_block", 50, typeof(GlobalUiMultiplayerLevelBlock))]
            public TagBlock MultiplayerLevels;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(2884, 4)]
            public sealed class UiCampaignBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Campaign ID", typeof(Int32))]
                public Int32 CampaignId;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(576)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2304)]
                public Byte[] EmptyString1;
                public int Size
                {
                    get
                    {
                        return 2884;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(2904, 4)]
            public sealed class GlobalUiCampaignLevelBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Campaign ID", typeof(Int32))]
                public Int32 CampaignId;
                [Abide.Guerilla.Tags.FieldAttribute("Map ID", typeof(Int32))]
                public Int32 MapId;
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(576)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2304)]
                public Byte[] EmptyString1;
                public int Size
                {
                    get
                    {
                        return 2904;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(3180, 4)]
            public sealed class GlobalUiMultiplayerLevelBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Map ID", typeof(Int32))]
                public Int32 MapId;
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(576)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2304)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Path", typeof(String256))]
                public String256 Path;
                [Abide.Guerilla.Tags.FieldAttribute("Sort Order", typeof(Int32))]
                public Int32 SortOrder;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Byte))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Byte Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(3)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams None", typeof(Byte))]
                public Byte MaxTeamsNone;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams CTF", typeof(Byte))]
                public Byte MaxTeamsCtf;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Slayer", typeof(Byte))]
                public Byte MaxTeamsSlayer;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Oddball", typeof(Byte))]
                public Byte MaxTeamsOddball;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams KOTH", typeof(Byte))]
                public Byte MaxTeamsKoth;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Race", typeof(Byte))]
                public Byte MaxTeamsRace;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Headhunter", typeof(Byte))]
                public Byte MaxTeamsHeadhunter;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Juggernaut", typeof(Byte))]
                public Byte MaxTeamsJuggernaut;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Territories", typeof(Byte))]
                public Byte MaxTeamsTerritories;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Assault", typeof(Byte))]
                public Byte MaxTeamsAssault;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 10", typeof(Byte))]
                public Byte MaxTeamsStub10;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 11", typeof(Byte))]
                public Byte MaxTeamsStub11;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 12", typeof(Byte))]
                public Byte MaxTeamsStub12;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 13", typeof(Byte))]
                public Byte MaxTeamsStub13;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 14", typeof(Byte))]
                public Byte MaxTeamsStub14;
                [Abide.Guerilla.Tags.FieldAttribute("Max Teams Stub 15", typeof(Byte))]
                public Byte MaxTeamsStub15;
                public int Size
                {
                    get
                    {
                        return 3180;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Unlockable = 1,
                }
            }
        }
        public enum LanguageOptions
        {
            English = 0,
            Japanese = 1,
            German = 2,
            French = 3,
            Spanish = 4,
            Italian = 5,
            Korean = 6,
            Chinese = 7,
            Portuguese = 8,
        }
    }
}
#pragma warning restore CS1591
