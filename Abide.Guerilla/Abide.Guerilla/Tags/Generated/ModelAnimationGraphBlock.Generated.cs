#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(236, 4)]
    [TagGroupAttribute("model_animation_graph", 1785553252u, 4294967293u, typeof(ModelAnimationGraphBlock))]
    public sealed class ModelAnimationGraphBlock : AbideTagBlock
    {
        private DataList lastImportResultsList = new DataList(131072);
        private TagBlockList<AdditionalNodeDataBlock> additionalNodeDataList = new TagBlockList<AdditionalNodeDataBlock>(255);
        [FieldAttribute("resources", typeof(AnimationGraphResourcesStructBlock))]
        public AnimationGraphResourcesStructBlock Resources;
        [FieldAttribute("content", typeof(AnimationGraphContentsStructBlock))]
        public AnimationGraphContentsStructBlock Content;
        [FieldAttribute("run time data", typeof(ModelAnimationRuntimeDataStructBlock))]
        public ModelAnimationRuntimeDataStructBlock RunTimeData;
        [FieldAttribute("last import results*", typeof(TagBlock))]
        [DataAttribute(131072)]
        public TagBlock LastImportResults;
        [FieldAttribute("additional node data", typeof(TagBlock))]
        [BlockAttribute("additional_node_data_block", 255, typeof(AdditionalNodeDataBlock))]
        public TagBlock AdditionalNodeData;
        public DataList LastImportResultsList
        {
            get
            {
                return this.lastImportResultsList;
            }
        }
        public TagBlockList<AdditionalNodeDataBlock> AdditionalNodeDataList
        {
            get
            {
                return this.additionalNodeDataList;
            }
        }
        public override int Size
        {
            get
            {
                return 236;
            }
        }
        public override void Initialize()
        {
            this.lastImportResultsList.Clear();
            this.additionalNodeDataList.Clear();
            this.Resources = new AnimationGraphResourcesStructBlock();
            this.Content = new AnimationGraphContentsStructBlock();
            this.RunTimeData = new ModelAnimationRuntimeDataStructBlock();
            this.LastImportResults = TagBlock.Zero;
            this.AdditionalNodeData = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Resources = reader.ReadDataStructure<AnimationGraphResourcesStructBlock>();
            this.Content = reader.ReadDataStructure<AnimationGraphContentsStructBlock>();
            this.RunTimeData = reader.ReadDataStructure<ModelAnimationRuntimeDataStructBlock>();
            this.LastImportResults = reader.ReadInt64();
            this.AdditionalNodeData = reader.ReadInt64();
            this.additionalNodeDataList.Read(reader, this.AdditionalNodeData);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(60, 4)]
        public sealed class AdditionalNodeDataBlock : AbideTagBlock
        {
            [FieldAttribute("node name^", typeof(StringId))]
            public StringId NodeName;
            [FieldAttribute("default rotation*", typeof(Quaternion))]
            public Quaternion DefaultRotation;
            [FieldAttribute("default translation*", typeof(Vector3))]
            public Vector3 DefaultTranslation;
            [FieldAttribute("default scale*", typeof(Single))]
            public Single DefaultScale;
            [FieldAttribute("min bounds", typeof(Vector3))]
            public Vector3 MinBounds;
            [FieldAttribute("max bounds", typeof(Vector3))]
            public Vector3 MaxBounds;
            public override int Size
            {
                get
                {
                    return 60;
                }
            }
            public override void Initialize()
            {
                this.NodeName = StringId.Zero;
                this.DefaultRotation = Quaternion.Zero;
                this.DefaultTranslation = Vector3.Zero;
                this.DefaultScale = 0;
                this.MinBounds = Vector3.Zero;
                this.MaxBounds = Vector3.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.NodeName = reader.ReadInt32();
                this.DefaultRotation = reader.Read<Quaternion>();
                this.DefaultTranslation = reader.Read<Vector3>();
                this.DefaultScale = reader.ReadSingle();
                this.MinBounds = reader.Read<Vector3>();
                this.MaxBounds = reader.Read<Vector3>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class AnimationGraphResourcesStructBlock : AbideTagBlock
        {
            private TagBlockList<AnimationGraphNodeBlock> skeletonNodesabcdccList = new TagBlockList<AnimationGraphNodeBlock>(255);
            private TagBlockList<AnimationGraphSoundReferenceBlock> soundReferencesabcdccList = new TagBlockList<AnimationGraphSoundReferenceBlock>(512);
            private TagBlockList<AnimationGraphEffectReferenceBlock> effectReferencesabcdccList = new TagBlockList<AnimationGraphEffectReferenceBlock>(512);
            private TagBlockList<AnimationBlendScreenBlock> blendScreensabcdccList = new TagBlockList<AnimationBlendScreenBlock>(64);
            private TagBlockList<AnimationPoolBlock> animationsabcdccList = new TagBlockList<AnimationPoolBlock>(2048);
            [FieldAttribute("parent animation graph", typeof(TagReference))]
            public TagReference ParentAnimationGraph;
            [FieldAttribute("inheritance flags", typeof(InheritanceFlagsOptions))]
            [OptionsAttribute(typeof(InheritanceFlagsOptions), true)]
            public InheritanceFlagsOptions InheritanceFlags;
            [FieldAttribute("private flags*", typeof(PrivateFlagsOptions))]
            [OptionsAttribute(typeof(PrivateFlagsOptions), true)]
            public PrivateFlagsOptions PrivateFlags;
            [FieldAttribute("animation codec pack*", typeof(Int16))]
            public Int16 AnimationCodecPack;
            [FieldAttribute("skeleton nodes*|ABCDCC", typeof(TagBlock))]
            [BlockAttribute("animation_graph_node_block", 255, typeof(AnimationGraphNodeBlock))]
            public TagBlock SkeletonNodesabcdcc;
            [FieldAttribute("sound references|ABCDCC", typeof(TagBlock))]
            [BlockAttribute("animation_graph_sound_reference_block", 512, typeof(AnimationGraphSoundReferenceBlock))]
            public TagBlock SoundReferencesabcdcc;
            [FieldAttribute("effect references|ABCDCC", typeof(TagBlock))]
            [BlockAttribute("animation_graph_effect_reference_block", 512, typeof(AnimationGraphEffectReferenceBlock))]
            public TagBlock EffectReferencesabcdcc;
            [FieldAttribute("blend screens|ABCDCC", typeof(TagBlock))]
            [BlockAttribute("animation_blend_screen_block", 64, typeof(AnimationBlendScreenBlock))]
            public TagBlock BlendScreensabcdcc;
            [FieldAttribute("animations*|ABCDCC", typeof(TagBlock))]
            [BlockAttribute("animation_pool_block", 2048, typeof(AnimationPoolBlock))]
            public TagBlock Animationsabcdcc;
            public TagBlockList<AnimationGraphNodeBlock> SkeletonNodesabcdccList
            {
                get
                {
                    return this.skeletonNodesabcdccList;
                }
            }
            public TagBlockList<AnimationGraphSoundReferenceBlock> SoundReferencesabcdccList
            {
                get
                {
                    return this.soundReferencesabcdccList;
                }
            }
            public TagBlockList<AnimationGraphEffectReferenceBlock> EffectReferencesabcdccList
            {
                get
                {
                    return this.effectReferencesabcdccList;
                }
            }
            public TagBlockList<AnimationBlendScreenBlock> BlendScreensabcdccList
            {
                get
                {
                    return this.blendScreensabcdccList;
                }
            }
            public TagBlockList<AnimationPoolBlock> AnimationsabcdccList
            {
                get
                {
                    return this.animationsabcdccList;
                }
            }
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.skeletonNodesabcdccList.Clear();
                this.soundReferencesabcdccList.Clear();
                this.effectReferencesabcdccList.Clear();
                this.blendScreensabcdccList.Clear();
                this.animationsabcdccList.Clear();
                this.ParentAnimationGraph = TagReference.Null;
                this.InheritanceFlags = ((InheritanceFlagsOptions)(0));
                this.PrivateFlags = ((PrivateFlagsOptions)(0));
                this.AnimationCodecPack = 0;
                this.SkeletonNodesabcdcc = TagBlock.Zero;
                this.SoundReferencesabcdcc = TagBlock.Zero;
                this.EffectReferencesabcdcc = TagBlock.Zero;
                this.BlendScreensabcdcc = TagBlock.Zero;
                this.Animationsabcdcc = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.ParentAnimationGraph = reader.Read<TagReference>();
                this.InheritanceFlags = ((InheritanceFlagsOptions)(reader.ReadByte()));
                this.PrivateFlags = ((PrivateFlagsOptions)(reader.ReadByte()));
                this.AnimationCodecPack = reader.ReadInt16();
                this.SkeletonNodesabcdcc = reader.ReadInt64();
                this.skeletonNodesabcdccList.Read(reader, this.SkeletonNodesabcdcc);
                this.SoundReferencesabcdcc = reader.ReadInt64();
                this.soundReferencesabcdccList.Read(reader, this.SoundReferencesabcdcc);
                this.EffectReferencesabcdcc = reader.ReadInt64();
                this.effectReferencesabcdccList.Read(reader, this.EffectReferencesabcdcc);
                this.BlendScreensabcdcc = reader.ReadInt64();
                this.blendScreensabcdccList.Read(reader, this.BlendScreensabcdcc);
                this.Animationsabcdcc = reader.ReadInt64();
                this.animationsabcdccList.Read(reader, this.Animationsabcdcc);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class AnimationGraphNodeBlock : AbideTagBlock
            {
                [FieldAttribute("name^", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("next sibling node index*", typeof(Int16))]
                public Int16 NextSiblingNodeIndex;
                [FieldAttribute("first child node index*", typeof(Int16))]
                public Int16 FirstChildNodeIndex;
                [FieldAttribute("parent node index*", typeof(Int16))]
                public Int16 ParentNodeIndex;
                [FieldAttribute("model flags*", typeof(ModelFlagsOptions))]
                [OptionsAttribute(typeof(ModelFlagsOptions), true)]
                public ModelFlagsOptions ModelFlags;
                [FieldAttribute("node joint flags", typeof(NodeJointFlagsOptions))]
                [OptionsAttribute(typeof(NodeJointFlagsOptions), true)]
                public NodeJointFlagsOptions NodeJointFlags;
                [FieldAttribute("base vector*", typeof(Vector3))]
                public Vector3 BaseVector;
                [FieldAttribute("vector range*", typeof(Single))]
                public Single VectorRange;
                [FieldAttribute("z_pos*", typeof(Single))]
                public Single ZPos;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.Name = StringId.Zero;
                    this.NextSiblingNodeIndex = 0;
                    this.FirstChildNodeIndex = 0;
                    this.ParentNodeIndex = 0;
                    this.ModelFlags = ((ModelFlagsOptions)(0));
                    this.NodeJointFlags = ((NodeJointFlagsOptions)(0));
                    this.BaseVector = Vector3.Zero;
                    this.VectorRange = 0;
                    this.ZPos = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NextSiblingNodeIndex = reader.ReadInt16();
                    this.FirstChildNodeIndex = reader.ReadInt16();
                    this.ParentNodeIndex = reader.ReadInt16();
                    this.ModelFlags = ((ModelFlagsOptions)(reader.ReadByte()));
                    this.NodeJointFlags = ((NodeJointFlagsOptions)(reader.ReadByte()));
                    this.BaseVector = reader.Read<Vector3>();
                    this.VectorRange = reader.ReadSingle();
                    this.ZPos = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum ModelFlagsOptions : Byte
                {
                    PrimaryModel = 1,
                    SecondaryModel = 2,
                    LocalRoot = 4,
                    LeftHand = 8,
                    RightHand = 16,
                    LeftArmMember = 32,
                }
                public enum NodeJointFlagsOptions : Byte
                {
                    BallSocket = 1,
                    Hinge = 2,
                    NoMovement = 4,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class AnimationGraphSoundReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("sound^", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.Sound = TagReference.Null;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Sound = reader.Read<TagReference>();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    AllowOnPlayer = 1,
                    LeftArmOnly = 2,
                    RightArmOnly = 4,
                    FirstPersonOnly = 8,
                    ForwardOnly = 16,
                    ReverseOnly = 32,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class AnimationGraphEffectReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("effect^", typeof(TagReference))]
                public TagReference Effect;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.Effect = TagReference.Null;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Effect = reader.Read<TagReference>();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    AllowOnPlayer = 1,
                    LeftArmOnly = 2,
                    RightArmOnly = 4,
                    FirstPersonOnly = 8,
                    ForwardOnly = 16,
                    ReverseOnly = 32,
                }
            }
            [FieldSetAttribute(28, 4)]
            public sealed class AnimationBlendScreenBlock : AbideTagBlock
            {
                [FieldAttribute("label^", typeof(StringId))]
                public StringId Label;
                [FieldAttribute("aiming screen*", typeof(AnimationAimingScreenStructBlock))]
                public AnimationAimingScreenStructBlock AimingScreen;
                public override int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public override void Initialize()
                {
                    this.Label = StringId.Zero;
                    this.AimingScreen = new AnimationAimingScreenStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Label = reader.ReadInt32();
                    this.AimingScreen = reader.ReadDataStructure<AnimationAimingScreenStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(24, 4)]
                public sealed class AnimationAimingScreenStructBlock : AbideTagBlock
                {
                    [FieldAttribute("right yaw per frame", typeof(Single))]
                    public Single RightYawPerFrame;
                    [FieldAttribute("left yaw per frame", typeof(Single))]
                    public Single LeftYawPerFrame;
                    [FieldAttribute("right frame count", typeof(Int16))]
                    public Int16 RightFrameCount;
                    [FieldAttribute("left frame count", typeof(Int16))]
                    public Int16 LeftFrameCount;
                    [FieldAttribute("down pitch per frame", typeof(Single))]
                    public Single DownPitchPerFrame;
                    [FieldAttribute("up pitch per frame", typeof(Single))]
                    public Single UpPitchPerFrame;
                    [FieldAttribute("down pitch frame count", typeof(Int16))]
                    public Int16 DownPitchFrameCount;
                    [FieldAttribute("up pitch frame count", typeof(Int16))]
                    public Int16 UpPitchFrameCount;
                    public override int Size
                    {
                        get
                        {
                            return 24;
                        }
                    }
                    public override void Initialize()
                    {
                        this.RightYawPerFrame = 0;
                        this.LeftYawPerFrame = 0;
                        this.RightFrameCount = 0;
                        this.LeftFrameCount = 0;
                        this.DownPitchPerFrame = 0;
                        this.UpPitchPerFrame = 0;
                        this.DownPitchFrameCount = 0;
                        this.UpPitchFrameCount = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.RightYawPerFrame = reader.ReadSingle();
                        this.LeftYawPerFrame = reader.ReadSingle();
                        this.RightFrameCount = reader.ReadInt16();
                        this.LeftFrameCount = reader.ReadInt16();
                        this.DownPitchPerFrame = reader.ReadSingle();
                        this.UpPitchPerFrame = reader.ReadSingle();
                        this.DownPitchFrameCount = reader.ReadInt16();
                        this.UpPitchFrameCount = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(136, 4)]
            public sealed class AnimationPoolBlock : AbideTagBlock
            {
                private DataList emptyStringList = new DataList(33724160);
                private TagBlockList<AnimationFrameEventBlock> frameEventsabcdccList = new TagBlockList<AnimationFrameEventBlock>(512);
                private TagBlockList<AnimationSoundEventBlock> soundEventsabcdccList = new TagBlockList<AnimationSoundEventBlock>(512);
                private TagBlockList<AnimationEffectEventBlock> effectEventsabcdccList = new TagBlockList<AnimationEffectEventBlock>(512);
                private TagBlockList<ObjectSpaceNodeDataBlock> objectSpaceParentNodesabcdccList = new TagBlockList<ObjectSpaceNodeDataBlock>(255);
                [FieldAttribute("name*^", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("node list checksum*", typeof(Int32))]
                public Int32 NodeListChecksum;
                [FieldAttribute("production checksum*", typeof(Int32))]
                public Int32 ProductionChecksum;
                [FieldAttribute("import_checksum*", typeof(Int32))]
                public Int32 ImportChecksum;
                [FieldAttribute("type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("frame info type*", typeof(FrameInfoTypeOptions))]
                [OptionsAttribute(typeof(FrameInfoTypeOptions), false)]
                public FrameInfoTypeOptions FrameInfoType;
                [FieldAttribute("blend screen", typeof(Byte))]
                public Byte BlendScreen;
                [FieldAttribute("node count*", typeof(Byte))]
                public Byte NodeCount;
                [FieldAttribute("frame count*", typeof(Int16))]
                public Int16 FrameCount;
                [FieldAttribute("internal flags*", typeof(InternalFlagsOptions))]
                [OptionsAttribute(typeof(InternalFlagsOptions), true)]
                public InternalFlagsOptions InternalFlags;
                [FieldAttribute("production flags", typeof(ProductionFlagsOptions))]
                [OptionsAttribute(typeof(ProductionFlagsOptions), true)]
                public ProductionFlagsOptions ProductionFlags;
                [FieldAttribute("playback flags", typeof(PlaybackFlagsOptions))]
                [OptionsAttribute(typeof(PlaybackFlagsOptions), true)]
                public PlaybackFlagsOptions PlaybackFlags;
                [FieldAttribute("desired compression", typeof(DesiredCompressionOptions))]
                [OptionsAttribute(typeof(DesiredCompressionOptions), false)]
                public DesiredCompressionOptions DesiredCompression;
                [FieldAttribute("current compression*", typeof(CurrentCompressionOptions))]
                [OptionsAttribute(typeof(CurrentCompressionOptions), false)]
                public CurrentCompressionOptions CurrentCompression;
                [FieldAttribute("weight", typeof(Single))]
                public Single Weight;
                [FieldAttribute("loop frame index", typeof(Int16))]
                public Int16 LoopFrameIndex;
                [FieldAttribute("", typeof(Int16))]
                public Int16 EmptyString;
                [FieldAttribute("", typeof(Int16))]
                public Int16 EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                [FieldAttribute("", typeof(TagBlock))]
                [DataAttribute(33724160)]
                public TagBlock EmptyString3;
                [FieldAttribute("", typeof(PackedDataSizesStructBlock))]
                public PackedDataSizesStructBlock EmptyString4;
                [FieldAttribute("frame events|ABCDCC", typeof(TagBlock))]
                [BlockAttribute("animation_frame_event_block", 512, typeof(AnimationFrameEventBlock))]
                public TagBlock FrameEventsabcdcc;
                [FieldAttribute("sound events|ABCDCC", typeof(TagBlock))]
                [BlockAttribute("animation_sound_event_block", 512, typeof(AnimationSoundEventBlock))]
                public TagBlock SoundEventsabcdcc;
                [FieldAttribute("effect events|ABCDCC", typeof(TagBlock))]
                [BlockAttribute("animation_effect_event_block", 512, typeof(AnimationEffectEventBlock))]
                public TagBlock EffectEventsabcdcc;
                [FieldAttribute("object-space parent nodes|ABCDCC", typeof(TagBlock))]
                [BlockAttribute("object_space_node_data_block", 255, typeof(ObjectSpaceNodeDataBlock))]
                public TagBlock ObjectSpaceParentNodesabcdcc;
                public DataList EmptyStringList
                {
                    get
                    {
                        return this.emptyStringList;
                    }
                }
                public TagBlockList<AnimationFrameEventBlock> FrameEventsabcdccList
                {
                    get
                    {
                        return this.frameEventsabcdccList;
                    }
                }
                public TagBlockList<AnimationSoundEventBlock> SoundEventsabcdccList
                {
                    get
                    {
                        return this.soundEventsabcdccList;
                    }
                }
                public TagBlockList<AnimationEffectEventBlock> EffectEventsabcdccList
                {
                    get
                    {
                        return this.effectEventsabcdccList;
                    }
                }
                public TagBlockList<ObjectSpaceNodeDataBlock> ObjectSpaceParentNodesabcdccList
                {
                    get
                    {
                        return this.objectSpaceParentNodesabcdccList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 136;
                    }
                }
                public override void Initialize()
                {
                    this.emptyStringList.Clear();
                    this.frameEventsabcdccList.Clear();
                    this.soundEventsabcdccList.Clear();
                    this.effectEventsabcdccList.Clear();
                    this.objectSpaceParentNodesabcdccList.Clear();
                    this.Name = StringId.Zero;
                    this.NodeListChecksum = 0;
                    this.ProductionChecksum = 0;
                    this.ImportChecksum = 0;
                    this.Type = ((TypeOptions)(0));
                    this.FrameInfoType = ((FrameInfoTypeOptions)(0));
                    this.BlendScreen = 0;
                    this.NodeCount = 0;
                    this.FrameCount = 0;
                    this.InternalFlags = ((InternalFlagsOptions)(0));
                    this.ProductionFlags = ((ProductionFlagsOptions)(0));
                    this.PlaybackFlags = ((PlaybackFlagsOptions)(0));
                    this.DesiredCompression = ((DesiredCompressionOptions)(0));
                    this.CurrentCompression = ((CurrentCompressionOptions)(0));
                    this.Weight = 0;
                    this.LoopFrameIndex = 0;
                    this.EmptyString = 0;
                    this.EmptyString1 = 0;
                    this.EmptyString2 = new byte[2];
                    this.EmptyString3 = TagBlock.Zero;
                    this.EmptyString4 = new PackedDataSizesStructBlock();
                    this.FrameEventsabcdcc = TagBlock.Zero;
                    this.SoundEventsabcdcc = TagBlock.Zero;
                    this.EffectEventsabcdcc = TagBlock.Zero;
                    this.ObjectSpaceParentNodesabcdcc = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.NodeListChecksum = reader.ReadInt32();
                    this.ProductionChecksum = reader.ReadInt32();
                    this.ImportChecksum = reader.ReadInt32();
                    this.Type = ((TypeOptions)(reader.ReadByte()));
                    this.FrameInfoType = ((FrameInfoTypeOptions)(reader.ReadByte()));
                    this.BlendScreen = reader.ReadByte();
                    this.NodeCount = reader.ReadByte();
                    this.FrameCount = reader.ReadInt16();
                    this.InternalFlags = ((InternalFlagsOptions)(reader.ReadByte()));
                    this.ProductionFlags = ((ProductionFlagsOptions)(reader.ReadByte()));
                    this.PlaybackFlags = ((PlaybackFlagsOptions)(reader.ReadInt16()));
                    this.DesiredCompression = ((DesiredCompressionOptions)(reader.ReadByte()));
                    this.CurrentCompression = ((CurrentCompressionOptions)(reader.ReadByte()));
                    this.Weight = reader.ReadSingle();
                    this.LoopFrameIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadInt16();
                    this.EmptyString2 = reader.ReadBytes(2);
                    this.EmptyString3 = reader.ReadInt64();
                    this.EmptyString4 = reader.ReadDataStructure<PackedDataSizesStructBlock>();
                    this.FrameEventsabcdcc = reader.ReadInt64();
                    this.frameEventsabcdccList.Read(reader, this.FrameEventsabcdcc);
                    this.SoundEventsabcdcc = reader.ReadInt64();
                    this.soundEventsabcdccList.Read(reader, this.SoundEventsabcdcc);
                    this.EffectEventsabcdcc = reader.ReadInt64();
                    this.effectEventsabcdccList.Read(reader, this.EffectEventsabcdcc);
                    this.ObjectSpaceParentNodesabcdcc = reader.ReadInt64();
                    this.objectSpaceParentNodesabcdccList.Read(reader, this.ObjectSpaceParentNodesabcdcc);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class AnimationFrameEventBlock : AbideTagBlock
                {
                    [FieldAttribute("type", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("frame", typeof(Int16))]
                    public Int16 Frame;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.Frame = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadInt16()));
                        this.Frame = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Int16
                    {
                        PrimaryKeyframe = 0,
                        SecondaryKeyframe = 1,
                        LeftFoot = 2,
                        RightFoot = 3,
                        AllowInterruption = 4,
                        TransitionA = 5,
                        TransitionB = 6,
                        TransitionC = 7,
                        TransitionD = 8,
                        BothFeetShuffle = 9,
                        BodyImpact = 10,
                    }
                }
                [FieldSetAttribute(8, 4)]
                public sealed class AnimationSoundEventBlock : AbideTagBlock
                {
                    [FieldAttribute("sound", typeof(Int16))]
                    public Int16 Sound;
                    [FieldAttribute("frame", typeof(Int16))]
                    public Int16 Frame;
                    [FieldAttribute("marker name", typeof(StringId))]
                    public StringId MarkerName;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Sound = 0;
                        this.Frame = 0;
                        this.MarkerName = StringId.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Sound = reader.ReadInt16();
                        this.Frame = reader.ReadInt16();
                        this.MarkerName = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class AnimationEffectEventBlock : AbideTagBlock
                {
                    [FieldAttribute("effect", typeof(Int16))]
                    public Int16 Effect;
                    [FieldAttribute("frame", typeof(Int16))]
                    public Int16 Frame;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Effect = 0;
                        this.Frame = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Effect = reader.ReadInt16();
                        this.Frame = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(28, 4)]
                public sealed class ObjectSpaceNodeDataBlock : AbideTagBlock
                {
                    [FieldAttribute("node_index*", typeof(Int16))]
                    public Int16 NodeIndex;
                    [FieldAttribute("component flags", typeof(ComponentFlagsOptions))]
                    [OptionsAttribute(typeof(ComponentFlagsOptions), true)]
                    public ComponentFlagsOptions ComponentFlags;
                    [FieldAttribute("orientation*", typeof(QuantizedOrientationStructBlock))]
                    public QuantizedOrientationStructBlock Orientation;
                    public override int Size
                    {
                        get
                        {
                            return 28;
                        }
                    }
                    public override void Initialize()
                    {
                        this.NodeIndex = 0;
                        this.ComponentFlags = ((ComponentFlagsOptions)(0));
                        this.Orientation = new QuantizedOrientationStructBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.NodeIndex = reader.ReadInt16();
                        this.ComponentFlags = ((ComponentFlagsOptions)(reader.ReadInt16()));
                        this.Orientation = reader.ReadDataStructure<QuantizedOrientationStructBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(24, 4)]
                    public sealed class QuantizedOrientationStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("rotation x*", typeof(Int16))]
                        public Int16 RotationX;
                        [FieldAttribute("rotation y*", typeof(Int16))]
                        public Int16 RotationY;
                        [FieldAttribute("rotation z*", typeof(Int16))]
                        public Int16 RotationZ;
                        [FieldAttribute("rotation w*", typeof(Int16))]
                        public Int16 RotationW;
                        [FieldAttribute("default translation*", typeof(Vector3))]
                        public Vector3 DefaultTranslation;
                        [FieldAttribute("default scale*", typeof(Single))]
                        public Single DefaultScale;
                        public override int Size
                        {
                            get
                            {
                                return 24;
                            }
                        }
                        public override void Initialize()
                        {
                            this.RotationX = 0;
                            this.RotationY = 0;
                            this.RotationZ = 0;
                            this.RotationW = 0;
                            this.DefaultTranslation = Vector3.Zero;
                            this.DefaultScale = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.RotationX = reader.ReadInt16();
                            this.RotationY = reader.ReadInt16();
                            this.RotationZ = reader.ReadInt16();
                            this.RotationW = reader.ReadInt16();
                            this.DefaultTranslation = reader.Read<Vector3>();
                            this.DefaultScale = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum ComponentFlagsOptions : Int16
                    {
                        Rotation = 1,
                        Translation = 2,
                        Scale = 4,
                    }
                }
                [FieldSetAttribute(16, 4)]
                public sealed class PackedDataSizesStructBlock : AbideTagBlock
                {
                    [FieldAttribute("", typeof(Byte))]
                    public Byte EmptyString;
                    [FieldAttribute("", typeof(Byte))]
                    public Byte EmptyString1;
                    [FieldAttribute("", typeof(Int16))]
                    public Int16 EmptyString2;
                    [FieldAttribute("", typeof(Int16))]
                    public Int16 EmptyString3;
                    [FieldAttribute("", typeof(Int16))]
                    public Int16 EmptyString4;
                    [FieldAttribute("", typeof(Int32))]
                    public Int32 EmptyString5;
                    [FieldAttribute("", typeof(Int32))]
                    public Int32 EmptyString6;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.EmptyString = 0;
                        this.EmptyString1 = 0;
                        this.EmptyString2 = 0;
                        this.EmptyString3 = 0;
                        this.EmptyString4 = 0;
                        this.EmptyString5 = 0;
                        this.EmptyString6 = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.EmptyString = reader.ReadByte();
                        this.EmptyString1 = reader.ReadByte();
                        this.EmptyString2 = reader.ReadInt16();
                        this.EmptyString3 = reader.ReadInt16();
                        this.EmptyString4 = reader.ReadInt16();
                        this.EmptyString5 = reader.ReadInt32();
                        this.EmptyString6 = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum TypeOptions : Byte
                {
                    Base = 0,
                    Overlay = 1,
                    Replacement = 2,
                }
                public enum FrameInfoTypeOptions : Byte
                {
                    None = 0,
                    Dxdy = 1,
                    Dxdydyaw = 2,
                    Dxdydzdyaw = 3,
                }
                public enum InternalFlagsOptions : Byte
                {
                    LessThanUnused0GreaterThan = 1,
                    WorldRelative = 2,
                    LessThanUnused1GreaterThan = 4,
                    LessThanUnused2GreaterThan = 8,
                    LessThanUnused3GreaterThan = 16,
                    CompressionDisabled = 32,
                    OldProductionChecksum = 64,
                    ValidProductionChecksum = 128,
                }
                public enum ProductionFlagsOptions : Byte
                {
                    DoNotMonitorChanges = 1,
                    VerifySoundEvents = 2,
                    DoNotInheritForPlayerGraphs = 4,
                }
                public enum PlaybackFlagsOptions : Int16
                {
                    DisableInterpolationIn = 1,
                    DisableInterpolationOut = 2,
                    DisableModeIk = 4,
                    DisableWeaponIk = 8,
                    DisableWeaponAim1stPerson = 16,
                    DisableLookScreen = 32,
                    DisableTransitionAdjustment = 64,
                }
                public enum DesiredCompressionOptions : Byte
                {
                    BestScore = 0,
                    BestCompression = 1,
                    BestAccuracy = 2,
                    BestFullframe = 3,
                    BestSmallKeyframe = 4,
                    BestLargeKeyframe = 5,
                }
                public enum CurrentCompressionOptions : Byte
                {
                    BestScore = 0,
                    BestCompression = 1,
                    BestAccuracy = 2,
                    BestFullframe = 3,
                    BestSmallKeyframe = 4,
                    BestLargeKeyframe = 5,
                }
            }
            public enum InheritanceFlagsOptions : Byte
            {
                InheritRootTransScaleOnly = 1,
                InheritForUseOnPlayer = 2,
            }
            public enum PrivateFlagsOptions : Byte
            {
                PreparedForCache = 1,
                Unused = 2,
                ImportedWithCodecCompressors = 4,
                UnusedSmellyFlag = 8,
                WrittenToCache = 16,
                AnimationDataReordered = 32,
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class AnimationGraphContentsStructBlock : AbideTagBlock
        {
            private TagBlockList<AnimationModeBlock> modesaabbccList = new TagBlockList<AnimationModeBlock>(512);
            private TagBlockList<VehicleSuspensionBlock> vehicleSuspensionccaabbList = new TagBlockList<VehicleSuspensionBlock>(32);
            private TagBlockList<ObjectAnimationBlock> objectOverlaysccaabbList = new TagBlockList<ObjectAnimationBlock>(32);
            [FieldAttribute("modes|AABBCC", typeof(TagBlock))]
            [BlockAttribute("animation_mode_block", 512, typeof(AnimationModeBlock))]
            public TagBlock Modesaabbcc;
            [FieldAttribute("vehicle suspension|CCAABB", typeof(TagBlock))]
            [BlockAttribute("vehicle_suspension_block", 32, typeof(VehicleSuspensionBlock))]
            public TagBlock VehicleSuspensionccaabb;
            [FieldAttribute("object overlays|CCAABB", typeof(TagBlock))]
            [BlockAttribute("object_animation_block", 32, typeof(ObjectAnimationBlock))]
            public TagBlock ObjectOverlaysccaabb;
            public TagBlockList<AnimationModeBlock> ModesaabbccList
            {
                get
                {
                    return this.modesaabbccList;
                }
            }
            public TagBlockList<VehicleSuspensionBlock> VehicleSuspensionccaabbList
            {
                get
                {
                    return this.vehicleSuspensionccaabbList;
                }
            }
            public TagBlockList<ObjectAnimationBlock> ObjectOverlaysccaabbList
            {
                get
                {
                    return this.objectOverlaysccaabbList;
                }
            }
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.modesaabbccList.Clear();
                this.vehicleSuspensionccaabbList.Clear();
                this.objectOverlaysccaabbList.Clear();
                this.Modesaabbcc = TagBlock.Zero;
                this.VehicleSuspensionccaabb = TagBlock.Zero;
                this.ObjectOverlaysccaabb = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Modesaabbcc = reader.ReadInt64();
                this.modesaabbccList.Read(reader, this.Modesaabbcc);
                this.VehicleSuspensionccaabb = reader.ReadInt64();
                this.vehicleSuspensionccaabbList.Read(reader, this.VehicleSuspensionccaabb);
                this.ObjectOverlaysccaabb = reader.ReadInt64();
                this.objectOverlaysccaabbList.Read(reader, this.ObjectOverlaysccaabb);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(28, 4)]
            public sealed class AnimationModeBlock : AbideTagBlock
            {
                private TagBlockList<WeaponClassBlock> weaponClassaabbccList = new TagBlockList<WeaponClassBlock>(64);
                private TagBlockList<AnimationIkBlock> modeIkaabbccList = new TagBlockList<AnimationIkBlock>(8);
                [FieldAttribute("label^", typeof(StringId))]
                public StringId Label;
                [FieldAttribute("weapon class|AABBCC", typeof(TagBlock))]
                [BlockAttribute("weapon_class_block", 64, typeof(WeaponClassBlock))]
                public TagBlock WeaponClassaabbcc;
                [FieldAttribute("mode ik|AABBCC", typeof(TagBlock))]
                [BlockAttribute("animation_ik_block", 8, typeof(AnimationIkBlock))]
                public TagBlock ModeIkaabbcc;
                public TagBlockList<WeaponClassBlock> WeaponClassaabbccList
                {
                    get
                    {
                        return this.weaponClassaabbccList;
                    }
                }
                public TagBlockList<AnimationIkBlock> ModeIkaabbccList
                {
                    get
                    {
                        return this.modeIkaabbccList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public override void Initialize()
                {
                    this.weaponClassaabbccList.Clear();
                    this.modeIkaabbccList.Clear();
                    this.Label = StringId.Zero;
                    this.WeaponClassaabbcc = TagBlock.Zero;
                    this.ModeIkaabbcc = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Label = reader.ReadInt32();
                    this.WeaponClassaabbcc = reader.ReadInt64();
                    this.weaponClassaabbccList.Read(reader, this.WeaponClassaabbcc);
                    this.ModeIkaabbcc = reader.ReadInt64();
                    this.modeIkaabbccList.Read(reader, this.ModeIkaabbcc);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(28, 4)]
                public sealed class WeaponClassBlock : AbideTagBlock
                {
                    private TagBlockList<WeaponTypeBlock> weaponTypeaabbccList = new TagBlockList<WeaponTypeBlock>(64);
                    private TagBlockList<AnimationIkBlock> weaponIkaabbccList = new TagBlockList<AnimationIkBlock>(8);
                    [FieldAttribute("label^", typeof(StringId))]
                    public StringId Label;
                    [FieldAttribute("weapon type|AABBCC", typeof(TagBlock))]
                    [BlockAttribute("weapon_type_block", 64, typeof(WeaponTypeBlock))]
                    public TagBlock WeaponTypeaabbcc;
                    [FieldAttribute("weapon ik|AABBCC", typeof(TagBlock))]
                    [BlockAttribute("animation_ik_block", 8, typeof(AnimationIkBlock))]
                    public TagBlock WeaponIkaabbcc;
                    public TagBlockList<WeaponTypeBlock> WeaponTypeaabbccList
                    {
                        get
                        {
                            return this.weaponTypeaabbccList;
                        }
                    }
                    public TagBlockList<AnimationIkBlock> WeaponIkaabbccList
                    {
                        get
                        {
                            return this.weaponIkaabbccList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 28;
                        }
                    }
                    public override void Initialize()
                    {
                        this.weaponTypeaabbccList.Clear();
                        this.weaponIkaabbccList.Clear();
                        this.Label = StringId.Zero;
                        this.WeaponTypeaabbcc = TagBlock.Zero;
                        this.WeaponIkaabbcc = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Label = reader.ReadInt32();
                        this.WeaponTypeaabbcc = reader.ReadInt64();
                        this.weaponTypeaabbccList.Read(reader, this.WeaponTypeaabbcc);
                        this.WeaponIkaabbcc = reader.ReadInt64();
                        this.weaponIkaabbccList.Read(reader, this.WeaponIkaabbcc);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(76, 4)]
                    public sealed class WeaponTypeBlock : AbideTagBlock
                    {
                        private TagBlockList<AnimationEntryBlock> actionsaabbccList = new TagBlockList<AnimationEntryBlock>(256);
                        private TagBlockList<DamageAnimationBlock> deathAndDamageaabbccList = new TagBlockList<DamageAnimationBlock>(8);
                        private TagBlockList<AnimationTransitionBlock> transitionsaabbccList = new TagBlockList<AnimationTransitionBlock>(256);
                        private TagBlockList<PrecacheListBlock> highPrecachecccccList = new TagBlockList<PrecacheListBlock>(1024);
                        [FieldAttribute("label^", typeof(StringId))]
                        public StringId Label;
                        [FieldAttribute("actions|AABBCC", typeof(TagBlock))]
                        [BlockAttribute("animation_entry_block", 256, typeof(AnimationEntryBlock))]
                        public TagBlock Actionsaabbcc;
                        [FieldAttribute("overlays|AABBCC", typeof(TagBlock))]
                        [BlockAttribute("animation_entry_block", 256, typeof(AnimationEntryBlock))]
                        public TagBlock Overlaysaabbcc;
                        [FieldAttribute("death and damage|AABBCC", typeof(TagBlock))]
                        [BlockAttribute("damage_animation_block", 8, typeof(DamageAnimationBlock))]
                        public TagBlock DeathAndDamageaabbcc;
                        [FieldAttribute("transitions|AABBCC", typeof(TagBlock))]
                        [BlockAttribute("animation_transition_block", 256, typeof(AnimationTransitionBlock))]
                        public TagBlock Transitionsaabbcc;
                        [FieldAttribute("high precache|CCCCC", typeof(TagBlock))]
                        [BlockAttribute("precache_list_block", 1024, typeof(PrecacheListBlock))]
                        public TagBlock HighPrecacheccccc;
                        [FieldAttribute("low precache|CCCCC", typeof(TagBlock))]
                        [BlockAttribute("precache_list_block", 1024, typeof(PrecacheListBlock))]
                        public TagBlock LowPrecacheccccc;
                        public TagBlockList<AnimationEntryBlock> ActionsaabbccList
                        {
                            get
                            {
                                return this.actionsaabbccList;
                            }
                        }
                        public TagBlockList<DamageAnimationBlock> DeathAndDamageaabbccList
                        {
                            get
                            {
                                return this.deathAndDamageaabbccList;
                            }
                        }
                        public TagBlockList<AnimationTransitionBlock> TransitionsaabbccList
                        {
                            get
                            {
                                return this.transitionsaabbccList;
                            }
                        }
                        public TagBlockList<PrecacheListBlock> HighPrecachecccccList
                        {
                            get
                            {
                                return this.highPrecachecccccList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 76;
                            }
                        }
                        public override void Initialize()
                        {
                            this.actionsaabbccList.Clear();
                            this.deathAndDamageaabbccList.Clear();
                            this.transitionsaabbccList.Clear();
                            this.highPrecachecccccList.Clear();
                            this.Label = StringId.Zero;
                            this.Actionsaabbcc = TagBlock.Zero;
                            this.Overlaysaabbcc = TagBlock.Zero;
                            this.DeathAndDamageaabbcc = TagBlock.Zero;
                            this.Transitionsaabbcc = TagBlock.Zero;
                            this.HighPrecacheccccc = TagBlock.Zero;
                            this.LowPrecacheccccc = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Label = reader.ReadInt32();
                            this.Actionsaabbcc = reader.ReadInt64();
                            this.actionsaabbccList.Read(reader, this.Actionsaabbcc);
                            this.Overlaysaabbcc = reader.ReadInt64();
                            this.actionsaabbccList.Read(reader, this.Overlaysaabbcc);
                            this.DeathAndDamageaabbcc = reader.ReadInt64();
                            this.deathAndDamageaabbccList.Read(reader, this.DeathAndDamageaabbcc);
                            this.Transitionsaabbcc = reader.ReadInt64();
                            this.transitionsaabbccList.Read(reader, this.Transitionsaabbcc);
                            this.HighPrecacheccccc = reader.ReadInt64();
                            this.highPrecachecccccList.Read(reader, this.HighPrecacheccccc);
                            this.LowPrecacheccccc = reader.ReadInt64();
                            this.highPrecachecccccList.Read(reader, this.LowPrecacheccccc);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(8, 4)]
                        public sealed class AnimationEntryBlock : AbideTagBlock
                        {
                            [FieldAttribute("label^", typeof(StringId))]
                            public StringId Label;
                            [FieldAttribute("animation*", typeof(AnimationIndexStructBlock))]
                            public AnimationIndexStructBlock Animation;
                            public override int Size
                            {
                                get
                                {
                                    return 8;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Label = StringId.Zero;
                                this.Animation = new AnimationIndexStructBlock();
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Label = reader.ReadInt32();
                                this.Animation = reader.ReadDataStructure<AnimationIndexStructBlock>();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(4, 4)]
                            public sealed class AnimationIndexStructBlock : AbideTagBlock
                            {
                                [FieldAttribute("graph index*", typeof(Int16))]
                                public Int16 GraphIndex;
                                [FieldAttribute("animation*", typeof(Int16))]
                                public Int16 Animation;
                                public override int Size
                                {
                                    get
                                    {
                                        return 4;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.GraphIndex = 0;
                                    this.Animation = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.GraphIndex = reader.ReadInt16();
                                    this.Animation = reader.ReadInt16();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                        [FieldSetAttribute(16, 4)]
                        public sealed class DamageAnimationBlock : AbideTagBlock
                        {
                            private TagBlockList<DamageDirectionBlock> directionsaabbccList = new TagBlockList<DamageDirectionBlock>(4);
                            [FieldAttribute("label^", typeof(StringId))]
                            public StringId Label;
                            [FieldAttribute("directions*|AABBCC", typeof(TagBlock))]
                            [BlockAttribute("damage_direction_block", 4, typeof(DamageDirectionBlock))]
                            public TagBlock Directionsaabbcc;
                            public TagBlockList<DamageDirectionBlock> DirectionsaabbccList
                            {
                                get
                                {
                                    return this.directionsaabbccList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 16;
                                }
                            }
                            public override void Initialize()
                            {
                                this.directionsaabbccList.Clear();
                                this.Label = StringId.Zero;
                                this.Directionsaabbcc = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Label = reader.ReadInt32();
                                this.Directionsaabbcc = reader.ReadInt64();
                                this.directionsaabbccList.Read(reader, this.Directionsaabbcc);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(12, 4)]
                            public sealed class DamageDirectionBlock : AbideTagBlock
                            {
                                private TagBlockList<DamageRegionBlock> regionsaabbccList = new TagBlockList<DamageRegionBlock>(11);
                                [FieldAttribute("regions*|AABBCC", typeof(TagBlock))]
                                [BlockAttribute("damage_region_block", 11, typeof(DamageRegionBlock))]
                                public TagBlock Regionsaabbcc;
                                public TagBlockList<DamageRegionBlock> RegionsaabbccList
                                {
                                    get
                                    {
                                        return this.regionsaabbccList;
                                    }
                                }
                                public override int Size
                                {
                                    get
                                    {
                                        return 12;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.regionsaabbccList.Clear();
                                    this.Regionsaabbcc = TagBlock.Zero;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Regionsaabbcc = reader.ReadInt64();
                                    this.regionsaabbccList.Read(reader, this.Regionsaabbcc);
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                                [FieldSetAttribute(4, 4)]
                                public sealed class DamageRegionBlock : AbideTagBlock
                                {
                                    [FieldAttribute("animation*", typeof(AnimationIndexStructBlock))]
                                    public AnimationIndexStructBlock Animation;
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 4;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.Animation = new AnimationIndexStructBlock();
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.Animation = reader.ReadDataStructure<AnimationIndexStructBlock>();
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                    [FieldSetAttribute(4, 4)]
                                    public sealed class AnimationIndexStructBlock : AbideTagBlock
                                    {
                                        [FieldAttribute("graph index*", typeof(Int16))]
                                        public Int16 GraphIndex;
                                        [FieldAttribute("animation*", typeof(Int16))]
                                        public Int16 Animation;
                                        public override int Size
                                        {
                                            get
                                            {
                                                return 4;
                                            }
                                        }
                                        public override void Initialize()
                                        {
                                            this.GraphIndex = 0;
                                            this.Animation = 0;
                                        }
                                        public override void Read(BinaryReader reader)
                                        {
                                            this.GraphIndex = reader.ReadInt16();
                                            this.Animation = reader.ReadInt16();
                                        }
                                        public override void Write(BinaryWriter writer)
                                        {
                                        }
                                    }
                                }
                            }
                        }
                        [FieldSetAttribute(24, 4)]
                        public sealed class AnimationTransitionBlock : AbideTagBlock
                        {
                            private TagBlockList<AnimationTransitionDestinationBlock> destinationsaabbccList = new TagBlockList<AnimationTransitionDestinationBlock>(32);
                            [FieldAttribute("full name^#name of the mode & state of the source", typeof(StringId))]
                            public StringId FullName;
                            [FieldAttribute("state info", typeof(AnimationTransitionStateStructBlock))]
                            public AnimationTransitionStateStructBlock StateInfo;
                            [FieldAttribute("destinations|AABBCC", typeof(TagBlock))]
                            [BlockAttribute("animation_transition_destination_block", 32, typeof(AnimationTransitionDestinationBlock))]
                            public TagBlock Destinationsaabbcc;
                            public TagBlockList<AnimationTransitionDestinationBlock> DestinationsaabbccList
                            {
                                get
                                {
                                    return this.destinationsaabbccList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 24;
                                }
                            }
                            public override void Initialize()
                            {
                                this.destinationsaabbccList.Clear();
                                this.FullName = StringId.Zero;
                                this.StateInfo = new AnimationTransitionStateStructBlock();
                                this.Destinationsaabbcc = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.FullName = reader.ReadInt32();
                                this.StateInfo = reader.ReadDataStructure<AnimationTransitionStateStructBlock>();
                                this.Destinationsaabbcc = reader.ReadInt64();
                                this.destinationsaabbccList.Read(reader, this.Destinationsaabbcc);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(20, 4)]
                            public sealed class AnimationTransitionDestinationBlock : AbideTagBlock
                            {
                                [FieldAttribute("full name^#name of the mode & state this transitions to", typeof(StringId))]
                                public StringId FullName;
                                [FieldAttribute("mode*#name of the mode", typeof(StringId))]
                                public StringId Mode;
                                [FieldAttribute("state info", typeof(AnimationDestinationStateStructBlock))]
                                public AnimationDestinationStateStructBlock StateInfo;
                                [FieldAttribute("animation*", typeof(AnimationIndexStructBlock))]
                                public AnimationIndexStructBlock Animation;
                                public override int Size
                                {
                                    get
                                    {
                                        return 20;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.FullName = StringId.Zero;
                                    this.Mode = StringId.Zero;
                                    this.StateInfo = new AnimationDestinationStateStructBlock();
                                    this.Animation = new AnimationIndexStructBlock();
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.FullName = reader.ReadInt32();
                                    this.Mode = reader.ReadInt32();
                                    this.StateInfo = reader.ReadDataStructure<AnimationDestinationStateStructBlock>();
                                    this.Animation = reader.ReadDataStructure<AnimationIndexStructBlock>();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                                [FieldSetAttribute(8, 4)]
                                public sealed class AnimationDestinationStateStructBlock : AbideTagBlock
                                {
                                    [FieldAttribute("state name*#name of the state", typeof(StringId))]
                                    public StringId StateName;
                                    [FieldAttribute("frame event link*#which frame event to link to", typeof(FrameEventLinkOptions))]
                                    [OptionsAttribute(typeof(FrameEventLinkOptions), false)]
                                    public FrameEventLinkOptions FrameEventLink;
                                    [FieldAttribute("", typeof(Byte[]))]
                                    [PaddingAttribute(1)]
                                    public Byte[] EmptyString;
                                    [FieldAttribute("index a*#first level sub-index into state", typeof(Byte))]
                                    public Byte IndexA;
                                    [FieldAttribute("index b*#second level sub-index into state", typeof(Byte))]
                                    public Byte IndexB;
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 8;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.StateName = StringId.Zero;
                                        this.FrameEventLink = ((FrameEventLinkOptions)(0));
                                        this.EmptyString = new byte[1];
                                        this.IndexA = 0;
                                        this.IndexB = 0;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.StateName = reader.ReadInt32();
                                        this.FrameEventLink = ((FrameEventLinkOptions)(reader.ReadByte()));
                                        this.EmptyString = reader.ReadBytes(1);
                                        this.IndexA = reader.ReadByte();
                                        this.IndexB = reader.ReadByte();
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                    public enum FrameEventLinkOptions : Byte
                                    {
                                        NoKeyframe = 0,
                                        KeyframeTypeA = 1,
                                        KeyframeTypeB = 2,
                                        KeyframeTypeC = 3,
                                        KeyframeTypeD = 4,
                                    }
                                }
                                [FieldSetAttribute(4, 4)]
                                public sealed class AnimationIndexStructBlock : AbideTagBlock
                                {
                                    [FieldAttribute("graph index*", typeof(Int16))]
                                    public Int16 GraphIndex;
                                    [FieldAttribute("animation*", typeof(Int16))]
                                    public Int16 Animation;
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 4;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.GraphIndex = 0;
                                        this.Animation = 0;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.GraphIndex = reader.ReadInt16();
                                        this.Animation = reader.ReadInt16();
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                }
                            }
                            [FieldSetAttribute(8, 4)]
                            public sealed class AnimationTransitionStateStructBlock : AbideTagBlock
                            {
                                [FieldAttribute("state name*#name of the state", typeof(StringId))]
                                public StringId StateName;
                                [FieldAttribute("", typeof(Byte[]))]
                                [PaddingAttribute(2)]
                                public Byte[] EmptyString;
                                [FieldAttribute("index a*#first level sub-index into state", typeof(Byte))]
                                public Byte IndexA;
                                [FieldAttribute("index b*#second level sub-index into state", typeof(Byte))]
                                public Byte IndexB;
                                public override int Size
                                {
                                    get
                                    {
                                        return 8;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.StateName = StringId.Zero;
                                    this.EmptyString = new byte[2];
                                    this.IndexA = 0;
                                    this.IndexB = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.StateName = reader.ReadInt32();
                                    this.EmptyString = reader.ReadBytes(2);
                                    this.IndexA = reader.ReadByte();
                                    this.IndexB = reader.ReadByte();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                        [FieldSetAttribute(4, 4)]
                        public sealed class PrecacheListBlock : AbideTagBlock
                        {
                            [FieldAttribute("cache block index", typeof(Int32))]
                            public Int32 CacheBlockIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 4;
                                }
                            }
                            public override void Initialize()
                            {
                                this.CacheBlockIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.CacheBlockIndex = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [FieldSetAttribute(8, 4)]
                    public sealed class AnimationIkBlock : AbideTagBlock
                    {
                        [FieldAttribute("marker#the marker name on the object being attached", typeof(StringId))]
                        public StringId Marker;
                        [FieldAttribute("attach to marker#the marker name object (weapon, vehicle, etc.) the above marker " +
                            "is being attached to", typeof(StringId))]
                        public StringId AttachToMarker;
                        public override int Size
                        {
                            get
                            {
                                return 8;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Marker = StringId.Zero;
                            this.AttachToMarker = StringId.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Marker = reader.ReadInt32();
                            this.AttachToMarker = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(8, 4)]
                public sealed class AnimationIkBlock : AbideTagBlock
                {
                    [FieldAttribute("marker#the marker name on the object being attached", typeof(StringId))]
                    public StringId Marker;
                    [FieldAttribute("attach to marker#the marker name object (weapon, vehicle, etc.) the above marker " +
                        "is being attached to", typeof(StringId))]
                    public StringId AttachToMarker;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Marker = StringId.Zero;
                        this.AttachToMarker = StringId.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Marker = reader.ReadInt32();
                        this.AttachToMarker = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class VehicleSuspensionBlock : AbideTagBlock
            {
                [FieldAttribute("label^", typeof(StringId))]
                public StringId Label;
                [FieldAttribute("animation*", typeof(AnimationIndexStructBlock))]
                public AnimationIndexStructBlock Animation;
                [FieldAttribute("marker name", typeof(StringId))]
                public StringId MarkerName;
                [FieldAttribute("mass point offset", typeof(Single))]
                public Single MassPointOffset;
                [FieldAttribute("full extension ground_depth", typeof(Single))]
                public Single FullExtensionGroundDepth;
                [FieldAttribute("full compression ground_depth", typeof(Single))]
                public Single FullCompressionGroundDepth;
                [FieldAttribute("region name", typeof(StringId))]
                public StringId RegionName;
                [FieldAttribute("destroyed mass point offset", typeof(Single))]
                public Single DestroyedMassPointOffset;
                [FieldAttribute("destroyed full extension ground_depth", typeof(Single))]
                public Single DestroyedFullExtensionGroundDepth;
                [FieldAttribute("destroyed full compression ground_depth", typeof(Single))]
                public Single DestroyedFullCompressionGroundDepth;
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.Label = StringId.Zero;
                    this.Animation = new AnimationIndexStructBlock();
                    this.MarkerName = StringId.Zero;
                    this.MassPointOffset = 0;
                    this.FullExtensionGroundDepth = 0;
                    this.FullCompressionGroundDepth = 0;
                    this.RegionName = StringId.Zero;
                    this.DestroyedMassPointOffset = 0;
                    this.DestroyedFullExtensionGroundDepth = 0;
                    this.DestroyedFullCompressionGroundDepth = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Label = reader.ReadInt32();
                    this.Animation = reader.ReadDataStructure<AnimationIndexStructBlock>();
                    this.MarkerName = reader.ReadInt32();
                    this.MassPointOffset = reader.ReadSingle();
                    this.FullExtensionGroundDepth = reader.ReadSingle();
                    this.FullCompressionGroundDepth = reader.ReadSingle();
                    this.RegionName = reader.ReadInt32();
                    this.DestroyedMassPointOffset = reader.ReadSingle();
                    this.DestroyedFullExtensionGroundDepth = reader.ReadSingle();
                    this.DestroyedFullCompressionGroundDepth = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class AnimationIndexStructBlock : AbideTagBlock
                {
                    [FieldAttribute("graph index*", typeof(Int16))]
                    public Int16 GraphIndex;
                    [FieldAttribute("animation*", typeof(Int16))]
                    public Int16 Animation;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.GraphIndex = 0;
                        this.Animation = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.GraphIndex = reader.ReadInt16();
                        this.Animation = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class ObjectAnimationBlock : AbideTagBlock
            {
                [FieldAttribute("label^", typeof(StringId))]
                public StringId Label;
                [FieldAttribute("animation*", typeof(AnimationIndexStructBlock))]
                public AnimationIndexStructBlock Animation;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("function controls", typeof(FunctionControlsOptions))]
                [OptionsAttribute(typeof(FunctionControlsOptions), false)]
                public FunctionControlsOptions FunctionControls;
                [FieldAttribute("function", typeof(StringId))]
                public StringId Function;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.Label = StringId.Zero;
                    this.Animation = new AnimationIndexStructBlock();
                    this.EmptyString = new byte[2];
                    this.FunctionControls = ((FunctionControlsOptions)(0));
                    this.Function = StringId.Zero;
                    this.EmptyString1 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Label = reader.ReadInt32();
                    this.Animation = reader.ReadDataStructure<AnimationIndexStructBlock>();
                    this.EmptyString = reader.ReadBytes(2);
                    this.FunctionControls = ((FunctionControlsOptions)(reader.ReadInt16()));
                    this.Function = reader.ReadInt32();
                    this.EmptyString1 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class AnimationIndexStructBlock : AbideTagBlock
                {
                    [FieldAttribute("graph index*", typeof(Int16))]
                    public Int16 GraphIndex;
                    [FieldAttribute("animation*", typeof(Int16))]
                    public Int16 Animation;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.GraphIndex = 0;
                        this.Animation = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.GraphIndex = reader.ReadInt16();
                        this.Animation = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FunctionControlsOptions : Int16
                {
                    Frame = 0,
                    Scale = 1,
                }
            }
        }
        [FieldSetAttribute(88, 4)]
        public sealed class ModelAnimationRuntimeDataStructBlock : AbideTagBlock
        {
            private TagBlockList<InheritedAnimationBlock> inheritenceListbbaaaaList = new TagBlockList<InheritedAnimationBlock>(8);
            private TagBlockList<WeaponClassLookupBlock> weaponListbbaaaaList = new TagBlockList<WeaponClassLookupBlock>(64);
            [FieldAttribute("inheritence list*|BBAAAA", typeof(TagBlock))]
            [BlockAttribute("inherited_animation_block", 8, typeof(InheritedAnimationBlock))]
            public TagBlock InheritenceListbbaaaa;
            [FieldAttribute("weapon list*|BBAAAA", typeof(TagBlock))]
            [BlockAttribute("weapon_class_lookup_block", 64, typeof(WeaponClassLookupBlock))]
            public TagBlock WeaponListbbaaaa;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString1;
            public TagBlockList<InheritedAnimationBlock> InheritenceListbbaaaaList
            {
                get
                {
                    return this.inheritenceListbbaaaaList;
                }
            }
            public TagBlockList<WeaponClassLookupBlock> WeaponListbbaaaaList
            {
                get
                {
                    return this.weaponListbbaaaaList;
                }
            }
            public override int Size
            {
                get
                {
                    return 88;
                }
            }
            public override void Initialize()
            {
                this.inheritenceListbbaaaaList.Clear();
                this.weaponListbbaaaaList.Clear();
                this.InheritenceListbbaaaa = TagBlock.Zero;
                this.WeaponListbbaaaa = TagBlock.Zero;
                this.EmptyString = new byte[32];
                this.EmptyString1 = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.InheritenceListbbaaaa = reader.ReadInt64();
                this.inheritenceListbbaaaaList.Read(reader, this.InheritenceListbbaaaa);
                this.WeaponListbbaaaa = reader.ReadInt64();
                this.weaponListbbaaaaList.Read(reader, this.WeaponListbbaaaa);
                this.EmptyString = reader.ReadBytes(32);
                this.EmptyString1 = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class InheritedAnimationBlock : AbideTagBlock
            {
                private TagBlockList<InheritedAnimationNodeMapBlock> nodeMapList = new TagBlockList<InheritedAnimationNodeMapBlock>(255);
                private TagBlockList<InheritedAnimationNodeMapFlagBlock> nodeMapFlagsList = new TagBlockList<InheritedAnimationNodeMapFlagBlock>(255);
                [FieldAttribute("inherited graph*", typeof(TagReference))]
                public TagReference InheritedGraph;
                [FieldAttribute("node map*", typeof(TagBlock))]
                [BlockAttribute("inherited_animation_node_map_block", 255, typeof(InheritedAnimationNodeMapBlock))]
                public TagBlock NodeMap;
                [FieldAttribute("node map flags*", typeof(TagBlock))]
                [BlockAttribute("inherited_animation_node_map_flag_block", 255, typeof(InheritedAnimationNodeMapFlagBlock))]
                public TagBlock NodeMapFlags;
                [FieldAttribute("root z offset*", typeof(Single))]
                public Single RootZOffset;
                [FieldAttribute("inheritance_flags*", typeof(Int32))]
                public Int32 InheritanceFlags;
                public TagBlockList<InheritedAnimationNodeMapBlock> NodeMapList
                {
                    get
                    {
                        return this.nodeMapList;
                    }
                }
                public TagBlockList<InheritedAnimationNodeMapFlagBlock> NodeMapFlagsList
                {
                    get
                    {
                        return this.nodeMapFlagsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.nodeMapList.Clear();
                    this.nodeMapFlagsList.Clear();
                    this.InheritedGraph = TagReference.Null;
                    this.NodeMap = TagBlock.Zero;
                    this.NodeMapFlags = TagBlock.Zero;
                    this.RootZOffset = 0;
                    this.InheritanceFlags = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.InheritedGraph = reader.Read<TagReference>();
                    this.NodeMap = reader.ReadInt64();
                    this.nodeMapList.Read(reader, this.NodeMap);
                    this.NodeMapFlags = reader.ReadInt64();
                    this.nodeMapFlagsList.Read(reader, this.NodeMapFlags);
                    this.RootZOffset = reader.ReadSingle();
                    this.InheritanceFlags = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(2, 4)]
                public sealed class InheritedAnimationNodeMapBlock : AbideTagBlock
                {
                    [FieldAttribute("local node", typeof(Int16))]
                    public Int16 LocalNode;
                    public override int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public override void Initialize()
                    {
                        this.LocalNode = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.LocalNode = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class InheritedAnimationNodeMapFlagBlock : AbideTagBlock
                {
                    [FieldAttribute("local node flags", typeof(Int32))]
                    public Int32 LocalNodeFlags;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.LocalNodeFlags = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.LocalNodeFlags = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class WeaponClassLookupBlock : AbideTagBlock
            {
                [FieldAttribute("weapon name^", typeof(StringId))]
                public StringId WeaponName;
                [FieldAttribute("weapon class", typeof(StringId))]
                public StringId WeaponClass;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.WeaponName = StringId.Zero;
                    this.WeaponClass = StringId.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.WeaponName = reader.ReadInt32();
                    this.WeaponClass = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
    }
}
#pragma warning restore CS1591
