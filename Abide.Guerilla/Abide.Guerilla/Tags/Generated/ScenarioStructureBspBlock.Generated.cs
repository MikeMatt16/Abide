#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(792, 4)]
    [TagGroupAttribute("scenario_structure_bsp", 1935831920u, 4294967293u, typeof(ScenarioStructureBspBlock))]
    public sealed class ScenarioStructureBspBlock : AbideTagBlock
    {
        private DataList clusterDataList = new DataList(65536);
        private DataList soundPasDataList = new DataList(131072);
        private TagBlockList<GlobalTagImportInfoBlock> importInfoList = new TagBlockList<GlobalTagImportInfoBlock>(1);
        private TagBlockList<StructureCollisionMaterialsBlock> collisionMaterialsList = new TagBlockList<StructureCollisionMaterialsBlock>(512);
        private TagBlockList<GlobalCollisionBspBlock> collisionBspList = new TagBlockList<GlobalCollisionBspBlock>(1);
        private TagBlockList<UnusedStructureBspNodeBlock> unusedNodesList = new TagBlockList<UnusedStructureBspNodeBlock>(131072);
        private TagBlockList<StructureBspLeafBlock> leavesList = new TagBlockList<StructureBspLeafBlock>(65536);
        private TagBlockList<StructureBspSurfaceReferenceBlock> surfaceReferencesList = new TagBlockList<StructureBspSurfaceReferenceBlock>(262144);
        private TagBlockList<StructureBspClusterPortalBlock> clusterPortalsList = new TagBlockList<StructureBspClusterPortalBlock>(512);
        private TagBlockList<StructureBspFogPlaneBlock> fogPlanesList = new TagBlockList<StructureBspFogPlaneBlock>(127);
        private TagBlockList<StructureBspWeatherPaletteBlock> weatherPaletteList = new TagBlockList<StructureBspWeatherPaletteBlock>(32);
        private TagBlockList<StructureBspWeatherPolyhedronBlock> weatherPolyhedraList = new TagBlockList<StructureBspWeatherPolyhedronBlock>(32);
        private TagBlockList<StructureBspDetailObjectDataBlock> detailObjectsList = new TagBlockList<StructureBspDetailObjectDataBlock>(1);
        private TagBlockList<StructureBspClusterBlock> clustersList = new TagBlockList<StructureBspClusterBlock>(512);
        private TagBlockList<GlobalGeometryMaterialBlock> materialsList = new TagBlockList<GlobalGeometryMaterialBlock>(1024);
        private TagBlockList<StructureBspSkyOwnerClusterBlock> skyOwnerClusterList = new TagBlockList<StructureBspSkyOwnerClusterBlock>(32);
        private TagBlockList<StructureBspConveyorSurfaceBlock> conveyorSurfacesList = new TagBlockList<StructureBspConveyorSurfaceBlock>(512);
        private TagBlockList<StructureBspBreakableSurfaceBlock> breakableSurfacesList = new TagBlockList<StructureBspBreakableSurfaceBlock>(8448);
        private TagBlockList<PathfindingDataBlock> pathfindingDataList = new TagBlockList<PathfindingDataBlock>(16);
        private TagBlockList<StructureBspPathfindingEdgesBlock> pathfindingEdgesList = new TagBlockList<StructureBspPathfindingEdgesBlock>(262144);
        private TagBlockList<StructureBspBackgroundSoundPaletteBlock> backgroundSoundPaletteList = new TagBlockList<StructureBspBackgroundSoundPaletteBlock>(64);
        private TagBlockList<StructureBspSoundEnvironmentPaletteBlock> soundEnvironmentPaletteList = new TagBlockList<StructureBspSoundEnvironmentPaletteBlock>(64);
        private TagBlockList<StructureBspMarkerBlock> markersList = new TagBlockList<StructureBspMarkerBlock>(1024);
        private TagBlockList<StructureBspRuntimeDecalBlock> runtimeDecalsList = new TagBlockList<StructureBspRuntimeDecalBlock>(6144);
        private TagBlockList<StructureBspEnvironmentObjectPaletteBlock> environmentObjectPaletteList = new TagBlockList<StructureBspEnvironmentObjectPaletteBlock>(100);
        private TagBlockList<StructureBspEnvironmentObjectBlock> environmentObjectsList = new TagBlockList<StructureBspEnvironmentObjectBlock>(16384);
        private TagBlockList<StructureBspLightmapDataBlock> lightmapsList = new TagBlockList<StructureBspLightmapDataBlock>(128);
        private TagBlockList<GlobalMapLeafBlock> leafMapLeavesList = new TagBlockList<GlobalMapLeafBlock>(65536);
        private TagBlockList<GlobalLeafConnectionBlock> leafMapConnectionsList = new TagBlockList<GlobalLeafConnectionBlock>(524288);
        private TagBlockList<GlobalErrorReportCategoriesBlock> errorsList = new TagBlockList<GlobalErrorReportCategoriesBlock>(64);
        private TagBlockList<StructureBspPrecomputedLightingBlock> precomputedLightingList = new TagBlockList<StructureBspPrecomputedLightingBlock>(350);
        private TagBlockList<StructureBspInstancedGeometryDefinitionBlock> instancedGeometriesDefinitionsList = new TagBlockList<StructureBspInstancedGeometryDefinitionBlock>(512);
        private TagBlockList<StructureBspInstancedGeometryInstancesBlock> instancedGeometryInstancesList = new TagBlockList<StructureBspInstancedGeometryInstancesBlock>(1024);
        private TagBlockList<StructureBspSoundClusterBlock> ambienceSoundClustersList = new TagBlockList<StructureBspSoundClusterBlock>(512);
        private TagBlockList<TransparentPlanesBlock> transparentPlanesList = new TagBlockList<TransparentPlanesBlock>(32768);
        private TagBlockList<StructureBspDebugInfoBlock> debugInfoList = new TagBlockList<StructureBspDebugInfoBlock>(1);
        private TagBlockList<GlobalWaterDefinitionsBlock> waterDefinitionsList = new TagBlockList<GlobalWaterDefinitionsBlock>(1);
        private TagBlockList<StructurePortalDeviceMappingBlock> portalEqualsGreaterThanDeviceMappingList = new TagBlockList<StructurePortalDeviceMappingBlock>(1);
        private TagBlockList<StructureBspAudibilityBlock> audibilityList = new TagBlockList<StructureBspAudibilityBlock>(1);
        private TagBlockList<StructureBspFakeLightprobesBlock> objectFakeLightprobesList = new TagBlockList<StructureBspFakeLightprobesBlock>(2048);
        private TagBlockList<DecoratorPlacementDefinitionBlock> decoratorsList = new TagBlockList<DecoratorPlacementDefinitionBlock>(1);
        [FieldAttribute("Import Info*", typeof(TagBlock))]
        [BlockAttribute("import info", 1, typeof(GlobalTagImportInfoBlock))]
        public TagBlock ImportInfo;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString;
        [FieldAttribute("Collision Materials*", typeof(TagBlock))]
        [BlockAttribute("structure_collision_materials_block", 512, typeof(StructureCollisionMaterialsBlock))]
        public TagBlock CollisionMaterials;
        [FieldAttribute("Collision BSP*", typeof(TagBlock))]
        [BlockAttribute("global_collision_bsp_block", 1, typeof(GlobalCollisionBspBlock))]
        public TagBlock CollisionBsp;
        [FieldAttribute("Vehicle Floor:World Units#Height below which vehicles get pushed up by an unstopp" +
            "able force.", typeof(Single))]
        public Single VehicleFloor;
        [FieldAttribute("Vehicle Ceiling:World Units#Height above which vehicles get pushed down by an uns" +
            "toppable force.", typeof(Single))]
        public Single VehicleCeiling;
        [FieldAttribute("UNUSED nodes*", typeof(TagBlock))]
        [BlockAttribute("UNUSED_structure_bsp_node_block", 131072, typeof(UnusedStructureBspNodeBlock))]
        public TagBlock UnusedNodes;
        [FieldAttribute("Leaves*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_leaf_block", 65536, typeof(StructureBspLeafBlock))]
        public TagBlock Leaves;
        [FieldAttribute("Surface References*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_surface_reference_block", 262144, typeof(StructureBspSurfaceReferenceBlock))]
        public TagBlock SurfaceReferences;
        [FieldAttribute("Cluster Data*", typeof(TagBlock))]
        [DataAttribute(65536)]
        public TagBlock ClusterData;
        [FieldAttribute("Cluster Portals*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_cluster_portal_block", 512, typeof(StructureBspClusterPortalBlock))]
        public TagBlock ClusterPortals;
        [FieldAttribute("Fog Planes*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_fog_plane_block", 127, typeof(StructureBspFogPlaneBlock))]
        public TagBlock FogPlanes;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(24)]
        public Byte[] EmptyString1;
        [FieldAttribute("Weather Palette*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_weather_palette_block", 32, typeof(StructureBspWeatherPaletteBlock))]
        public TagBlock WeatherPalette;
        [FieldAttribute("Weather Polyhedra*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_weather_polyhedron_block", 32, typeof(StructureBspWeatherPolyhedronBlock))]
        public TagBlock WeatherPolyhedra;
        [FieldAttribute("Detail Objects*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_detail_object_data_block", 1, typeof(StructureBspDetailObjectDataBlock))]
        public TagBlock DetailObjects;
        [FieldAttribute("Clusters*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_cluster_block", 512, typeof(StructureBspClusterBlock))]
        public TagBlock Clusters;
        [FieldAttribute("Materials*", typeof(TagBlock))]
        [BlockAttribute("material", 1024, typeof(GlobalGeometryMaterialBlock))]
        public TagBlock Materials;
        [FieldAttribute("Sky Owner Cluster*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_sky_owner_cluster_block", 32, typeof(StructureBspSkyOwnerClusterBlock))]
        public TagBlock SkyOwnerCluster;
        [FieldAttribute("Conveyor Surfaces*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_conveyor_surface_block", 512, typeof(StructureBspConveyorSurfaceBlock))]
        public TagBlock ConveyorSurfaces;
        [FieldAttribute("Breakable Surfaces*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_breakable_surface_block", 8448, typeof(StructureBspBreakableSurfaceBlock))]
        public TagBlock BreakableSurfaces;
        [FieldAttribute("Pathfinding Data", typeof(TagBlock))]
        [BlockAttribute("pathfinding_data_block", 16, typeof(PathfindingDataBlock))]
        public TagBlock PathfindingData;
        [FieldAttribute("Pathfinding Edges*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_pathfinding_edges_block", 262144, typeof(StructureBspPathfindingEdgesBlock))]
        public TagBlock PathfindingEdges;
        [FieldAttribute("Background Sound Palette*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_background_sound_palette_block", 64, typeof(StructureBspBackgroundSoundPaletteBlock))]
        public TagBlock BackgroundSoundPalette;
        [FieldAttribute("Sound Environment Palette*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_sound_environment_palette_block", 64, typeof(StructureBspSoundEnvironmentPaletteBlock))]
        public TagBlock SoundEnvironmentPalette;
        [FieldAttribute("Sound PAS Data*", typeof(TagBlock))]
        [DataAttribute(131072)]
        public TagBlock SoundPasData;
        [FieldAttribute("Markers*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_marker_block", 1024, typeof(StructureBspMarkerBlock))]
        public TagBlock Markers;
        [FieldAttribute("Runtime Decals*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_runtime_decal_block", 6144, typeof(StructureBspRuntimeDecalBlock))]
        public TagBlock RuntimeDecals;
        [FieldAttribute("Environment Object Palette*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_environment_object_palette_block", 100, typeof(StructureBspEnvironmentObjectPaletteBlock))]
        public TagBlock EnvironmentObjectPalette;
        [FieldAttribute("Environment Objects*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_environment_object_block", 16384, typeof(StructureBspEnvironmentObjectBlock))]
        public TagBlock EnvironmentObjects;
        [FieldAttribute("Lightmaps*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_lightmap_data_block", 128, typeof(StructureBspLightmapDataBlock))]
        public TagBlock Lightmaps;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString2;
        [FieldAttribute("Leaf Map Leaves*", typeof(TagBlock))]
        [BlockAttribute("global_map_leaf_block", 65536, typeof(GlobalMapLeafBlock))]
        public TagBlock LeafMapLeaves;
        [FieldAttribute("Leaf Map Connections*", typeof(TagBlock))]
        [BlockAttribute("global_leaf_connection_block", 524288, typeof(GlobalLeafConnectionBlock))]
        public TagBlock LeafMapConnections;
        [FieldAttribute("Errors*", typeof(TagBlock))]
        [BlockAttribute("error report category", 64, typeof(GlobalErrorReportCategoriesBlock))]
        public TagBlock Errors;
        [FieldAttribute("Precomputed Lighting*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_precomputed_lighting_block", 350, typeof(StructureBspPrecomputedLightingBlock))]
        public TagBlock PrecomputedLighting;
        [FieldAttribute("Instanced Geometries Definitions*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_instanced_geometry_definition_block", 512, typeof(StructureBspInstancedGeometryDefinitionBlock))]
        public TagBlock InstancedGeometriesDefinitions;
        [FieldAttribute("Instanced Geometry Instances*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_instanced_geometry_instances_block", 1024, typeof(StructureBspInstancedGeometryInstancesBlock))]
        public TagBlock InstancedGeometryInstances;
        [FieldAttribute(")Ambience Sound Clusters", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_sound_cluster_block", 512, typeof(StructureBspSoundClusterBlock))]
        public TagBlock AmbienceSoundClusters;
        [FieldAttribute(")Reverb Sound Clusters", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_sound_cluster_block", 512, typeof(StructureBspSoundClusterBlock))]
        public TagBlock ReverbSoundClusters;
        [FieldAttribute("Transparent Planes*", typeof(TagBlock))]
        [BlockAttribute("transparent_planes_block", 32768, typeof(TransparentPlanesBlock))]
        public TagBlock TransparentPlanes;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(96)]
        public Byte[] EmptyString3;
        [FieldAttribute("Vehicle Sperical Limit Radius#Distances this far and longer from limit origin wil" +
            "l pull you back in.", typeof(Single))]
        public Single VehicleSpericalLimitRadius;
        [FieldAttribute("Vehicle Sperical Limit Center#Center of space in which vehicle can move.", typeof(Vector3))]
        public Vector3 VehicleSpericalLimitCenter;
        [FieldAttribute("Debug Info*", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_debug_info_block", 1, typeof(StructureBspDebugInfoBlock))]
        public TagBlock DebugInfo;
        [FieldAttribute("Decorators", typeof(TagReference))]
        public TagReference Decorators;
        [FieldAttribute("structure_physics*", typeof(GlobalStructurePhysicsStructBlock))]
        public GlobalStructurePhysicsStructBlock StructurePhysics;
        [FieldAttribute("Water Definitions", typeof(TagBlock))]
        [BlockAttribute("global_water_definitions_block", 1, typeof(GlobalWaterDefinitionsBlock))]
        public TagBlock WaterDefinitions;
        [FieldAttribute(")portal=>device mapping", typeof(TagBlock))]
        [BlockAttribute("structure_portal_device_mapping_block", 1, typeof(StructurePortalDeviceMappingBlock))]
        public TagBlock PortalEqualsGreaterThanDeviceMapping;
        [FieldAttribute(")Audibility", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_audibility_block", 1, typeof(StructureBspAudibilityBlock))]
        public TagBlock Audibility;
        [FieldAttribute(")Object Fake Lightprobes", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_fake_lightprobes_block", 2048, typeof(StructureBspFakeLightprobesBlock))]
        public TagBlock ObjectFakeLightprobes;
        [FieldAttribute("Decorators", typeof(TagBlock))]
        [BlockAttribute("decorator_placement_definition_block", 1, typeof(DecoratorPlacementDefinitionBlock))]
        public TagBlock Decorators1;
        public DataList ClusterDataList
        {
            get
            {
                return this.clusterDataList;
            }
        }
        public DataList SoundPasDataList
        {
            get
            {
                return this.soundPasDataList;
            }
        }
        public TagBlockList<GlobalTagImportInfoBlock> ImportInfoList
        {
            get
            {
                return this.importInfoList;
            }
        }
        public TagBlockList<StructureCollisionMaterialsBlock> CollisionMaterialsList
        {
            get
            {
                return this.collisionMaterialsList;
            }
        }
        public TagBlockList<GlobalCollisionBspBlock> CollisionBspList
        {
            get
            {
                return this.collisionBspList;
            }
        }
        public TagBlockList<UnusedStructureBspNodeBlock> UnusedNodesList
        {
            get
            {
                return this.unusedNodesList;
            }
        }
        public TagBlockList<StructureBspLeafBlock> LeavesList
        {
            get
            {
                return this.leavesList;
            }
        }
        public TagBlockList<StructureBspSurfaceReferenceBlock> SurfaceReferencesList
        {
            get
            {
                return this.surfaceReferencesList;
            }
        }
        public TagBlockList<StructureBspClusterPortalBlock> ClusterPortalsList
        {
            get
            {
                return this.clusterPortalsList;
            }
        }
        public TagBlockList<StructureBspFogPlaneBlock> FogPlanesList
        {
            get
            {
                return this.fogPlanesList;
            }
        }
        public TagBlockList<StructureBspWeatherPaletteBlock> WeatherPaletteList
        {
            get
            {
                return this.weatherPaletteList;
            }
        }
        public TagBlockList<StructureBspWeatherPolyhedronBlock> WeatherPolyhedraList
        {
            get
            {
                return this.weatherPolyhedraList;
            }
        }
        public TagBlockList<StructureBspDetailObjectDataBlock> DetailObjectsList
        {
            get
            {
                return this.detailObjectsList;
            }
        }
        public TagBlockList<StructureBspClusterBlock> ClustersList
        {
            get
            {
                return this.clustersList;
            }
        }
        public TagBlockList<GlobalGeometryMaterialBlock> MaterialsList
        {
            get
            {
                return this.materialsList;
            }
        }
        public TagBlockList<StructureBspSkyOwnerClusterBlock> SkyOwnerClusterList
        {
            get
            {
                return this.skyOwnerClusterList;
            }
        }
        public TagBlockList<StructureBspConveyorSurfaceBlock> ConveyorSurfacesList
        {
            get
            {
                return this.conveyorSurfacesList;
            }
        }
        public TagBlockList<StructureBspBreakableSurfaceBlock> BreakableSurfacesList
        {
            get
            {
                return this.breakableSurfacesList;
            }
        }
        public TagBlockList<PathfindingDataBlock> PathfindingDataList
        {
            get
            {
                return this.pathfindingDataList;
            }
        }
        public TagBlockList<StructureBspPathfindingEdgesBlock> PathfindingEdgesList
        {
            get
            {
                return this.pathfindingEdgesList;
            }
        }
        public TagBlockList<StructureBspBackgroundSoundPaletteBlock> BackgroundSoundPaletteList
        {
            get
            {
                return this.backgroundSoundPaletteList;
            }
        }
        public TagBlockList<StructureBspSoundEnvironmentPaletteBlock> SoundEnvironmentPaletteList
        {
            get
            {
                return this.soundEnvironmentPaletteList;
            }
        }
        public TagBlockList<StructureBspMarkerBlock> MarkersList
        {
            get
            {
                return this.markersList;
            }
        }
        public TagBlockList<StructureBspRuntimeDecalBlock> RuntimeDecalsList
        {
            get
            {
                return this.runtimeDecalsList;
            }
        }
        public TagBlockList<StructureBspEnvironmentObjectPaletteBlock> EnvironmentObjectPaletteList
        {
            get
            {
                return this.environmentObjectPaletteList;
            }
        }
        public TagBlockList<StructureBspEnvironmentObjectBlock> EnvironmentObjectsList
        {
            get
            {
                return this.environmentObjectsList;
            }
        }
        public TagBlockList<StructureBspLightmapDataBlock> LightmapsList
        {
            get
            {
                return this.lightmapsList;
            }
        }
        public TagBlockList<GlobalMapLeafBlock> LeafMapLeavesList
        {
            get
            {
                return this.leafMapLeavesList;
            }
        }
        public TagBlockList<GlobalLeafConnectionBlock> LeafMapConnectionsList
        {
            get
            {
                return this.leafMapConnectionsList;
            }
        }
        public TagBlockList<GlobalErrorReportCategoriesBlock> ErrorsList
        {
            get
            {
                return this.errorsList;
            }
        }
        public TagBlockList<StructureBspPrecomputedLightingBlock> PrecomputedLightingList
        {
            get
            {
                return this.precomputedLightingList;
            }
        }
        public TagBlockList<StructureBspInstancedGeometryDefinitionBlock> InstancedGeometriesDefinitionsList
        {
            get
            {
                return this.instancedGeometriesDefinitionsList;
            }
        }
        public TagBlockList<StructureBspInstancedGeometryInstancesBlock> InstancedGeometryInstancesList
        {
            get
            {
                return this.instancedGeometryInstancesList;
            }
        }
        public TagBlockList<StructureBspSoundClusterBlock> AmbienceSoundClustersList
        {
            get
            {
                return this.ambienceSoundClustersList;
            }
        }
        public TagBlockList<TransparentPlanesBlock> TransparentPlanesList
        {
            get
            {
                return this.transparentPlanesList;
            }
        }
        public TagBlockList<StructureBspDebugInfoBlock> DebugInfoList
        {
            get
            {
                return this.debugInfoList;
            }
        }
        public TagBlockList<GlobalWaterDefinitionsBlock> WaterDefinitionsList
        {
            get
            {
                return this.waterDefinitionsList;
            }
        }
        public TagBlockList<StructurePortalDeviceMappingBlock> PortalEqualsGreaterThanDeviceMappingList
        {
            get
            {
                return this.portalEqualsGreaterThanDeviceMappingList;
            }
        }
        public TagBlockList<StructureBspAudibilityBlock> AudibilityList
        {
            get
            {
                return this.audibilityList;
            }
        }
        public TagBlockList<StructureBspFakeLightprobesBlock> ObjectFakeLightprobesList
        {
            get
            {
                return this.objectFakeLightprobesList;
            }
        }
        public TagBlockList<DecoratorPlacementDefinitionBlock> DecoratorsList
        {
            get
            {
                return this.decoratorsList;
            }
        }
        public override int Size
        {
            get
            {
                return 792;
            }
        }
        public override void Initialize()
        {
            this.clusterDataList.Clear();
            this.soundPasDataList.Clear();
            this.importInfoList.Clear();
            this.collisionMaterialsList.Clear();
            this.collisionBspList.Clear();
            this.unusedNodesList.Clear();
            this.leavesList.Clear();
            this.surfaceReferencesList.Clear();
            this.clusterPortalsList.Clear();
            this.fogPlanesList.Clear();
            this.weatherPaletteList.Clear();
            this.weatherPolyhedraList.Clear();
            this.detailObjectsList.Clear();
            this.clustersList.Clear();
            this.materialsList.Clear();
            this.skyOwnerClusterList.Clear();
            this.conveyorSurfacesList.Clear();
            this.breakableSurfacesList.Clear();
            this.pathfindingDataList.Clear();
            this.pathfindingEdgesList.Clear();
            this.backgroundSoundPaletteList.Clear();
            this.soundEnvironmentPaletteList.Clear();
            this.markersList.Clear();
            this.runtimeDecalsList.Clear();
            this.environmentObjectPaletteList.Clear();
            this.environmentObjectsList.Clear();
            this.lightmapsList.Clear();
            this.leafMapLeavesList.Clear();
            this.leafMapConnectionsList.Clear();
            this.errorsList.Clear();
            this.precomputedLightingList.Clear();
            this.instancedGeometriesDefinitionsList.Clear();
            this.instancedGeometryInstancesList.Clear();
            this.ambienceSoundClustersList.Clear();
            this.transparentPlanesList.Clear();
            this.debugInfoList.Clear();
            this.waterDefinitionsList.Clear();
            this.portalEqualsGreaterThanDeviceMappingList.Clear();
            this.audibilityList.Clear();
            this.objectFakeLightprobesList.Clear();
            this.decoratorsList.Clear();
            this.ImportInfo = TagBlock.Zero;
            this.EmptyString = new byte[4];
            this.CollisionMaterials = TagBlock.Zero;
            this.CollisionBsp = TagBlock.Zero;
            this.VehicleFloor = 0;
            this.VehicleCeiling = 0;
            this.UnusedNodes = TagBlock.Zero;
            this.Leaves = TagBlock.Zero;
            this.SurfaceReferences = TagBlock.Zero;
            this.ClusterData = TagBlock.Zero;
            this.ClusterPortals = TagBlock.Zero;
            this.FogPlanes = TagBlock.Zero;
            this.EmptyString1 = new byte[24];
            this.WeatherPalette = TagBlock.Zero;
            this.WeatherPolyhedra = TagBlock.Zero;
            this.DetailObjects = TagBlock.Zero;
            this.Clusters = TagBlock.Zero;
            this.Materials = TagBlock.Zero;
            this.SkyOwnerCluster = TagBlock.Zero;
            this.ConveyorSurfaces = TagBlock.Zero;
            this.BreakableSurfaces = TagBlock.Zero;
            this.PathfindingData = TagBlock.Zero;
            this.PathfindingEdges = TagBlock.Zero;
            this.BackgroundSoundPalette = TagBlock.Zero;
            this.SoundEnvironmentPalette = TagBlock.Zero;
            this.SoundPasData = TagBlock.Zero;
            this.Markers = TagBlock.Zero;
            this.RuntimeDecals = TagBlock.Zero;
            this.EnvironmentObjectPalette = TagBlock.Zero;
            this.EnvironmentObjects = TagBlock.Zero;
            this.Lightmaps = TagBlock.Zero;
            this.EmptyString2 = new byte[4];
            this.LeafMapLeaves = TagBlock.Zero;
            this.LeafMapConnections = TagBlock.Zero;
            this.Errors = TagBlock.Zero;
            this.PrecomputedLighting = TagBlock.Zero;
            this.InstancedGeometriesDefinitions = TagBlock.Zero;
            this.InstancedGeometryInstances = TagBlock.Zero;
            this.AmbienceSoundClusters = TagBlock.Zero;
            this.ReverbSoundClusters = TagBlock.Zero;
            this.TransparentPlanes = TagBlock.Zero;
            this.EmptyString3 = new byte[96];
            this.VehicleSpericalLimitRadius = 0;
            this.VehicleSpericalLimitCenter = Vector3.Zero;
            this.DebugInfo = TagBlock.Zero;
            this.Decorators = TagReference.Null;
            this.StructurePhysics = new GlobalStructurePhysicsStructBlock();
            this.WaterDefinitions = TagBlock.Zero;
            this.PortalEqualsGreaterThanDeviceMapping = TagBlock.Zero;
            this.Audibility = TagBlock.Zero;
            this.ObjectFakeLightprobes = TagBlock.Zero;
            this.Decorators1 = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.ImportInfo = reader.ReadInt64();
            this.importInfoList.Read(reader, this.ImportInfo);
            this.EmptyString = reader.ReadBytes(4);
            this.CollisionMaterials = reader.ReadInt64();
            this.collisionMaterialsList.Read(reader, this.CollisionMaterials);
            this.CollisionBsp = reader.ReadInt64();
            this.collisionBspList.Read(reader, this.CollisionBsp);
            this.VehicleFloor = reader.ReadSingle();
            this.VehicleCeiling = reader.ReadSingle();
            this.UnusedNodes = reader.ReadInt64();
            this.unusedNodesList.Read(reader, this.UnusedNodes);
            this.Leaves = reader.ReadInt64();
            this.leavesList.Read(reader, this.Leaves);
            this.SurfaceReferences = reader.ReadInt64();
            this.surfaceReferencesList.Read(reader, this.SurfaceReferences);
            this.ClusterData = reader.ReadInt64();
            this.ClusterPortals = reader.ReadInt64();
            this.clusterPortalsList.Read(reader, this.ClusterPortals);
            this.FogPlanes = reader.ReadInt64();
            this.fogPlanesList.Read(reader, this.FogPlanes);
            this.EmptyString1 = reader.ReadBytes(24);
            this.WeatherPalette = reader.ReadInt64();
            this.weatherPaletteList.Read(reader, this.WeatherPalette);
            this.WeatherPolyhedra = reader.ReadInt64();
            this.weatherPolyhedraList.Read(reader, this.WeatherPolyhedra);
            this.DetailObjects = reader.ReadInt64();
            this.detailObjectsList.Read(reader, this.DetailObjects);
            this.Clusters = reader.ReadInt64();
            this.clustersList.Read(reader, this.Clusters);
            this.Materials = reader.ReadInt64();
            this.materialsList.Read(reader, this.Materials);
            this.SkyOwnerCluster = reader.ReadInt64();
            this.skyOwnerClusterList.Read(reader, this.SkyOwnerCluster);
            this.ConveyorSurfaces = reader.ReadInt64();
            this.conveyorSurfacesList.Read(reader, this.ConveyorSurfaces);
            this.BreakableSurfaces = reader.ReadInt64();
            this.breakableSurfacesList.Read(reader, this.BreakableSurfaces);
            this.PathfindingData = reader.ReadInt64();
            this.pathfindingDataList.Read(reader, this.PathfindingData);
            this.PathfindingEdges = reader.ReadInt64();
            this.pathfindingEdgesList.Read(reader, this.PathfindingEdges);
            this.BackgroundSoundPalette = reader.ReadInt64();
            this.backgroundSoundPaletteList.Read(reader, this.BackgroundSoundPalette);
            this.SoundEnvironmentPalette = reader.ReadInt64();
            this.soundEnvironmentPaletteList.Read(reader, this.SoundEnvironmentPalette);
            this.SoundPasData = reader.ReadInt64();
            this.Markers = reader.ReadInt64();
            this.markersList.Read(reader, this.Markers);
            this.RuntimeDecals = reader.ReadInt64();
            this.runtimeDecalsList.Read(reader, this.RuntimeDecals);
            this.EnvironmentObjectPalette = reader.ReadInt64();
            this.environmentObjectPaletteList.Read(reader, this.EnvironmentObjectPalette);
            this.EnvironmentObjects = reader.ReadInt64();
            this.environmentObjectsList.Read(reader, this.EnvironmentObjects);
            this.Lightmaps = reader.ReadInt64();
            this.lightmapsList.Read(reader, this.Lightmaps);
            this.EmptyString2 = reader.ReadBytes(4);
            this.LeafMapLeaves = reader.ReadInt64();
            this.leafMapLeavesList.Read(reader, this.LeafMapLeaves);
            this.LeafMapConnections = reader.ReadInt64();
            this.leafMapConnectionsList.Read(reader, this.LeafMapConnections);
            this.Errors = reader.ReadInt64();
            this.errorsList.Read(reader, this.Errors);
            this.PrecomputedLighting = reader.ReadInt64();
            this.precomputedLightingList.Read(reader, this.PrecomputedLighting);
            this.InstancedGeometriesDefinitions = reader.ReadInt64();
            this.instancedGeometriesDefinitionsList.Read(reader, this.InstancedGeometriesDefinitions);
            this.InstancedGeometryInstances = reader.ReadInt64();
            this.instancedGeometryInstancesList.Read(reader, this.InstancedGeometryInstances);
            this.AmbienceSoundClusters = reader.ReadInt64();
            this.ambienceSoundClustersList.Read(reader, this.AmbienceSoundClusters);
            this.ReverbSoundClusters = reader.ReadInt64();
            this.ambienceSoundClustersList.Read(reader, this.ReverbSoundClusters);
            this.TransparentPlanes = reader.ReadInt64();
            this.transparentPlanesList.Read(reader, this.TransparentPlanes);
            this.EmptyString3 = reader.ReadBytes(96);
            this.VehicleSpericalLimitRadius = reader.ReadSingle();
            this.VehicleSpericalLimitCenter = reader.Read<Vector3>();
            this.DebugInfo = reader.ReadInt64();
            this.debugInfoList.Read(reader, this.DebugInfo);
            this.Decorators = reader.Read<TagReference>();
            this.StructurePhysics = reader.ReadDataStructure<GlobalStructurePhysicsStructBlock>();
            this.WaterDefinitions = reader.ReadInt64();
            this.waterDefinitionsList.Read(reader, this.WaterDefinitions);
            this.PortalEqualsGreaterThanDeviceMapping = reader.ReadInt64();
            this.portalEqualsGreaterThanDeviceMappingList.Read(reader, this.PortalEqualsGreaterThanDeviceMapping);
            this.Audibility = reader.ReadInt64();
            this.audibilityList.Read(reader, this.Audibility);
            this.ObjectFakeLightprobes = reader.ReadInt64();
            this.objectFakeLightprobesList.Read(reader, this.ObjectFakeLightprobes);
            this.Decorators1 = reader.ReadInt64();
            this.decoratorsList.Read(reader, this.Decorators1);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(596, 4)]
        public sealed class GlobalTagImportInfoBlock : AbideTagBlock
        {
            private TagBlockList<TagImportFileBlock> filesList = new TagBlockList<TagImportFileBlock>(1024);
            [FieldAttribute("build*", typeof(Int32))]
            public Int32 Build;
            [FieldAttribute("version*", typeof(String256))]
            public String256 Version;
            [FieldAttribute("import date*", typeof(String32))]
            public String32 ImportDate;
            [FieldAttribute("culprit*", typeof(String32))]
            public String32 Culprit;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(96)]
            public Byte[] EmptyString;
            [FieldAttribute("import time*", typeof(String32))]
            public String32 ImportTime;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("files*", typeof(TagBlock))]
            [BlockAttribute("import file", 1024, typeof(TagImportFileBlock))]
            public TagBlock Files;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(128)]
            public Byte[] EmptyString2;
            public TagBlockList<TagImportFileBlock> FilesList
            {
                get
                {
                    return this.filesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 596;
                }
            }
            public override void Initialize()
            {
                this.filesList.Clear();
                this.Build = 0;
                this.Version = String256.Empty;
                this.ImportDate = String32.Empty;
                this.Culprit = String32.Empty;
                this.EmptyString = new byte[96];
                this.ImportTime = String32.Empty;
                this.EmptyString1 = new byte[4];
                this.Files = TagBlock.Zero;
                this.EmptyString2 = new byte[128];
            }
            public override void Read(BinaryReader reader)
            {
                this.Build = reader.ReadInt32();
                this.Version = reader.Read<String256>();
                this.ImportDate = reader.Read<String32>();
                this.Culprit = reader.Read<String32>();
                this.EmptyString = reader.ReadBytes(96);
                this.ImportTime = reader.Read<String32>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.Files = reader.ReadInt64();
                this.filesList.Read(reader, this.Files);
                this.EmptyString2 = reader.ReadBytes(128);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(540, 4)]
            public sealed class TagImportFileBlock : AbideTagBlock
            {
                private DataList zippedDataList = new DataList(134217728);
                [FieldAttribute("path*", typeof(String256))]
                public String256 Path;
                [FieldAttribute("modification date*", typeof(String32))]
                public String32 ModificationDate;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(88)]
                public Byte[] EmptyString1;
                [FieldAttribute("checksum*:crc32", typeof(Int32))]
                public Int32 Checksum;
                [FieldAttribute("size*:bytes", typeof(Int32))]
                public Int32 Size1;
                [FieldAttribute("zipped data*", typeof(TagBlock))]
                [DataAttribute(134217728)]
                public TagBlock ZippedData;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(128)]
                public Byte[] EmptyString2;
                public DataList ZippedDataList
                {
                    get
                    {
                        return this.zippedDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 540;
                    }
                }
                public override void Initialize()
                {
                    this.zippedDataList.Clear();
                    this.Path = String256.Empty;
                    this.ModificationDate = String32.Empty;
                    this.EmptyString = new byte[8];
                    this.EmptyString1 = new byte[88];
                    this.Checksum = 0;
                    this.Size1 = 0;
                    this.ZippedData = TagBlock.Zero;
                    this.EmptyString2 = new byte[128];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Path = reader.Read<String256>();
                    this.ModificationDate = reader.Read<String32>();
                    this.EmptyString = reader.ReadBytes(8);
                    this.EmptyString1 = reader.ReadBytes(88);
                    this.Checksum = reader.ReadInt32();
                    this.Size1 = reader.ReadInt32();
                    this.ZippedData = reader.ReadInt64();
                    this.EmptyString2 = reader.ReadBytes(128);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class StructureCollisionMaterialsBlock : AbideTagBlock
        {
            [FieldAttribute("Old Shader*", typeof(TagReference))]
            public TagReference OldShader;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("Conveyor Surface Index*", typeof(Int16))]
            public Int16 ConveyorSurfaceIndex;
            [FieldAttribute("New Shader*", typeof(TagReference))]
            public TagReference NewShader;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.OldShader = TagReference.Null;
                this.EmptyString = new byte[2];
                this.ConveyorSurfaceIndex = 0;
                this.NewShader = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.OldShader = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(2);
                this.ConveyorSurfaceIndex = reader.ReadInt16();
                this.NewShader = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(96, 4)]
        public sealed class GlobalCollisionBspBlock : AbideTagBlock
        {
            private TagBlockList<Bsp3dNodesBlock> bsp3dNodesList = new TagBlockList<Bsp3dNodesBlock>(131072);
            private TagBlockList<PlanesBlock> planesList = new TagBlockList<PlanesBlock>(65536);
            private TagBlockList<LeavesBlock> leavesList = new TagBlockList<LeavesBlock>(65536);
            private TagBlockList<Bsp2dReferencesBlock> bsp2dReferencesList = new TagBlockList<Bsp2dReferencesBlock>(131072);
            private TagBlockList<Bsp2dNodesBlock> bsp2dNodesList = new TagBlockList<Bsp2dNodesBlock>(131072);
            private TagBlockList<SurfacesBlock> surfacesList = new TagBlockList<SurfacesBlock>(131072);
            private TagBlockList<EdgesBlock> edgesList = new TagBlockList<EdgesBlock>(262144);
            private TagBlockList<VerticesBlock> verticesList = new TagBlockList<VerticesBlock>(131072);
            [FieldAttribute("BSP 3D Nodes*", typeof(TagBlock))]
            [BlockAttribute("bsp3d_nodes_block", 131072, typeof(Bsp3dNodesBlock))]
            public TagBlock Bsp3dNodes;
            [FieldAttribute("Planes*", typeof(TagBlock))]
            [BlockAttribute("planes_block", 65536, typeof(PlanesBlock))]
            public TagBlock Planes;
            [FieldAttribute("Leaves*", typeof(TagBlock))]
            [BlockAttribute("leaves_block", 65536, typeof(LeavesBlock))]
            public TagBlock Leaves;
            [FieldAttribute("BSP 2D References*", typeof(TagBlock))]
            [BlockAttribute("bsp2d_references_block", 131072, typeof(Bsp2dReferencesBlock))]
            public TagBlock Bsp2dReferences;
            [FieldAttribute("BSP 2D Nodes*", typeof(TagBlock))]
            [BlockAttribute("bsp2d_nodes_block", 131072, typeof(Bsp2dNodesBlock))]
            public TagBlock Bsp2dNodes;
            [FieldAttribute("Surfaces*", typeof(TagBlock))]
            [BlockAttribute("surfaces_block", 131072, typeof(SurfacesBlock))]
            public TagBlock Surfaces;
            [FieldAttribute("Edges*", typeof(TagBlock))]
            [BlockAttribute("edges_block", 262144, typeof(EdgesBlock))]
            public TagBlock Edges;
            [FieldAttribute("Vertices*", typeof(TagBlock))]
            [BlockAttribute("vertices_block", 131072, typeof(VerticesBlock))]
            public TagBlock Vertices;
            public TagBlockList<Bsp3dNodesBlock> Bsp3dNodesList
            {
                get
                {
                    return this.bsp3dNodesList;
                }
            }
            public TagBlockList<PlanesBlock> PlanesList
            {
                get
                {
                    return this.planesList;
                }
            }
            public TagBlockList<LeavesBlock> LeavesList
            {
                get
                {
                    return this.leavesList;
                }
            }
            public TagBlockList<Bsp2dReferencesBlock> Bsp2dReferencesList
            {
                get
                {
                    return this.bsp2dReferencesList;
                }
            }
            public TagBlockList<Bsp2dNodesBlock> Bsp2dNodesList
            {
                get
                {
                    return this.bsp2dNodesList;
                }
            }
            public TagBlockList<SurfacesBlock> SurfacesList
            {
                get
                {
                    return this.surfacesList;
                }
            }
            public TagBlockList<EdgesBlock> EdgesList
            {
                get
                {
                    return this.edgesList;
                }
            }
            public TagBlockList<VerticesBlock> VerticesList
            {
                get
                {
                    return this.verticesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 96;
                }
            }
            public override void Initialize()
            {
                this.bsp3dNodesList.Clear();
                this.planesList.Clear();
                this.leavesList.Clear();
                this.bsp2dReferencesList.Clear();
                this.bsp2dNodesList.Clear();
                this.surfacesList.Clear();
                this.edgesList.Clear();
                this.verticesList.Clear();
                this.Bsp3dNodes = TagBlock.Zero;
                this.Planes = TagBlock.Zero;
                this.Leaves = TagBlock.Zero;
                this.Bsp2dReferences = TagBlock.Zero;
                this.Bsp2dNodes = TagBlock.Zero;
                this.Surfaces = TagBlock.Zero;
                this.Edges = TagBlock.Zero;
                this.Vertices = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Bsp3dNodes = reader.ReadInt64();
                this.bsp3dNodesList.Read(reader, this.Bsp3dNodes);
                this.Planes = reader.ReadInt64();
                this.planesList.Read(reader, this.Planes);
                this.Leaves = reader.ReadInt64();
                this.leavesList.Read(reader, this.Leaves);
                this.Bsp2dReferences = reader.ReadInt64();
                this.bsp2dReferencesList.Read(reader, this.Bsp2dReferences);
                this.Bsp2dNodes = reader.ReadInt64();
                this.bsp2dNodesList.Read(reader, this.Bsp2dNodes);
                this.Surfaces = reader.ReadInt64();
                this.surfacesList.Read(reader, this.Surfaces);
                this.Edges = reader.ReadInt64();
                this.edgesList.Read(reader, this.Edges);
                this.Vertices = reader.ReadInt64();
                this.verticesList.Read(reader, this.Vertices);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 8)]
            public sealed class Bsp3dNodesBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[8];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(8);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 16)]
            public sealed class PlanesBlock : AbideTagBlock
            {
                [FieldAttribute("Plane*", typeof(Vector4))]
                public Vector4 Plane;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Plane = Vector4.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Plane = reader.Read<Vector4>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class LeavesBlock : AbideTagBlock
            {
                [FieldAttribute("Flags*", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("BSP 2D Reference Count*", typeof(Byte))]
                public Byte Bsp2dReferenceCount;
                [FieldAttribute("First BSP 2D Reference*", typeof(Int16))]
                public Int16 FirstBsp2dReference;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = ((FlagsOptions)(0));
                    this.Bsp2dReferenceCount = 0;
                    this.FirstBsp2dReference = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadByte()));
                    this.Bsp2dReferenceCount = reader.ReadByte();
                    this.FirstBsp2dReference = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Byte
                {
                    ContainsDoubleSidedSurfaces = 1,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class Bsp2dReferencesBlock : AbideTagBlock
            {
                [FieldAttribute("Plane*", typeof(Int16))]
                public Int16 Plane;
                [FieldAttribute("BSP 2D Node*", typeof(Int16))]
                public Int16 Bsp2dNode;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Plane = 0;
                    this.Bsp2dNode = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Plane = reader.ReadInt16();
                    this.Bsp2dNode = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 16)]
            public sealed class Bsp2dNodesBlock : AbideTagBlock
            {
                [FieldAttribute("Plane*", typeof(Vector3))]
                public Vector3 Plane;
                [FieldAttribute("Left Child*", typeof(Int16))]
                public Int16 LeftChild;
                [FieldAttribute("Right Child*", typeof(Int16))]
                public Int16 RightChild;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Plane = Vector3.Zero;
                    this.LeftChild = 0;
                    this.RightChild = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Plane = reader.Read<Vector3>();
                    this.LeftChild = reader.ReadInt16();
                    this.RightChild = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(8, 8)]
            public sealed class SurfacesBlock : AbideTagBlock
            {
                [FieldAttribute("Plane*", typeof(Int16))]
                public Int16 Plane;
                [FieldAttribute("First Edge*", typeof(Int16))]
                public Int16 FirstEdge;
                [FieldAttribute("Flags*", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Breakable Surface*", typeof(Byte))]
                public Byte BreakableSurface;
                [FieldAttribute("Material*", typeof(Int16))]
                public Int16 Material;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.Plane = 0;
                    this.FirstEdge = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.BreakableSurface = 0;
                    this.Material = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Plane = reader.ReadInt16();
                    this.FirstEdge = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadByte()));
                    this.BreakableSurface = reader.ReadByte();
                    this.Material = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Byte
                {
                    TwoSided = 1,
                    Invisible = 2,
                    Climbable = 4,
                    Breakable = 8,
                    Invalid = 16,
                    Conveyor = 32,
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class EdgesBlock : AbideTagBlock
            {
                [FieldAttribute("Start Vertex*", typeof(Int16))]
                public Int16 StartVertex;
                [FieldAttribute("End Vertex*", typeof(Int16))]
                public Int16 EndVertex;
                [FieldAttribute("Forward Edge*", typeof(Int16))]
                public Int16 ForwardEdge;
                [FieldAttribute("Reverse Edge*", typeof(Int16))]
                public Int16 ReverseEdge;
                [FieldAttribute("Left Surface*", typeof(Int16))]
                public Int16 LeftSurface;
                [FieldAttribute("Right Surface*", typeof(Int16))]
                public Int16 RightSurface;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.StartVertex = 0;
                    this.EndVertex = 0;
                    this.ForwardEdge = 0;
                    this.ReverseEdge = 0;
                    this.LeftSurface = 0;
                    this.RightSurface = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.StartVertex = reader.ReadInt16();
                    this.EndVertex = reader.ReadInt16();
                    this.ForwardEdge = reader.ReadInt16();
                    this.ReverseEdge = reader.ReadInt16();
                    this.LeftSurface = reader.ReadInt16();
                    this.RightSurface = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 16)]
            public sealed class VerticesBlock : AbideTagBlock
            {
                [FieldAttribute("Point*", typeof(Vector3))]
                public Vector3 Point;
                [FieldAttribute("First Edge*", typeof(Int16))]
                public Int16 FirstEdge;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Point = Vector3.Zero;
                    this.FirstEdge = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Point = reader.Read<Vector3>();
                    this.FirstEdge = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(6, 4)]
        public sealed class UnusedStructureBspNodeBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(6)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 6;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[6];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(6);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class StructureBspLeafBlock : AbideTagBlock
        {
            [FieldAttribute("Cluster*", typeof(Int16))]
            public Int16 Cluster;
            [FieldAttribute("Surface Reference Count*", typeof(Int16))]
            public Int16 SurfaceReferenceCount;
            [FieldAttribute("First Surface Reference Index*", typeof(Int32))]
            public Int32 FirstSurfaceReferenceIndex;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.Cluster = 0;
                this.SurfaceReferenceCount = 0;
                this.FirstSurfaceReferenceIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Cluster = reader.ReadInt16();
                this.SurfaceReferenceCount = reader.ReadInt16();
                this.FirstSurfaceReferenceIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class StructureBspSurfaceReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("Strip Index*", typeof(Int16))]
            public Int16 StripIndex;
            [FieldAttribute("Lightmap Triangle Index*", typeof(Int16))]
            public Int16 LightmapTriangleIndex;
            [FieldAttribute("BSP Node Index*", typeof(Int32))]
            public Int32 BspNodeIndex;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.StripIndex = 0;
                this.LightmapTriangleIndex = 0;
                this.BspNodeIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.StripIndex = reader.ReadInt16();
                this.LightmapTriangleIndex = reader.ReadInt16();
                this.BspNodeIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class StructureBspClusterPortalBlock : AbideTagBlock
        {
            private TagBlockList<StructureBspClusterPortalVertexBlock> verticesList = new TagBlockList<StructureBspClusterPortalVertexBlock>(128);
            [FieldAttribute("Back Cluster*", typeof(Int16))]
            public Int16 BackCluster;
            [FieldAttribute("Front Cluster*", typeof(Int16))]
            public Int16 FrontCluster;
            [FieldAttribute("Plane Index*", typeof(Int32))]
            public Int32 PlaneIndex;
            [FieldAttribute("Centroid*", typeof(Vector3))]
            public Vector3 Centroid;
            [FieldAttribute("Bounding Radius*", typeof(Single))]
            public Single BoundingRadius;
            [FieldAttribute("Flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Vertices*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_cluster_portal_vertex_block", 128, typeof(StructureBspClusterPortalVertexBlock))]
            public TagBlock Vertices;
            public TagBlockList<StructureBspClusterPortalVertexBlock> VerticesList
            {
                get
                {
                    return this.verticesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.verticesList.Clear();
                this.BackCluster = 0;
                this.FrontCluster = 0;
                this.PlaneIndex = 0;
                this.Centroid = Vector3.Zero;
                this.BoundingRadius = 0;
                this.Flags = ((FlagsOptions)(0));
                this.Vertices = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.BackCluster = reader.ReadInt16();
                this.FrontCluster = reader.ReadInt16();
                this.PlaneIndex = reader.ReadInt32();
                this.Centroid = reader.Read<Vector3>();
                this.BoundingRadius = reader.ReadSingle();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Vertices = reader.ReadInt64();
                this.verticesList.Read(reader, this.Vertices);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class StructureBspClusterPortalVertexBlock : AbideTagBlock
            {
                [FieldAttribute("Point*", typeof(Vector3))]
                public Vector3 Point;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Point = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Point = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions : Int32
            {
                AiCannotHearThroughThis = 1,
                OneWay = 2,
                Door = 4,
                NoWay = 8,
                OneWayReversed = 16,
                NoOneCanHearThroughThis = 32,
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class StructureBspFogPlaneBlock : AbideTagBlock
        {
            [FieldAttribute("Scenario Planar Fog Index*", typeof(Int16))]
            public Int16 ScenarioPlanarFogIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("plane*", typeof(Vector4))]
            public Vector4 Plane;
            [FieldAttribute("Flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("Priority*", typeof(Int16))]
            public Int16 Priority;
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.ScenarioPlanarFogIndex = 0;
                this.EmptyString = new byte[2];
                this.Plane = Vector4.Zero;
                this.Flags = ((FlagsOptions)(0));
                this.Priority = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.ScenarioPlanarFogIndex = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.Plane = reader.Read<Vector4>();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Priority = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                ExtendInfinitelyWhileVisible = 1,
                DoNotFloodfill = 2,
                AggressiveFloodfill = 4,
            }
        }
        [FieldSetAttribute(152, 4)]
        public sealed class StructureBspWeatherPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Weather System", typeof(TagReference))]
            public TagReference WeatherSystem;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString2;
            [FieldAttribute("Wind", typeof(TagReference))]
            public TagReference Wind;
            [FieldAttribute("Wind Direction", typeof(Vector3))]
            public Vector3 WindDirection;
            [FieldAttribute("Wind Magnitude", typeof(Single))]
            public Single WindMagnitude;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("Wind Scale Function", typeof(String32))]
            public String32 WindScaleFunction;
            public override int Size
            {
                get
                {
                    return 152;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.WeatherSystem = TagReference.Null;
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[32];
                this.Wind = TagReference.Null;
                this.WindDirection = Vector3.Zero;
                this.WindMagnitude = 0;
                this.EmptyString3 = new byte[4];
                this.WindScaleFunction = String32.Empty;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.WeatherSystem = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(32);
                this.Wind = reader.Read<TagReference>();
                this.WindDirection = reader.Read<Vector3>();
                this.WindMagnitude = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(4);
                this.WindScaleFunction = reader.Read<String32>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(28, 4)]
        public sealed class StructureBspWeatherPolyhedronBlock : AbideTagBlock
        {
            private TagBlockList<StructureBspWeatherPolyhedronPlaneBlock> planesList = new TagBlockList<StructureBspWeatherPolyhedronPlaneBlock>(16);
            [FieldAttribute("Bounding Sphere Center*", typeof(Vector3))]
            public Vector3 BoundingSphereCenter;
            [FieldAttribute("Bounding Sphere Radius*", typeof(Single))]
            public Single BoundingSphereRadius;
            [FieldAttribute("Planes*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_weather_polyhedron_plane_block", 16, typeof(StructureBspWeatherPolyhedronPlaneBlock))]
            public TagBlock Planes;
            public TagBlockList<StructureBspWeatherPolyhedronPlaneBlock> PlanesList
            {
                get
                {
                    return this.planesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 28;
                }
            }
            public override void Initialize()
            {
                this.planesList.Clear();
                this.BoundingSphereCenter = Vector3.Zero;
                this.BoundingSphereRadius = 0;
                this.Planes = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.BoundingSphereCenter = reader.Read<Vector3>();
                this.BoundingSphereRadius = reader.ReadSingle();
                this.Planes = reader.ReadInt64();
                this.planesList.Read(reader, this.Planes);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class StructureBspWeatherPolyhedronPlaneBlock : AbideTagBlock
            {
                [FieldAttribute("plane*", typeof(Vector4))]
                public Vector4 Plane;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Plane = Vector4.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Plane = reader.Read<Vector4>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class StructureBspDetailObjectDataBlock : AbideTagBlock
        {
            private TagBlockList<GlobalDetailObjectCellsBlock> cellsList = new TagBlockList<GlobalDetailObjectCellsBlock>(262144);
            private TagBlockList<GlobalDetailObjectBlock> instancesList = new TagBlockList<GlobalDetailObjectBlock>(2097152);
            private TagBlockList<GlobalDetailObjectCountsBlock> countsList = new TagBlockList<GlobalDetailObjectCountsBlock>(8388608);
            private TagBlockList<GlobalZReferenceVectorBlock> zReferenceVectorsList = new TagBlockList<GlobalZReferenceVectorBlock>(262144);
            [FieldAttribute("Cells", typeof(TagBlock))]
            [BlockAttribute("global_detail_object_cells_block", 262144, typeof(GlobalDetailObjectCellsBlock))]
            public TagBlock Cells;
            [FieldAttribute("Instances", typeof(TagBlock))]
            [BlockAttribute("global_detail_object_block", 2097152, typeof(GlobalDetailObjectBlock))]
            public TagBlock Instances;
            [FieldAttribute("Counts", typeof(TagBlock))]
            [BlockAttribute("global_detail_object_counts_block", 8388608, typeof(GlobalDetailObjectCountsBlock))]
            public TagBlock Counts;
            [FieldAttribute("z Reference Vectors", typeof(TagBlock))]
            [BlockAttribute("global_z_reference_vector_block", 262144, typeof(GlobalZReferenceVectorBlock))]
            public TagBlock ZReferenceVectors;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(1)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(3)]
            public Byte[] EmptyString1;
            public TagBlockList<GlobalDetailObjectCellsBlock> CellsList
            {
                get
                {
                    return this.cellsList;
                }
            }
            public TagBlockList<GlobalDetailObjectBlock> InstancesList
            {
                get
                {
                    return this.instancesList;
                }
            }
            public TagBlockList<GlobalDetailObjectCountsBlock> CountsList
            {
                get
                {
                    return this.countsList;
                }
            }
            public TagBlockList<GlobalZReferenceVectorBlock> ZReferenceVectorsList
            {
                get
                {
                    return this.zReferenceVectorsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.cellsList.Clear();
                this.instancesList.Clear();
                this.countsList.Clear();
                this.zReferenceVectorsList.Clear();
                this.Cells = TagBlock.Zero;
                this.Instances = TagBlock.Zero;
                this.Counts = TagBlock.Zero;
                this.ZReferenceVectors = TagBlock.Zero;
                this.EmptyString = new byte[1];
                this.EmptyString1 = new byte[3];
            }
            public override void Read(BinaryReader reader)
            {
                this.Cells = reader.ReadInt64();
                this.cellsList.Read(reader, this.Cells);
                this.Instances = reader.ReadInt64();
                this.instancesList.Read(reader, this.Instances);
                this.Counts = reader.ReadInt64();
                this.countsList.Read(reader, this.Counts);
                this.ZReferenceVectors = reader.ReadInt64();
                this.zReferenceVectorsList.Read(reader, this.ZReferenceVectors);
                this.EmptyString = reader.ReadBytes(1);
                this.EmptyString1 = reader.ReadBytes(3);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class GlobalDetailObjectCellsBlock : AbideTagBlock
            {
                [FieldAttribute("*", typeof(Int16))]
                public Int16 EmptyString;
                [FieldAttribute("*", typeof(Int16))]
                public Int16 EmptyString1;
                [FieldAttribute("*", typeof(Int16))]
                public Int16 EmptyString2;
                [FieldAttribute("*", typeof(Int16))]
                public Int16 EmptyString3;
                [FieldAttribute("*", typeof(Int32))]
                public Int32 EmptyString4;
                [FieldAttribute("*", typeof(Int32))]
                public Int32 EmptyString5;
                [FieldAttribute("*", typeof(Int32))]
                public Int32 EmptyString6;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString7;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                    this.EmptyString1 = 0;
                    this.EmptyString2 = 0;
                    this.EmptyString3 = 0;
                    this.EmptyString4 = 0;
                    this.EmptyString5 = 0;
                    this.EmptyString6 = 0;
                    this.EmptyString7 = new byte[12];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadInt16();
                    this.EmptyString2 = reader.ReadInt16();
                    this.EmptyString3 = reader.ReadInt16();
                    this.EmptyString4 = reader.ReadInt32();
                    this.EmptyString5 = reader.ReadInt32();
                    this.EmptyString6 = reader.ReadInt32();
                    this.EmptyString7 = reader.ReadBytes(12);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(6, 4)]
            public sealed class GlobalDetailObjectBlock : AbideTagBlock
            {
                [FieldAttribute("*", typeof(Byte))]
                public Byte EmptyString;
                [FieldAttribute("*", typeof(Byte))]
                public Byte EmptyString1;
                [FieldAttribute("*", typeof(Byte))]
                public Byte EmptyString2;
                [FieldAttribute("*", typeof(Byte))]
                public Byte EmptyString3;
                [FieldAttribute("*", typeof(Int16))]
                public Int16 EmptyString4;
                public override int Size
                {
                    get
                    {
                        return 6;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                    this.EmptyString1 = 0;
                    this.EmptyString2 = 0;
                    this.EmptyString3 = 0;
                    this.EmptyString4 = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadByte();
                    this.EmptyString1 = reader.ReadByte();
                    this.EmptyString2 = reader.ReadByte();
                    this.EmptyString3 = reader.ReadByte();
                    this.EmptyString4 = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(2, 4)]
            public sealed class GlobalDetailObjectCountsBlock : AbideTagBlock
            {
                [FieldAttribute("*", typeof(Int16))]
                public Int16 EmptyString;
                public override int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class GlobalZReferenceVectorBlock : AbideTagBlock
            {
                [FieldAttribute("*", typeof(Single))]
                public Single EmptyString;
                [FieldAttribute("*", typeof(Single))]
                public Single EmptyString1;
                [FieldAttribute("*", typeof(Single))]
                public Single EmptyString2;
                [FieldAttribute("*", typeof(Single))]
                public Single EmptyString3;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                    this.EmptyString1 = 0;
                    this.EmptyString2 = 0;
                    this.EmptyString3 = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadSingle();
                    this.EmptyString1 = reader.ReadSingle();
                    this.EmptyString2 = reader.ReadSingle();
                    this.EmptyString3 = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(216, 4)]
        public sealed class StructureBspClusterBlock : AbideTagBlock
        {
            private DataList collisionMoppCodeList = new DataList(1048576);
            private TagBlockList<StructureBspClusterDataBlockNew> clusterDataList = new TagBlockList<StructureBspClusterDataBlockNew>(1);
            private TagBlockList<PredictedResourceBlock> predictedResourcesList = new TagBlockList<PredictedResourceBlock>(2048);
            private TagBlockList<StructureBspClusterPortalIndexBlock> portalsList = new TagBlockList<StructureBspClusterPortalIndexBlock>(512);
            private TagBlockList<StructureBspClusterInstancedGeometryIndexBlock> instancedGeometryIndicesList = new TagBlockList<StructureBspClusterInstancedGeometryIndexBlock>(1024);
            private TagBlockList<GlobalGeometrySectionStripIndexBlock> indexReorderTableList = new TagBlockList<GlobalGeometrySectionStripIndexBlock>(65535);
            [FieldAttribute("Section Info*", typeof(GlobalGeometrySectionInfoStructBlock))]
            public GlobalGeometrySectionInfoStructBlock SectionInfo;
            [FieldAttribute("Geometry Block Info*", typeof(GlobalGeometryBlockInfoStructBlock))]
            public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
            [FieldAttribute("Cluster Data*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_cluster_data_block_new", 1, typeof(StructureBspClusterDataBlockNew))]
            public TagBlock ClusterData;
            [FieldAttribute("Scenario Sky Index*", typeof(Byte))]
            public Byte ScenarioSkyIndex;
            [FieldAttribute("Media Index*", typeof(Byte))]
            public Byte MediaIndex;
            [FieldAttribute("Scenario Visible Sky Index*", typeof(Byte))]
            public Byte ScenarioVisibleSkyIndex;
            [FieldAttribute("Scenario Atmospheric Fog Index*", typeof(Byte))]
            public Byte ScenarioAtmosphericFogIndex;
            [FieldAttribute("Planar Fog Designator*", typeof(Byte))]
            public Byte PlanarFogDesignator;
            [FieldAttribute("Visible Fog Plane Index*", typeof(Byte))]
            public Byte VisibleFogPlaneIndex;
            [FieldAttribute("Background Sound*", typeof(Int16))]
            public Int16 BackgroundSound;
            [FieldAttribute("Sound Environment*", typeof(Int16))]
            public Int16 SoundEnvironment;
            [FieldAttribute("Weather*", typeof(Int16))]
            public Int16 Weather;
            [FieldAttribute("Transition Structure BSP", typeof(Int16))]
            public Int16 TransitionStructureBsp;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("Predicted Resources*", typeof(TagBlock))]
            [BlockAttribute("predicted_resource_block", 2048, typeof(PredictedResourceBlock))]
            public TagBlock PredictedResources;
            [FieldAttribute("Portals*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_cluster_portal_index_block", 512, typeof(StructureBspClusterPortalIndexBlock))]
            public TagBlock Portals;
            [FieldAttribute("Checksum from Structure*", typeof(Int32))]
            public Int32 ChecksumFromStructure;
            [FieldAttribute("Instanced Geometry Indices*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_cluster_instanced_geometry_index_block", 1024, typeof(StructureBspClusterInstancedGeometryIndexBlock))]
            public TagBlock InstancedGeometryIndices;
            [FieldAttribute("Index Reorder Table*", typeof(TagBlock))]
            [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
            public TagBlock IndexReorderTable;
            [FieldAttribute("Collision mopp Code*", typeof(TagBlock))]
            [DataAttribute(1048576)]
            public TagBlock CollisionMoppCode;
            public DataList CollisionMoppCodeList
            {
                get
                {
                    return this.collisionMoppCodeList;
                }
            }
            public TagBlockList<StructureBspClusterDataBlockNew> ClusterDataList
            {
                get
                {
                    return this.clusterDataList;
                }
            }
            public TagBlockList<PredictedResourceBlock> PredictedResourcesList
            {
                get
                {
                    return this.predictedResourcesList;
                }
            }
            public TagBlockList<StructureBspClusterPortalIndexBlock> PortalsList
            {
                get
                {
                    return this.portalsList;
                }
            }
            public TagBlockList<StructureBspClusterInstancedGeometryIndexBlock> InstancedGeometryIndicesList
            {
                get
                {
                    return this.instancedGeometryIndicesList;
                }
            }
            public TagBlockList<GlobalGeometrySectionStripIndexBlock> IndexReorderTableList
            {
                get
                {
                    return this.indexReorderTableList;
                }
            }
            public override int Size
            {
                get
                {
                    return 216;
                }
            }
            public override void Initialize()
            {
                this.collisionMoppCodeList.Clear();
                this.clusterDataList.Clear();
                this.predictedResourcesList.Clear();
                this.portalsList.Clear();
                this.instancedGeometryIndicesList.Clear();
                this.indexReorderTableList.Clear();
                this.SectionInfo = new GlobalGeometrySectionInfoStructBlock();
                this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
                this.ClusterData = TagBlock.Zero;
                this.ScenarioSkyIndex = 0;
                this.MediaIndex = 0;
                this.ScenarioVisibleSkyIndex = 0;
                this.ScenarioAtmosphericFogIndex = 0;
                this.PlanarFogDesignator = 0;
                this.VisibleFogPlaneIndex = 0;
                this.BackgroundSound = 0;
                this.SoundEnvironment = 0;
                this.Weather = 0;
                this.TransitionStructureBsp = 0;
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[4];
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString2 = new byte[2];
                this.PredictedResources = TagBlock.Zero;
                this.Portals = TagBlock.Zero;
                this.ChecksumFromStructure = 0;
                this.InstancedGeometryIndices = TagBlock.Zero;
                this.IndexReorderTable = TagBlock.Zero;
                this.CollisionMoppCode = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.SectionInfo = reader.ReadDataStructure<GlobalGeometrySectionInfoStructBlock>();
                this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
                this.ClusterData = reader.ReadInt64();
                this.clusterDataList.Read(reader, this.ClusterData);
                this.ScenarioSkyIndex = reader.ReadByte();
                this.MediaIndex = reader.ReadByte();
                this.ScenarioVisibleSkyIndex = reader.ReadByte();
                this.ScenarioAtmosphericFogIndex = reader.ReadByte();
                this.PlanarFogDesignator = reader.ReadByte();
                this.VisibleFogPlaneIndex = reader.ReadByte();
                this.BackgroundSound = reader.ReadInt16();
                this.SoundEnvironment = reader.ReadInt16();
                this.Weather = reader.ReadInt16();
                this.TransitionStructureBsp = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(4);
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString2 = reader.ReadBytes(2);
                this.PredictedResources = reader.ReadInt64();
                this.predictedResourcesList.Read(reader, this.PredictedResources);
                this.Portals = reader.ReadInt64();
                this.portalsList.Read(reader, this.Portals);
                this.ChecksumFromStructure = reader.ReadInt32();
                this.InstancedGeometryIndices = reader.ReadInt64();
                this.instancedGeometryIndicesList.Read(reader, this.InstancedGeometryIndices);
                this.IndexReorderTable = reader.ReadInt64();
                this.indexReorderTableList.Read(reader, this.IndexReorderTable);
                this.CollisionMoppCode = reader.ReadInt64();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(108, 4)]
            public sealed class StructureBspClusterDataBlockNew : AbideTagBlock
            {
                [FieldAttribute("Section*", typeof(GlobalGeometrySectionStructBlock))]
                public GlobalGeometrySectionStructBlock Section;
                public override int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public override void Initialize()
                {
                    this.Section = new GlobalGeometrySectionStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Section = reader.ReadDataStructure<GlobalGeometrySectionStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(108, 4)]
                public sealed class GlobalGeometrySectionStructBlock : AbideTagBlock
                {
                    private DataList visibilityMoppCodeList = new DataList(393216);
                    private TagBlockList<GlobalGeometryPartBlockNew> partsList = new TagBlockList<GlobalGeometryPartBlockNew>(255);
                    private TagBlockList<GlobalSubpartsBlock> subpartsList = new TagBlockList<GlobalSubpartsBlock>(32768);
                    private TagBlockList<GlobalVisibilityBoundsBlock> visibilityBoundsList = new TagBlockList<GlobalVisibilityBoundsBlock>(32768);
                    private TagBlockList<GlobalGeometrySectionRawVertexBlock> rawVerticesList = new TagBlockList<GlobalGeometrySectionRawVertexBlock>(32767);
                    private TagBlockList<GlobalGeometrySectionStripIndexBlock> stripIndicesList = new TagBlockList<GlobalGeometrySectionStripIndexBlock>(65535);
                    private TagBlockList<GlobalGeometrySectionVertexBufferBlock> vertexBuffersList = new TagBlockList<GlobalGeometrySectionVertexBufferBlock>(512);
                    [FieldAttribute("Parts*", typeof(TagBlock))]
                    [BlockAttribute("part", 255, typeof(GlobalGeometryPartBlockNew))]
                    public TagBlock Parts;
                    [FieldAttribute("Subparts*", typeof(TagBlock))]
                    [BlockAttribute("subparts", 32768, typeof(GlobalSubpartsBlock))]
                    public TagBlock Subparts;
                    [FieldAttribute("Visibility Bounds*", typeof(TagBlock))]
                    [BlockAttribute("visibility bounds", 32768, typeof(GlobalVisibilityBoundsBlock))]
                    public TagBlock VisibilityBounds;
                    [FieldAttribute("Raw Vertices*", typeof(TagBlock))]
                    [BlockAttribute("vertex", 32767, typeof(GlobalGeometrySectionRawVertexBlock))]
                    public TagBlock RawVertices;
                    [FieldAttribute("Strip Indices*", typeof(TagBlock))]
                    [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                    public TagBlock StripIndices;
                    [FieldAttribute("Visibility mopp Code*", typeof(TagBlock))]
                    [DataAttribute(393216)]
                    public TagBlock VisibilityMoppCode;
                    [FieldAttribute("mopp Reorder Table*", typeof(TagBlock))]
                    [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                    public TagBlock MoppReorderTable;
                    [FieldAttribute("Vertex Buffers*", typeof(TagBlock))]
                    [BlockAttribute("vertex buffer", 512, typeof(GlobalGeometrySectionVertexBufferBlock))]
                    public TagBlock VertexBuffers;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    public DataList VisibilityMoppCodeList
                    {
                        get
                        {
                            return this.visibilityMoppCodeList;
                        }
                    }
                    public TagBlockList<GlobalGeometryPartBlockNew> PartsList
                    {
                        get
                        {
                            return this.partsList;
                        }
                    }
                    public TagBlockList<GlobalSubpartsBlock> SubpartsList
                    {
                        get
                        {
                            return this.subpartsList;
                        }
                    }
                    public TagBlockList<GlobalVisibilityBoundsBlock> VisibilityBoundsList
                    {
                        get
                        {
                            return this.visibilityBoundsList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionRawVertexBlock> RawVerticesList
                    {
                        get
                        {
                            return this.rawVerticesList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionStripIndexBlock> StripIndicesList
                    {
                        get
                        {
                            return this.stripIndicesList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionVertexBufferBlock> VertexBuffersList
                    {
                        get
                        {
                            return this.vertexBuffersList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 108;
                        }
                    }
                    public override void Initialize()
                    {
                        this.visibilityMoppCodeList.Clear();
                        this.partsList.Clear();
                        this.subpartsList.Clear();
                        this.visibilityBoundsList.Clear();
                        this.rawVerticesList.Clear();
                        this.stripIndicesList.Clear();
                        this.vertexBuffersList.Clear();
                        this.Parts = TagBlock.Zero;
                        this.Subparts = TagBlock.Zero;
                        this.VisibilityBounds = TagBlock.Zero;
                        this.RawVertices = TagBlock.Zero;
                        this.StripIndices = TagBlock.Zero;
                        this.VisibilityMoppCode = TagBlock.Zero;
                        this.MoppReorderTable = TagBlock.Zero;
                        this.VertexBuffers = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Parts = reader.ReadInt64();
                        this.partsList.Read(reader, this.Parts);
                        this.Subparts = reader.ReadInt64();
                        this.subpartsList.Read(reader, this.Subparts);
                        this.VisibilityBounds = reader.ReadInt64();
                        this.visibilityBoundsList.Read(reader, this.VisibilityBounds);
                        this.RawVertices = reader.ReadInt64();
                        this.rawVerticesList.Read(reader, this.RawVertices);
                        this.StripIndices = reader.ReadInt64();
                        this.stripIndicesList.Read(reader, this.StripIndices);
                        this.VisibilityMoppCode = reader.ReadInt64();
                        this.MoppReorderTable = reader.ReadInt64();
                        this.visibilityMoppCodeList.Read(reader, this.MoppReorderTable);
                        this.VertexBuffers = reader.ReadInt64();
                        this.vertexBuffersList.Read(reader, this.VertexBuffers);
                        this.EmptyString = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(72, 4)]
                    public sealed class GlobalGeometryPartBlockNew : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("Flags*", typeof(FlagsOptions))]
                        [OptionsAttribute(typeof(FlagsOptions), true)]
                        public FlagsOptions Flags;
                        [FieldAttribute("Material*", typeof(Int16))]
                        public Int16 Material;
                        [FieldAttribute("Strip Start Index*", typeof(Int16))]
                        public Int16 StripStartIndex;
                        [FieldAttribute("Strip Length*", typeof(Int16))]
                        public Int16 StripLength;
                        [FieldAttribute("First Subpart Index*", typeof(Int16))]
                        public Int16 FirstSubpartIndex;
                        [FieldAttribute("Subpart Count*", typeof(Int16))]
                        public Int16 SubpartCount;
                        [FieldAttribute("Max Nodes/Vertex*", typeof(Byte))]
                        public Byte MaxNodesvertex;
                        [FieldAttribute("Contributing Compound Node Count*", typeof(Byte))]
                        public Byte ContributingCompoundNodeCount;
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(3, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        [FieldAttribute("lod mipmap magic number*", typeof(Single))]
                        public Single LodMipmapMagicNumber;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(24)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 72;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.Flags = ((FlagsOptions)(0));
                            this.Material = 0;
                            this.StripStartIndex = 0;
                            this.StripLength = 0;
                            this.FirstSubpartIndex = 0;
                            this.SubpartCount = 0;
                            this.MaxNodesvertex = 0;
                            this.ContributingCompoundNodeCount = 0;
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[3];
                            this.LodMipmapMagicNumber = 0;
                            this.EmptyString = new byte[24];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadInt16()));
                            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                            this.Material = reader.ReadInt16();
                            this.StripStartIndex = reader.ReadInt16();
                            this.StripLength = reader.ReadInt16();
                            this.FirstSubpartIndex = reader.ReadInt16();
                            this.SubpartCount = reader.ReadInt16();
                            this.MaxNodesvertex = reader.ReadByte();
                            this.ContributingCompoundNodeCount = reader.ReadByte();
                            this.Position = reader.Read<Vector3>();
                            this.LodMipmapMagicNumber = reader.ReadSingle();
                            this.EmptyString = reader.ReadBytes(24);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public enum TypeOptions : Int16
                        {
                            NotDrawn = 0,
                            OpaqueShadowOnly = 1,
                            OpaqueShadowCasting = 2,
                            OpaqueNonshadowing = 3,
                            Transparent = 4,
                            LightmapOnly = 5,
                        }
                        public enum FlagsOptions : Int16
                        {
                            Decalable = 1,
                            NewPartTypes = 2,
                            DislikesPhotons = 4,
                            OverrideTriangleList = 8,
                            IgnoredByLightmapper = 16,
                        }
                    }
                    [FieldSetAttribute(8, 4)]
                    public sealed class GlobalSubpartsBlock : AbideTagBlock
                    {
                        [FieldAttribute("indices_start_index*", typeof(Int16))]
                        public Int16 IndicesStartIndex;
                        [FieldAttribute("indices_length*", typeof(Int16))]
                        public Int16 IndicesLength;
                        [FieldAttribute("visibility_bounds_index*", typeof(Int16))]
                        public Int16 VisibilityBoundsIndex;
                        [FieldAttribute("Part Index*", typeof(Int16))]
                        public Int16 PartIndex;
                        public override int Size
                        {
                            get
                            {
                                return 8;
                            }
                        }
                        public override void Initialize()
                        {
                            this.IndicesStartIndex = 0;
                            this.IndicesLength = 0;
                            this.VisibilityBoundsIndex = 0;
                            this.PartIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.IndicesStartIndex = reader.ReadInt16();
                            this.IndicesLength = reader.ReadInt16();
                            this.VisibilityBoundsIndex = reader.ReadInt16();
                            this.PartIndex = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(20, 4)]
                    public sealed class GlobalVisibilityBoundsBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position x*", typeof(Single))]
                        public Single PositionX;
                        [FieldAttribute("Position y*", typeof(Single))]
                        public Single PositionY;
                        [FieldAttribute("Position z*", typeof(Single))]
                        public Single PositionZ;
                        [FieldAttribute("Radius*", typeof(Single))]
                        public Single Radius;
                        [FieldAttribute("Node 0*", typeof(Byte))]
                        public Byte Node0;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 20;
                            }
                        }
                        public override void Initialize()
                        {
                            this.PositionX = 0;
                            this.PositionY = 0;
                            this.PositionZ = 0;
                            this.Radius = 0;
                            this.Node0 = 0;
                            this.EmptyString = new byte[3];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.PositionX = reader.ReadSingle();
                            this.PositionY = reader.ReadSingle();
                            this.PositionZ = reader.ReadSingle();
                            this.Radius = reader.ReadSingle();
                            this.Node0 = reader.ReadByte();
                            this.EmptyString = reader.ReadBytes(3);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(196, 4)]
                    public sealed class GlobalGeometrySectionRawVertexBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices (OLD)*", typeof(NodeIndicesOldElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesOldElement))]
                        public NodeIndicesOldElement[] NodeIndicesOld;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        [FieldAttribute("Node Indices (NEW)*", typeof(NodeIndicesNewElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesNewElement))]
                        public NodeIndicesNewElement[] NodeIndicesNew;
                        [FieldAttribute("Use New Node Indices*", typeof(Int32))]
                        public Int32 UseNewNodeIndices;
                        [FieldAttribute("Adjusted Compound Node Index*", typeof(Int32))]
                        public Int32 AdjustedCompoundNodeIndex;
                        [FieldAttribute("texcoord*", typeof(Vector2))]
                        public Vector2 Texcoord;
                        [FieldAttribute("Normal*", typeof(Vector3))]
                        public Vector3 Normal;
                        [FieldAttribute("Binormal*", typeof(Vector3))]
                        public Vector3 Binormal;
                        [FieldAttribute("Tangent*", typeof(Vector3))]
                        public Vector3 Tangent;
                        [FieldAttribute("Anisotropic Binormal*", typeof(Vector3))]
                        public Vector3 AnisotropicBinormal;
                        [FieldAttribute("Secondary texcoord*", typeof(Vector2))]
                        public Vector2 SecondaryTexcoord;
                        [FieldAttribute("Primary Lightmap Color", typeof(ColorRgbF))]
                        public ColorRgbF PrimaryLightmapColor;
                        [FieldAttribute("Primary Lightmap texcoord", typeof(Vector2))]
                        public Vector2 PrimaryLightmapTexcoord;
                        [FieldAttribute("Primary Lightmap Incident Direction", typeof(Vector3))]
                        public Vector3 PrimaryLightmapIncidentDirection;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(12)]
                        public Byte[] EmptyString;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(8)]
                        public Byte[] EmptyString1;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(12)]
                        public Byte[] EmptyString2;
                        public override int Size
                        {
                            get
                            {
                                return 196;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndicesOld = new NodeIndicesOldElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                            this.NodeIndicesNew = new NodeIndicesNewElement[4];
                            this.UseNewNodeIndices = 0;
                            this.AdjustedCompoundNodeIndex = 0;
                            this.Texcoord = Vector2.Zero;
                            this.Normal = Vector3.Zero;
                            this.Binormal = Vector3.Zero;
                            this.Tangent = Vector3.Zero;
                            this.AnisotropicBinormal = Vector3.Zero;
                            this.SecondaryTexcoord = Vector2.Zero;
                            this.PrimaryLightmapColor = ColorRgbF.Zero;
                            this.PrimaryLightmapTexcoord = Vector2.Zero;
                            this.PrimaryLightmapIncidentDirection = Vector3.Zero;
                            this.EmptyString = new byte[12];
                            this.EmptyString1 = new byte[8];
                            this.EmptyString2 = new byte[12];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.UseNewNodeIndices = reader.ReadInt32();
                            this.AdjustedCompoundNodeIndex = reader.ReadInt32();
                            this.Texcoord = reader.Read<Vector2>();
                            this.Normal = reader.Read<Vector3>();
                            this.Binormal = reader.Read<Vector3>();
                            this.Tangent = reader.Read<Vector3>();
                            this.AnisotropicBinormal = reader.Read<Vector3>();
                            this.SecondaryTexcoord = reader.Read<Vector2>();
                            this.PrimaryLightmapColor = reader.Read<ColorRgbF>();
                            this.PrimaryLightmapTexcoord = reader.Read<Vector2>();
                            this.PrimaryLightmapIncidentDirection = reader.Read<Vector3>();
                            this.EmptyString = reader.ReadBytes(12);
                            this.EmptyString1 = reader.ReadBytes(8);
                            this.EmptyString2 = reader.ReadBytes(12);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesOldElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (OLD)*", typeof(Int32))]
                            public Int32 NodeIndexOld;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexOld = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexOld = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("node_weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeIndicesNewElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (NEW)*", typeof(Int32))]
                            public Int32 NodeIndexNew;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexNew = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexNew = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [FieldSetAttribute(2, 4)]
                    public sealed class GlobalGeometrySectionStripIndexBlock : AbideTagBlock
                    {
                        [FieldAttribute("Index*", typeof(Int16))]
                        public Int16 Index;
                        public override int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Index = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Index = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class GlobalGeometrySectionVertexBufferBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class PredictedResourceBlock : AbideTagBlock
            {
                [FieldAttribute("type", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("resource index", typeof(Int16))]
                public Int16 ResourceIndex;
                [FieldAttribute("tag index", typeof(Int32))]
                public Int32 TagIndex;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.Type = ((TypeOptions)(0));
                    this.ResourceIndex = 0;
                    this.TagIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.ResourceIndex = reader.ReadInt16();
                    this.TagIndex = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Int16
                {
                    Bitmap = 0,
                    Sound = 1,
                    RenderModelGeometry = 2,
                    ClusterGeometry = 3,
                    ClusterInstancedGeometry = 4,
                    LightmapGeometryObjectBuckets = 5,
                    LightmapGeometryInstanceBuckets = 6,
                    LightmapClusterBitmaps = 7,
                    LightmapInstanceBitmaps = 8,
                }
            }
            [FieldSetAttribute(2, 4)]
            public sealed class StructureBspClusterPortalIndexBlock : AbideTagBlock
            {
                [FieldAttribute("Portal Index*", typeof(Int16))]
                public Int16 PortalIndex;
                public override int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public override void Initialize()
                {
                    this.PortalIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PortalIndex = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(2, 4)]
            public sealed class StructureBspClusterInstancedGeometryIndexBlock : AbideTagBlock
            {
                [FieldAttribute("Instanced Geometry Index*", typeof(Int16))]
                public Int16 InstancedGeometryIndex;
                public override int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public override void Initialize()
                {
                    this.InstancedGeometryIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.InstancedGeometryIndex = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(2, 4)]
            public sealed class GlobalGeometrySectionStripIndexBlock : AbideTagBlock
            {
                [FieldAttribute("Index*", typeof(Int16))]
                public Int16 Index;
                public override int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public override void Initialize()
                {
                    this.Index = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Index = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(44, 4)]
            public sealed class GlobalGeometrySectionInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<GlobalGeometryCompressionInfoBlock> emptyStringList = new TagBlockList<GlobalGeometryCompressionInfoBlock>(1);
                [FieldAttribute("Total Vertex Count*", typeof(Int16))]
                public Int16 TotalVertexCount;
                [FieldAttribute("Total Triangle Count*", typeof(Int16))]
                public Int16 TotalTriangleCount;
                [FieldAttribute("Total Part Count*", typeof(Int16))]
                public Int16 TotalPartCount;
                [FieldAttribute("Shadow-Casting Triangle Count*", typeof(Int16))]
                public Int16 ShadowCastingTriangleCount;
                [FieldAttribute("Shadow-Casting Part Count*", typeof(Int16))]
                public Int16 ShadowCastingPartCount;
                [FieldAttribute("Opaque Point Count*", typeof(Int16))]
                public Int16 OpaquePointCount;
                [FieldAttribute("Opaque Vertex Count*", typeof(Int16))]
                public Int16 OpaqueVertexCount;
                [FieldAttribute("Opaque Part Count*", typeof(Int16))]
                public Int16 OpaquePartCount;
                [FieldAttribute("Opaque Max Nodes/Vertex*", typeof(Byte))]
                public Byte OpaqueMaxNodesvertex;
                [FieldAttribute("Transparent Max Nodes/Vertex*", typeof(Byte))]
                public Byte TransparentMaxNodesvertex;
                [FieldAttribute("Shadow-Casting Rigid Triangle Count*", typeof(Int16))]
                public Int16 ShadowCastingRigidTriangleCount;
                [FieldAttribute("Geometry Classification*", typeof(GeometryClassificationOptions))]
                [OptionsAttribute(typeof(GeometryClassificationOptions), false)]
                public GeometryClassificationOptions GeometryClassification;
                [FieldAttribute("Geometry Compression Flags*", typeof(GeometryCompressionFlagsOptions))]
                [OptionsAttribute(typeof(GeometryCompressionFlagsOptions), true)]
                public GeometryCompressionFlagsOptions GeometryCompressionFlags;
                [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
                [BlockAttribute("compression info", 1, typeof(GlobalGeometryCompressionInfoBlock))]
                public TagBlock EmptyString;
                [FieldAttribute("Hardware Node Count*", typeof(Byte))]
                public Byte HardwareNodeCount;
                [FieldAttribute("Node Map Size*", typeof(Byte))]
                public Byte NodeMapSize;
                [FieldAttribute("Software Plane Count*", typeof(Int16))]
                public Int16 SoftwarePlaneCount;
                [FieldAttribute("total subpart_cont*", typeof(Int16))]
                public Int16 TotalSubpartCont;
                [FieldAttribute("Section Lighting Flags*", typeof(SectionLightingFlagsOptions))]
                [OptionsAttribute(typeof(SectionLightingFlagsOptions), true)]
                public SectionLightingFlagsOptions SectionLightingFlags;
                public TagBlockList<GlobalGeometryCompressionInfoBlock> EmptyStringList
                {
                    get
                    {
                        return this.emptyStringList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 44;
                    }
                }
                public override void Initialize()
                {
                    this.emptyStringList.Clear();
                    this.TotalVertexCount = 0;
                    this.TotalTriangleCount = 0;
                    this.TotalPartCount = 0;
                    this.ShadowCastingTriangleCount = 0;
                    this.ShadowCastingPartCount = 0;
                    this.OpaquePointCount = 0;
                    this.OpaqueVertexCount = 0;
                    this.OpaquePartCount = 0;
                    this.OpaqueMaxNodesvertex = 0;
                    this.TransparentMaxNodesvertex = 0;
                    this.ShadowCastingRigidTriangleCount = 0;
                    this.GeometryClassification = ((GeometryClassificationOptions)(0));
                    this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(0));
                    this.EmptyString = TagBlock.Zero;
                    this.HardwareNodeCount = 0;
                    this.NodeMapSize = 0;
                    this.SoftwarePlaneCount = 0;
                    this.TotalSubpartCont = 0;
                    this.SectionLightingFlags = ((SectionLightingFlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.TotalVertexCount = reader.ReadInt16();
                    this.TotalTriangleCount = reader.ReadInt16();
                    this.TotalPartCount = reader.ReadInt16();
                    this.ShadowCastingTriangleCount = reader.ReadInt16();
                    this.ShadowCastingPartCount = reader.ReadInt16();
                    this.OpaquePointCount = reader.ReadInt16();
                    this.OpaqueVertexCount = reader.ReadInt16();
                    this.OpaquePartCount = reader.ReadInt16();
                    this.OpaqueMaxNodesvertex = reader.ReadByte();
                    this.TransparentMaxNodesvertex = reader.ReadByte();
                    this.ShadowCastingRigidTriangleCount = reader.ReadInt16();
                    this.GeometryClassification = ((GeometryClassificationOptions)(reader.ReadInt16()));
                    this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadInt64();
                    this.emptyStringList.Read(reader, this.EmptyString);
                    this.HardwareNodeCount = reader.ReadByte();
                    this.NodeMapSize = reader.ReadByte();
                    this.SoftwarePlaneCount = reader.ReadInt16();
                    this.TotalSubpartCont = reader.ReadInt16();
                    this.SectionLightingFlags = ((SectionLightingFlagsOptions)(reader.ReadInt16()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(56, 4)]
                public sealed class GlobalGeometryCompressionInfoBlock : AbideTagBlock
                {
                    public override int Size
                    {
                        get
                        {
                            return 56;
                        }
                    }
                    public override void Initialize()
                    {
                    }
                    public override void Read(BinaryReader reader)
                    {
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum GeometryClassificationOptions : Int16
                {
                    Worldspace = 0,
                    Rigid = 1,
                    RigidBoned = 2,
                    Skinned = 3,
                    UnsupportedReimport = 4,
                }
                public enum GeometryCompressionFlagsOptions : Int16
                {
                    CompressedPosition = 1,
                    CompressedTexcoord = 2,
                    CompressedSecondaryTexcoord = 4,
                }
                public enum SectionLightingFlagsOptions : Int16
                {
                    HasLmTexcoords = 1,
                    HasLmIncRad = 2,
                    HasLmColors = 4,
                    HasLmPrt = 8,
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                [FieldAttribute("Block Offset*", typeof(Int32))]
                public Int32 BlockOffset;
                [FieldAttribute("Block Size*", typeof(Int32))]
                public Int32 BlockSize;
                [FieldAttribute("Section Data Size*", typeof(Int32))]
                public Int32 SectionDataSize;
                [FieldAttribute("Resource Data Size*", typeof(Int32))]
                public Int32 ResourceDataSize;
                [FieldAttribute("Resources*", typeof(TagBlock))]
                [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                public TagBlock Resources;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                public Int16 OwnerTagSectionOffset;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                {
                    get
                    {
                        return this.resourcesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.resourcesList.Clear();
                    this.BlockOffset = 0;
                    this.BlockSize = 0;
                    this.SectionDataSize = 0;
                    this.ResourceDataSize = 0;
                    this.Resources = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                    this.OwnerTagSectionOffset = 0;
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.BlockOffset = reader.ReadInt32();
                    this.BlockSize = reader.ReadInt32();
                    this.SectionDataSize = reader.ReadInt32();
                    this.ResourceDataSize = reader.ReadInt32();
                    this.Resources = reader.ReadInt64();
                    this.resourcesList.Read(reader, this.Resources);
                    this.EmptyString = reader.ReadBytes(4);
                    this.OwnerTagSectionOffset = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(3)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Primary Locator*", typeof(Int16))]
                    public Int16 PrimaryLocator;
                    [FieldAttribute("Secondary Locator*", typeof(Int16))]
                    public Int16 SecondaryLocator;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                    public Int32 ResourceDataOffset;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.EmptyString = new byte[3];
                        this.PrimaryLocator = 0;
                        this.SecondaryLocator = 0;
                        this.ResourceDataSize = 0;
                        this.ResourceDataOffset = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.EmptyString = reader.ReadBytes(3);
                        this.PrimaryLocator = reader.ReadInt16();
                        this.SecondaryLocator = reader.ReadInt16();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.ResourceDataOffset = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        TagBlock = 0,
                        TagData = 1,
                        VertexBuffer = 2,
                    }
                }
            }
            public enum FlagsOptions : Int16
            {
                OneWayPortal = 1,
                DoorPortal = 2,
                PostprocessedGeometry = 4,
                IsTheSky = 8,
            }
        }
        [FieldSetAttribute(52, 4)]
        public sealed class GlobalGeometryMaterialBlock : AbideTagBlock
        {
            private TagBlockList<GlobalGeometryMaterialPropertyBlock> propertiesList = new TagBlockList<GlobalGeometryMaterialPropertyBlock>(16);
            [FieldAttribute("Old Shader*", typeof(TagReference))]
            public TagReference OldShader;
            [FieldAttribute("Shader^*", typeof(TagReference))]
            public TagReference Shader;
            [FieldAttribute("Properties*", typeof(TagBlock))]
            [BlockAttribute("material property", 16, typeof(GlobalGeometryMaterialPropertyBlock))]
            public TagBlock Properties;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("Breakable Surface Index*", typeof(Byte))]
            public Byte BreakableSurfaceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(3)]
            public Byte[] EmptyString1;
            public TagBlockList<GlobalGeometryMaterialPropertyBlock> PropertiesList
            {
                get
                {
                    return this.propertiesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 52;
                }
            }
            public override void Initialize()
            {
                this.propertiesList.Clear();
                this.OldShader = TagReference.Null;
                this.Shader = TagReference.Null;
                this.Properties = TagBlock.Zero;
                this.EmptyString = new byte[4];
                this.BreakableSurfaceIndex = 0;
                this.EmptyString1 = new byte[3];
            }
            public override void Read(BinaryReader reader)
            {
                this.OldShader = reader.Read<TagReference>();
                this.Shader = reader.Read<TagReference>();
                this.Properties = reader.ReadInt64();
                this.propertiesList.Read(reader, this.Properties);
                this.EmptyString = reader.ReadBytes(4);
                this.BreakableSurfaceIndex = reader.ReadByte();
                this.EmptyString1 = reader.ReadBytes(3);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class GlobalGeometryMaterialPropertyBlock : AbideTagBlock
            {
                [FieldAttribute("Type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Int Value*", typeof(Int16))]
                public Int16 IntValue;
                [FieldAttribute("Real Value*", typeof(Single))]
                public Single RealValue;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.Type = ((TypeOptions)(0));
                    this.IntValue = 0;
                    this.RealValue = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.IntValue = reader.ReadInt16();
                    this.RealValue = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Int16
                {
                    LightmapResolution = 0,
                    LightmapPower = 1,
                    LightmapHalfLife = 2,
                    LightmapDiffuseScale = 3,
                }
            }
        }
        [FieldSetAttribute(2, 4)]
        public sealed class StructureBspSkyOwnerClusterBlock : AbideTagBlock
        {
            [FieldAttribute("Cluster Owner*", typeof(Int16))]
            public Int16 ClusterOwner;
            public override int Size
            {
                get
                {
                    return 2;
                }
            }
            public override void Initialize()
            {
                this.ClusterOwner = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.ClusterOwner = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class StructureBspConveyorSurfaceBlock : AbideTagBlock
        {
            [FieldAttribute("u", typeof(Vector3))]
            public Vector3 U;
            [FieldAttribute("v", typeof(Vector3))]
            public Vector3 V;
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.U = Vector3.Zero;
                this.V = Vector3.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.U = reader.Read<Vector3>();
                this.V = reader.Read<Vector3>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class StructureBspBreakableSurfaceBlock : AbideTagBlock
        {
            [FieldAttribute("Instanced Geometry Instance*", typeof(Int16))]
            public Int16 InstancedGeometryInstance;
            [FieldAttribute("Breakable Surface Index*", typeof(Int16))]
            public Int16 BreakableSurfaceIndex;
            [FieldAttribute("Centroid*", typeof(Vector3))]
            public Vector3 Centroid;
            [FieldAttribute("Radius*", typeof(Single))]
            public Single Radius;
            [FieldAttribute("Collision Surface Index*", typeof(Int32))]
            public Int32 CollisionSurfaceIndex;
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.InstancedGeometryInstance = 0;
                this.BreakableSurfaceIndex = 0;
                this.Centroid = Vector3.Zero;
                this.Radius = 0;
                this.CollisionSurfaceIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.InstancedGeometryInstance = reader.ReadInt16();
                this.BreakableSurfaceIndex = reader.ReadInt16();
                this.Centroid = reader.Read<Vector3>();
                this.Radius = reader.ReadSingle();
                this.CollisionSurfaceIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(156, 4)]
        public sealed class PathfindingDataBlock : AbideTagBlock
        {
            private TagBlockList<SectorBlock> sectorsList = new TagBlockList<SectorBlock>(65534);
            private TagBlockList<SectorLinkBlock> linksList = new TagBlockList<SectorLinkBlock>(262144);
            private TagBlockList<RefBlock> refsList = new TagBlockList<RefBlock>(131072);
            private TagBlockList<SectorBsp2dNodesBlock> bsp2dNodesList = new TagBlockList<SectorBsp2dNodesBlock>(131072);
            private TagBlockList<SurfaceFlagsBlock> surfaceFlagsList = new TagBlockList<SurfaceFlagsBlock>(4096);
            private TagBlockList<SectorVertexBlock> verticesList = new TagBlockList<SectorVertexBlock>(65535);
            private TagBlockList<EnvironmentObjectRefs> objectRefsList = new TagBlockList<EnvironmentObjectRefs>(2000);
            private TagBlockList<PathfindingHintsBlock> pathfindingHintsList = new TagBlockList<PathfindingHintsBlock>(32767);
            private TagBlockList<InstancedGeometryReferenceBlock> instancedGeometryRefsList = new TagBlockList<InstancedGeometryReferenceBlock>(1024);
            private TagBlockList<UserHintBlock> userPlacedHintsList = new TagBlockList<UserHintBlock>(1);
            [FieldAttribute("sectors", typeof(TagBlock))]
            [BlockAttribute("sector_block", 65534, typeof(SectorBlock))]
            public TagBlock Sectors;
            [FieldAttribute("links", typeof(TagBlock))]
            [BlockAttribute("sector_link_block", 262144, typeof(SectorLinkBlock))]
            public TagBlock Links;
            [FieldAttribute("refs", typeof(TagBlock))]
            [BlockAttribute("ref_block", 131072, typeof(RefBlock))]
            public TagBlock Refs;
            [FieldAttribute("bsp2d nodes", typeof(TagBlock))]
            [BlockAttribute("sector_bsp2d_nodes_block", 131072, typeof(SectorBsp2dNodesBlock))]
            public TagBlock Bsp2dNodes;
            [FieldAttribute("surface flags", typeof(TagBlock))]
            [BlockAttribute("surface_flags_block", 4096, typeof(SurfaceFlagsBlock))]
            public TagBlock SurfaceFlags;
            [FieldAttribute("vertices", typeof(TagBlock))]
            [BlockAttribute("sector_vertex_block", 65535, typeof(SectorVertexBlock))]
            public TagBlock Vertices;
            [FieldAttribute("object refs", typeof(TagBlock))]
            [BlockAttribute("environment_object_refs", 2000, typeof(EnvironmentObjectRefs))]
            public TagBlock ObjectRefs;
            [FieldAttribute("pathfinding hints", typeof(TagBlock))]
            [BlockAttribute("pathfinding_hints_block", 32767, typeof(PathfindingHintsBlock))]
            public TagBlock PathfindingHints;
            [FieldAttribute("instanced geometry refs", typeof(TagBlock))]
            [BlockAttribute("instanced_geometry_reference_block", 1024, typeof(InstancedGeometryReferenceBlock))]
            public TagBlock InstancedGeometryRefs;
            [FieldAttribute("structure checksum*", typeof(Int32))]
            public Int32 StructureChecksum;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            [FieldAttribute("user-placed hints", typeof(TagBlock))]
            [BlockAttribute("user_hint_block", 1, typeof(UserHintBlock))]
            public TagBlock UserPlacedHints;
            public TagBlockList<SectorBlock> SectorsList
            {
                get
                {
                    return this.sectorsList;
                }
            }
            public TagBlockList<SectorLinkBlock> LinksList
            {
                get
                {
                    return this.linksList;
                }
            }
            public TagBlockList<RefBlock> RefsList
            {
                get
                {
                    return this.refsList;
                }
            }
            public TagBlockList<SectorBsp2dNodesBlock> Bsp2dNodesList
            {
                get
                {
                    return this.bsp2dNodesList;
                }
            }
            public TagBlockList<SurfaceFlagsBlock> SurfaceFlagsList
            {
                get
                {
                    return this.surfaceFlagsList;
                }
            }
            public TagBlockList<SectorVertexBlock> VerticesList
            {
                get
                {
                    return this.verticesList;
                }
            }
            public TagBlockList<EnvironmentObjectRefs> ObjectRefsList
            {
                get
                {
                    return this.objectRefsList;
                }
            }
            public TagBlockList<PathfindingHintsBlock> PathfindingHintsList
            {
                get
                {
                    return this.pathfindingHintsList;
                }
            }
            public TagBlockList<InstancedGeometryReferenceBlock> InstancedGeometryRefsList
            {
                get
                {
                    return this.instancedGeometryRefsList;
                }
            }
            public TagBlockList<UserHintBlock> UserPlacedHintsList
            {
                get
                {
                    return this.userPlacedHintsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 156;
                }
            }
            public override void Initialize()
            {
                this.sectorsList.Clear();
                this.linksList.Clear();
                this.refsList.Clear();
                this.bsp2dNodesList.Clear();
                this.surfaceFlagsList.Clear();
                this.verticesList.Clear();
                this.objectRefsList.Clear();
                this.pathfindingHintsList.Clear();
                this.instancedGeometryRefsList.Clear();
                this.userPlacedHintsList.Clear();
                this.Sectors = TagBlock.Zero;
                this.Links = TagBlock.Zero;
                this.Refs = TagBlock.Zero;
                this.Bsp2dNodes = TagBlock.Zero;
                this.SurfaceFlags = TagBlock.Zero;
                this.Vertices = TagBlock.Zero;
                this.ObjectRefs = TagBlock.Zero;
                this.PathfindingHints = TagBlock.Zero;
                this.InstancedGeometryRefs = TagBlock.Zero;
                this.StructureChecksum = 0;
                this.EmptyString = new byte[32];
                this.UserPlacedHints = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Sectors = reader.ReadInt64();
                this.sectorsList.Read(reader, this.Sectors);
                this.Links = reader.ReadInt64();
                this.linksList.Read(reader, this.Links);
                this.Refs = reader.ReadInt64();
                this.refsList.Read(reader, this.Refs);
                this.Bsp2dNodes = reader.ReadInt64();
                this.bsp2dNodesList.Read(reader, this.Bsp2dNodes);
                this.SurfaceFlags = reader.ReadInt64();
                this.surfaceFlagsList.Read(reader, this.SurfaceFlags);
                this.Vertices = reader.ReadInt64();
                this.verticesList.Read(reader, this.Vertices);
                this.ObjectRefs = reader.ReadInt64();
                this.objectRefsList.Read(reader, this.ObjectRefs);
                this.PathfindingHints = reader.ReadInt64();
                this.pathfindingHintsList.Read(reader, this.PathfindingHints);
                this.InstancedGeometryRefs = reader.ReadInt64();
                this.instancedGeometryRefsList.Read(reader, this.InstancedGeometryRefs);
                this.StructureChecksum = reader.ReadInt32();
                this.EmptyString = reader.ReadBytes(32);
                this.UserPlacedHints = reader.ReadInt64();
                this.userPlacedHintsList.Read(reader, this.UserPlacedHints);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class SectorBlock : AbideTagBlock
            {
                [FieldAttribute("Path-finding sector flags", typeof(PathFindingSectorFlagsOptions))]
                [OptionsAttribute(typeof(PathFindingSectorFlagsOptions), true)]
                public PathFindingSectorFlagsOptions PathFindingSectorFlags;
                [FieldAttribute("hint index", typeof(Int16))]
                public Int16 HintIndex;
                [FieldAttribute("first link (do not set manually)", typeof(Int32))]
                public Int32 FirstLinkDoNotSetManually;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PathFindingSectorFlags = ((PathFindingSectorFlagsOptions)(0));
                    this.HintIndex = 0;
                    this.FirstLinkDoNotSetManually = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PathFindingSectorFlags = ((PathFindingSectorFlagsOptions)(reader.ReadInt16()));
                    this.HintIndex = reader.ReadInt16();
                    this.FirstLinkDoNotSetManually = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum PathFindingSectorFlagsOptions : Int16
                {
                    SectorWalkable = 1,
                    SectorBreakable = 2,
                    SectorMobile = 4,
                    SectorBspSource = 8,
                    Floor = 16,
                    Ceiling = 32,
                    WallNorth = 64,
                    WallSouth = 128,
                    WallEast = 256,
                    WallWest = 512,
                    Crouchable = 1024,
                    Aligned = 2048,
                    SectorStep = 4096,
                    SectorInterior = 8192,
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class SectorLinkBlock : AbideTagBlock
            {
                [FieldAttribute("vertex 1", typeof(Int16))]
                public Int16 Vertex1;
                [FieldAttribute("vertex 2", typeof(Int16))]
                public Int16 Vertex2;
                [FieldAttribute("link flags", typeof(LinkFlagsOptions))]
                [OptionsAttribute(typeof(LinkFlagsOptions), true)]
                public LinkFlagsOptions LinkFlags;
                [FieldAttribute("hint index", typeof(Int16))]
                public Int16 HintIndex;
                [FieldAttribute("forward link", typeof(Int16))]
                public Int16 ForwardLink;
                [FieldAttribute("reverse link", typeof(Int16))]
                public Int16 ReverseLink;
                [FieldAttribute("left sector", typeof(Int16))]
                public Int16 LeftSector;
                [FieldAttribute("right sector", typeof(Int16))]
                public Int16 RightSector;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Vertex1 = 0;
                    this.Vertex2 = 0;
                    this.LinkFlags = ((LinkFlagsOptions)(0));
                    this.HintIndex = 0;
                    this.ForwardLink = 0;
                    this.ReverseLink = 0;
                    this.LeftSector = 0;
                    this.RightSector = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Vertex1 = reader.ReadInt16();
                    this.Vertex2 = reader.ReadInt16();
                    this.LinkFlags = ((LinkFlagsOptions)(reader.ReadInt16()));
                    this.HintIndex = reader.ReadInt16();
                    this.ForwardLink = reader.ReadInt16();
                    this.ReverseLink = reader.ReadInt16();
                    this.LeftSector = reader.ReadInt16();
                    this.RightSector = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum LinkFlagsOptions : Int16
                {
                    SectorLinkFromCollisionEdge = 1,
                    SectorIntersectionLink = 2,
                    SectorLinkBsp2dCreationError = 4,
                    SectorLinkTopologyError = 8,
                    SectorLinkChainError = 16,
                    SectorLinkBothSectorsWalkable = 32,
                    SectorLinkMagicHangingLink = 64,
                    SectorLinkThreshold = 128,
                    SectorLinkCrouchable = 256,
                    SectorLinkWallBase = 512,
                    SectorLinkLedge = 1024,
                    SectorLinkLeanable = 2048,
                    SectorLinkStartCorner = 4096,
                    SectorLinkEndCorner = 8192,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class RefBlock : AbideTagBlock
            {
                [FieldAttribute("node ref or sector ref", typeof(Int32))]
                public Int32 NodeRefOrSectorRef;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.NodeRefOrSectorRef = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.NodeRefOrSectorRef = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class SectorBsp2dNodesBlock : AbideTagBlock
            {
                [FieldAttribute("plane*", typeof(Vector3))]
                public Vector3 Plane;
                [FieldAttribute("left child*", typeof(Int32))]
                public Int32 LeftChild;
                [FieldAttribute("right child*", typeof(Int32))]
                public Int32 RightChild;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.Plane = Vector3.Zero;
                    this.LeftChild = 0;
                    this.RightChild = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Plane = reader.Read<Vector3>();
                    this.LeftChild = reader.ReadInt32();
                    this.RightChild = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class SurfaceFlagsBlock : AbideTagBlock
            {
                [FieldAttribute("flags*", typeof(Int32))]
                public Int32 Flags;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class SectorVertexBlock : AbideTagBlock
            {
                [FieldAttribute("point*", typeof(Vector3))]
                public Vector3 Point;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Point = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Point = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(36, 4)]
            public sealed class EnvironmentObjectRefs : AbideTagBlock
            {
                private TagBlockList<EnvironmentObjectBspRefs> bspsList = new TagBlockList<EnvironmentObjectBspRefs>(1024);
                private TagBlockList<EnvironmentObjectNodes> nodesList = new TagBlockList<EnvironmentObjectNodes>(255);
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("first sector*", typeof(Int32))]
                public Int32 FirstSector;
                [FieldAttribute("last sector*", typeof(Int32))]
                public Int32 LastSector;
                [FieldAttribute("bsps*", typeof(TagBlock))]
                [BlockAttribute("environment_object_bsp_refs", 1024, typeof(EnvironmentObjectBspRefs))]
                public TagBlock Bsps;
                [FieldAttribute("nodes*", typeof(TagBlock))]
                [BlockAttribute("environment_object_nodes", 255, typeof(EnvironmentObjectNodes))]
                public TagBlock Nodes;
                public TagBlockList<EnvironmentObjectBspRefs> BspsList
                {
                    get
                    {
                        return this.bspsList;
                    }
                }
                public TagBlockList<EnvironmentObjectNodes> NodesList
                {
                    get
                    {
                        return this.nodesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 36;
                    }
                }
                public override void Initialize()
                {
                    this.bspsList.Clear();
                    this.nodesList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.FirstSector = 0;
                    this.LastSector = 0;
                    this.Bsps = TagBlock.Zero;
                    this.Nodes = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.FirstSector = reader.ReadInt32();
                    this.LastSector = reader.ReadInt32();
                    this.Bsps = reader.ReadInt64();
                    this.bspsList.Read(reader, this.Bsps);
                    this.Nodes = reader.ReadInt64();
                    this.nodesList.Read(reader, this.Nodes);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class EnvironmentObjectBspRefs : AbideTagBlock
                {
                    [FieldAttribute("bsp reference*", typeof(Int32))]
                    public Int32 BspReference;
                    [FieldAttribute("first sector*", typeof(Int32))]
                    public Int32 FirstSector;
                    [FieldAttribute("last sector*", typeof(Int32))]
                    public Int32 LastSector;
                    [FieldAttribute("node_index*", typeof(Int16))]
                    public Int16 NodeIndex;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.BspReference = 0;
                        this.FirstSector = 0;
                        this.LastSector = 0;
                        this.NodeIndex = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BspReference = reader.ReadInt32();
                        this.FirstSector = reader.ReadInt32();
                        this.LastSector = reader.ReadInt32();
                        this.NodeIndex = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class EnvironmentObjectNodes : AbideTagBlock
                {
                    [FieldAttribute("reference frame index", typeof(Int16))]
                    public Int16 ReferenceFrameIndex;
                    [FieldAttribute("projection axis", typeof(Byte))]
                    public Byte ProjectionAxis;
                    [FieldAttribute("projection sign", typeof(ProjectionSignOptions))]
                    [OptionsAttribute(typeof(ProjectionSignOptions), true)]
                    public ProjectionSignOptions ProjectionSign;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.ReferenceFrameIndex = 0;
                        this.ProjectionAxis = 0;
                        this.ProjectionSign = ((ProjectionSignOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.ReferenceFrameIndex = reader.ReadInt16();
                        this.ProjectionAxis = reader.ReadByte();
                        this.ProjectionSign = ((ProjectionSignOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum ProjectionSignOptions : Byte
                    {
                        ProjectionSign = 1,
                    }
                }
                public enum FlagsOptions : Int16
                {
                    Mobile = 1,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class PathfindingHintsBlock : AbideTagBlock
            {
                [FieldAttribute("hint type", typeof(HintTypeOptions))]
                [OptionsAttribute(typeof(HintTypeOptions), false)]
                public HintTypeOptions HintType;
                [FieldAttribute("Next hint index", typeof(Int16))]
                public Int16 NextHintIndex;
                [FieldAttribute("hint data 0*", typeof(Int16))]
                public Int16 HintData0;
                [FieldAttribute("hint data 1*", typeof(Int16))]
                public Int16 HintData1;
                [FieldAttribute("hint data 2*", typeof(Int16))]
                public Int16 HintData2;
                [FieldAttribute("hint data 3*", typeof(Int16))]
                public Int16 HintData3;
                [FieldAttribute("hint data 4*", typeof(Int16))]
                public Int16 HintData4;
                [FieldAttribute("hint data 5*", typeof(Int16))]
                public Int16 HintData5;
                [FieldAttribute("hint data 6*", typeof(Int16))]
                public Int16 HintData6;
                [FieldAttribute("hint data 7*", typeof(Int16))]
                public Int16 HintData7;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.HintType = ((HintTypeOptions)(0));
                    this.NextHintIndex = 0;
                    this.HintData0 = 0;
                    this.HintData1 = 0;
                    this.HintData2 = 0;
                    this.HintData3 = 0;
                    this.HintData4 = 0;
                    this.HintData5 = 0;
                    this.HintData6 = 0;
                    this.HintData7 = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.HintType = ((HintTypeOptions)(reader.ReadInt16()));
                    this.NextHintIndex = reader.ReadInt16();
                    this.HintData0 = reader.ReadInt16();
                    this.HintData1 = reader.ReadInt16();
                    this.HintData2 = reader.ReadInt16();
                    this.HintData3 = reader.ReadInt16();
                    this.HintData4 = reader.ReadInt16();
                    this.HintData5 = reader.ReadInt16();
                    this.HintData6 = reader.ReadInt16();
                    this.HintData7 = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum HintTypeOptions : Int16
                {
                    IntersectionLink = 0,
                    JumpLink = 1,
                    ClimbLink = 2,
                    VaultLink = 3,
                    MountLink = 4,
                    HoistLink = 5,
                    WallJumpLink = 6,
                    BreakableFloor = 7,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class InstancedGeometryReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("pathfinding object_index", typeof(Int16))]
                public Int16 PathfindingObjectIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.PathfindingObjectIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.PathfindingObjectIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(108, 4)]
            public sealed class UserHintBlock : AbideTagBlock
            {
                private TagBlockList<UserHintPointBlock> pointGeometryList = new TagBlockList<UserHintPointBlock>(200);
                private TagBlockList<UserHintRayBlock> rayGeometryList = new TagBlockList<UserHintRayBlock>(200);
                private TagBlockList<UserHintLineSegmentBlock> lineSegmentGeometryList = new TagBlockList<UserHintLineSegmentBlock>(200);
                private TagBlockList<UserHintParallelogramBlock> parallelogramGeometryList = new TagBlockList<UserHintParallelogramBlock>(200);
                private TagBlockList<UserHintPolygonBlock> polygonGeometryList = new TagBlockList<UserHintPolygonBlock>(200);
                private TagBlockList<UserHintJumpBlock> jumpHintsList = new TagBlockList<UserHintJumpBlock>(200);
                private TagBlockList<UserHintClimbBlock> climbHintsList = new TagBlockList<UserHintClimbBlock>(200);
                private TagBlockList<UserHintWellBlock> wellHintsList = new TagBlockList<UserHintWellBlock>(200);
                private TagBlockList<UserHintFlightBlock> flightHintsList = new TagBlockList<UserHintFlightBlock>(50);
                [FieldAttribute("point geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_point_block", 200, typeof(UserHintPointBlock))]
                public TagBlock PointGeometry;
                [FieldAttribute("ray geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_ray_block", 200, typeof(UserHintRayBlock))]
                public TagBlock RayGeometry;
                [FieldAttribute("line segment geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_line_segment_block", 200, typeof(UserHintLineSegmentBlock))]
                public TagBlock LineSegmentGeometry;
                [FieldAttribute("parallelogram geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_parallelogram_block", 200, typeof(UserHintParallelogramBlock))]
                public TagBlock ParallelogramGeometry;
                [FieldAttribute("polygon geometry", typeof(TagBlock))]
                [BlockAttribute("user_hint_polygon_block", 200, typeof(UserHintPolygonBlock))]
                public TagBlock PolygonGeometry;
                [FieldAttribute("jump hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_jump_block", 200, typeof(UserHintJumpBlock))]
                public TagBlock JumpHints;
                [FieldAttribute("climb hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_climb_block", 200, typeof(UserHintClimbBlock))]
                public TagBlock ClimbHints;
                [FieldAttribute("well hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_well_block", 200, typeof(UserHintWellBlock))]
                public TagBlock WellHints;
                [FieldAttribute("flight hints", typeof(TagBlock))]
                [BlockAttribute("user_hint_flight_block", 50, typeof(UserHintFlightBlock))]
                public TagBlock FlightHints;
                public TagBlockList<UserHintPointBlock> PointGeometryList
                {
                    get
                    {
                        return this.pointGeometryList;
                    }
                }
                public TagBlockList<UserHintRayBlock> RayGeometryList
                {
                    get
                    {
                        return this.rayGeometryList;
                    }
                }
                public TagBlockList<UserHintLineSegmentBlock> LineSegmentGeometryList
                {
                    get
                    {
                        return this.lineSegmentGeometryList;
                    }
                }
                public TagBlockList<UserHintParallelogramBlock> ParallelogramGeometryList
                {
                    get
                    {
                        return this.parallelogramGeometryList;
                    }
                }
                public TagBlockList<UserHintPolygonBlock> PolygonGeometryList
                {
                    get
                    {
                        return this.polygonGeometryList;
                    }
                }
                public TagBlockList<UserHintJumpBlock> JumpHintsList
                {
                    get
                    {
                        return this.jumpHintsList;
                    }
                }
                public TagBlockList<UserHintClimbBlock> ClimbHintsList
                {
                    get
                    {
                        return this.climbHintsList;
                    }
                }
                public TagBlockList<UserHintWellBlock> WellHintsList
                {
                    get
                    {
                        return this.wellHintsList;
                    }
                }
                public TagBlockList<UserHintFlightBlock> FlightHintsList
                {
                    get
                    {
                        return this.flightHintsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public override void Initialize()
                {
                    this.pointGeometryList.Clear();
                    this.rayGeometryList.Clear();
                    this.lineSegmentGeometryList.Clear();
                    this.parallelogramGeometryList.Clear();
                    this.polygonGeometryList.Clear();
                    this.jumpHintsList.Clear();
                    this.climbHintsList.Clear();
                    this.wellHintsList.Clear();
                    this.flightHintsList.Clear();
                    this.PointGeometry = TagBlock.Zero;
                    this.RayGeometry = TagBlock.Zero;
                    this.LineSegmentGeometry = TagBlock.Zero;
                    this.ParallelogramGeometry = TagBlock.Zero;
                    this.PolygonGeometry = TagBlock.Zero;
                    this.JumpHints = TagBlock.Zero;
                    this.ClimbHints = TagBlock.Zero;
                    this.WellHints = TagBlock.Zero;
                    this.FlightHints = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PointGeometry = reader.ReadInt64();
                    this.pointGeometryList.Read(reader, this.PointGeometry);
                    this.RayGeometry = reader.ReadInt64();
                    this.rayGeometryList.Read(reader, this.RayGeometry);
                    this.LineSegmentGeometry = reader.ReadInt64();
                    this.lineSegmentGeometryList.Read(reader, this.LineSegmentGeometry);
                    this.ParallelogramGeometry = reader.ReadInt64();
                    this.parallelogramGeometryList.Read(reader, this.ParallelogramGeometry);
                    this.PolygonGeometry = reader.ReadInt64();
                    this.polygonGeometryList.Read(reader, this.PolygonGeometry);
                    this.JumpHints = reader.ReadInt64();
                    this.jumpHintsList.Read(reader, this.JumpHints);
                    this.ClimbHints = reader.ReadInt64();
                    this.climbHintsList.Read(reader, this.ClimbHints);
                    this.WellHints = reader.ReadInt64();
                    this.wellHintsList.Read(reader, this.WellHints);
                    this.FlightHints = reader.ReadInt64();
                    this.flightHintsList.Read(reader, this.FlightHints);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class UserHintPointBlock : AbideTagBlock
                {
                    [FieldAttribute("Point", typeof(Vector3))]
                    public Vector3 Point;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Point = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Point = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(28, 4)]
                public sealed class UserHintRayBlock : AbideTagBlock
                {
                    [FieldAttribute("Point", typeof(Vector3))]
                    public Vector3 Point;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Vector", typeof(Vector3))]
                    public Vector3 Vector;
                    public override int Size
                    {
                        get
                        {
                            return 28;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Point = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                        this.Vector = Vector3.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Point = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Vector = reader.Read<Vector3>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(36, 4)]
                public sealed class UserHintLineSegmentBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("Point 0", typeof(Vector3))]
                    public Vector3 Point0;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Point 1", typeof(Vector3))]
                    public Vector3 Point1;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    public override int Size
                    {
                        get
                        {
                            return 36;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.Point0 = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                        this.Point1 = Vector3.Zero;
                        this.ReferenceFrame1 = 0;
                        this.EmptyString1 = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Point0 = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Point1 = reader.Read<Vector3>();
                        this.ReferenceFrame1 = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(68, 4)]
                public sealed class UserHintParallelogramBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("Point 0", typeof(Vector3))]
                    public Vector3 Point0;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Point 1", typeof(Vector3))]
                    public Vector3 Point1;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("Point 2", typeof(Vector3))]
                    public Vector3 Point2;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame2;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString2;
                    [FieldAttribute("Point 3", typeof(Vector3))]
                    public Vector3 Point3;
                    [FieldAttribute("reference frame*", typeof(Int16))]
                    public Int16 ReferenceFrame3;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString3;
                    public override int Size
                    {
                        get
                        {
                            return 68;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.Point0 = Vector3.Zero;
                        this.ReferenceFrame = 0;
                        this.EmptyString = new byte[2];
                        this.Point1 = Vector3.Zero;
                        this.ReferenceFrame1 = 0;
                        this.EmptyString1 = new byte[2];
                        this.Point2 = Vector3.Zero;
                        this.ReferenceFrame2 = 0;
                        this.EmptyString2 = new byte[2];
                        this.Point3 = Vector3.Zero;
                        this.ReferenceFrame3 = 0;
                        this.EmptyString3 = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Point0 = reader.Read<Vector3>();
                        this.ReferenceFrame = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Point1 = reader.Read<Vector3>();
                        this.ReferenceFrame1 = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.Point2 = reader.Read<Vector3>();
                        this.ReferenceFrame2 = reader.ReadInt16();
                        this.EmptyString2 = reader.ReadBytes(2);
                        this.Point3 = reader.Read<Vector3>();
                        this.ReferenceFrame3 = reader.ReadInt16();
                        this.EmptyString3 = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(16, 4)]
                public sealed class UserHintPolygonBlock : AbideTagBlock
                {
                    private TagBlockList<UserHintPointBlock> pointsList = new TagBlockList<UserHintPointBlock>(200);
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("Points", typeof(TagBlock))]
                    [BlockAttribute("user_hint_point_block", 200, typeof(UserHintPointBlock))]
                    public TagBlock Points;
                    public TagBlockList<UserHintPointBlock> PointsList
                    {
                        get
                        {
                            return this.pointsList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.pointsList.Clear();
                        this.Flags = ((FlagsOptions)(0));
                        this.Points = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Points = reader.ReadInt64();
                        this.pointsList.Read(reader, this.Points);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class UserHintPointBlock : AbideTagBlock
                    {
                        [FieldAttribute("Point", typeof(Vector3))]
                        public Vector3 Point;
                        [FieldAttribute("reference frame*", typeof(Int16))]
                        public Int16 ReferenceFrame;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(2)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Point = Vector3.Zero;
                            this.ReferenceFrame = 0;
                            this.EmptyString = new byte[2];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Point = reader.Read<Vector3>();
                            this.ReferenceFrame = reader.ReadInt16();
                            this.EmptyString = reader.ReadBytes(2);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(8, 4)]
                public sealed class UserHintJumpBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("geometry index*", typeof(Int16))]
                    public Int16 GeometryIndex;
                    [FieldAttribute("force jump height", typeof(ForceJumpHeightOptions))]
                    [OptionsAttribute(typeof(ForceJumpHeightOptions), false)]
                    public ForceJumpHeightOptions ForceJumpHeight;
                    [FieldAttribute("control flags", typeof(ControlFlagsOptions))]
                    [OptionsAttribute(typeof(ControlFlagsOptions), true)]
                    public ControlFlagsOptions ControlFlags;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.GeometryIndex = 0;
                        this.ForceJumpHeight = ((ForceJumpHeightOptions)(0));
                        this.ControlFlags = ((ControlFlagsOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                        this.GeometryIndex = reader.ReadInt16();
                        this.ForceJumpHeight = ((ForceJumpHeightOptions)(reader.ReadInt16()));
                        this.ControlFlags = ((ControlFlagsOptions)(reader.ReadInt16()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int16
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                    public enum ForceJumpHeightOptions : Int16
                    {
                        None = 0,
                        Down = 1,
                        Step = 2,
                        Crouch = 3,
                        Stand = 4,
                        Storey = 5,
                        Tower = 6,
                        Infinite = 7,
                    }
                    public enum ControlFlagsOptions : Int16
                    {
                        MagicLift = 1,
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class UserHintClimbBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("geometry index*", typeof(Int16))]
                    public Int16 GeometryIndex;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.GeometryIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                        this.GeometryIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int16
                    {
                        Bidirectional = 1,
                        Closed = 2,
                    }
                }
                [FieldSetAttribute(16, 4)]
                public sealed class UserHintWellBlock : AbideTagBlock
                {
                    private TagBlockList<UserHintWellPointBlock> pointsList = new TagBlockList<UserHintWellPointBlock>(200);
                    [FieldAttribute("flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("points", typeof(TagBlock))]
                    [BlockAttribute("user_hint_well_point_block", 200, typeof(UserHintWellPointBlock))]
                    public TagBlock Points;
                    public TagBlockList<UserHintWellPointBlock> PointsList
                    {
                        get
                        {
                            return this.pointsList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.pointsList.Clear();
                        this.Flags = ((FlagsOptions)(0));
                        this.Points = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.Points = reader.ReadInt64();
                        this.pointsList.Read(reader, this.Points);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class UserHintWellPointBlock : AbideTagBlock
                    {
                        [FieldAttribute("type", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(2)]
                        public Byte[] EmptyString;
                        [FieldAttribute("point", typeof(Vector3))]
                        public Vector3 Point;
                        [FieldAttribute("reference frame", typeof(Int16))]
                        public Int16 ReferenceFrame;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(2)]
                        public Byte[] EmptyString1;
                        [FieldAttribute("sector index", typeof(Int32))]
                        public Int32 SectorIndex;
                        [FieldAttribute("normal", typeof(Vector2))]
                        public Vector2 Normal;
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.EmptyString = new byte[2];
                            this.Point = Vector3.Zero;
                            this.ReferenceFrame = 0;
                            this.EmptyString1 = new byte[2];
                            this.SectorIndex = 0;
                            this.Normal = Vector2.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadInt16()));
                            this.EmptyString = reader.ReadBytes(2);
                            this.Point = reader.Read<Vector3>();
                            this.ReferenceFrame = reader.ReadInt16();
                            this.EmptyString1 = reader.ReadBytes(2);
                            this.SectorIndex = reader.ReadInt32();
                            this.Normal = reader.Read<Vector2>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions : Int16
                        {
                            Jump = 0,
                            Climb = 1,
                            Hoist = 2,
                        }
                    }
                    public enum FlagsOptions : Int32
                    {
                        Bidirectional = 1,
                    }
                }
                [FieldSetAttribute(12, 4)]
                public sealed class UserHintFlightBlock : AbideTagBlock
                {
                    private TagBlockList<UserHintFlightPointBlock> pointsList = new TagBlockList<UserHintFlightPointBlock>(10);
                    [FieldAttribute("points", typeof(TagBlock))]
                    [BlockAttribute("user_hint_flight_point_block", 10, typeof(UserHintFlightPointBlock))]
                    public TagBlock Points;
                    public TagBlockList<UserHintFlightPointBlock> PointsList
                    {
                        get
                        {
                            return this.pointsList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.pointsList.Clear();
                        this.Points = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Points = reader.ReadInt64();
                        this.pointsList.Read(reader, this.Points);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class UserHintFlightPointBlock : AbideTagBlock
                    {
                        [FieldAttribute("point", typeof(Vector3))]
                        public Vector3 Point;
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Point = Vector3.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Point = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        [FieldSetAttribute(1, 4)]
        public sealed class StructureBspPathfindingEdgesBlock : AbideTagBlock
        {
            [FieldAttribute("Midpoint*", typeof(Byte))]
            public Byte Midpoint;
            public override int Size
            {
                get
                {
                    return 1;
                }
            }
            public override void Initialize()
            {
                this.Midpoint = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Midpoint = reader.ReadByte();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(116, 4)]
        public sealed class StructureBspBackgroundSoundPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Background Sound", typeof(TagReference))]
            public TagReference BackgroundSound;
            [FieldAttribute("Inside Cluster Sound#Play only when player is inside cluster.", typeof(TagReference))]
            public TagReference InsideClusterSound;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString;
            [FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [FieldAttribute("Scale Flags", typeof(ScaleFlagsOptions))]
            [OptionsAttribute(typeof(ScaleFlagsOptions), true)]
            public ScaleFlagsOptions ScaleFlags;
            [FieldAttribute("Interior Scale", typeof(Single))]
            public Single InteriorScale;
            [FieldAttribute("Portal Scale", typeof(Single))]
            public Single PortalScale;
            [FieldAttribute("Exterior Scale", typeof(Single))]
            public Single ExteriorScale;
            [FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 116;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.BackgroundSound = TagReference.Null;
                this.InsideClusterSound = TagReference.Null;
                this.EmptyString = new byte[20];
                this.CutoffDistance = 0;
                this.ScaleFlags = ((ScaleFlagsOptions)(0));
                this.InteriorScale = 0;
                this.PortalScale = 0;
                this.ExteriorScale = 0;
                this.InterpolationSpeed = 0;
                this.EmptyString1 = new byte[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.BackgroundSound = reader.Read<TagReference>();
                this.InsideClusterSound = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(20);
                this.CutoffDistance = reader.ReadSingle();
                this.ScaleFlags = ((ScaleFlagsOptions)(reader.ReadInt32()));
                this.InteriorScale = reader.ReadSingle();
                this.PortalScale = reader.ReadSingle();
                this.ExteriorScale = reader.ReadSingle();
                this.InterpolationSpeed = reader.ReadSingle();
                this.EmptyString1 = reader.ReadBytes(8);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum ScaleFlagsOptions : Int32
            {
                OverrideDefaultScale = 1,
                UseAdjacentClusterAsPortalScale = 2,
                UseAdjacentClusterAsExteriorScale = 4,
                ScaleWithWeatherIntensity = 8,
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class StructureBspSoundEnvironmentPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Sound Environment", typeof(TagReference))]
            public TagReference SoundEnvironment;
            [FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.SoundEnvironment = TagReference.Null;
                this.CutoffDistance = 0;
                this.InterpolationSpeed = 0;
                this.EmptyString = new byte[24];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.SoundEnvironment = reader.Read<TagReference>();
                this.CutoffDistance = reader.ReadSingle();
                this.InterpolationSpeed = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(24);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(60, 4)]
        public sealed class StructureBspMarkerBlock : AbideTagBlock
        {
            [FieldAttribute("Name*", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Rotation", typeof(Quaternion))]
            public Quaternion Rotation;
            [FieldAttribute("Position*", typeof(Vector3))]
            public Vector3 Position;
            public override int Size
            {
                get
                {
                    return 60;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.Rotation = Quaternion.Zero;
                this.Position = Vector3.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Rotation = reader.Read<Quaternion>();
                this.Position = reader.Read<Vector3>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class StructureBspRuntimeDecalBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[16];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(16);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(36, 4)]
        public sealed class StructureBspEnvironmentObjectPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Definition", typeof(TagReference))]
            public TagReference Definition;
            [FieldAttribute("Model", typeof(TagReference))]
            public TagReference Model;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.Definition = TagReference.Null;
                this.Model = TagReference.Null;
                this.EmptyString = new byte[4];
            }
            public override void Read(BinaryReader reader)
            {
                this.Definition = reader.Read<TagReference>();
                this.Model = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(4);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(104, 4)]
        public sealed class StructureBspEnvironmentObjectBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Rotation", typeof(Quaternion))]
            public Quaternion Rotation;
            [FieldAttribute("Translation", typeof(Vector3))]
            public Vector3 Translation;
            [FieldAttribute("palette_index", typeof(Int16))]
            public Int16 PaletteIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("Unique ID*", typeof(Int32))]
            public Int32 UniqueId;
            [FieldAttribute("Exported Object Type", typeof(Tag))]
            public Tag ExportedObjectType;
            [FieldAttribute("Scenario Object Name", typeof(String32))]
            public String32 ScenarioObjectName;
            public override int Size
            {
                get
                {
                    return 104;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.Rotation = Quaternion.Zero;
                this.Translation = Vector3.Zero;
                this.PaletteIndex = 0;
                this.EmptyString = new byte[2];
                this.UniqueId = 0;
                this.ExportedObjectType = "null";
                this.ScenarioObjectName = String32.Empty;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Rotation = reader.Read<Quaternion>();
                this.Translation = reader.Read<Vector3>();
                this.PaletteIndex = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.UniqueId = reader.ReadInt32();
                this.ExportedObjectType = reader.Read<Tag>();
                this.ScenarioObjectName = reader.Read<String32>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class StructureBspLightmapDataBlock : AbideTagBlock
        {
            [FieldAttribute("Bitmap Group", typeof(TagReference))]
            public TagReference BitmapGroup;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.BitmapGroup = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.BitmapGroup = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class GlobalMapLeafBlock : AbideTagBlock
        {
            private TagBlockList<MapLeafFaceBlock> facesList = new TagBlockList<MapLeafFaceBlock>(512);
            private TagBlockList<MapLeafConnectionIndexBlock> connectionIndicesList = new TagBlockList<MapLeafConnectionIndexBlock>(512);
            [FieldAttribute("faces*", typeof(TagBlock))]
            [BlockAttribute("map_leaf_face_block", 512, typeof(MapLeafFaceBlock))]
            public TagBlock Faces;
            [FieldAttribute("connection indices*", typeof(TagBlock))]
            [BlockAttribute("map_leaf_connection_index_block", 512, typeof(MapLeafConnectionIndexBlock))]
            public TagBlock ConnectionIndices;
            public TagBlockList<MapLeafFaceBlock> FacesList
            {
                get
                {
                    return this.facesList;
                }
            }
            public TagBlockList<MapLeafConnectionIndexBlock> ConnectionIndicesList
            {
                get
                {
                    return this.connectionIndicesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.facesList.Clear();
                this.connectionIndicesList.Clear();
                this.Faces = TagBlock.Zero;
                this.ConnectionIndices = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Faces = reader.ReadInt64();
                this.facesList.Read(reader, this.Faces);
                this.ConnectionIndices = reader.ReadInt64();
                this.connectionIndicesList.Read(reader, this.ConnectionIndices);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class MapLeafFaceBlock : AbideTagBlock
            {
                private TagBlockList<MapLeafFaceVertexBlock> verticesList = new TagBlockList<MapLeafFaceVertexBlock>(64);
                [FieldAttribute("node index*", typeof(Int32))]
                public Int32 NodeIndex;
                [FieldAttribute("vertices*", typeof(TagBlock))]
                [BlockAttribute("map_leaf_face_vertex_block", 64, typeof(MapLeafFaceVertexBlock))]
                public TagBlock Vertices;
                public TagBlockList<MapLeafFaceVertexBlock> VerticesList
                {
                    get
                    {
                        return this.verticesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.verticesList.Clear();
                    this.NodeIndex = 0;
                    this.Vertices = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.NodeIndex = reader.ReadInt32();
                    this.Vertices = reader.ReadInt64();
                    this.verticesList.Read(reader, this.Vertices);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MapLeafFaceVertexBlock : AbideTagBlock
                {
                    [FieldAttribute("vertex*", typeof(Vector3))]
                    public Vector3 Vertex;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Vertex = Vector3.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Vertex = reader.Read<Vector3>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class MapLeafConnectionIndexBlock : AbideTagBlock
            {
                [FieldAttribute("connection index*", typeof(Int32))]
                public Int32 ConnectionIndex;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.ConnectionIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ConnectionIndex = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(28, 4)]
        public sealed class GlobalLeafConnectionBlock : AbideTagBlock
        {
            private TagBlockList<LeafConnectionVertexBlock> verticesList = new TagBlockList<LeafConnectionVertexBlock>(64);
            [FieldAttribute("plane index*", typeof(Int32))]
            public Int32 PlaneIndex;
            [FieldAttribute("back leaf index*", typeof(Int32))]
            public Int32 BackLeafIndex;
            [FieldAttribute("front leaf index*", typeof(Int32))]
            public Int32 FrontLeafIndex;
            [FieldAttribute("vertices*", typeof(TagBlock))]
            [BlockAttribute("leaf_connection_vertex_block", 64, typeof(LeafConnectionVertexBlock))]
            public TagBlock Vertices;
            [FieldAttribute("area*", typeof(Single))]
            public Single Area;
            public TagBlockList<LeafConnectionVertexBlock> VerticesList
            {
                get
                {
                    return this.verticesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 28;
                }
            }
            public override void Initialize()
            {
                this.verticesList.Clear();
                this.PlaneIndex = 0;
                this.BackLeafIndex = 0;
                this.FrontLeafIndex = 0;
                this.Vertices = TagBlock.Zero;
                this.Area = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.PlaneIndex = reader.ReadInt32();
                this.BackLeafIndex = reader.ReadInt32();
                this.FrontLeafIndex = reader.ReadInt32();
                this.Vertices = reader.ReadInt64();
                this.verticesList.Read(reader, this.Vertices);
                this.Area = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class LeafConnectionVertexBlock : AbideTagBlock
            {
                [FieldAttribute("vertex*", typeof(Vector3))]
                public Vector3 Vertex;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Vertex = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Vertex = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(680, 4)]
        public sealed class GlobalErrorReportCategoriesBlock : AbideTagBlock
        {
            private TagBlockList<ErrorReportsBlock> reportsList = new TagBlockList<ErrorReportsBlock>(1024);
            [FieldAttribute("Name^*", typeof(String256))]
            public String256 Name;
            [FieldAttribute("Report Type*", typeof(ReportTypeOptions))]
            [OptionsAttribute(typeof(ReportTypeOptions), false)]
            public ReportTypeOptions ReportType;
            [FieldAttribute("Flags*", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(404)]
            public Byte[] EmptyString2;
            [FieldAttribute("Reports*", typeof(TagBlock))]
            [BlockAttribute("error report", 1024, typeof(ErrorReportsBlock))]
            public TagBlock Reports;
            public TagBlockList<ErrorReportsBlock> ReportsList
            {
                get
                {
                    return this.reportsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 680;
                }
            }
            public override void Initialize()
            {
                this.reportsList.Clear();
                this.Name = String256.Empty;
                this.ReportType = ((ReportTypeOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[404];
                this.Reports = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String256>();
                this.ReportType = ((ReportTypeOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(404);
                this.Reports = reader.ReadInt64();
                this.reportsList.Read(reader, this.Reports);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(644, 4)]
            public sealed class ErrorReportsBlock : AbideTagBlock
            {
                private DataList textList = new DataList(8192);
                private TagBlockList<ErrorReportVerticesBlock> verticesList = new TagBlockList<ErrorReportVerticesBlock>(1024);
                private TagBlockList<ErrorReportVectorsBlock> vectorsList = new TagBlockList<ErrorReportVectorsBlock>(1024);
                private TagBlockList<ErrorReportLinesBlock> linesList = new TagBlockList<ErrorReportLinesBlock>(1024);
                private TagBlockList<ErrorReportTrianglesBlock> trianglesList = new TagBlockList<ErrorReportTrianglesBlock>(1024);
                private TagBlockList<ErrorReportQuadsBlock> quadsList = new TagBlockList<ErrorReportQuadsBlock>(1024);
                private TagBlockList<ErrorReportCommentsBlock> commentsList = new TagBlockList<ErrorReportCommentsBlock>(1024);
                [FieldAttribute("Type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Flags*", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Text*", typeof(TagBlock))]
                [DataAttribute(8192)]
                public TagBlock Text;
                [FieldAttribute("Source Filename*", typeof(String32))]
                public String32 SourceFilename;
                [FieldAttribute("Source Line Number*", typeof(Int32))]
                public Int32 SourceLineNumber;
                [FieldAttribute("Vertices*", typeof(TagBlock))]
                [BlockAttribute("error report vertex", 1024, typeof(ErrorReportVerticesBlock))]
                public TagBlock Vertices;
                [FieldAttribute("Vectors*", typeof(TagBlock))]
                [BlockAttribute("error report vector", 1024, typeof(ErrorReportVectorsBlock))]
                public TagBlock Vectors;
                [FieldAttribute("Lines*", typeof(TagBlock))]
                [BlockAttribute("error report line", 1024, typeof(ErrorReportLinesBlock))]
                public TagBlock Lines;
                [FieldAttribute("Triangles*", typeof(TagBlock))]
                [BlockAttribute("error report triangle", 1024, typeof(ErrorReportTrianglesBlock))]
                public TagBlock Triangles;
                [FieldAttribute("Quads*", typeof(TagBlock))]
                [BlockAttribute("error report quad", 1024, typeof(ErrorReportQuadsBlock))]
                public TagBlock Quads;
                [FieldAttribute("Comments*", typeof(TagBlock))]
                [BlockAttribute("error report comment", 1024, typeof(ErrorReportCommentsBlock))]
                public TagBlock Comments;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(380)]
                public Byte[] EmptyString;
                [FieldAttribute("Report Key*", typeof(Int32))]
                public Int32 ReportKey;
                [FieldAttribute("Node Index*", typeof(Int32))]
                public Int32 NodeIndex;
                [FieldAttribute("Color*", typeof(ColorArgbF))]
                public ColorArgbF Color;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(84)]
                public Byte[] EmptyString1;
                public DataList TextList
                {
                    get
                    {
                        return this.textList;
                    }
                }
                public TagBlockList<ErrorReportVerticesBlock> VerticesList
                {
                    get
                    {
                        return this.verticesList;
                    }
                }
                public TagBlockList<ErrorReportVectorsBlock> VectorsList
                {
                    get
                    {
                        return this.vectorsList;
                    }
                }
                public TagBlockList<ErrorReportLinesBlock> LinesList
                {
                    get
                    {
                        return this.linesList;
                    }
                }
                public TagBlockList<ErrorReportTrianglesBlock> TrianglesList
                {
                    get
                    {
                        return this.trianglesList;
                    }
                }
                public TagBlockList<ErrorReportQuadsBlock> QuadsList
                {
                    get
                    {
                        return this.quadsList;
                    }
                }
                public TagBlockList<ErrorReportCommentsBlock> CommentsList
                {
                    get
                    {
                        return this.commentsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 644;
                    }
                }
                public override void Initialize()
                {
                    this.textList.Clear();
                    this.verticesList.Clear();
                    this.vectorsList.Clear();
                    this.linesList.Clear();
                    this.trianglesList.Clear();
                    this.quadsList.Clear();
                    this.commentsList.Clear();
                    this.Type = ((TypeOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.Text = TagBlock.Zero;
                    this.SourceFilename = String32.Empty;
                    this.SourceLineNumber = 0;
                    this.Vertices = TagBlock.Zero;
                    this.Vectors = TagBlock.Zero;
                    this.Lines = TagBlock.Zero;
                    this.Triangles = TagBlock.Zero;
                    this.Quads = TagBlock.Zero;
                    this.Comments = TagBlock.Zero;
                    this.EmptyString = new byte[380];
                    this.ReportKey = 0;
                    this.NodeIndex = 0;
                    this.Color = ColorArgbF.Zero;
                    this.EmptyString1 = new byte[84];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.Text = reader.ReadInt64();
                    this.SourceFilename = reader.Read<String32>();
                    this.SourceLineNumber = reader.ReadInt32();
                    this.Vertices = reader.ReadInt64();
                    this.verticesList.Read(reader, this.Vertices);
                    this.Vectors = reader.ReadInt64();
                    this.vectorsList.Read(reader, this.Vectors);
                    this.Lines = reader.ReadInt64();
                    this.linesList.Read(reader, this.Lines);
                    this.Triangles = reader.ReadInt64();
                    this.trianglesList.Read(reader, this.Triangles);
                    this.Quads = reader.ReadInt64();
                    this.quadsList.Read(reader, this.Quads);
                    this.Comments = reader.ReadInt64();
                    this.commentsList.Read(reader, this.Comments);
                    this.EmptyString = reader.ReadBytes(380);
                    this.ReportKey = reader.ReadInt32();
                    this.NodeIndex = reader.ReadInt32();
                    this.Color = reader.Read<ColorArgbF>();
                    this.EmptyString1 = reader.ReadBytes(84);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(52, 4)]
                public sealed class ErrorReportVerticesBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Screen Size*", typeof(Single))]
                    public Single ScreenSize;
                    public override int Size
                    {
                        get
                        {
                            return 52;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.ScreenSize = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.ScreenSize = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(64, 4)]
                public sealed class ErrorReportVectorsBlock : AbideTagBlock
                {
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    [FieldAttribute("Normal*", typeof(Vector3))]
                    public Vector3 Normal;
                    [FieldAttribute("Screen Length*", typeof(Single))]
                    public Single ScreenLength;
                    public override int Size
                    {
                        get
                        {
                            return 64;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                        this.Normal = Vector3.Zero;
                        this.ScreenLength = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                        this.Normal = reader.Read<Vector3>();
                        this.ScreenLength = reader.ReadSingle();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(80, 4)]
                public sealed class ErrorReportLinesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(2, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 80;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[2];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(112, 4)]
                public sealed class ErrorReportTrianglesBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(3, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 112;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[3];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(144, 4)]
                public sealed class ErrorReportQuadsBlock : AbideTagBlock
                {
                    [FieldAttribute("Points*", typeof(PointsElement[]))]
                    [ArrayAttribute(4, typeof(PointsElement))]
                    public PointsElement[] Points;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public override int Size
                    {
                        get
                        {
                            return 144;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Points = new PointsElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class PointsElement : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(68, 4)]
                public sealed class ErrorReportCommentsBlock : AbideTagBlock
                {
                    private DataList textList = new DataList(8192);
                    [FieldAttribute("Text*", typeof(TagBlock))]
                    [DataAttribute(8192)]
                    public TagBlock Text;
                    [FieldAttribute("Position*", typeof(Vector3))]
                    public Vector3 Position;
                    [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                    [ArrayAttribute(4, typeof(NodeIndicesElement))]
                    public NodeIndicesElement[] NodeIndices;
                    [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                    [ArrayAttribute(4, typeof(NodeWeightsElement))]
                    public NodeWeightsElement[] NodeWeights;
                    [FieldAttribute("Color*", typeof(ColorArgbF))]
                    public ColorArgbF Color;
                    public DataList TextList
                    {
                        get
                        {
                            return this.textList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 68;
                        }
                    }
                    public override void Initialize()
                    {
                        this.textList.Clear();
                        this.Text = TagBlock.Zero;
                        this.Position = Vector3.Zero;
                        this.NodeIndices = new NodeIndicesElement[4];
                        this.NodeWeights = new NodeWeightsElement[4];
                        this.Color = ColorArgbF.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Text = reader.ReadInt64();
                        this.Position = reader.Read<Vector3>();
                        this.Color = reader.Read<ColorArgbF>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public sealed class NodeIndicesElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Index*", typeof(Byte))]
                        public Byte NodeIndex;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeIndex = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public sealed class NodeWeightsElement : AbideTagBlock
                    {
                        [FieldAttribute("Node Weight*", typeof(Single))]
                        public Single NodeWeight;
                        public override int Size
                        {
                            get
                            {
                                return 0;
                            }
                        }
                        public override void Initialize()
                        {
                            this.NodeWeight = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.NodeWeight = reader.ReadSingle();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                public enum TypeOptions : Int16
                {
                    Silent = 0,
                    Comment = 1,
                    Warning = 2,
                    Error = 3,
                }
                public enum FlagsOptions : Int16
                {
                    Rendered = 1,
                    TangentSpace = 2,
                    Noncritical = 4,
                    LightmapLight = 8,
                    ReportKeyIsValid = 16,
                }
            }
            public enum ReportTypeOptions : Int16
            {
                Silent = 0,
                Comment = 1,
                Warning = 2,
                Error = 3,
            }
            public enum FlagsOptions : Int16
            {
                Rendered = 1,
                TangentSpace = 2,
                Noncritical = 4,
                LightmapLight = 8,
                ReportKeyIsValid = 16,
            }
        }
        [FieldSetAttribute(96, 4)]
        public sealed class StructureBspPrecomputedLightingBlock : AbideTagBlock
        {
            [FieldAttribute("Index*", typeof(Int32))]
            public Int32 Index;
            [FieldAttribute("Light Type*", typeof(LightTypeOptions))]
            [OptionsAttribute(typeof(LightTypeOptions), false)]
            public LightTypeOptions LightType;
            [FieldAttribute("Attachment Index*", typeof(Byte))]
            public Byte AttachmentIndex;
            [FieldAttribute("Object Type*", typeof(Byte))]
            public Byte ObjectType;
            [FieldAttribute("Visibility*", typeof(VisibilityStructBlock))]
            public VisibilityStructBlock Visibility;
            public override int Size
            {
                get
                {
                    return 96;
                }
            }
            public override void Initialize()
            {
                this.Index = 0;
                this.LightType = ((LightTypeOptions)(0));
                this.AttachmentIndex = 0;
                this.ObjectType = 0;
                this.Visibility = new VisibilityStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Index = reader.ReadInt32();
                this.LightType = ((LightTypeOptions)(reader.ReadInt16()));
                this.AttachmentIndex = reader.ReadByte();
                this.ObjectType = reader.ReadByte();
                this.Visibility = reader.ReadDataStructure<VisibilityStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(88, 4)]
            public sealed class VisibilityStructBlock : AbideTagBlock
            {
                private DataList projectionsList = new DataList(2664);
                private DataList visibilityClustersList = new DataList(3328);
                private DataList clusterRemapTableList = new DataList(512);
                private DataList visibilityVolumesList = new DataList(135168);
                [FieldAttribute("Projection Count*", typeof(Int16))]
                public Int16 ProjectionCount;
                [FieldAttribute("Cluster Count*", typeof(Int16))]
                public Int16 ClusterCount;
                [FieldAttribute("Volume Count*", typeof(Int16))]
                public Int16 VolumeCount;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("Projections*", typeof(TagBlock))]
                [DataAttribute(2664)]
                public TagBlock Projections;
                [FieldAttribute("Visibility Clusters*", typeof(TagBlock))]
                [DataAttribute(3328)]
                public TagBlock VisibilityClusters;
                [FieldAttribute("Cluster Remap Table*", typeof(TagBlock))]
                [DataAttribute(512)]
                public TagBlock ClusterRemapTable;
                [FieldAttribute("Visibility Volumes*", typeof(TagBlock))]
                [DataAttribute(135168)]
                public TagBlock VisibilityVolumes;
                public DataList ProjectionsList
                {
                    get
                    {
                        return this.projectionsList;
                    }
                }
                public DataList VisibilityClustersList
                {
                    get
                    {
                        return this.visibilityClustersList;
                    }
                }
                public DataList ClusterRemapTableList
                {
                    get
                    {
                        return this.clusterRemapTableList;
                    }
                }
                public DataList VisibilityVolumesList
                {
                    get
                    {
                        return this.visibilityVolumesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 88;
                    }
                }
                public override void Initialize()
                {
                    this.projectionsList.Clear();
                    this.visibilityClustersList.Clear();
                    this.clusterRemapTableList.Clear();
                    this.visibilityVolumesList.Clear();
                    this.ProjectionCount = 0;
                    this.ClusterCount = 0;
                    this.VolumeCount = 0;
                    this.EmptyString = new byte[2];
                    this.Projections = TagBlock.Zero;
                    this.VisibilityClusters = TagBlock.Zero;
                    this.ClusterRemapTable = TagBlock.Zero;
                    this.VisibilityVolumes = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ProjectionCount = reader.ReadInt16();
                    this.ClusterCount = reader.ReadInt16();
                    this.VolumeCount = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.Projections = reader.ReadInt64();
                    this.VisibilityClusters = reader.ReadInt64();
                    this.ClusterRemapTable = reader.ReadInt64();
                    this.VisibilityVolumes = reader.ReadInt64();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum LightTypeOptions : Int16
            {
                FreeStanding = 0,
                AttachedToEditorObject = 1,
                AttachedToStructureObject = 2,
            }
        }
        [FieldSetAttribute(260, 4)]
        public sealed class StructureBspInstancedGeometryDefinitionBlock : AbideTagBlock
        {
            private TagBlockList<CollisionBspPhysicsBlock> bspPhysicsList = new TagBlockList<CollisionBspPhysicsBlock>(1024);
            private TagBlockList<StructureBspLeafBlock> renderLeavesList = new TagBlockList<StructureBspLeafBlock>(65536);
            private TagBlockList<StructureBspSurfaceReferenceBlock> surfaceReferencesList = new TagBlockList<StructureBspSurfaceReferenceBlock>(262144);
            [FieldAttribute("Render Info", typeof(StructureInstancedGeometryRenderInfoStructBlock))]
            public StructureInstancedGeometryRenderInfoStructBlock RenderInfo;
            [FieldAttribute("Checksum*", typeof(Int32))]
            public Int32 Checksum;
            [FieldAttribute("Bounding Sphere Center", typeof(Vector3))]
            public Vector3 BoundingSphereCenter;
            [FieldAttribute("Bounding Sphere Radius", typeof(Single))]
            public Single BoundingSphereRadius;
            [FieldAttribute("Collision Info", typeof(GlobalCollisionBspStructBlock))]
            public GlobalCollisionBspStructBlock CollisionInfo;
            [FieldAttribute("bsp_physics*", typeof(TagBlock))]
            [BlockAttribute("collision_bsp_physics_block", 1024, typeof(CollisionBspPhysicsBlock))]
            public TagBlock BspPhysics;
            [FieldAttribute("Render Leaves*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_leaf_block", 65536, typeof(StructureBspLeafBlock))]
            public TagBlock RenderLeaves;
            [FieldAttribute("Surface References*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_surface_reference_block", 262144, typeof(StructureBspSurfaceReferenceBlock))]
            public TagBlock SurfaceReferences;
            public TagBlockList<CollisionBspPhysicsBlock> BspPhysicsList
            {
                get
                {
                    return this.bspPhysicsList;
                }
            }
            public TagBlockList<StructureBspLeafBlock> RenderLeavesList
            {
                get
                {
                    return this.renderLeavesList;
                }
            }
            public TagBlockList<StructureBspSurfaceReferenceBlock> SurfaceReferencesList
            {
                get
                {
                    return this.surfaceReferencesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 260;
                }
            }
            public override void Initialize()
            {
                this.bspPhysicsList.Clear();
                this.renderLeavesList.Clear();
                this.surfaceReferencesList.Clear();
                this.RenderInfo = new StructureInstancedGeometryRenderInfoStructBlock();
                this.Checksum = 0;
                this.BoundingSphereCenter = Vector3.Zero;
                this.BoundingSphereRadius = 0;
                this.CollisionInfo = new GlobalCollisionBspStructBlock();
                this.BspPhysics = TagBlock.Zero;
                this.RenderLeaves = TagBlock.Zero;
                this.SurfaceReferences = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.RenderInfo = reader.ReadDataStructure<StructureInstancedGeometryRenderInfoStructBlock>();
                this.Checksum = reader.ReadInt32();
                this.BoundingSphereCenter = reader.Read<Vector3>();
                this.BoundingSphereRadius = reader.ReadSingle();
                this.CollisionInfo = reader.ReadDataStructure<GlobalCollisionBspStructBlock>();
                this.BspPhysics = reader.ReadInt64();
                this.bspPhysicsList.Read(reader, this.BspPhysics);
                this.RenderLeaves = reader.ReadInt64();
                this.renderLeavesList.Read(reader, this.RenderLeaves);
                this.SurfaceReferences = reader.ReadInt64();
                this.surfaceReferencesList.Read(reader, this.SurfaceReferences);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(128, 16)]
            public sealed class CollisionBspPhysicsBlock : AbideTagBlock
            {
                private DataList moppCodeDataList = new DataList(1048576);
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Size*", typeof(Int16))]
                public Int16 Size1;
                [FieldAttribute("Count*", typeof(Int16))]
                public Int16 Count;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(32)]
                public Byte[] EmptyString3;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(16)]
                public Byte[] EmptyString4;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [FieldAttribute("Size*", typeof(Int16))]
                public Int16 Size2;
                [FieldAttribute("Count*", typeof(Int16))]
                public Int16 Count1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString6;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString7;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString8;
                [FieldAttribute("Size*", typeof(Int16))]
                public Int16 Size3;
                [FieldAttribute("Count*", typeof(Int16))]
                public Int16 Count2;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString9;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString10;
                [FieldAttribute("mopp Code Data*", typeof(TagBlock))]
                [DataAttribute(1048576)]
                public TagBlock MoppCodeData;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(8)]
                public Byte[] EmptyString11;
                public DataList MoppCodeDataList
                {
                    get
                    {
                        return this.moppCodeDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 128;
                    }
                }
                public override void Initialize()
                {
                    this.moppCodeDataList.Clear();
                    this.EmptyString = new byte[4];
                    this.Size1 = 0;
                    this.Count = 0;
                    this.EmptyString1 = new byte[4];
                    this.EmptyString2 = new byte[4];
                    this.EmptyString3 = new byte[32];
                    this.EmptyString4 = new byte[16];
                    this.EmptyString5 = new byte[4];
                    this.Size2 = 0;
                    this.Count1 = 0;
                    this.EmptyString6 = new byte[4];
                    this.EmptyString7 = new byte[4];
                    this.EmptyString8 = new byte[4];
                    this.Size3 = 0;
                    this.Count2 = 0;
                    this.EmptyString9 = new byte[4];
                    this.EmptyString10 = new byte[8];
                    this.MoppCodeData = TagBlock.Zero;
                    this.EmptyString11 = new byte[8];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(4);
                    this.Size1 = reader.ReadInt16();
                    this.Count = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(4);
                    this.EmptyString2 = reader.ReadBytes(4);
                    this.EmptyString3 = reader.ReadBytes(32);
                    this.EmptyString4 = reader.ReadBytes(16);
                    this.EmptyString5 = reader.ReadBytes(4);
                    this.Size2 = reader.ReadInt16();
                    this.Count1 = reader.ReadInt16();
                    this.EmptyString6 = reader.ReadBytes(4);
                    this.EmptyString7 = reader.ReadBytes(4);
                    this.EmptyString8 = reader.ReadBytes(4);
                    this.Size3 = reader.ReadInt16();
                    this.Count2 = reader.ReadInt16();
                    this.EmptyString9 = reader.ReadBytes(4);
                    this.EmptyString10 = reader.ReadBytes(8);
                    this.MoppCodeData = reader.ReadInt64();
                    this.EmptyString11 = reader.ReadBytes(8);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class StructureBspLeafBlock : AbideTagBlock
            {
                [FieldAttribute("Cluster*", typeof(Int16))]
                public Int16 Cluster;
                [FieldAttribute("Surface Reference Count*", typeof(Int16))]
                public Int16 SurfaceReferenceCount;
                [FieldAttribute("First Surface Reference Index*", typeof(Int32))]
                public Int32 FirstSurfaceReferenceIndex;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.Cluster = 0;
                    this.SurfaceReferenceCount = 0;
                    this.FirstSurfaceReferenceIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Cluster = reader.ReadInt16();
                    this.SurfaceReferenceCount = reader.ReadInt16();
                    this.FirstSurfaceReferenceIndex = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class StructureBspSurfaceReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("Strip Index*", typeof(Int16))]
                public Int16 StripIndex;
                [FieldAttribute("Lightmap Triangle Index*", typeof(Int16))]
                public Int16 LightmapTriangleIndex;
                [FieldAttribute("BSP Node Index*", typeof(Int32))]
                public Int32 BspNodeIndex;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.StripIndex = 0;
                    this.LightmapTriangleIndex = 0;
                    this.BspNodeIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.StripIndex = reader.ReadInt16();
                    this.LightmapTriangleIndex = reader.ReadInt16();
                    this.BspNodeIndex = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(108, 4)]
            public sealed class StructureInstancedGeometryRenderInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<StructureBspClusterDataBlockNew> renderDataList = new TagBlockList<StructureBspClusterDataBlockNew>(1);
                private TagBlockList<GlobalGeometrySectionStripIndexBlock> indexReorderTableList = new TagBlockList<GlobalGeometrySectionStripIndexBlock>(65535);
                [FieldAttribute("Section Info*", typeof(GlobalGeometrySectionInfoStructBlock))]
                public GlobalGeometrySectionInfoStructBlock SectionInfo;
                [FieldAttribute("Geometry Block Info*", typeof(GlobalGeometryBlockInfoStructBlock))]
                public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
                [FieldAttribute("Render Data*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_cluster_data_block_new", 1, typeof(StructureBspClusterDataBlockNew))]
                public TagBlock RenderData;
                [FieldAttribute("Index Reorder Table*", typeof(TagBlock))]
                [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                public TagBlock IndexReorderTable;
                public TagBlockList<StructureBspClusterDataBlockNew> RenderDataList
                {
                    get
                    {
                        return this.renderDataList;
                    }
                }
                public TagBlockList<GlobalGeometrySectionStripIndexBlock> IndexReorderTableList
                {
                    get
                    {
                        return this.indexReorderTableList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public override void Initialize()
                {
                    this.renderDataList.Clear();
                    this.indexReorderTableList.Clear();
                    this.SectionInfo = new GlobalGeometrySectionInfoStructBlock();
                    this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
                    this.RenderData = TagBlock.Zero;
                    this.IndexReorderTable = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.SectionInfo = reader.ReadDataStructure<GlobalGeometrySectionInfoStructBlock>();
                    this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
                    this.RenderData = reader.ReadInt64();
                    this.renderDataList.Read(reader, this.RenderData);
                    this.IndexReorderTable = reader.ReadInt64();
                    this.indexReorderTableList.Read(reader, this.IndexReorderTable);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(108, 4)]
                public sealed class StructureBspClusterDataBlockNew : AbideTagBlock
                {
                    [FieldAttribute("Section*", typeof(GlobalGeometrySectionStructBlock))]
                    public GlobalGeometrySectionStructBlock Section;
                    public override int Size
                    {
                        get
                        {
                            return 108;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Section = new GlobalGeometrySectionStructBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Section = reader.ReadDataStructure<GlobalGeometrySectionStructBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(108, 4)]
                    public sealed class GlobalGeometrySectionStructBlock : AbideTagBlock
                    {
                        private DataList visibilityMoppCodeList = new DataList(393216);
                        private TagBlockList<GlobalGeometryPartBlockNew> partsList = new TagBlockList<GlobalGeometryPartBlockNew>(255);
                        private TagBlockList<GlobalSubpartsBlock> subpartsList = new TagBlockList<GlobalSubpartsBlock>(32768);
                        private TagBlockList<GlobalVisibilityBoundsBlock> visibilityBoundsList = new TagBlockList<GlobalVisibilityBoundsBlock>(32768);
                        private TagBlockList<GlobalGeometrySectionRawVertexBlock> rawVerticesList = new TagBlockList<GlobalGeometrySectionRawVertexBlock>(32767);
                        private TagBlockList<GlobalGeometrySectionStripIndexBlock> stripIndicesList = new TagBlockList<GlobalGeometrySectionStripIndexBlock>(65535);
                        private TagBlockList<GlobalGeometrySectionVertexBufferBlock> vertexBuffersList = new TagBlockList<GlobalGeometrySectionVertexBufferBlock>(512);
                        [FieldAttribute("Parts*", typeof(TagBlock))]
                        [BlockAttribute("part", 255, typeof(GlobalGeometryPartBlockNew))]
                        public TagBlock Parts;
                        [FieldAttribute("Subparts*", typeof(TagBlock))]
                        [BlockAttribute("subparts", 32768, typeof(GlobalSubpartsBlock))]
                        public TagBlock Subparts;
                        [FieldAttribute("Visibility Bounds*", typeof(TagBlock))]
                        [BlockAttribute("visibility bounds", 32768, typeof(GlobalVisibilityBoundsBlock))]
                        public TagBlock VisibilityBounds;
                        [FieldAttribute("Raw Vertices*", typeof(TagBlock))]
                        [BlockAttribute("vertex", 32767, typeof(GlobalGeometrySectionRawVertexBlock))]
                        public TagBlock RawVertices;
                        [FieldAttribute("Strip Indices*", typeof(TagBlock))]
                        [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                        public TagBlock StripIndices;
                        [FieldAttribute("Visibility mopp Code*", typeof(TagBlock))]
                        [DataAttribute(393216)]
                        public TagBlock VisibilityMoppCode;
                        [FieldAttribute("mopp Reorder Table*", typeof(TagBlock))]
                        [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                        public TagBlock MoppReorderTable;
                        [FieldAttribute("Vertex Buffers*", typeof(TagBlock))]
                        [BlockAttribute("vertex buffer", 512, typeof(GlobalGeometrySectionVertexBufferBlock))]
                        public TagBlock VertexBuffers;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(4)]
                        public Byte[] EmptyString;
                        public DataList VisibilityMoppCodeList
                        {
                            get
                            {
                                return this.visibilityMoppCodeList;
                            }
                        }
                        public TagBlockList<GlobalGeometryPartBlockNew> PartsList
                        {
                            get
                            {
                                return this.partsList;
                            }
                        }
                        public TagBlockList<GlobalSubpartsBlock> SubpartsList
                        {
                            get
                            {
                                return this.subpartsList;
                            }
                        }
                        public TagBlockList<GlobalVisibilityBoundsBlock> VisibilityBoundsList
                        {
                            get
                            {
                                return this.visibilityBoundsList;
                            }
                        }
                        public TagBlockList<GlobalGeometrySectionRawVertexBlock> RawVerticesList
                        {
                            get
                            {
                                return this.rawVerticesList;
                            }
                        }
                        public TagBlockList<GlobalGeometrySectionStripIndexBlock> StripIndicesList
                        {
                            get
                            {
                                return this.stripIndicesList;
                            }
                        }
                        public TagBlockList<GlobalGeometrySectionVertexBufferBlock> VertexBuffersList
                        {
                            get
                            {
                                return this.vertexBuffersList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 108;
                            }
                        }
                        public override void Initialize()
                        {
                            this.visibilityMoppCodeList.Clear();
                            this.partsList.Clear();
                            this.subpartsList.Clear();
                            this.visibilityBoundsList.Clear();
                            this.rawVerticesList.Clear();
                            this.stripIndicesList.Clear();
                            this.vertexBuffersList.Clear();
                            this.Parts = TagBlock.Zero;
                            this.Subparts = TagBlock.Zero;
                            this.VisibilityBounds = TagBlock.Zero;
                            this.RawVertices = TagBlock.Zero;
                            this.StripIndices = TagBlock.Zero;
                            this.VisibilityMoppCode = TagBlock.Zero;
                            this.MoppReorderTable = TagBlock.Zero;
                            this.VertexBuffers = TagBlock.Zero;
                            this.EmptyString = new byte[4];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Parts = reader.ReadInt64();
                            this.partsList.Read(reader, this.Parts);
                            this.Subparts = reader.ReadInt64();
                            this.subpartsList.Read(reader, this.Subparts);
                            this.VisibilityBounds = reader.ReadInt64();
                            this.visibilityBoundsList.Read(reader, this.VisibilityBounds);
                            this.RawVertices = reader.ReadInt64();
                            this.rawVerticesList.Read(reader, this.RawVertices);
                            this.StripIndices = reader.ReadInt64();
                            this.stripIndicesList.Read(reader, this.StripIndices);
                            this.VisibilityMoppCode = reader.ReadInt64();
                            this.MoppReorderTable = reader.ReadInt64();
                            this.visibilityMoppCodeList.Read(reader, this.MoppReorderTable);
                            this.VertexBuffers = reader.ReadInt64();
                            this.vertexBuffersList.Read(reader, this.VertexBuffers);
                            this.EmptyString = reader.ReadBytes(4);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(72, 4)]
                        public sealed class GlobalGeometryPartBlockNew : AbideTagBlock
                        {
                            [FieldAttribute("Type*", typeof(TypeOptions))]
                            [OptionsAttribute(typeof(TypeOptions), false)]
                            public TypeOptions Type;
                            [FieldAttribute("Flags*", typeof(FlagsOptions))]
                            [OptionsAttribute(typeof(FlagsOptions), true)]
                            public FlagsOptions Flags;
                            [FieldAttribute("Material*", typeof(Int16))]
                            public Int16 Material;
                            [FieldAttribute("Strip Start Index*", typeof(Int16))]
                            public Int16 StripStartIndex;
                            [FieldAttribute("Strip Length*", typeof(Int16))]
                            public Int16 StripLength;
                            [FieldAttribute("First Subpart Index*", typeof(Int16))]
                            public Int16 FirstSubpartIndex;
                            [FieldAttribute("Subpart Count*", typeof(Int16))]
                            public Int16 SubpartCount;
                            [FieldAttribute("Max Nodes/Vertex*", typeof(Byte))]
                            public Byte MaxNodesvertex;
                            [FieldAttribute("Contributing Compound Node Count*", typeof(Byte))]
                            public Byte ContributingCompoundNodeCount;
                            [FieldAttribute("Position*", typeof(Vector3))]
                            public Vector3 Position;
                            [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                            [ArrayAttribute(4, typeof(NodeIndicesElement))]
                            public NodeIndicesElement[] NodeIndices;
                            [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                            [ArrayAttribute(3, typeof(NodeWeightsElement))]
                            public NodeWeightsElement[] NodeWeights;
                            [FieldAttribute("lod mipmap magic number*", typeof(Single))]
                            public Single LodMipmapMagicNumber;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(24)]
                            public Byte[] EmptyString;
                            public override int Size
                            {
                                get
                                {
                                    return 72;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Type = ((TypeOptions)(0));
                                this.Flags = ((FlagsOptions)(0));
                                this.Material = 0;
                                this.StripStartIndex = 0;
                                this.StripLength = 0;
                                this.FirstSubpartIndex = 0;
                                this.SubpartCount = 0;
                                this.MaxNodesvertex = 0;
                                this.ContributingCompoundNodeCount = 0;
                                this.Position = Vector3.Zero;
                                this.NodeIndices = new NodeIndicesElement[4];
                                this.NodeWeights = new NodeWeightsElement[3];
                                this.LodMipmapMagicNumber = 0;
                                this.EmptyString = new byte[24];
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Type = ((TypeOptions)(reader.ReadInt16()));
                                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                                this.Material = reader.ReadInt16();
                                this.StripStartIndex = reader.ReadInt16();
                                this.StripLength = reader.ReadInt16();
                                this.FirstSubpartIndex = reader.ReadInt16();
                                this.SubpartCount = reader.ReadInt16();
                                this.MaxNodesvertex = reader.ReadByte();
                                this.ContributingCompoundNodeCount = reader.ReadByte();
                                this.Position = reader.Read<Vector3>();
                                this.LodMipmapMagicNumber = reader.ReadSingle();
                                this.EmptyString = reader.ReadBytes(24);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            public sealed class NodeIndicesElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Index*", typeof(Byte))]
                                public Byte NodeIndex;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeIndex = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeIndex = reader.ReadByte();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public sealed class NodeWeightsElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Weight*", typeof(Single))]
                                public Single NodeWeight;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeWeight = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeWeight = reader.ReadSingle();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public enum TypeOptions : Int16
                            {
                                NotDrawn = 0,
                                OpaqueShadowOnly = 1,
                                OpaqueShadowCasting = 2,
                                OpaqueNonshadowing = 3,
                                Transparent = 4,
                                LightmapOnly = 5,
                            }
                            public enum FlagsOptions : Int16
                            {
                                Decalable = 1,
                                NewPartTypes = 2,
                                DislikesPhotons = 4,
                                OverrideTriangleList = 8,
                                IgnoredByLightmapper = 16,
                            }
                        }
                        [FieldSetAttribute(8, 4)]
                        public sealed class GlobalSubpartsBlock : AbideTagBlock
                        {
                            [FieldAttribute("indices_start_index*", typeof(Int16))]
                            public Int16 IndicesStartIndex;
                            [FieldAttribute("indices_length*", typeof(Int16))]
                            public Int16 IndicesLength;
                            [FieldAttribute("visibility_bounds_index*", typeof(Int16))]
                            public Int16 VisibilityBoundsIndex;
                            [FieldAttribute("Part Index*", typeof(Int16))]
                            public Int16 PartIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 8;
                                }
                            }
                            public override void Initialize()
                            {
                                this.IndicesStartIndex = 0;
                                this.IndicesLength = 0;
                                this.VisibilityBoundsIndex = 0;
                                this.PartIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.IndicesStartIndex = reader.ReadInt16();
                                this.IndicesLength = reader.ReadInt16();
                                this.VisibilityBoundsIndex = reader.ReadInt16();
                                this.PartIndex = reader.ReadInt16();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        [FieldSetAttribute(20, 4)]
                        public sealed class GlobalVisibilityBoundsBlock : AbideTagBlock
                        {
                            [FieldAttribute("Position x*", typeof(Single))]
                            public Single PositionX;
                            [FieldAttribute("Position y*", typeof(Single))]
                            public Single PositionY;
                            [FieldAttribute("Position z*", typeof(Single))]
                            public Single PositionZ;
                            [FieldAttribute("Radius*", typeof(Single))]
                            public Single Radius;
                            [FieldAttribute("Node 0*", typeof(Byte))]
                            public Byte Node0;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(3)]
                            public Byte[] EmptyString;
                            public override int Size
                            {
                                get
                                {
                                    return 20;
                                }
                            }
                            public override void Initialize()
                            {
                                this.PositionX = 0;
                                this.PositionY = 0;
                                this.PositionZ = 0;
                                this.Radius = 0;
                                this.Node0 = 0;
                                this.EmptyString = new byte[3];
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.PositionX = reader.ReadSingle();
                                this.PositionY = reader.ReadSingle();
                                this.PositionZ = reader.ReadSingle();
                                this.Radius = reader.ReadSingle();
                                this.Node0 = reader.ReadByte();
                                this.EmptyString = reader.ReadBytes(3);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        [FieldSetAttribute(196, 4)]
                        public sealed class GlobalGeometrySectionRawVertexBlock : AbideTagBlock
                        {
                            [FieldAttribute("Position*", typeof(Vector3))]
                            public Vector3 Position;
                            [FieldAttribute("Node Indices (OLD)*", typeof(NodeIndicesOldElement[]))]
                            [ArrayAttribute(4, typeof(NodeIndicesOldElement))]
                            public NodeIndicesOldElement[] NodeIndicesOld;
                            [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                            [ArrayAttribute(4, typeof(NodeWeightsElement))]
                            public NodeWeightsElement[] NodeWeights;
                            [FieldAttribute("Node Indices (NEW)*", typeof(NodeIndicesNewElement[]))]
                            [ArrayAttribute(4, typeof(NodeIndicesNewElement))]
                            public NodeIndicesNewElement[] NodeIndicesNew;
                            [FieldAttribute("Use New Node Indices*", typeof(Int32))]
                            public Int32 UseNewNodeIndices;
                            [FieldAttribute("Adjusted Compound Node Index*", typeof(Int32))]
                            public Int32 AdjustedCompoundNodeIndex;
                            [FieldAttribute("texcoord*", typeof(Vector2))]
                            public Vector2 Texcoord;
                            [FieldAttribute("Normal*", typeof(Vector3))]
                            public Vector3 Normal;
                            [FieldAttribute("Binormal*", typeof(Vector3))]
                            public Vector3 Binormal;
                            [FieldAttribute("Tangent*", typeof(Vector3))]
                            public Vector3 Tangent;
                            [FieldAttribute("Anisotropic Binormal*", typeof(Vector3))]
                            public Vector3 AnisotropicBinormal;
                            [FieldAttribute("Secondary texcoord*", typeof(Vector2))]
                            public Vector2 SecondaryTexcoord;
                            [FieldAttribute("Primary Lightmap Color", typeof(ColorRgbF))]
                            public ColorRgbF PrimaryLightmapColor;
                            [FieldAttribute("Primary Lightmap texcoord", typeof(Vector2))]
                            public Vector2 PrimaryLightmapTexcoord;
                            [FieldAttribute("Primary Lightmap Incident Direction", typeof(Vector3))]
                            public Vector3 PrimaryLightmapIncidentDirection;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(12)]
                            public Byte[] EmptyString;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(8)]
                            public Byte[] EmptyString1;
                            [FieldAttribute("", typeof(Byte[]))]
                            [PaddingAttribute(12)]
                            public Byte[] EmptyString2;
                            public override int Size
                            {
                                get
                                {
                                    return 196;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Position = Vector3.Zero;
                                this.NodeIndicesOld = new NodeIndicesOldElement[4];
                                this.NodeWeights = new NodeWeightsElement[4];
                                this.NodeIndicesNew = new NodeIndicesNewElement[4];
                                this.UseNewNodeIndices = 0;
                                this.AdjustedCompoundNodeIndex = 0;
                                this.Texcoord = Vector2.Zero;
                                this.Normal = Vector3.Zero;
                                this.Binormal = Vector3.Zero;
                                this.Tangent = Vector3.Zero;
                                this.AnisotropicBinormal = Vector3.Zero;
                                this.SecondaryTexcoord = Vector2.Zero;
                                this.PrimaryLightmapColor = ColorRgbF.Zero;
                                this.PrimaryLightmapTexcoord = Vector2.Zero;
                                this.PrimaryLightmapIncidentDirection = Vector3.Zero;
                                this.EmptyString = new byte[12];
                                this.EmptyString1 = new byte[8];
                                this.EmptyString2 = new byte[12];
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Position = reader.Read<Vector3>();
                                this.UseNewNodeIndices = reader.ReadInt32();
                                this.AdjustedCompoundNodeIndex = reader.ReadInt32();
                                this.Texcoord = reader.Read<Vector2>();
                                this.Normal = reader.Read<Vector3>();
                                this.Binormal = reader.Read<Vector3>();
                                this.Tangent = reader.Read<Vector3>();
                                this.AnisotropicBinormal = reader.Read<Vector3>();
                                this.SecondaryTexcoord = reader.Read<Vector2>();
                                this.PrimaryLightmapColor = reader.Read<ColorRgbF>();
                                this.PrimaryLightmapTexcoord = reader.Read<Vector2>();
                                this.PrimaryLightmapIncidentDirection = reader.Read<Vector3>();
                                this.EmptyString = reader.ReadBytes(12);
                                this.EmptyString1 = reader.ReadBytes(8);
                                this.EmptyString2 = reader.ReadBytes(12);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            public sealed class NodeIndicesOldElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Index (OLD)*", typeof(Int32))]
                                public Int32 NodeIndexOld;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeIndexOld = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeIndexOld = reader.ReadInt32();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public sealed class NodeWeightsElement : AbideTagBlock
                            {
                                [FieldAttribute("node_weight*", typeof(Single))]
                                public Single NodeWeight;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeWeight = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeWeight = reader.ReadSingle();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                            public sealed class NodeIndicesNewElement : AbideTagBlock
                            {
                                [FieldAttribute("Node Index (NEW)*", typeof(Int32))]
                                public Int32 NodeIndexNew;
                                public override int Size
                                {
                                    get
                                    {
                                        return 0;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.NodeIndexNew = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.NodeIndexNew = reader.ReadInt32();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                        [FieldSetAttribute(2, 4)]
                        public sealed class GlobalGeometrySectionStripIndexBlock : AbideTagBlock
                        {
                            [FieldAttribute("Index*", typeof(Int16))]
                            public Int16 Index;
                            public override int Size
                            {
                                get
                                {
                                    return 2;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Index = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Index = reader.ReadInt16();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        [FieldSetAttribute(32, 4)]
                        public sealed class GlobalGeometrySectionVertexBufferBlock : AbideTagBlock
                        {
                            public override int Size
                            {
                                get
                                {
                                    return 32;
                                }
                            }
                            public override void Initialize()
                            {
                            }
                            public override void Read(BinaryReader reader)
                            {
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
                [FieldSetAttribute(2, 4)]
                public sealed class GlobalGeometrySectionStripIndexBlock : AbideTagBlock
                {
                    [FieldAttribute("Index*", typeof(Int16))]
                    public Int16 Index;
                    public override int Size
                    {
                        get
                        {
                            return 2;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Index = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Index = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(44, 4)]
                public sealed class GlobalGeometrySectionInfoStructBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometryCompressionInfoBlock> emptyStringList = new TagBlockList<GlobalGeometryCompressionInfoBlock>(1);
                    [FieldAttribute("Total Vertex Count*", typeof(Int16))]
                    public Int16 TotalVertexCount;
                    [FieldAttribute("Total Triangle Count*", typeof(Int16))]
                    public Int16 TotalTriangleCount;
                    [FieldAttribute("Total Part Count*", typeof(Int16))]
                    public Int16 TotalPartCount;
                    [FieldAttribute("Shadow-Casting Triangle Count*", typeof(Int16))]
                    public Int16 ShadowCastingTriangleCount;
                    [FieldAttribute("Shadow-Casting Part Count*", typeof(Int16))]
                    public Int16 ShadowCastingPartCount;
                    [FieldAttribute("Opaque Point Count*", typeof(Int16))]
                    public Int16 OpaquePointCount;
                    [FieldAttribute("Opaque Vertex Count*", typeof(Int16))]
                    public Int16 OpaqueVertexCount;
                    [FieldAttribute("Opaque Part Count*", typeof(Int16))]
                    public Int16 OpaquePartCount;
                    [FieldAttribute("Opaque Max Nodes/Vertex*", typeof(Byte))]
                    public Byte OpaqueMaxNodesvertex;
                    [FieldAttribute("Transparent Max Nodes/Vertex*", typeof(Byte))]
                    public Byte TransparentMaxNodesvertex;
                    [FieldAttribute("Shadow-Casting Rigid Triangle Count*", typeof(Int16))]
                    public Int16 ShadowCastingRigidTriangleCount;
                    [FieldAttribute("Geometry Classification*", typeof(GeometryClassificationOptions))]
                    [OptionsAttribute(typeof(GeometryClassificationOptions), false)]
                    public GeometryClassificationOptions GeometryClassification;
                    [FieldAttribute("Geometry Compression Flags*", typeof(GeometryCompressionFlagsOptions))]
                    [OptionsAttribute(typeof(GeometryCompressionFlagsOptions), true)]
                    public GeometryCompressionFlagsOptions GeometryCompressionFlags;
                    [FieldAttribute("EMPTY STRING", typeof(TagBlock))]
                    [BlockAttribute("compression info", 1, typeof(GlobalGeometryCompressionInfoBlock))]
                    public TagBlock EmptyString;
                    [FieldAttribute("Hardware Node Count*", typeof(Byte))]
                    public Byte HardwareNodeCount;
                    [FieldAttribute("Node Map Size*", typeof(Byte))]
                    public Byte NodeMapSize;
                    [FieldAttribute("Software Plane Count*", typeof(Int16))]
                    public Int16 SoftwarePlaneCount;
                    [FieldAttribute("total subpart_cont*", typeof(Int16))]
                    public Int16 TotalSubpartCont;
                    [FieldAttribute("Section Lighting Flags*", typeof(SectionLightingFlagsOptions))]
                    [OptionsAttribute(typeof(SectionLightingFlagsOptions), true)]
                    public SectionLightingFlagsOptions SectionLightingFlags;
                    public TagBlockList<GlobalGeometryCompressionInfoBlock> EmptyStringList
                    {
                        get
                        {
                            return this.emptyStringList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 44;
                        }
                    }
                    public override void Initialize()
                    {
                        this.emptyStringList.Clear();
                        this.TotalVertexCount = 0;
                        this.TotalTriangleCount = 0;
                        this.TotalPartCount = 0;
                        this.ShadowCastingTriangleCount = 0;
                        this.ShadowCastingPartCount = 0;
                        this.OpaquePointCount = 0;
                        this.OpaqueVertexCount = 0;
                        this.OpaquePartCount = 0;
                        this.OpaqueMaxNodesvertex = 0;
                        this.TransparentMaxNodesvertex = 0;
                        this.ShadowCastingRigidTriangleCount = 0;
                        this.GeometryClassification = ((GeometryClassificationOptions)(0));
                        this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(0));
                        this.EmptyString = TagBlock.Zero;
                        this.HardwareNodeCount = 0;
                        this.NodeMapSize = 0;
                        this.SoftwarePlaneCount = 0;
                        this.TotalSubpartCont = 0;
                        this.SectionLightingFlags = ((SectionLightingFlagsOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.TotalVertexCount = reader.ReadInt16();
                        this.TotalTriangleCount = reader.ReadInt16();
                        this.TotalPartCount = reader.ReadInt16();
                        this.ShadowCastingTriangleCount = reader.ReadInt16();
                        this.ShadowCastingPartCount = reader.ReadInt16();
                        this.OpaquePointCount = reader.ReadInt16();
                        this.OpaqueVertexCount = reader.ReadInt16();
                        this.OpaquePartCount = reader.ReadInt16();
                        this.OpaqueMaxNodesvertex = reader.ReadByte();
                        this.TransparentMaxNodesvertex = reader.ReadByte();
                        this.ShadowCastingRigidTriangleCount = reader.ReadInt16();
                        this.GeometryClassification = ((GeometryClassificationOptions)(reader.ReadInt16()));
                        this.GeometryCompressionFlags = ((GeometryCompressionFlagsOptions)(reader.ReadInt16()));
                        this.EmptyString = reader.ReadInt64();
                        this.emptyStringList.Read(reader, this.EmptyString);
                        this.HardwareNodeCount = reader.ReadByte();
                        this.NodeMapSize = reader.ReadByte();
                        this.SoftwarePlaneCount = reader.ReadInt16();
                        this.TotalSubpartCont = reader.ReadInt16();
                        this.SectionLightingFlags = ((SectionLightingFlagsOptions)(reader.ReadInt16()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(56, 4)]
                    public sealed class GlobalGeometryCompressionInfoBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 56;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    public enum GeometryClassificationOptions : Int16
                    {
                        Worldspace = 0,
                        Rigid = 1,
                        RigidBoned = 2,
                        Skinned = 3,
                        UnsupportedReimport = 4,
                    }
                    public enum GeometryCompressionFlagsOptions : Int16
                    {
                        CompressedPosition = 1,
                        CompressedTexcoord = 2,
                        CompressedSecondaryTexcoord = 4,
                    }
                    public enum SectionLightingFlagsOptions : Int16
                    {
                        HasLmTexcoords = 1,
                        HasLmIncRad = 2,
                        HasLmColors = 4,
                        HasLmPrt = 8,
                    }
                }
                [FieldSetAttribute(40, 4)]
                public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                    [FieldAttribute("Block Offset*", typeof(Int32))]
                    public Int32 BlockOffset;
                    [FieldAttribute("Block Size*", typeof(Int32))]
                    public Int32 BlockSize;
                    [FieldAttribute("Section Data Size*", typeof(Int32))]
                    public Int32 SectionDataSize;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resources*", typeof(TagBlock))]
                    [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                    public TagBlock Resources;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                    public Int16 OwnerTagSectionOffset;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString2;
                    public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                    {
                        get
                        {
                            return this.resourcesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 40;
                        }
                    }
                    public override void Initialize()
                    {
                        this.resourcesList.Clear();
                        this.BlockOffset = 0;
                        this.BlockSize = 0;
                        this.SectionDataSize = 0;
                        this.ResourceDataSize = 0;
                        this.Resources = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                        this.OwnerTagSectionOffset = 0;
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BlockOffset = reader.ReadInt32();
                        this.BlockSize = reader.ReadInt32();
                        this.SectionDataSize = reader.ReadInt32();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.Resources = reader.ReadInt64();
                        this.resourcesList.Read(reader, this.Resources);
                        this.EmptyString = reader.ReadBytes(4);
                        this.OwnerTagSectionOffset = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        [FieldAttribute("Primary Locator*", typeof(Int16))]
                        public Int16 PrimaryLocator;
                        [FieldAttribute("Secondary Locator*", typeof(Int16))]
                        public Int16 SecondaryLocator;
                        [FieldAttribute("Resource Data Size*", typeof(Int32))]
                        public Int32 ResourceDataSize;
                        [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                        public Int32 ResourceDataOffset;
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.EmptyString = new byte[3];
                            this.PrimaryLocator = 0;
                            this.SecondaryLocator = 0;
                            this.ResourceDataSize = 0;
                            this.ResourceDataOffset = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadByte()));
                            this.EmptyString = reader.ReadBytes(3);
                            this.PrimaryLocator = reader.ReadInt16();
                            this.SecondaryLocator = reader.ReadInt16();
                            this.ResourceDataSize = reader.ReadInt32();
                            this.ResourceDataOffset = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions : Byte
                        {
                            TagBlock = 0,
                            TagData = 1,
                            VertexBuffer = 2,
                        }
                    }
                }
            }
            [FieldSetAttribute(96, 4)]
            public sealed class GlobalCollisionBspStructBlock : AbideTagBlock
            {
                private TagBlockList<Bsp3dNodesBlock> bsp3dNodesList = new TagBlockList<Bsp3dNodesBlock>(131072);
                private TagBlockList<PlanesBlock> planesList = new TagBlockList<PlanesBlock>(65536);
                private TagBlockList<LeavesBlock> leavesList = new TagBlockList<LeavesBlock>(65536);
                private TagBlockList<Bsp2dReferencesBlock> bsp2dReferencesList = new TagBlockList<Bsp2dReferencesBlock>(131072);
                private TagBlockList<Bsp2dNodesBlock> bsp2dNodesList = new TagBlockList<Bsp2dNodesBlock>(131072);
                private TagBlockList<SurfacesBlock> surfacesList = new TagBlockList<SurfacesBlock>(131072);
                private TagBlockList<EdgesBlock> edgesList = new TagBlockList<EdgesBlock>(262144);
                private TagBlockList<VerticesBlock> verticesList = new TagBlockList<VerticesBlock>(131072);
                [FieldAttribute("BSP 3D Nodes*", typeof(TagBlock))]
                [BlockAttribute("bsp3d_nodes_block", 131072, typeof(Bsp3dNodesBlock))]
                public TagBlock Bsp3dNodes;
                [FieldAttribute("Planes*", typeof(TagBlock))]
                [BlockAttribute("planes_block", 65536, typeof(PlanesBlock))]
                public TagBlock Planes;
                [FieldAttribute("Leaves*", typeof(TagBlock))]
                [BlockAttribute("leaves_block", 65536, typeof(LeavesBlock))]
                public TagBlock Leaves;
                [FieldAttribute("BSP 2D References*", typeof(TagBlock))]
                [BlockAttribute("bsp2d_references_block", 131072, typeof(Bsp2dReferencesBlock))]
                public TagBlock Bsp2dReferences;
                [FieldAttribute("BSP 2D Nodes*", typeof(TagBlock))]
                [BlockAttribute("bsp2d_nodes_block", 131072, typeof(Bsp2dNodesBlock))]
                public TagBlock Bsp2dNodes;
                [FieldAttribute("Surfaces*", typeof(TagBlock))]
                [BlockAttribute("surfaces_block", 131072, typeof(SurfacesBlock))]
                public TagBlock Surfaces;
                [FieldAttribute("Edges*", typeof(TagBlock))]
                [BlockAttribute("edges_block", 262144, typeof(EdgesBlock))]
                public TagBlock Edges;
                [FieldAttribute("Vertices*", typeof(TagBlock))]
                [BlockAttribute("vertices_block", 131072, typeof(VerticesBlock))]
                public TagBlock Vertices;
                public TagBlockList<Bsp3dNodesBlock> Bsp3dNodesList
                {
                    get
                    {
                        return this.bsp3dNodesList;
                    }
                }
                public TagBlockList<PlanesBlock> PlanesList
                {
                    get
                    {
                        return this.planesList;
                    }
                }
                public TagBlockList<LeavesBlock> LeavesList
                {
                    get
                    {
                        return this.leavesList;
                    }
                }
                public TagBlockList<Bsp2dReferencesBlock> Bsp2dReferencesList
                {
                    get
                    {
                        return this.bsp2dReferencesList;
                    }
                }
                public TagBlockList<Bsp2dNodesBlock> Bsp2dNodesList
                {
                    get
                    {
                        return this.bsp2dNodesList;
                    }
                }
                public TagBlockList<SurfacesBlock> SurfacesList
                {
                    get
                    {
                        return this.surfacesList;
                    }
                }
                public TagBlockList<EdgesBlock> EdgesList
                {
                    get
                    {
                        return this.edgesList;
                    }
                }
                public TagBlockList<VerticesBlock> VerticesList
                {
                    get
                    {
                        return this.verticesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 96;
                    }
                }
                public override void Initialize()
                {
                    this.bsp3dNodesList.Clear();
                    this.planesList.Clear();
                    this.leavesList.Clear();
                    this.bsp2dReferencesList.Clear();
                    this.bsp2dNodesList.Clear();
                    this.surfacesList.Clear();
                    this.edgesList.Clear();
                    this.verticesList.Clear();
                    this.Bsp3dNodes = TagBlock.Zero;
                    this.Planes = TagBlock.Zero;
                    this.Leaves = TagBlock.Zero;
                    this.Bsp2dReferences = TagBlock.Zero;
                    this.Bsp2dNodes = TagBlock.Zero;
                    this.Surfaces = TagBlock.Zero;
                    this.Edges = TagBlock.Zero;
                    this.Vertices = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Bsp3dNodes = reader.ReadInt64();
                    this.bsp3dNodesList.Read(reader, this.Bsp3dNodes);
                    this.Planes = reader.ReadInt64();
                    this.planesList.Read(reader, this.Planes);
                    this.Leaves = reader.ReadInt64();
                    this.leavesList.Read(reader, this.Leaves);
                    this.Bsp2dReferences = reader.ReadInt64();
                    this.bsp2dReferencesList.Read(reader, this.Bsp2dReferences);
                    this.Bsp2dNodes = reader.ReadInt64();
                    this.bsp2dNodesList.Read(reader, this.Bsp2dNodes);
                    this.Surfaces = reader.ReadInt64();
                    this.surfacesList.Read(reader, this.Surfaces);
                    this.Edges = reader.ReadInt64();
                    this.edgesList.Read(reader, this.Edges);
                    this.Vertices = reader.ReadInt64();
                    this.verticesList.Read(reader, this.Vertices);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 8)]
                public sealed class Bsp3dNodesBlock : AbideTagBlock
                {
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(8)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.EmptyString = new byte[8];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.EmptyString = reader.ReadBytes(8);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(16, 16)]
                public sealed class PlanesBlock : AbideTagBlock
                {
                    [FieldAttribute("Plane*", typeof(Vector4))]
                    public Vector4 Plane;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Plane = Vector4.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Plane = reader.Read<Vector4>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class LeavesBlock : AbideTagBlock
                {
                    [FieldAttribute("Flags*", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("BSP 2D Reference Count*", typeof(Byte))]
                    public Byte Bsp2dReferenceCount;
                    [FieldAttribute("First BSP 2D Reference*", typeof(Int16))]
                    public Int16 FirstBsp2dReference;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Flags = ((FlagsOptions)(0));
                        this.Bsp2dReferenceCount = 0;
                        this.FirstBsp2dReference = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Flags = ((FlagsOptions)(reader.ReadByte()));
                        this.Bsp2dReferenceCount = reader.ReadByte();
                        this.FirstBsp2dReference = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Byte
                    {
                        ContainsDoubleSidedSurfaces = 1,
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class Bsp2dReferencesBlock : AbideTagBlock
                {
                    [FieldAttribute("Plane*", typeof(Int16))]
                    public Int16 Plane;
                    [FieldAttribute("BSP 2D Node*", typeof(Int16))]
                    public Int16 Bsp2dNode;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Plane = 0;
                        this.Bsp2dNode = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Plane = reader.ReadInt16();
                        this.Bsp2dNode = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(16, 16)]
                public sealed class Bsp2dNodesBlock : AbideTagBlock
                {
                    [FieldAttribute("Plane*", typeof(Vector3))]
                    public Vector3 Plane;
                    [FieldAttribute("Left Child*", typeof(Int16))]
                    public Int16 LeftChild;
                    [FieldAttribute("Right Child*", typeof(Int16))]
                    public Int16 RightChild;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Plane = Vector3.Zero;
                        this.LeftChild = 0;
                        this.RightChild = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Plane = reader.Read<Vector3>();
                        this.LeftChild = reader.ReadInt16();
                        this.RightChild = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(8, 8)]
                public sealed class SurfacesBlock : AbideTagBlock
                {
                    [FieldAttribute("Plane*", typeof(Int16))]
                    public Int16 Plane;
                    [FieldAttribute("First Edge*", typeof(Int16))]
                    public Int16 FirstEdge;
                    [FieldAttribute("Flags*", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("Breakable Surface*", typeof(Byte))]
                    public Byte BreakableSurface;
                    [FieldAttribute("Material*", typeof(Int16))]
                    public Int16 Material;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Plane = 0;
                        this.FirstEdge = 0;
                        this.Flags = ((FlagsOptions)(0));
                        this.BreakableSurface = 0;
                        this.Material = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Plane = reader.ReadInt16();
                        this.FirstEdge = reader.ReadInt16();
                        this.Flags = ((FlagsOptions)(reader.ReadByte()));
                        this.BreakableSurface = reader.ReadByte();
                        this.Material = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Byte
                    {
                        TwoSided = 1,
                        Invisible = 2,
                        Climbable = 4,
                        Breakable = 8,
                        Invalid = 16,
                        Conveyor = 32,
                    }
                }
                [FieldSetAttribute(12, 4)]
                public sealed class EdgesBlock : AbideTagBlock
                {
                    [FieldAttribute("Start Vertex*", typeof(Int16))]
                    public Int16 StartVertex;
                    [FieldAttribute("End Vertex*", typeof(Int16))]
                    public Int16 EndVertex;
                    [FieldAttribute("Forward Edge*", typeof(Int16))]
                    public Int16 ForwardEdge;
                    [FieldAttribute("Reverse Edge*", typeof(Int16))]
                    public Int16 ReverseEdge;
                    [FieldAttribute("Left Surface*", typeof(Int16))]
                    public Int16 LeftSurface;
                    [FieldAttribute("Right Surface*", typeof(Int16))]
                    public Int16 RightSurface;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.StartVertex = 0;
                        this.EndVertex = 0;
                        this.ForwardEdge = 0;
                        this.ReverseEdge = 0;
                        this.LeftSurface = 0;
                        this.RightSurface = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.StartVertex = reader.ReadInt16();
                        this.EndVertex = reader.ReadInt16();
                        this.ForwardEdge = reader.ReadInt16();
                        this.ReverseEdge = reader.ReadInt16();
                        this.LeftSurface = reader.ReadInt16();
                        this.RightSurface = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                [FieldSetAttribute(16, 16)]
                public sealed class VerticesBlock : AbideTagBlock
                {
                    [FieldAttribute("Point*", typeof(Vector3))]
                    public Vector3 Point;
                    [FieldAttribute("First Edge*", typeof(Int16))]
                    public Int16 FirstEdge;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Point = Vector3.Zero;
                        this.FirstEdge = 0;
                        this.EmptyString = new byte[2];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Point = reader.Read<Vector3>();
                        this.FirstEdge = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        [FieldSetAttribute(88, 4)]
        public sealed class StructureBspInstancedGeometryInstancesBlock : AbideTagBlock
        {
            [FieldAttribute("Scale", typeof(Single))]
            public Single Scale;
            [FieldAttribute("Forward", typeof(Vector3))]
            public Vector3 Forward;
            [FieldAttribute("Left", typeof(Vector3))]
            public Vector3 Left;
            [FieldAttribute("Up", typeof(Vector3))]
            public Vector3 Up;
            [FieldAttribute("Position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("Instance Definition*", typeof(Int16))]
            public Int16 InstanceDefinition;
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("Checksum*", typeof(Int32))]
            public Int32 Checksum;
            [FieldAttribute("Name*^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("Pathfinding Policy*", typeof(PathfindingPolicyOptions))]
            [OptionsAttribute(typeof(PathfindingPolicyOptions), false)]
            public PathfindingPolicyOptions PathfindingPolicy;
            [FieldAttribute("Lightmapping Policy*", typeof(LightmappingPolicyOptions))]
            [OptionsAttribute(typeof(LightmappingPolicyOptions), false)]
            public LightmappingPolicyOptions LightmappingPolicy;
            public override int Size
            {
                get
                {
                    return 88;
                }
            }
            public override void Initialize()
            {
                this.Scale = 0;
                this.Forward = Vector3.Zero;
                this.Left = Vector3.Zero;
                this.Up = Vector3.Zero;
                this.Position = Vector3.Zero;
                this.InstanceDefinition = 0;
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = new byte[4];
                this.EmptyString1 = new byte[12];
                this.EmptyString2 = new byte[4];
                this.Checksum = 0;
                this.Name = StringId.Zero;
                this.PathfindingPolicy = ((PathfindingPolicyOptions)(0));
                this.LightmappingPolicy = ((LightmappingPolicyOptions)(0));
            }
            public override void Read(BinaryReader reader)
            {
                this.Scale = reader.ReadSingle();
                this.Forward = reader.Read<Vector3>();
                this.Left = reader.Read<Vector3>();
                this.Up = reader.Read<Vector3>();
                this.Position = reader.Read<Vector3>();
                this.InstanceDefinition = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(4);
                this.EmptyString1 = reader.ReadBytes(12);
                this.EmptyString2 = reader.ReadBytes(4);
                this.Checksum = reader.ReadInt32();
                this.Name = reader.ReadInt32();
                this.PathfindingPolicy = ((PathfindingPolicyOptions)(reader.ReadInt16()));
                this.LightmappingPolicy = ((LightmappingPolicyOptions)(reader.ReadInt16()));
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                NotInLightprobes = 1,
            }
            public enum PathfindingPolicyOptions : Int16
            {
                Cutout = 0,
                Static = 1,
                None = 2,
            }
            public enum LightmappingPolicyOptions : Int16
            {
                PerPixel = 0,
                PerVertex = 1,
            }
        }
        [FieldSetAttribute(28, 4)]
        public sealed class StructureBspSoundClusterBlock : AbideTagBlock
        {
            private TagBlockList<StructureSoundClusterPortalDesignators> enclosingPortalDesignatorsList = new TagBlockList<StructureSoundClusterPortalDesignators>(512);
            private TagBlockList<StructureSoundClusterInteriorClusterIndices> interiorClusterIndicesList = new TagBlockList<StructureSoundClusterInteriorClusterIndices>(512);
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("enclosing portal designators", typeof(TagBlock))]
            [BlockAttribute("structure_sound_cluster_portal_designators", 512, typeof(StructureSoundClusterPortalDesignators))]
            public TagBlock EnclosingPortalDesignators;
            [FieldAttribute("interior cluster indices", typeof(TagBlock))]
            [BlockAttribute("structure_sound_cluster_interior_cluster_indices", 512, typeof(StructureSoundClusterInteriorClusterIndices))]
            public TagBlock InteriorClusterIndices;
            public TagBlockList<StructureSoundClusterPortalDesignators> EnclosingPortalDesignatorsList
            {
                get
                {
                    return this.enclosingPortalDesignatorsList;
                }
            }
            public TagBlockList<StructureSoundClusterInteriorClusterIndices> InteriorClusterIndicesList
            {
                get
                {
                    return this.interiorClusterIndicesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 28;
                }
            }
            public override void Initialize()
            {
                this.enclosingPortalDesignatorsList.Clear();
                this.interiorClusterIndicesList.Clear();
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EnclosingPortalDesignators = TagBlock.Zero;
                this.InteriorClusterIndices = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EnclosingPortalDesignators = reader.ReadInt64();
                this.enclosingPortalDesignatorsList.Read(reader, this.EnclosingPortalDesignators);
                this.InteriorClusterIndices = reader.ReadInt64();
                this.interiorClusterIndicesList.Read(reader, this.InteriorClusterIndices);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(2, 4)]
            public sealed class StructureSoundClusterPortalDesignators : AbideTagBlock
            {
                [FieldAttribute("portal designator*", typeof(Int16))]
                public Int16 PortalDesignator;
                public override int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public override void Initialize()
                {
                    this.PortalDesignator = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PortalDesignator = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(2, 4)]
            public sealed class StructureSoundClusterInteriorClusterIndices : AbideTagBlock
            {
                [FieldAttribute("interior cluster index*", typeof(Int16))]
                public Int16 InteriorClusterIndex;
                public override int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public override void Initialize()
                {
                    this.InteriorClusterIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.InteriorClusterIndex = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class TransparentPlanesBlock : AbideTagBlock
        {
            [FieldAttribute("Section Index", typeof(Int16))]
            public Int16 SectionIndex;
            [FieldAttribute("Part Index", typeof(Int16))]
            public Int16 PartIndex;
            [FieldAttribute("plane", typeof(Vector4))]
            public Vector4 Plane;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.SectionIndex = 0;
                this.PartIndex = 0;
                this.Plane = Vector4.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.SectionIndex = reader.ReadInt16();
                this.PartIndex = reader.ReadInt16();
                this.Plane = reader.Read<Vector4>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(100, 4)]
        public sealed class StructureBspDebugInfoBlock : AbideTagBlock
        {
            private TagBlockList<StructureBspClusterDebugInfoBlock> clustersList = new TagBlockList<StructureBspClusterDebugInfoBlock>(512);
            private TagBlockList<StructureBspFogPlaneDebugInfoBlock> fogPlanesList = new TagBlockList<StructureBspFogPlaneDebugInfoBlock>(127);
            private TagBlockList<StructureBspFogZoneDebugInfoBlock> fogZonesList = new TagBlockList<StructureBspFogZoneDebugInfoBlock>(127);
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(64)]
            public Byte[] EmptyString;
            [FieldAttribute("Clusters*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_cluster_debug_info_block", 512, typeof(StructureBspClusterDebugInfoBlock))]
            public TagBlock Clusters;
            [FieldAttribute("Fog Planes*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_fog_plane_debug_info_block", 127, typeof(StructureBspFogPlaneDebugInfoBlock))]
            public TagBlock FogPlanes;
            [FieldAttribute("Fog Zones*", typeof(TagBlock))]
            [BlockAttribute("structure_bsp_fog_zone_debug_info_block", 127, typeof(StructureBspFogZoneDebugInfoBlock))]
            public TagBlock FogZones;
            public TagBlockList<StructureBspClusterDebugInfoBlock> ClustersList
            {
                get
                {
                    return this.clustersList;
                }
            }
            public TagBlockList<StructureBspFogPlaneDebugInfoBlock> FogPlanesList
            {
                get
                {
                    return this.fogPlanesList;
                }
            }
            public TagBlockList<StructureBspFogZoneDebugInfoBlock> FogZonesList
            {
                get
                {
                    return this.fogZonesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 100;
                }
            }
            public override void Initialize()
            {
                this.clustersList.Clear();
                this.fogPlanesList.Clear();
                this.fogZonesList.Clear();
                this.EmptyString = new byte[64];
                this.Clusters = TagBlock.Zero;
                this.FogPlanes = TagBlock.Zero;
                this.FogZones = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(64);
                this.Clusters = reader.ReadInt64();
                this.clustersList.Read(reader, this.Clusters);
                this.FogPlanes = reader.ReadInt64();
                this.fogPlanesList.Read(reader, this.FogPlanes);
                this.FogZones = reader.ReadInt64();
                this.fogZonesList.Read(reader, this.FogZones);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(92, 4)]
            public sealed class StructureBspClusterDebugInfoBlock : AbideTagBlock
            {
                private TagBlockList<StructureBspDebugInfoRenderLineBlock> linesList = new TagBlockList<StructureBspDebugInfoRenderLineBlock>(32767);
                private TagBlockList<StructureBspDebugInfoIndicesBlock> fogPlaneIndicesList = new TagBlockList<StructureBspDebugInfoIndicesBlock>(32767);
                [FieldAttribute("Errors*", typeof(ErrorsOptions))]
                [OptionsAttribute(typeof(ErrorsOptions), true)]
                public ErrorsOptions Errors;
                [FieldAttribute("Warnings*", typeof(WarningsOptions))]
                [OptionsAttribute(typeof(WarningsOptions), true)]
                public WarningsOptions Warnings;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(28)]
                public Byte[] EmptyString;
                [FieldAttribute("Lines*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_render_line_block", 32767, typeof(StructureBspDebugInfoRenderLineBlock))]
                public TagBlock Lines;
                [FieldAttribute("Fog Plane Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock FogPlaneIndices;
                [FieldAttribute("Visible Fog Plane Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock VisibleFogPlaneIndices;
                [FieldAttribute("Vis. Fog Omission Cluster Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock VisFogOmissionClusterIndices;
                [FieldAttribute("Containing Fog Zone Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock ContainingFogZoneIndices;
                public TagBlockList<StructureBspDebugInfoRenderLineBlock> LinesList
                {
                    get
                    {
                        return this.linesList;
                    }
                }
                public TagBlockList<StructureBspDebugInfoIndicesBlock> FogPlaneIndicesList
                {
                    get
                    {
                        return this.fogPlaneIndicesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 92;
                    }
                }
                public override void Initialize()
                {
                    this.linesList.Clear();
                    this.fogPlaneIndicesList.Clear();
                    this.Errors = ((ErrorsOptions)(0));
                    this.Warnings = ((WarningsOptions)(0));
                    this.EmptyString = new byte[28];
                    this.Lines = TagBlock.Zero;
                    this.FogPlaneIndices = TagBlock.Zero;
                    this.VisibleFogPlaneIndices = TagBlock.Zero;
                    this.VisFogOmissionClusterIndices = TagBlock.Zero;
                    this.ContainingFogZoneIndices = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Errors = ((ErrorsOptions)(reader.ReadInt16()));
                    this.Warnings = ((WarningsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(28);
                    this.Lines = reader.ReadInt64();
                    this.linesList.Read(reader, this.Lines);
                    this.FogPlaneIndices = reader.ReadInt64();
                    this.fogPlaneIndicesList.Read(reader, this.FogPlaneIndices);
                    this.VisibleFogPlaneIndices = reader.ReadInt64();
                    this.fogPlaneIndicesList.Read(reader, this.VisibleFogPlaneIndices);
                    this.VisFogOmissionClusterIndices = reader.ReadInt64();
                    this.fogPlaneIndicesList.Read(reader, this.VisFogOmissionClusterIndices);
                    this.ContainingFogZoneIndices = reader.ReadInt64();
                    this.fogPlaneIndicesList.Read(reader, this.ContainingFogZoneIndices);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(32, 4)]
                public sealed class StructureBspDebugInfoRenderLineBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Code*", typeof(Int16))]
                    public Int16 Code;
                    [FieldAttribute("Pad Thai*", typeof(Int16))]
                    public Int16 PadThai;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Point 0*", typeof(Vector3))]
                    public Vector3 Point0;
                    [FieldAttribute("Point 1*", typeof(Vector3))]
                    public Vector3 Point1;
                    public override int Size
                    {
                        get
                        {
                            return 32;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.Code = 0;
                        this.PadThai = 0;
                        this.EmptyString = new byte[2];
                        this.Point0 = Vector3.Zero;
                        this.Point1 = Vector3.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadInt16()));
                        this.Code = reader.ReadInt16();
                        this.PadThai = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Point0 = reader.Read<Vector3>();
                        this.Point1 = reader.Read<Vector3>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Int16
                    {
                        FogPlaneBoundaryEdge = 0,
                        FogPlaneInternalEdge = 1,
                        FogZoneFloodfill = 2,
                        FogZoneClusterCentroid = 3,
                        FogZoneClusterGeometry = 4,
                        FogZonePortalCentroid = 5,
                        FogZonePortalGeometry = 6,
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class StructureBspDebugInfoIndicesBlock : AbideTagBlock
                {
                    [FieldAttribute("Index*", typeof(Int32))]
                    public Int32 Index;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Index = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Index = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum ErrorsOptions : Int16
                {
                    MultipleFogPlanes = 1,
                    FogZoneCollision = 2,
                    FogZoneImmersion = 4,
                }
                public enum WarningsOptions : Int16
                {
                    MultipleVisibleFogPlanes = 1,
                    VisibleFogClusterOmission = 2,
                    FogPlaneMissedRenderBsp = 4,
                }
            }
            [FieldSetAttribute(68, 4)]
            public sealed class StructureBspFogPlaneDebugInfoBlock : AbideTagBlock
            {
                private TagBlockList<StructureBspDebugInfoRenderLineBlock> linesList = new TagBlockList<StructureBspDebugInfoRenderLineBlock>(32767);
                private TagBlockList<StructureBspDebugInfoIndicesBlock> intersectedClusterIndicesList = new TagBlockList<StructureBspDebugInfoIndicesBlock>(32767);
                [FieldAttribute("Fog Zone Index*", typeof(Int32))]
                public Int32 FogZoneIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(24)]
                public Byte[] EmptyString;
                [FieldAttribute("Connected Plane Designator*", typeof(Int32))]
                public Int32 ConnectedPlaneDesignator;
                [FieldAttribute("Lines*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_render_line_block", 32767, typeof(StructureBspDebugInfoRenderLineBlock))]
                public TagBlock Lines;
                [FieldAttribute("Intersected Cluster Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock IntersectedClusterIndices;
                [FieldAttribute("Inf. Extent Cluster Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock InfExtentClusterIndices;
                public TagBlockList<StructureBspDebugInfoRenderLineBlock> LinesList
                {
                    get
                    {
                        return this.linesList;
                    }
                }
                public TagBlockList<StructureBspDebugInfoIndicesBlock> IntersectedClusterIndicesList
                {
                    get
                    {
                        return this.intersectedClusterIndicesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 68;
                    }
                }
                public override void Initialize()
                {
                    this.linesList.Clear();
                    this.intersectedClusterIndicesList.Clear();
                    this.FogZoneIndex = 0;
                    this.EmptyString = new byte[24];
                    this.ConnectedPlaneDesignator = 0;
                    this.Lines = TagBlock.Zero;
                    this.IntersectedClusterIndices = TagBlock.Zero;
                    this.InfExtentClusterIndices = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.FogZoneIndex = reader.ReadInt32();
                    this.EmptyString = reader.ReadBytes(24);
                    this.ConnectedPlaneDesignator = reader.ReadInt32();
                    this.Lines = reader.ReadInt64();
                    this.linesList.Read(reader, this.Lines);
                    this.IntersectedClusterIndices = reader.ReadInt64();
                    this.intersectedClusterIndicesList.Read(reader, this.IntersectedClusterIndices);
                    this.InfExtentClusterIndices = reader.ReadInt64();
                    this.intersectedClusterIndicesList.Read(reader, this.InfExtentClusterIndices);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(32, 4)]
                public sealed class StructureBspDebugInfoRenderLineBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Code*", typeof(Int16))]
                    public Int16 Code;
                    [FieldAttribute("Pad Thai*", typeof(Int16))]
                    public Int16 PadThai;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Point 0*", typeof(Vector3))]
                    public Vector3 Point0;
                    [FieldAttribute("Point 1*", typeof(Vector3))]
                    public Vector3 Point1;
                    public override int Size
                    {
                        get
                        {
                            return 32;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.Code = 0;
                        this.PadThai = 0;
                        this.EmptyString = new byte[2];
                        this.Point0 = Vector3.Zero;
                        this.Point1 = Vector3.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadInt16()));
                        this.Code = reader.ReadInt16();
                        this.PadThai = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Point0 = reader.Read<Vector3>();
                        this.Point1 = reader.Read<Vector3>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Int16
                    {
                        FogPlaneBoundaryEdge = 0,
                        FogPlaneInternalEdge = 1,
                        FogZoneFloodfill = 2,
                        FogZoneClusterCentroid = 3,
                        FogZoneClusterGeometry = 4,
                        FogZonePortalCentroid = 5,
                        FogZonePortalGeometry = 6,
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class StructureBspDebugInfoIndicesBlock : AbideTagBlock
                {
                    [FieldAttribute("Index*", typeof(Int32))]
                    public Int32 Index;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Index = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Index = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(80, 4)]
            public sealed class StructureBspFogZoneDebugInfoBlock : AbideTagBlock
            {
                private TagBlockList<StructureBspDebugInfoRenderLineBlock> linesList = new TagBlockList<StructureBspDebugInfoRenderLineBlock>(32767);
                private TagBlockList<StructureBspDebugInfoIndicesBlock> immersedClusterIndicesList = new TagBlockList<StructureBspDebugInfoIndicesBlock>(32767);
                [FieldAttribute("Media Index:Scenario Fog Plane*", typeof(Int32))]
                public Int32 MediaIndex;
                [FieldAttribute("Base Fog Plane Index*", typeof(Int32))]
                public Int32 BaseFogPlaneIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(24)]
                public Byte[] EmptyString;
                [FieldAttribute("Lines*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_render_line_block", 32767, typeof(StructureBspDebugInfoRenderLineBlock))]
                public TagBlock Lines;
                [FieldAttribute("Immersed Cluster Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock ImmersedClusterIndices;
                [FieldAttribute("Bounding Fog Plane Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock BoundingFogPlaneIndices;
                [FieldAttribute("Collision Fog Plane Indices*", typeof(TagBlock))]
                [BlockAttribute("structure_bsp_debug_info_indices_block", 32767, typeof(StructureBspDebugInfoIndicesBlock))]
                public TagBlock CollisionFogPlaneIndices;
                public TagBlockList<StructureBspDebugInfoRenderLineBlock> LinesList
                {
                    get
                    {
                        return this.linesList;
                    }
                }
                public TagBlockList<StructureBspDebugInfoIndicesBlock> ImmersedClusterIndicesList
                {
                    get
                    {
                        return this.immersedClusterIndicesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 80;
                    }
                }
                public override void Initialize()
                {
                    this.linesList.Clear();
                    this.immersedClusterIndicesList.Clear();
                    this.MediaIndex = 0;
                    this.BaseFogPlaneIndex = 0;
                    this.EmptyString = new byte[24];
                    this.Lines = TagBlock.Zero;
                    this.ImmersedClusterIndices = TagBlock.Zero;
                    this.BoundingFogPlaneIndices = TagBlock.Zero;
                    this.CollisionFogPlaneIndices = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.MediaIndex = reader.ReadInt32();
                    this.BaseFogPlaneIndex = reader.ReadInt32();
                    this.EmptyString = reader.ReadBytes(24);
                    this.Lines = reader.ReadInt64();
                    this.linesList.Read(reader, this.Lines);
                    this.ImmersedClusterIndices = reader.ReadInt64();
                    this.immersedClusterIndicesList.Read(reader, this.ImmersedClusterIndices);
                    this.BoundingFogPlaneIndices = reader.ReadInt64();
                    this.immersedClusterIndicesList.Read(reader, this.BoundingFogPlaneIndices);
                    this.CollisionFogPlaneIndices = reader.ReadInt64();
                    this.immersedClusterIndicesList.Read(reader, this.CollisionFogPlaneIndices);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(32, 4)]
                public sealed class StructureBspDebugInfoRenderLineBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Code*", typeof(Int16))]
                    public Int16 Code;
                    [FieldAttribute("Pad Thai*", typeof(Int16))]
                    public Int16 PadThai;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Point 0*", typeof(Vector3))]
                    public Vector3 Point0;
                    [FieldAttribute("Point 1*", typeof(Vector3))]
                    public Vector3 Point1;
                    public override int Size
                    {
                        get
                        {
                            return 32;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.Code = 0;
                        this.PadThai = 0;
                        this.EmptyString = new byte[2];
                        this.Point0 = Vector3.Zero;
                        this.Point1 = Vector3.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadInt16()));
                        this.Code = reader.ReadInt16();
                        this.PadThai = reader.ReadInt16();
                        this.EmptyString = reader.ReadBytes(2);
                        this.Point0 = reader.Read<Vector3>();
                        this.Point1 = reader.Read<Vector3>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Int16
                    {
                        FogPlaneBoundaryEdge = 0,
                        FogPlaneInternalEdge = 1,
                        FogZoneFloodfill = 2,
                        FogZoneClusterCentroid = 3,
                        FogZoneClusterGeometry = 4,
                        FogZonePortalCentroid = 5,
                        FogZonePortalGeometry = 6,
                    }
                }
                [FieldSetAttribute(4, 4)]
                public sealed class StructureBspDebugInfoIndicesBlock : AbideTagBlock
                {
                    [FieldAttribute("Index*", typeof(Int32))]
                    public Int32 Index;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Index = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Index = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
        }
        [FieldSetAttribute(188, 4)]
        public sealed class GlobalWaterDefinitionsBlock : AbideTagBlock
        {
            private TagBlockList<WaterGeometrySectionBlock> sectionList = new TagBlockList<WaterGeometrySectionBlock>(1);
            [FieldAttribute("Shader", typeof(TagReference))]
            public TagReference Shader;
            [FieldAttribute("Section", typeof(TagBlock))]
            [BlockAttribute("water_geometry_section_block", 1, typeof(WaterGeometrySectionBlock))]
            public TagBlock Section;
            [FieldAttribute("Geometry Block Info*", typeof(GlobalGeometryBlockInfoStructBlock))]
            public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
            [FieldAttribute("Sun Spot Color", typeof(ColorRgbF))]
            public ColorRgbF SunSpotColor;
            [FieldAttribute("Reflection Tint", typeof(ColorRgbF))]
            public ColorRgbF ReflectionTint;
            [FieldAttribute("Refraction Tint", typeof(ColorRgbF))]
            public ColorRgbF RefractionTint;
            [FieldAttribute("Horizon Color", typeof(ColorRgbF))]
            public ColorRgbF HorizonColor;
            [FieldAttribute("Sun Specular Power", typeof(Single))]
            public Single SunSpecularPower;
            [FieldAttribute("Reflection Bump Scale", typeof(Single))]
            public Single ReflectionBumpScale;
            [FieldAttribute("Refraction Bump Scale", typeof(Single))]
            public Single RefractionBumpScale;
            [FieldAttribute("Fresnel Scale", typeof(Single))]
            public Single FresnelScale;
            [FieldAttribute("Sun Dir Heading", typeof(Single))]
            public Single SunDirHeading;
            [FieldAttribute("Sun Dir Pitch", typeof(Single))]
            public Single SunDirPitch;
            [FieldAttribute("FOV", typeof(Single))]
            public Single Fov;
            [FieldAttribute("Aspect", typeof(Single))]
            public Single Aspect;
            [FieldAttribute("Height", typeof(Single))]
            public Single Height;
            [FieldAttribute("Farz", typeof(Single))]
            public Single Farz;
            [FieldAttribute("rotate_offset", typeof(Single))]
            public Single RotateOffset;
            [FieldAttribute("Center", typeof(Vector2))]
            public Vector2 Center;
            [FieldAttribute("Extents", typeof(Vector2))]
            public Vector2 Extents;
            [FieldAttribute("Fog Near", typeof(Single))]
            public Single FogNear;
            [FieldAttribute("Fog Far", typeof(Single))]
            public Single FogFar;
            [FieldAttribute("dynamic_height_bias", typeof(Single))]
            public Single DynamicHeightBias;
            public TagBlockList<WaterGeometrySectionBlock> SectionList
            {
                get
                {
                    return this.sectionList;
                }
            }
            public override int Size
            {
                get
                {
                    return 188;
                }
            }
            public override void Initialize()
            {
                this.sectionList.Clear();
                this.Shader = TagReference.Null;
                this.Section = TagBlock.Zero;
                this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
                this.SunSpotColor = ColorRgbF.Zero;
                this.ReflectionTint = ColorRgbF.Zero;
                this.RefractionTint = ColorRgbF.Zero;
                this.HorizonColor = ColorRgbF.Zero;
                this.SunSpecularPower = 0;
                this.ReflectionBumpScale = 0;
                this.RefractionBumpScale = 0;
                this.FresnelScale = 0;
                this.SunDirHeading = 0;
                this.SunDirPitch = 0;
                this.Fov = 0;
                this.Aspect = 0;
                this.Height = 0;
                this.Farz = 0;
                this.RotateOffset = 0;
                this.Center = Vector2.Zero;
                this.Extents = Vector2.Zero;
                this.FogNear = 0;
                this.FogFar = 0;
                this.DynamicHeightBias = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Shader = reader.Read<TagReference>();
                this.Section = reader.ReadInt64();
                this.sectionList.Read(reader, this.Section);
                this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
                this.SunSpotColor = reader.Read<ColorRgbF>();
                this.ReflectionTint = reader.Read<ColorRgbF>();
                this.RefractionTint = reader.Read<ColorRgbF>();
                this.HorizonColor = reader.Read<ColorRgbF>();
                this.SunSpecularPower = reader.ReadSingle();
                this.ReflectionBumpScale = reader.ReadSingle();
                this.RefractionBumpScale = reader.ReadSingle();
                this.FresnelScale = reader.ReadSingle();
                this.SunDirHeading = reader.ReadSingle();
                this.SunDirPitch = reader.ReadSingle();
                this.Fov = reader.ReadSingle();
                this.Aspect = reader.ReadSingle();
                this.Height = reader.ReadSingle();
                this.Farz = reader.ReadSingle();
                this.RotateOffset = reader.ReadSingle();
                this.Center = reader.Read<Vector2>();
                this.Extents = reader.Read<Vector2>();
                this.FogNear = reader.ReadSingle();
                this.FogFar = reader.ReadSingle();
                this.DynamicHeightBias = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(108, 4)]
            public sealed class WaterGeometrySectionBlock : AbideTagBlock
            {
                [FieldAttribute("Section*", typeof(GlobalGeometrySectionStructBlock))]
                public GlobalGeometrySectionStructBlock Section;
                public override int Size
                {
                    get
                    {
                        return 108;
                    }
                }
                public override void Initialize()
                {
                    this.Section = new GlobalGeometrySectionStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Section = reader.ReadDataStructure<GlobalGeometrySectionStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(108, 4)]
                public sealed class GlobalGeometrySectionStructBlock : AbideTagBlock
                {
                    private DataList visibilityMoppCodeList = new DataList(393216);
                    private TagBlockList<GlobalGeometryPartBlockNew> partsList = new TagBlockList<GlobalGeometryPartBlockNew>(255);
                    private TagBlockList<GlobalSubpartsBlock> subpartsList = new TagBlockList<GlobalSubpartsBlock>(32768);
                    private TagBlockList<GlobalVisibilityBoundsBlock> visibilityBoundsList = new TagBlockList<GlobalVisibilityBoundsBlock>(32768);
                    private TagBlockList<GlobalGeometrySectionRawVertexBlock> rawVerticesList = new TagBlockList<GlobalGeometrySectionRawVertexBlock>(32767);
                    private TagBlockList<GlobalGeometrySectionStripIndexBlock> stripIndicesList = new TagBlockList<GlobalGeometrySectionStripIndexBlock>(65535);
                    private TagBlockList<GlobalGeometrySectionVertexBufferBlock> vertexBuffersList = new TagBlockList<GlobalGeometrySectionVertexBufferBlock>(512);
                    [FieldAttribute("Parts*", typeof(TagBlock))]
                    [BlockAttribute("part", 255, typeof(GlobalGeometryPartBlockNew))]
                    public TagBlock Parts;
                    [FieldAttribute("Subparts*", typeof(TagBlock))]
                    [BlockAttribute("subparts", 32768, typeof(GlobalSubpartsBlock))]
                    public TagBlock Subparts;
                    [FieldAttribute("Visibility Bounds*", typeof(TagBlock))]
                    [BlockAttribute("visibility bounds", 32768, typeof(GlobalVisibilityBoundsBlock))]
                    public TagBlock VisibilityBounds;
                    [FieldAttribute("Raw Vertices*", typeof(TagBlock))]
                    [BlockAttribute("vertex", 32767, typeof(GlobalGeometrySectionRawVertexBlock))]
                    public TagBlock RawVertices;
                    [FieldAttribute("Strip Indices*", typeof(TagBlock))]
                    [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                    public TagBlock StripIndices;
                    [FieldAttribute("Visibility mopp Code*", typeof(TagBlock))]
                    [DataAttribute(393216)]
                    public TagBlock VisibilityMoppCode;
                    [FieldAttribute("mopp Reorder Table*", typeof(TagBlock))]
                    [BlockAttribute("index", 65535, typeof(GlobalGeometrySectionStripIndexBlock))]
                    public TagBlock MoppReorderTable;
                    [FieldAttribute("Vertex Buffers*", typeof(TagBlock))]
                    [BlockAttribute("vertex buffer", 512, typeof(GlobalGeometrySectionVertexBufferBlock))]
                    public TagBlock VertexBuffers;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    public DataList VisibilityMoppCodeList
                    {
                        get
                        {
                            return this.visibilityMoppCodeList;
                        }
                    }
                    public TagBlockList<GlobalGeometryPartBlockNew> PartsList
                    {
                        get
                        {
                            return this.partsList;
                        }
                    }
                    public TagBlockList<GlobalSubpartsBlock> SubpartsList
                    {
                        get
                        {
                            return this.subpartsList;
                        }
                    }
                    public TagBlockList<GlobalVisibilityBoundsBlock> VisibilityBoundsList
                    {
                        get
                        {
                            return this.visibilityBoundsList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionRawVertexBlock> RawVerticesList
                    {
                        get
                        {
                            return this.rawVerticesList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionStripIndexBlock> StripIndicesList
                    {
                        get
                        {
                            return this.stripIndicesList;
                        }
                    }
                    public TagBlockList<GlobalGeometrySectionVertexBufferBlock> VertexBuffersList
                    {
                        get
                        {
                            return this.vertexBuffersList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 108;
                        }
                    }
                    public override void Initialize()
                    {
                        this.visibilityMoppCodeList.Clear();
                        this.partsList.Clear();
                        this.subpartsList.Clear();
                        this.visibilityBoundsList.Clear();
                        this.rawVerticesList.Clear();
                        this.stripIndicesList.Clear();
                        this.vertexBuffersList.Clear();
                        this.Parts = TagBlock.Zero;
                        this.Subparts = TagBlock.Zero;
                        this.VisibilityBounds = TagBlock.Zero;
                        this.RawVertices = TagBlock.Zero;
                        this.StripIndices = TagBlock.Zero;
                        this.VisibilityMoppCode = TagBlock.Zero;
                        this.MoppReorderTable = TagBlock.Zero;
                        this.VertexBuffers = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Parts = reader.ReadInt64();
                        this.partsList.Read(reader, this.Parts);
                        this.Subparts = reader.ReadInt64();
                        this.subpartsList.Read(reader, this.Subparts);
                        this.VisibilityBounds = reader.ReadInt64();
                        this.visibilityBoundsList.Read(reader, this.VisibilityBounds);
                        this.RawVertices = reader.ReadInt64();
                        this.rawVerticesList.Read(reader, this.RawVertices);
                        this.StripIndices = reader.ReadInt64();
                        this.stripIndicesList.Read(reader, this.StripIndices);
                        this.VisibilityMoppCode = reader.ReadInt64();
                        this.MoppReorderTable = reader.ReadInt64();
                        this.visibilityMoppCodeList.Read(reader, this.MoppReorderTable);
                        this.VertexBuffers = reader.ReadInt64();
                        this.vertexBuffersList.Read(reader, this.VertexBuffers);
                        this.EmptyString = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(72, 4)]
                    public sealed class GlobalGeometryPartBlockNew : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("Flags*", typeof(FlagsOptions))]
                        [OptionsAttribute(typeof(FlagsOptions), true)]
                        public FlagsOptions Flags;
                        [FieldAttribute("Material*", typeof(Int16))]
                        public Int16 Material;
                        [FieldAttribute("Strip Start Index*", typeof(Int16))]
                        public Int16 StripStartIndex;
                        [FieldAttribute("Strip Length*", typeof(Int16))]
                        public Int16 StripLength;
                        [FieldAttribute("First Subpart Index*", typeof(Int16))]
                        public Int16 FirstSubpartIndex;
                        [FieldAttribute("Subpart Count*", typeof(Int16))]
                        public Int16 SubpartCount;
                        [FieldAttribute("Max Nodes/Vertex*", typeof(Byte))]
                        public Byte MaxNodesvertex;
                        [FieldAttribute("Contributing Compound Node Count*", typeof(Byte))]
                        public Byte ContributingCompoundNodeCount;
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices*", typeof(NodeIndicesElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesElement))]
                        public NodeIndicesElement[] NodeIndices;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(3, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        [FieldAttribute("lod mipmap magic number*", typeof(Single))]
                        public Single LodMipmapMagicNumber;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(24)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 72;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.Flags = ((FlagsOptions)(0));
                            this.Material = 0;
                            this.StripStartIndex = 0;
                            this.StripLength = 0;
                            this.FirstSubpartIndex = 0;
                            this.SubpartCount = 0;
                            this.MaxNodesvertex = 0;
                            this.ContributingCompoundNodeCount = 0;
                            this.Position = Vector3.Zero;
                            this.NodeIndices = new NodeIndicesElement[4];
                            this.NodeWeights = new NodeWeightsElement[3];
                            this.LodMipmapMagicNumber = 0;
                            this.EmptyString = new byte[24];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadInt16()));
                            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                            this.Material = reader.ReadInt16();
                            this.StripStartIndex = reader.ReadInt16();
                            this.StripLength = reader.ReadInt16();
                            this.FirstSubpartIndex = reader.ReadInt16();
                            this.SubpartCount = reader.ReadInt16();
                            this.MaxNodesvertex = reader.ReadByte();
                            this.ContributingCompoundNodeCount = reader.ReadByte();
                            this.Position = reader.Read<Vector3>();
                            this.LodMipmapMagicNumber = reader.ReadSingle();
                            this.EmptyString = reader.ReadBytes(24);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index*", typeof(Byte))]
                            public Byte NodeIndex;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndex = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndex = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public enum TypeOptions : Int16
                        {
                            NotDrawn = 0,
                            OpaqueShadowOnly = 1,
                            OpaqueShadowCasting = 2,
                            OpaqueNonshadowing = 3,
                            Transparent = 4,
                            LightmapOnly = 5,
                        }
                        public enum FlagsOptions : Int16
                        {
                            Decalable = 1,
                            NewPartTypes = 2,
                            DislikesPhotons = 4,
                            OverrideTriangleList = 8,
                            IgnoredByLightmapper = 16,
                        }
                    }
                    [FieldSetAttribute(8, 4)]
                    public sealed class GlobalSubpartsBlock : AbideTagBlock
                    {
                        [FieldAttribute("indices_start_index*", typeof(Int16))]
                        public Int16 IndicesStartIndex;
                        [FieldAttribute("indices_length*", typeof(Int16))]
                        public Int16 IndicesLength;
                        [FieldAttribute("visibility_bounds_index*", typeof(Int16))]
                        public Int16 VisibilityBoundsIndex;
                        [FieldAttribute("Part Index*", typeof(Int16))]
                        public Int16 PartIndex;
                        public override int Size
                        {
                            get
                            {
                                return 8;
                            }
                        }
                        public override void Initialize()
                        {
                            this.IndicesStartIndex = 0;
                            this.IndicesLength = 0;
                            this.VisibilityBoundsIndex = 0;
                            this.PartIndex = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.IndicesStartIndex = reader.ReadInt16();
                            this.IndicesLength = reader.ReadInt16();
                            this.VisibilityBoundsIndex = reader.ReadInt16();
                            this.PartIndex = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(20, 4)]
                    public sealed class GlobalVisibilityBoundsBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position x*", typeof(Single))]
                        public Single PositionX;
                        [FieldAttribute("Position y*", typeof(Single))]
                        public Single PositionY;
                        [FieldAttribute("Position z*", typeof(Single))]
                        public Single PositionZ;
                        [FieldAttribute("Radius*", typeof(Single))]
                        public Single Radius;
                        [FieldAttribute("Node 0*", typeof(Byte))]
                        public Byte Node0;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        public override int Size
                        {
                            get
                            {
                                return 20;
                            }
                        }
                        public override void Initialize()
                        {
                            this.PositionX = 0;
                            this.PositionY = 0;
                            this.PositionZ = 0;
                            this.Radius = 0;
                            this.Node0 = 0;
                            this.EmptyString = new byte[3];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.PositionX = reader.ReadSingle();
                            this.PositionY = reader.ReadSingle();
                            this.PositionZ = reader.ReadSingle();
                            this.Radius = reader.ReadSingle();
                            this.Node0 = reader.ReadByte();
                            this.EmptyString = reader.ReadBytes(3);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(196, 4)]
                    public sealed class GlobalGeometrySectionRawVertexBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Node Indices (OLD)*", typeof(NodeIndicesOldElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesOldElement))]
                        public NodeIndicesOldElement[] NodeIndicesOld;
                        [FieldAttribute("Node Weights*", typeof(NodeWeightsElement[]))]
                        [ArrayAttribute(4, typeof(NodeWeightsElement))]
                        public NodeWeightsElement[] NodeWeights;
                        [FieldAttribute("Node Indices (NEW)*", typeof(NodeIndicesNewElement[]))]
                        [ArrayAttribute(4, typeof(NodeIndicesNewElement))]
                        public NodeIndicesNewElement[] NodeIndicesNew;
                        [FieldAttribute("Use New Node Indices*", typeof(Int32))]
                        public Int32 UseNewNodeIndices;
                        [FieldAttribute("Adjusted Compound Node Index*", typeof(Int32))]
                        public Int32 AdjustedCompoundNodeIndex;
                        [FieldAttribute("texcoord*", typeof(Vector2))]
                        public Vector2 Texcoord;
                        [FieldAttribute("Normal*", typeof(Vector3))]
                        public Vector3 Normal;
                        [FieldAttribute("Binormal*", typeof(Vector3))]
                        public Vector3 Binormal;
                        [FieldAttribute("Tangent*", typeof(Vector3))]
                        public Vector3 Tangent;
                        [FieldAttribute("Anisotropic Binormal*", typeof(Vector3))]
                        public Vector3 AnisotropicBinormal;
                        [FieldAttribute("Secondary texcoord*", typeof(Vector2))]
                        public Vector2 SecondaryTexcoord;
                        [FieldAttribute("Primary Lightmap Color", typeof(ColorRgbF))]
                        public ColorRgbF PrimaryLightmapColor;
                        [FieldAttribute("Primary Lightmap texcoord", typeof(Vector2))]
                        public Vector2 PrimaryLightmapTexcoord;
                        [FieldAttribute("Primary Lightmap Incident Direction", typeof(Vector3))]
                        public Vector3 PrimaryLightmapIncidentDirection;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(12)]
                        public Byte[] EmptyString;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(8)]
                        public Byte[] EmptyString1;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(12)]
                        public Byte[] EmptyString2;
                        public override int Size
                        {
                            get
                            {
                                return 196;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.NodeIndicesOld = new NodeIndicesOldElement[4];
                            this.NodeWeights = new NodeWeightsElement[4];
                            this.NodeIndicesNew = new NodeIndicesNewElement[4];
                            this.UseNewNodeIndices = 0;
                            this.AdjustedCompoundNodeIndex = 0;
                            this.Texcoord = Vector2.Zero;
                            this.Normal = Vector3.Zero;
                            this.Binormal = Vector3.Zero;
                            this.Tangent = Vector3.Zero;
                            this.AnisotropicBinormal = Vector3.Zero;
                            this.SecondaryTexcoord = Vector2.Zero;
                            this.PrimaryLightmapColor = ColorRgbF.Zero;
                            this.PrimaryLightmapTexcoord = Vector2.Zero;
                            this.PrimaryLightmapIncidentDirection = Vector3.Zero;
                            this.EmptyString = new byte[12];
                            this.EmptyString1 = new byte[8];
                            this.EmptyString2 = new byte[12];
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.UseNewNodeIndices = reader.ReadInt32();
                            this.AdjustedCompoundNodeIndex = reader.ReadInt32();
                            this.Texcoord = reader.Read<Vector2>();
                            this.Normal = reader.Read<Vector3>();
                            this.Binormal = reader.Read<Vector3>();
                            this.Tangent = reader.Read<Vector3>();
                            this.AnisotropicBinormal = reader.Read<Vector3>();
                            this.SecondaryTexcoord = reader.Read<Vector2>();
                            this.PrimaryLightmapColor = reader.Read<ColorRgbF>();
                            this.PrimaryLightmapTexcoord = reader.Read<Vector2>();
                            this.PrimaryLightmapIncidentDirection = reader.Read<Vector3>();
                            this.EmptyString = reader.ReadBytes(12);
                            this.EmptyString1 = reader.ReadBytes(8);
                            this.EmptyString2 = reader.ReadBytes(12);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public sealed class NodeIndicesOldElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (OLD)*", typeof(Int32))]
                            public Int32 NodeIndexOld;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexOld = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexOld = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeWeightsElement : AbideTagBlock
                        {
                            [FieldAttribute("node_weight*", typeof(Single))]
                            public Single NodeWeight;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeWeight = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeWeight = reader.ReadSingle();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                        public sealed class NodeIndicesNewElement : AbideTagBlock
                        {
                            [FieldAttribute("Node Index (NEW)*", typeof(Int32))]
                            public Int32 NodeIndexNew;
                            public override int Size
                            {
                                get
                                {
                                    return 0;
                                }
                            }
                            public override void Initialize()
                            {
                                this.NodeIndexNew = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.NodeIndexNew = reader.ReadInt32();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                    [FieldSetAttribute(2, 4)]
                    public sealed class GlobalGeometrySectionStripIndexBlock : AbideTagBlock
                    {
                        [FieldAttribute("Index*", typeof(Int16))]
                        public Int16 Index;
                        public override int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Index = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Index = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class GlobalGeometrySectionVertexBufferBlock : AbideTagBlock
                    {
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                        }
                        public override void Read(BinaryReader reader)
                        {
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
            {
                private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                [FieldAttribute("Block Offset*", typeof(Int32))]
                public Int32 BlockOffset;
                [FieldAttribute("Block Size*", typeof(Int32))]
                public Int32 BlockSize;
                [FieldAttribute("Section Data Size*", typeof(Int32))]
                public Int32 SectionDataSize;
                [FieldAttribute("Resource Data Size*", typeof(Int32))]
                public Int32 ResourceDataSize;
                [FieldAttribute("Resources*", typeof(TagBlock))]
                [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                public TagBlock Resources;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                public Int16 OwnerTagSectionOffset;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString2;
                public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                {
                    get
                    {
                        return this.resourcesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.resourcesList.Clear();
                    this.BlockOffset = 0;
                    this.BlockSize = 0;
                    this.SectionDataSize = 0;
                    this.ResourceDataSize = 0;
                    this.Resources = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                    this.OwnerTagSectionOffset = 0;
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.BlockOffset = reader.ReadInt32();
                    this.BlockSize = reader.ReadInt32();
                    this.SectionDataSize = reader.ReadInt32();
                    this.ResourceDataSize = reader.ReadInt32();
                    this.Resources = reader.ReadInt64();
                    this.resourcesList.Read(reader, this.Resources);
                    this.EmptyString = reader.ReadBytes(4);
                    this.OwnerTagSectionOffset = reader.ReadInt16();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                {
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(3)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Primary Locator*", typeof(Int16))]
                    public Int16 PrimaryLocator;
                    [FieldAttribute("Secondary Locator*", typeof(Int16))]
                    public Int16 SecondaryLocator;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                    public Int32 ResourceDataOffset;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Type = ((TypeOptions)(0));
                        this.EmptyString = new byte[3];
                        this.PrimaryLocator = 0;
                        this.SecondaryLocator = 0;
                        this.ResourceDataSize = 0;
                        this.ResourceDataOffset = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.EmptyString = reader.ReadBytes(3);
                        this.PrimaryLocator = reader.ReadInt16();
                        this.SecondaryLocator = reader.ReadInt16();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.ResourceDataOffset = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        TagBlock = 0,
                        TagData = 1,
                        VertexBuffer = 2,
                    }
                }
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class StructurePortalDeviceMappingBlock : AbideTagBlock
        {
            private TagBlockList<StructureDevicePortalAssociationBlock> devicePortalAssociationsList = new TagBlockList<StructureDevicePortalAssociationBlock>(128);
            private TagBlockList<GamePortalToPortalMappingBlock> gamePortalToPortalMapList = new TagBlockList<GamePortalToPortalMappingBlock>(128);
            [FieldAttribute("device portal associations", typeof(TagBlock))]
            [BlockAttribute("structure_device_portal_association_block", 128, typeof(StructureDevicePortalAssociationBlock))]
            public TagBlock DevicePortalAssociations;
            [FieldAttribute("game portal to portal map", typeof(TagBlock))]
            [BlockAttribute("game_portal_to_portal_mapping_block", 128, typeof(GamePortalToPortalMappingBlock))]
            public TagBlock GamePortalToPortalMap;
            public TagBlockList<StructureDevicePortalAssociationBlock> DevicePortalAssociationsList
            {
                get
                {
                    return this.devicePortalAssociationsList;
                }
            }
            public TagBlockList<GamePortalToPortalMappingBlock> GamePortalToPortalMapList
            {
                get
                {
                    return this.gamePortalToPortalMapList;
                }
            }
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.devicePortalAssociationsList.Clear();
                this.gamePortalToPortalMapList.Clear();
                this.DevicePortalAssociations = TagBlock.Zero;
                this.GamePortalToPortalMap = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.DevicePortalAssociations = reader.ReadInt64();
                this.devicePortalAssociationsList.Read(reader, this.DevicePortalAssociations);
                this.GamePortalToPortalMap = reader.ReadInt64();
                this.gamePortalToPortalMapList.Read(reader, this.GamePortalToPortalMap);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class StructureDevicePortalAssociationBlock : AbideTagBlock
            {
                [FieldAttribute("device id", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock DeviceId;
                [FieldAttribute("first game portal index", typeof(Int16))]
                public Int16 FirstGamePortalIndex;
                [FieldAttribute("game portal count", typeof(Int16))]
                public Int16 GamePortalCount;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.DeviceId = new ScenarioObjectIdStructBlock();
                    this.FirstGamePortalIndex = 0;
                    this.GamePortalCount = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.DeviceId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.FirstGamePortalIndex = reader.ReadInt16();
                    this.GamePortalCount = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
            }
            [FieldSetAttribute(2, 4)]
            public sealed class GamePortalToPortalMappingBlock : AbideTagBlock
            {
                [FieldAttribute("portal index", typeof(Int16))]
                public Int16 PortalIndex;
                public override int Size
                {
                    get
                    {
                        return 2;
                    }
                }
                public override void Initialize()
                {
                    this.PortalIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PortalIndex = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(72, 4)]
        public sealed class StructureBspAudibilityBlock : AbideTagBlock
        {
            private TagBlockList<DoorEncodedPasBlock> encodedDoorPasList = new TagBlockList<DoorEncodedPasBlock>(4096);
            private TagBlockList<ClusterDoorPortalEncodedPasBlock> clusterDoorPortalEncodedPasList = new TagBlockList<ClusterDoorPortalEncodedPasBlock>(2048);
            private TagBlockList<AiDeafeningEncodedPasBlock> aiDeafeningPasList = new TagBlockList<AiDeafeningEncodedPasBlock>(4088);
            private TagBlockList<EncodedClusterDistancesBlock> clusterDistancesList = new TagBlockList<EncodedClusterDistancesBlock>(130816);
            private TagBlockList<OccluderToMachineDoorMapping> machineDoorMappingList = new TagBlockList<OccluderToMachineDoorMapping>(128);
            [FieldAttribute("door portal count", typeof(Int32))]
            public Int32 DoorPortalCount;
            [FieldAttribute("encoded door pas", typeof(TagBlock))]
            [BlockAttribute("door_encoded_pas_block", 4096, typeof(DoorEncodedPasBlock))]
            public TagBlock EncodedDoorPas;
            [FieldAttribute("cluster door portal encoded pas", typeof(TagBlock))]
            [BlockAttribute("cluster_door_portal_encoded_pas_block", 2048, typeof(ClusterDoorPortalEncodedPasBlock))]
            public TagBlock ClusterDoorPortalEncodedPas;
            [FieldAttribute("ai deafening pas", typeof(TagBlock))]
            [BlockAttribute("ai_deafening_encoded_pas_block", 4088, typeof(AiDeafeningEncodedPasBlock))]
            public TagBlock AiDeafeningPas;
            [FieldAttribute("cluster distances", typeof(TagBlock))]
            [BlockAttribute("encoded_cluster_distances_block", 130816, typeof(EncodedClusterDistancesBlock))]
            public TagBlock ClusterDistances;
            [FieldAttribute("machine door mapping", typeof(TagBlock))]
            [BlockAttribute("occluder_to_machine_door_mapping", 128, typeof(OccluderToMachineDoorMapping))]
            public TagBlock MachineDoorMapping;
            public TagBlockList<DoorEncodedPasBlock> EncodedDoorPasList
            {
                get
                {
                    return this.encodedDoorPasList;
                }
            }
            public TagBlockList<ClusterDoorPortalEncodedPasBlock> ClusterDoorPortalEncodedPasList
            {
                get
                {
                    return this.clusterDoorPortalEncodedPasList;
                }
            }
            public TagBlockList<AiDeafeningEncodedPasBlock> AiDeafeningPasList
            {
                get
                {
                    return this.aiDeafeningPasList;
                }
            }
            public TagBlockList<EncodedClusterDistancesBlock> ClusterDistancesList
            {
                get
                {
                    return this.clusterDistancesList;
                }
            }
            public TagBlockList<OccluderToMachineDoorMapping> MachineDoorMappingList
            {
                get
                {
                    return this.machineDoorMappingList;
                }
            }
            public override int Size
            {
                get
                {
                    return 72;
                }
            }
            public override void Initialize()
            {
                this.encodedDoorPasList.Clear();
                this.clusterDoorPortalEncodedPasList.Clear();
                this.aiDeafeningPasList.Clear();
                this.clusterDistancesList.Clear();
                this.machineDoorMappingList.Clear();
                this.DoorPortalCount = 0;
                this.EncodedDoorPas = TagBlock.Zero;
                this.ClusterDoorPortalEncodedPas = TagBlock.Zero;
                this.AiDeafeningPas = TagBlock.Zero;
                this.ClusterDistances = TagBlock.Zero;
                this.MachineDoorMapping = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.DoorPortalCount = reader.ReadInt32();
                this.EncodedDoorPas = reader.ReadInt64();
                this.encodedDoorPasList.Read(reader, this.EncodedDoorPas);
                this.ClusterDoorPortalEncodedPas = reader.ReadInt64();
                this.clusterDoorPortalEncodedPasList.Read(reader, this.ClusterDoorPortalEncodedPas);
                this.AiDeafeningPas = reader.ReadInt64();
                this.aiDeafeningPasList.Read(reader, this.AiDeafeningPas);
                this.ClusterDistances = reader.ReadInt64();
                this.clusterDistancesList.Read(reader, this.ClusterDistances);
                this.MachineDoorMapping = reader.ReadInt64();
                this.machineDoorMappingList.Read(reader, this.MachineDoorMapping);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(4, 4)]
            public sealed class DoorEncodedPasBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Int32))]
                public Int32 EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ClusterDoorPortalEncodedPasBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Int32))]
                public Int32 EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class AiDeafeningEncodedPasBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Int32))]
                public Int32 EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(1, 4)]
            public sealed class EncodedClusterDistancesBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte))]
                public Byte EmptyString;
                public override int Size
                {
                    get
                    {
                        return 1;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadByte();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(1, 4)]
            public sealed class OccluderToMachineDoorMapping : AbideTagBlock
            {
                [FieldAttribute("machine door index", typeof(Byte))]
                public Byte MachineDoorIndex;
                public override int Size
                {
                    get
                    {
                        return 1;
                    }
                }
                public override void Initialize()
                {
                    this.MachineDoorIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.MachineDoorIndex = reader.ReadByte();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(92, 4)]
        public sealed class StructureBspFakeLightprobesBlock : AbideTagBlock
        {
            [FieldAttribute("Object Identifier*", typeof(ScenarioObjectIdStructBlock))]
            public ScenarioObjectIdStructBlock ObjectIdentifier;
            [FieldAttribute("Render Lighting*", typeof(RenderLightingStructBlock))]
            public RenderLightingStructBlock RenderLighting;
            public override int Size
            {
                get
                {
                    return 92;
                }
            }
            public override void Initialize()
            {
                this.ObjectIdentifier = new ScenarioObjectIdStructBlock();
                this.RenderLighting = new RenderLightingStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.ObjectIdentifier = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                this.RenderLighting = reader.ReadDataStructure<RenderLightingStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
            {
                [FieldAttribute("Unique ID*", typeof(Int32))]
                public Int32 UniqueId;
                [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                public Int16 OriginBspIndex;
                [FieldAttribute("Type*", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Source*", typeof(SourceOptions))]
                [OptionsAttribute(typeof(SourceOptions), false)]
                public SourceOptions Source;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.UniqueId = 0;
                    this.OriginBspIndex = 0;
                    this.Type = ((TypeOptions)(0));
                    this.Source = ((SourceOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.UniqueId = reader.ReadInt32();
                    this.OriginBspIndex = reader.ReadInt16();
                    this.Type = ((TypeOptions)(reader.ReadByte()));
                    this.Source = ((SourceOptions)(reader.ReadByte()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Byte
                {
                    Biped = 0,
                    Vehicle = 1,
                    Weapon = 2,
                    Equipment = 3,
                    Garbage = 4,
                    Projectile = 5,
                    Scenery = 6,
                    Machine = 7,
                    Control = 8,
                    LightFixture = 9,
                    SoundScenery = 10,
                    Crate = 11,
                    Creature = 12,
                }
                public enum SourceOptions : Byte
                {
                    Structure = 0,
                    Editor = 1,
                    Dynamic = 2,
                    Legacy = 3,
                }
            }
            [FieldSetAttribute(84, 4)]
            public sealed class RenderLightingStructBlock : AbideTagBlock
            {
                [FieldAttribute("Ambient", typeof(ColorRgbF))]
                public ColorRgbF Ambient;
                [FieldAttribute("Shadow Direction", typeof(Vector3))]
                public Vector3 ShadowDirection;
                [FieldAttribute("lighting_accuracy", typeof(Single))]
                public Single LightingAccuracy;
                [FieldAttribute("Shadow Opacity", typeof(Single))]
                public Single ShadowOpacity;
                [FieldAttribute("Primary Direction Color", typeof(ColorRgbF))]
                public ColorRgbF PrimaryDirectionColor;
                [FieldAttribute("Primary Direction", typeof(Vector3))]
                public Vector3 PrimaryDirection;
                [FieldAttribute("Secondary Direction Color", typeof(ColorRgbF))]
                public ColorRgbF SecondaryDirectionColor;
                [FieldAttribute("Secondary Direction", typeof(Vector3))]
                public Vector3 SecondaryDirection;
                [FieldAttribute("sh Index", typeof(Int16))]
                public Int16 ShIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 84;
                    }
                }
                public override void Initialize()
                {
                    this.Ambient = ColorRgbF.Zero;
                    this.ShadowDirection = Vector3.Zero;
                    this.LightingAccuracy = 0;
                    this.ShadowOpacity = 0;
                    this.PrimaryDirectionColor = ColorRgbF.Zero;
                    this.PrimaryDirection = Vector3.Zero;
                    this.SecondaryDirectionColor = ColorRgbF.Zero;
                    this.SecondaryDirection = Vector3.Zero;
                    this.ShIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Ambient = reader.Read<ColorRgbF>();
                    this.ShadowDirection = reader.Read<Vector3>();
                    this.LightingAccuracy = reader.ReadSingle();
                    this.ShadowOpacity = reader.ReadSingle();
                    this.PrimaryDirectionColor = reader.Read<ColorRgbF>();
                    this.PrimaryDirection = reader.Read<Vector3>();
                    this.SecondaryDirectionColor = reader.Read<ColorRgbF>();
                    this.SecondaryDirection = reader.Read<Vector3>();
                    this.ShIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class DecoratorPlacementDefinitionBlock : AbideTagBlock
        {
            private TagBlockList<DecoratorCacheBlockBlock> cacheBlocksList = new TagBlockList<DecoratorCacheBlockBlock>(4096);
            private TagBlockList<DecoratorGroupBlock> groupsList = new TagBlockList<DecoratorGroupBlock>(131072);
            private TagBlockList<DecoratorCellCollectionBlock> cellsList = new TagBlockList<DecoratorCellCollectionBlock>(65535);
            private TagBlockList<DecoratorProjectedDecalBlock> decalsList = new TagBlockList<DecoratorProjectedDecalBlock>(32768);
            [FieldAttribute("Grid Origin", typeof(Vector3))]
            public Vector3 GridOrigin;
            [FieldAttribute("Cell Count per Dimension", typeof(Int32))]
            public Int32 CellCountPerDimension;
            [FieldAttribute("Cache Blocks", typeof(TagBlock))]
            [BlockAttribute("decorator_cache_block_block", 4096, typeof(DecoratorCacheBlockBlock))]
            public TagBlock CacheBlocks;
            [FieldAttribute("Groups", typeof(TagBlock))]
            [BlockAttribute("decorator_group_block", 131072, typeof(DecoratorGroupBlock))]
            public TagBlock Groups;
            [FieldAttribute("Cells", typeof(TagBlock))]
            [BlockAttribute("decorator_cell_collection_block", 65535, typeof(DecoratorCellCollectionBlock))]
            public TagBlock Cells;
            [FieldAttribute("Decals", typeof(TagBlock))]
            [BlockAttribute("decorator_projected_decal_block", 32768, typeof(DecoratorProjectedDecalBlock))]
            public TagBlock Decals;
            public TagBlockList<DecoratorCacheBlockBlock> CacheBlocksList
            {
                get
                {
                    return this.cacheBlocksList;
                }
            }
            public TagBlockList<DecoratorGroupBlock> GroupsList
            {
                get
                {
                    return this.groupsList;
                }
            }
            public TagBlockList<DecoratorCellCollectionBlock> CellsList
            {
                get
                {
                    return this.cellsList;
                }
            }
            public TagBlockList<DecoratorProjectedDecalBlock> DecalsList
            {
                get
                {
                    return this.decalsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.cacheBlocksList.Clear();
                this.groupsList.Clear();
                this.cellsList.Clear();
                this.decalsList.Clear();
                this.GridOrigin = Vector3.Zero;
                this.CellCountPerDimension = 0;
                this.CacheBlocks = TagBlock.Zero;
                this.Groups = TagBlock.Zero;
                this.Cells = TagBlock.Zero;
                this.Decals = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.GridOrigin = reader.Read<Vector3>();
                this.CellCountPerDimension = reader.ReadInt32();
                this.CacheBlocks = reader.ReadInt64();
                this.cacheBlocksList.Read(reader, this.CacheBlocks);
                this.Groups = reader.ReadInt64();
                this.groupsList.Read(reader, this.Groups);
                this.Cells = reader.ReadInt64();
                this.cellsList.Read(reader, this.Cells);
                this.Decals = reader.ReadInt64();
                this.decalsList.Read(reader, this.Decals);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(60, 4)]
            public sealed class DecoratorCacheBlockBlock : AbideTagBlock
            {
                private TagBlockList<DecoratorCacheBlockDataBlock> cacheBlockDataList = new TagBlockList<DecoratorCacheBlockDataBlock>(1);
                [FieldAttribute("Geometry Block Info*", typeof(GlobalGeometryBlockInfoStructBlock))]
                public GlobalGeometryBlockInfoStructBlock GeometryBlockInfo;
                [FieldAttribute("Cache Block Data*", typeof(TagBlock))]
                [BlockAttribute("decorator_cache_block_data_block", 1, typeof(DecoratorCacheBlockDataBlock))]
                public TagBlock CacheBlockData;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                public TagBlockList<DecoratorCacheBlockDataBlock> CacheBlockDataList
                {
                    get
                    {
                        return this.cacheBlockDataList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 60;
                    }
                }
                public override void Initialize()
                {
                    this.cacheBlockDataList.Clear();
                    this.GeometryBlockInfo = new GlobalGeometryBlockInfoStructBlock();
                    this.CacheBlockData = TagBlock.Zero;
                    this.EmptyString = new byte[4];
                    this.EmptyString1 = new byte[4];
                }
                public override void Read(BinaryReader reader)
                {
                    this.GeometryBlockInfo = reader.ReadDataStructure<GlobalGeometryBlockInfoStructBlock>();
                    this.CacheBlockData = reader.ReadInt64();
                    this.cacheBlockDataList.Read(reader, this.CacheBlockData);
                    this.EmptyString = reader.ReadBytes(4);
                    this.EmptyString1 = reader.ReadBytes(4);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(156, 4)]
                public sealed class DecoratorCacheBlockDataBlock : AbideTagBlock
                {
                    private TagBlockList<DecoratorPlacementBlock> placementsList = new TagBlockList<DecoratorPlacementBlock>(32768);
                    private TagBlockList<DecalVerticesBlock> decalVerticesList = new TagBlockList<DecalVerticesBlock>(65536);
                    private TagBlockList<IndicesBlock> decalIndicesList = new TagBlockList<IndicesBlock>(65536);
                    private TagBlockList<SpriteVerticesBlock> spriteVerticesList = new TagBlockList<SpriteVerticesBlock>(65536);
                    [FieldAttribute("Placements*", typeof(TagBlock))]
                    [BlockAttribute("decorator_placement_block", 32768, typeof(DecoratorPlacementBlock))]
                    public TagBlock Placements;
                    [FieldAttribute("Decal Vertices*", typeof(TagBlock))]
                    [BlockAttribute("decal_vertices_block", 65536, typeof(DecalVerticesBlock))]
                    public TagBlock DecalVertices;
                    [FieldAttribute("Decal Indices*", typeof(TagBlock))]
                    [BlockAttribute("indices_block", 65536, typeof(IndicesBlock))]
                    public TagBlock DecalIndices;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(16)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Sprite Vertices*", typeof(TagBlock))]
                    [BlockAttribute("sprite_vertices_block", 65536, typeof(SpriteVerticesBlock))]
                    public TagBlock SpriteVertices;
                    [FieldAttribute("Sprite Indices*", typeof(TagBlock))]
                    [BlockAttribute("indices_block", 65536, typeof(IndicesBlock))]
                    public TagBlock SpriteIndices;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(16)]
                    public Byte[] EmptyString1;
                    public TagBlockList<DecoratorPlacementBlock> PlacementsList
                    {
                        get
                        {
                            return this.placementsList;
                        }
                    }
                    public TagBlockList<DecalVerticesBlock> DecalVerticesList
                    {
                        get
                        {
                            return this.decalVerticesList;
                        }
                    }
                    public TagBlockList<IndicesBlock> DecalIndicesList
                    {
                        get
                        {
                            return this.decalIndicesList;
                        }
                    }
                    public TagBlockList<SpriteVerticesBlock> SpriteVerticesList
                    {
                        get
                        {
                            return this.spriteVerticesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 156;
                        }
                    }
                    public override void Initialize()
                    {
                        this.placementsList.Clear();
                        this.decalVerticesList.Clear();
                        this.decalIndicesList.Clear();
                        this.spriteVerticesList.Clear();
                        this.Placements = TagBlock.Zero;
                        this.DecalVertices = TagBlock.Zero;
                        this.DecalIndices = TagBlock.Zero;
                        this.EmptyString = new byte[16];
                        this.SpriteVertices = TagBlock.Zero;
                        this.SpriteIndices = TagBlock.Zero;
                        this.EmptyString1 = new byte[16];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Placements = reader.ReadInt64();
                        this.placementsList.Read(reader, this.Placements);
                        this.DecalVertices = reader.ReadInt64();
                        this.decalVerticesList.Read(reader, this.DecalVertices);
                        this.DecalIndices = reader.ReadInt64();
                        this.decalIndicesList.Read(reader, this.DecalIndices);
                        this.EmptyString = reader.ReadBytes(16);
                        this.SpriteVertices = reader.ReadInt64();
                        this.spriteVerticesList.Read(reader, this.SpriteVertices);
                        this.SpriteIndices = reader.ReadInt64();
                        this.spriteVerticesList.Read(reader, this.SpriteIndices);
                        this.EmptyString1 = reader.ReadBytes(16);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(24, 4)]
                    public sealed class DecoratorPlacementBlock : AbideTagBlock
                    {
                        [FieldAttribute("Internal Data 1", typeof(Int32))]
                        public Int32 InternalData1;
                        [FieldAttribute("Compressed Position", typeof(Int32))]
                        public Int32 CompressedPosition;
                        [FieldAttribute("Tint Color", typeof(ColorRgb))]
                        public ColorRgb TintColor;
                        [FieldAttribute("Lightmap Color", typeof(ColorRgb))]
                        public ColorRgb LightmapColor;
                        [FieldAttribute("Compressed Light Direction", typeof(Int32))]
                        public Int32 CompressedLightDirection;
                        [FieldAttribute("Compressed Light 2 Direction", typeof(Int32))]
                        public Int32 CompressedLight2Direction;
                        public override int Size
                        {
                            get
                            {
                                return 24;
                            }
                        }
                        public override void Initialize()
                        {
                            this.InternalData1 = 0;
                            this.CompressedPosition = 0;
                            this.TintColor = ColorRgb.Zero;
                            this.LightmapColor = ColorRgb.Zero;
                            this.CompressedLightDirection = 0;
                            this.CompressedLight2Direction = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.InternalData1 = reader.ReadInt32();
                            this.CompressedPosition = reader.ReadInt32();
                            this.TintColor = reader.Read<ColorRgb>();
                            this.LightmapColor = reader.Read<ColorRgb>();
                            this.CompressedLightDirection = reader.ReadInt32();
                            this.CompressedLight2Direction = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(32, 4)]
                    public sealed class DecalVerticesBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("texcoord 0*", typeof(Vector2))]
                        public Vector2 Texcoord0;
                        [FieldAttribute("texcoord 1*", typeof(Vector2))]
                        public Vector2 Texcoord1;
                        [FieldAttribute("Color*", typeof(ColorRgb))]
                        public ColorRgb Color;
                        public override int Size
                        {
                            get
                            {
                                return 32;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.Texcoord0 = Vector2.Zero;
                            this.Texcoord1 = Vector2.Zero;
                            this.Color = ColorRgb.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.Texcoord0 = reader.Read<Vector2>();
                            this.Texcoord1 = reader.Read<Vector2>();
                            this.Color = reader.Read<ColorRgb>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(2, 4)]
                    public sealed class IndicesBlock : AbideTagBlock
                    {
                        [FieldAttribute("Index*", typeof(Int16))]
                        public Int16 Index;
                        public override int Size
                        {
                            get
                            {
                                return 2;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Index = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Index = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                    [FieldSetAttribute(48, 4)]
                    public sealed class SpriteVerticesBlock : AbideTagBlock
                    {
                        [FieldAttribute("Position*", typeof(Vector3))]
                        public Vector3 Position;
                        [FieldAttribute("Offset*", typeof(Vector3))]
                        public Vector3 Offset;
                        [FieldAttribute("Axis*", typeof(Vector3))]
                        public Vector3 Axis;
                        [FieldAttribute("texcoord*", typeof(Vector2))]
                        public Vector2 Texcoord;
                        [FieldAttribute("Color*", typeof(ColorRgb))]
                        public ColorRgb Color;
                        public override int Size
                        {
                            get
                            {
                                return 48;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Position = Vector3.Zero;
                            this.Offset = Vector3.Zero;
                            this.Axis = Vector3.Zero;
                            this.Texcoord = Vector2.Zero;
                            this.Color = ColorRgb.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Position = reader.Read<Vector3>();
                            this.Offset = reader.Read<Vector3>();
                            this.Axis = reader.Read<Vector3>();
                            this.Texcoord = reader.Read<Vector2>();
                            this.Color = reader.Read<ColorRgb>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
                [FieldSetAttribute(40, 4)]
                public sealed class GlobalGeometryBlockInfoStructBlock : AbideTagBlock
                {
                    private TagBlockList<GlobalGeometryBlockResourceBlock> resourcesList = new TagBlockList<GlobalGeometryBlockResourceBlock>(1024);
                    [FieldAttribute("Block Offset*", typeof(Int32))]
                    public Int32 BlockOffset;
                    [FieldAttribute("Block Size*", typeof(Int32))]
                    public Int32 BlockSize;
                    [FieldAttribute("Section Data Size*", typeof(Int32))]
                    public Int32 SectionDataSize;
                    [FieldAttribute("Resource Data Size*", typeof(Int32))]
                    public Int32 ResourceDataSize;
                    [FieldAttribute("Resources*", typeof(TagBlock))]
                    [BlockAttribute("block resources", 1024, typeof(GlobalGeometryBlockResourceBlock))]
                    public TagBlock Resources;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString;
                    [FieldAttribute("Owner Tag Section Offset*", typeof(Int16))]
                    public Int16 OwnerTagSectionOffset;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(2)]
                    public Byte[] EmptyString1;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(4)]
                    public Byte[] EmptyString2;
                    public TagBlockList<GlobalGeometryBlockResourceBlock> ResourcesList
                    {
                        get
                        {
                            return this.resourcesList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 40;
                        }
                    }
                    public override void Initialize()
                    {
                        this.resourcesList.Clear();
                        this.BlockOffset = 0;
                        this.BlockSize = 0;
                        this.SectionDataSize = 0;
                        this.ResourceDataSize = 0;
                        this.Resources = TagBlock.Zero;
                        this.EmptyString = new byte[4];
                        this.OwnerTagSectionOffset = 0;
                        this.EmptyString1 = new byte[2];
                        this.EmptyString2 = new byte[4];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BlockOffset = reader.ReadInt32();
                        this.BlockSize = reader.ReadInt32();
                        this.SectionDataSize = reader.ReadInt32();
                        this.ResourceDataSize = reader.ReadInt32();
                        this.Resources = reader.ReadInt64();
                        this.resourcesList.Read(reader, this.Resources);
                        this.EmptyString = reader.ReadBytes(4);
                        this.OwnerTagSectionOffset = reader.ReadInt16();
                        this.EmptyString1 = reader.ReadBytes(2);
                        this.EmptyString2 = reader.ReadBytes(4);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(16, 4)]
                    public sealed class GlobalGeometryBlockResourceBlock : AbideTagBlock
                    {
                        [FieldAttribute("Type*", typeof(TypeOptions))]
                        [OptionsAttribute(typeof(TypeOptions), false)]
                        public TypeOptions Type;
                        [FieldAttribute("", typeof(Byte[]))]
                        [PaddingAttribute(3)]
                        public Byte[] EmptyString;
                        [FieldAttribute("Primary Locator*", typeof(Int16))]
                        public Int16 PrimaryLocator;
                        [FieldAttribute("Secondary Locator*", typeof(Int16))]
                        public Int16 SecondaryLocator;
                        [FieldAttribute("Resource Data Size*", typeof(Int32))]
                        public Int32 ResourceDataSize;
                        [FieldAttribute("Resource Data Offset*", typeof(Int32))]
                        public Int32 ResourceDataOffset;
                        public override int Size
                        {
                            get
                            {
                                return 16;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Type = ((TypeOptions)(0));
                            this.EmptyString = new byte[3];
                            this.PrimaryLocator = 0;
                            this.SecondaryLocator = 0;
                            this.ResourceDataSize = 0;
                            this.ResourceDataOffset = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Type = ((TypeOptions)(reader.ReadByte()));
                            this.EmptyString = reader.ReadBytes(3);
                            this.PrimaryLocator = reader.ReadInt16();
                            this.SecondaryLocator = reader.ReadInt16();
                            this.ResourceDataSize = reader.ReadInt32();
                            this.ResourceDataOffset = reader.ReadInt32();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum TypeOptions : Byte
                        {
                            TagBlock = 0,
                            TagData = 1,
                            VertexBuffer = 2,
                        }
                    }
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class DecoratorGroupBlock : AbideTagBlock
            {
                [FieldAttribute("Decorator Set*", typeof(Byte))]
                public Byte DecoratorSet;
                [FieldAttribute("Decorator Type", typeof(DecoratorTypeOptions))]
                [OptionsAttribute(typeof(DecoratorTypeOptions), false)]
                public DecoratorTypeOptions DecoratorType;
                [FieldAttribute("Shader Index*", typeof(Byte))]
                public Byte ShaderIndex;
                [FieldAttribute("Compressed Radius*", typeof(Byte))]
                public Byte CompressedRadius;
                [FieldAttribute("Cluster*", typeof(Int16))]
                public Int16 Cluster;
                [FieldAttribute("Cache Block*", typeof(Int16))]
                public Int16 CacheBlock;
                [FieldAttribute("Decorator Start Index*", typeof(Int16))]
                public Int16 DecoratorStartIndex;
                [FieldAttribute("Decorator Count*", typeof(Int16))]
                public Int16 DecoratorCount;
                [FieldAttribute("Vertex Start Offset*", typeof(Int16))]
                public Int16 VertexStartOffset;
                [FieldAttribute("Vertex Count*", typeof(Int16))]
                public Int16 VertexCount;
                [FieldAttribute("Index Start Offset*", typeof(Int16))]
                public Int16 IndexStartOffset;
                [FieldAttribute("Index Count*", typeof(Int16))]
                public Int16 IndexCount;
                [FieldAttribute("Compressed Bounding Center*", typeof(Int32))]
                public Int32 CompressedBoundingCenter;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.DecoratorSet = 0;
                    this.DecoratorType = ((DecoratorTypeOptions)(0));
                    this.ShaderIndex = 0;
                    this.CompressedRadius = 0;
                    this.Cluster = 0;
                    this.CacheBlock = 0;
                    this.DecoratorStartIndex = 0;
                    this.DecoratorCount = 0;
                    this.VertexStartOffset = 0;
                    this.VertexCount = 0;
                    this.IndexStartOffset = 0;
                    this.IndexCount = 0;
                    this.CompressedBoundingCenter = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.DecoratorSet = reader.ReadByte();
                    this.DecoratorType = ((DecoratorTypeOptions)(reader.ReadByte()));
                    this.ShaderIndex = reader.ReadByte();
                    this.CompressedRadius = reader.ReadByte();
                    this.Cluster = reader.ReadInt16();
                    this.CacheBlock = reader.ReadInt16();
                    this.DecoratorStartIndex = reader.ReadInt16();
                    this.DecoratorCount = reader.ReadInt16();
                    this.VertexStartOffset = reader.ReadInt16();
                    this.VertexCount = reader.ReadInt16();
                    this.IndexStartOffset = reader.ReadInt16();
                    this.IndexCount = reader.ReadInt16();
                    this.CompressedBoundingCenter = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum DecoratorTypeOptions : Byte
                {
                    Model = 0,
                    FloatingDecal = 1,
                    ProjectedDecal = 2,
                    ScreenFacingQuad = 3,
                    AxisRotatingQuad = 4,
                    CrossQuad = 5,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class DecoratorCellCollectionBlock : AbideTagBlock
            {
                [FieldAttribute("Child Indices", typeof(ChildIndicesElement[]))]
                [ArrayAttribute(8, typeof(ChildIndicesElement))]
                public ChildIndicesElement[] ChildIndices;
                [FieldAttribute("Cache Block Index", typeof(Int16))]
                public Int16 CacheBlockIndex;
                [FieldAttribute("Group Count", typeof(Int16))]
                public Int16 GroupCount;
                [FieldAttribute("Group Start Index", typeof(Int32))]
                public Int32 GroupStartIndex;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.ChildIndices = new ChildIndicesElement[8];
                    this.CacheBlockIndex = 0;
                    this.GroupCount = 0;
                    this.GroupStartIndex = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.CacheBlockIndex = reader.ReadInt16();
                    this.GroupCount = reader.ReadInt16();
                    this.GroupStartIndex = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public sealed class ChildIndicesElement : AbideTagBlock
                {
                    [FieldAttribute("Child Index", typeof(Int16))]
                    public Int16 ChildIndex;
                    public override int Size
                    {
                        get
                        {
                            return 0;
                        }
                    }
                    public override void Initialize()
                    {
                        this.ChildIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.ChildIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            [FieldSetAttribute(64, 4)]
            public sealed class DecoratorProjectedDecalBlock : AbideTagBlock
            {
                [FieldAttribute("Decorator Set", typeof(Byte))]
                public Byte DecoratorSet;
                [FieldAttribute("Decorator Class", typeof(Byte))]
                public Byte DecoratorClass;
                [FieldAttribute("Decorator Permutation", typeof(Byte))]
                public Byte DecoratorPermutation;
                [FieldAttribute("Sprite Index", typeof(Byte))]
                public Byte SpriteIndex;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Left", typeof(Vector3))]
                public Vector3 Left;
                [FieldAttribute("Up", typeof(Vector3))]
                public Vector3 Up;
                [FieldAttribute("Extents", typeof(Vector3))]
                public Vector3 Extents;
                [FieldAttribute("Previous Position", typeof(Vector3))]
                public Vector3 PreviousPosition;
                public override int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public override void Initialize()
                {
                    this.DecoratorSet = 0;
                    this.DecoratorClass = 0;
                    this.DecoratorPermutation = 0;
                    this.SpriteIndex = 0;
                    this.Position = Vector3.Zero;
                    this.Left = Vector3.Zero;
                    this.Up = Vector3.Zero;
                    this.Extents = Vector3.Zero;
                    this.PreviousPosition = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.DecoratorSet = reader.ReadByte();
                    this.DecoratorClass = reader.ReadByte();
                    this.DecoratorPermutation = reader.ReadByte();
                    this.SpriteIndex = reader.ReadByte();
                    this.Position = reader.Read<Vector3>();
                    this.Left = reader.Read<Vector3>();
                    this.Up = reader.Read<Vector3>();
                    this.Extents = reader.Read<Vector3>();
                    this.PreviousPosition = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class GlobalStructurePhysicsStructBlock : AbideTagBlock
        {
            private DataList moppCodeList = new DataList(1048576);
            private DataList breakableSurfacesMoppCodeList = new DataList(1048576);
            private TagBlockList<BreakableSurfaceKeyTableBlock> breakableSurfaceKeyTableList = new TagBlockList<BreakableSurfaceKeyTableBlock>(8192);
            [FieldAttribute("*mopp Code", typeof(TagBlock))]
            [DataAttribute(1048576)]
            public TagBlock MoppCode;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("*mopp Bounds Min", typeof(Vector3))]
            public Vector3 MoppBoundsMin;
            [FieldAttribute("*mopp Bounds Max", typeof(Vector3))]
            public Vector3 MoppBoundsMax;
            [FieldAttribute("*Breakable Surfaces mopp Code", typeof(TagBlock))]
            [DataAttribute(1048576)]
            public TagBlock BreakableSurfacesMoppCode;
            [FieldAttribute("Breakable Surface Key Table", typeof(TagBlock))]
            [BlockAttribute("breakable_surface_key_table_block", 8192, typeof(BreakableSurfaceKeyTableBlock))]
            public TagBlock BreakableSurfaceKeyTable;
            public DataList MoppCodeList
            {
                get
                {
                    return this.moppCodeList;
                }
            }
            public DataList BreakableSurfacesMoppCodeList
            {
                get
                {
                    return this.breakableSurfacesMoppCodeList;
                }
            }
            public TagBlockList<BreakableSurfaceKeyTableBlock> BreakableSurfaceKeyTableList
            {
                get
                {
                    return this.breakableSurfaceKeyTableList;
                }
            }
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.moppCodeList.Clear();
                this.breakableSurfacesMoppCodeList.Clear();
                this.breakableSurfaceKeyTableList.Clear();
                this.MoppCode = TagBlock.Zero;
                this.EmptyString = new byte[4];
                this.MoppBoundsMin = Vector3.Zero;
                this.MoppBoundsMax = Vector3.Zero;
                this.BreakableSurfacesMoppCode = TagBlock.Zero;
                this.BreakableSurfaceKeyTable = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.MoppCode = reader.ReadInt64();
                this.EmptyString = reader.ReadBytes(4);
                this.MoppBoundsMin = reader.Read<Vector3>();
                this.MoppBoundsMax = reader.Read<Vector3>();
                this.BreakableSurfacesMoppCode = reader.ReadInt64();
                this.BreakableSurfaceKeyTable = reader.ReadInt64();
                this.breakableSurfaceKeyTableList.Read(reader, this.BreakableSurfaceKeyTable);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class BreakableSurfaceKeyTableBlock : AbideTagBlock
            {
                [FieldAttribute("*Instanced Geometry Index", typeof(Int16))]
                public Int16 InstancedGeometryIndex;
                [FieldAttribute("*Breakable Surface Index", typeof(Int16))]
                public Int16 BreakableSurfaceIndex;
                [FieldAttribute("*Seed Surface Index", typeof(Int32))]
                public Int32 SeedSurfaceIndex;
                [FieldAttribute("*x0", typeof(Single))]
                public Single X0;
                [FieldAttribute("*x1", typeof(Single))]
                public Single X1;
                [FieldAttribute("*y0", typeof(Single))]
                public Single Y0;
                [FieldAttribute("*y1", typeof(Single))]
                public Single Y1;
                [FieldAttribute("*z0", typeof(Single))]
                public Single Z0;
                [FieldAttribute("*z1", typeof(Single))]
                public Single Z1;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.InstancedGeometryIndex = 0;
                    this.BreakableSurfaceIndex = 0;
                    this.SeedSurfaceIndex = 0;
                    this.X0 = 0;
                    this.X1 = 0;
                    this.Y0 = 0;
                    this.Y1 = 0;
                    this.Z0 = 0;
                    this.Z1 = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.InstancedGeometryIndex = reader.ReadInt16();
                    this.BreakableSurfaceIndex = reader.ReadInt16();
                    this.SeedSurfaceIndex = reader.ReadInt32();
                    this.X0 = reader.ReadSingle();
                    this.X1 = reader.ReadSingle();
                    this.Y0 = reader.ReadSingle();
                    this.Y1 = reader.ReadSingle();
                    this.Z0 = reader.ReadSingle();
                    this.Z1 = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
    }
}
#pragma warning restore CS1591
