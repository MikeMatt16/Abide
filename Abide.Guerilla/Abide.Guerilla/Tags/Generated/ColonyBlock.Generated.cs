#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(76, 4)]
    [TagGroupAttribute("colony", 1668246638u, 4294967293u, typeof(ColonyBlock))]
    public sealed class ColonyBlock : AbideTagBlock
    {
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(12)]
        public Byte[] EmptyString2;
        [FieldAttribute("debug color", typeof(ColorArgbF))]
        public ColorArgbF DebugColor;
        [FieldAttribute("base map", typeof(TagReference))]
        public TagReference BaseMap;
        [FieldAttribute("detail map", typeof(TagReference))]
        public TagReference DetailMap;
        public override int Size
        {
            get
            {
                return 76;
            }
        }
        public override void Initialize()
        {
            this.Flags = ((FlagsOptions)(0));
            this.EmptyString = new byte[2];
            this.EmptyString1 = new byte[4];
            this.EmptyString2 = new byte[12];
            this.DebugColor = ColorArgbF.Zero;
            this.BaseMap = TagReference.Null;
            this.DetailMap = TagReference.Null;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.EmptyString1 = reader.ReadBytes(4);
            this.EmptyString2 = reader.ReadBytes(12);
            this.DebugColor = reader.Read<ColorArgbF>();
            this.BaseMap = reader.Read<TagReference>();
            this.DetailMap = reader.Read<TagReference>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        public enum FlagsOptions : Int16
        {
            Unused = 1,
        }
    }
}
#pragma warning restore CS1591
