#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(88, 4)]
    [TagGroupAttribute("patchy_fog", 1718641512u, 4294967293u, typeof(PatchyFogBlock))]
    public sealed class PatchyFogBlock : AbideTagBlock
    {
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("rotation multiplier:[0,1]", typeof(Single))]
        public Single RotationMultiplier;
        [FieldAttribute("strafing multiplier:[0,1]", typeof(Single))]
        public Single StrafingMultiplier;
        [FieldAttribute("zoom multiplier:[0,1]", typeof(Single))]
        public Single ZoomMultiplier;
        [FieldAttribute("noise map scale#0 defaults to 1", typeof(Single))]
        public Single NoiseMapScale;
        [FieldAttribute("noise map", typeof(TagReference))]
        public TagReference NoiseMap;
        [FieldAttribute("noise vertical scale forward#0 defaults to 1", typeof(Single))]
        public Single NoiseVerticalScaleForward;
        [FieldAttribute("noise vertical scale up#0 defaults to 1", typeof(Single))]
        public Single NoiseVerticalScaleUp;
        [FieldAttribute("noise opacity scale up#0 defaults to 1", typeof(Single))]
        public Single NoiseOpacityScaleUp;
        [FieldAttribute("animation period:seconds", typeof(Single))]
        public Single AnimationPeriod;
        [FieldAttribute("wind acceleration weight:[0,1]", typeof(Single))]
        public Single WindAccelerationWeight;
        [FieldAttribute("wind perpendicular weight:[0,1]", typeof(Single))]
        public Single WindPerpendicularWeight;
        [FieldAttribute("wind constant velocity x:world units per second", typeof(Single))]
        public Single WindConstantVelocityX;
        [FieldAttribute("wind constant velocity y:world units per second", typeof(Single))]
        public Single WindConstantVelocityY;
        [FieldAttribute("wind constant velocity z:world units per second", typeof(Single))]
        public Single WindConstantVelocityZ;
        public override int Size
        {
            get
            {
                return 88;
            }
        }
        public override void Initialize()
        {
            this.Flags = ((FlagsOptions)(0));
            this.EmptyString = new byte[2];
            this.RotationMultiplier = 0;
            this.StrafingMultiplier = 0;
            this.ZoomMultiplier = 0;
            this.NoiseMapScale = 0;
            this.NoiseMap = TagReference.Null;
            this.NoiseVerticalScaleForward = 0;
            this.NoiseVerticalScaleUp = 0;
            this.NoiseOpacityScaleUp = 0;
            this.AnimationPeriod = 0;
            this.WindAccelerationWeight = 0;
            this.WindPerpendicularWeight = 0;
            this.WindConstantVelocityX = 0;
            this.WindConstantVelocityY = 0;
            this.WindConstantVelocityZ = 0;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.RotationMultiplier = reader.ReadSingle();
            this.StrafingMultiplier = reader.ReadSingle();
            this.ZoomMultiplier = reader.ReadSingle();
            this.NoiseMapScale = reader.ReadSingle();
            this.NoiseMap = reader.Read<TagReference>();
            this.NoiseVerticalScaleForward = reader.ReadSingle();
            this.NoiseVerticalScaleUp = reader.ReadSingle();
            this.NoiseOpacityScaleUp = reader.ReadSingle();
            this.AnimationPeriod = reader.ReadSingle();
            this.WindAccelerationWeight = reader.ReadSingle();
            this.WindPerpendicularWeight = reader.ReadSingle();
            this.WindConstantVelocityX = reader.ReadSingle();
            this.WindConstantVelocityY = reader.ReadSingle();
            this.WindConstantVelocityZ = reader.ReadSingle();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        public enum FlagsOptions : Int16
        {
            SeparateLayerDepths = 1,
            SortBehindTransparents = 2,
        }
    }
}
#pragma warning restore CS1591
