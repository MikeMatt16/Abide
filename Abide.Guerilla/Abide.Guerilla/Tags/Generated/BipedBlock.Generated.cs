#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(336, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("biped", 1651077220u, 1970170228u, typeof(BipedBlock))]
    public sealed class BipedBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("moving turning speed:degrees per second", typeof(Single))]
        public Single MovingTurningSpeed;
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int32 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("stationary turning threshold", typeof(Single))]
        public Single StationaryTurningThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("jump velocity:world units per second", typeof(Single))]
        public Single JumpVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("maximum soft landing time:seconds#the longest amount of time the biped can take t" +
            "o recover from a soft landing", typeof(Single))]
        public Single MaximumSoftLandingTime;
        [Abide.Guerilla.Tags.FieldAttribute("maximum hard landing time:seconds#the longest amount of time the biped can take t" +
            "o recover from a hard landing", typeof(Single))]
        public Single MaximumHardLandingTime;
        [Abide.Guerilla.Tags.FieldAttribute("minimum soft landing velocity:world units per second#below this velocity the bipe" +
            "d does not react when landing", typeof(Single))]
        public Single MinimumSoftLandingVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("minimum hard landing velocity:world units per second#below this velocity the bipe" +
            "d will not do a soft landing when returning to the ground", typeof(Single))]
        public Single MinimumHardLandingVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("maximum hard landing velocity:world units per second#the velocity corresponding t" +
            "o the maximum landing time", typeof(Single))]
        public Single MaximumHardLandingVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("death hard landing velocity:world units per second#the maximum velocity with whic" +
            "h a character can strike the ground and live", typeof(Single))]
        public Single DeathHardLandingVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("stun duration#0 is the default.  Bipeds are stuned when damaged by vehicle collis" +
            "ions, also some are when they take emp damage", typeof(Single))]
        public Single StunDuration;
        [Abide.Guerilla.Tags.FieldAttribute("standing camera height:world units", typeof(Single))]
        public Single StandingCameraHeight;
        [Abide.Guerilla.Tags.FieldAttribute("crouching camera height:world units", typeof(Single))]
        public Single CrouchingCameraHeight;
        [Abide.Guerilla.Tags.FieldAttribute("crouch transition time:seconds", typeof(Single))]
        public Single CrouchTransitionTime;
        [Abide.Guerilla.Tags.FieldAttribute("camera interpolation start:degrees#looking-downward angle that starts camera inte" +
            "rpolation to fp position", typeof(Single))]
        public Single CameraInterpolationStart;
        [Abide.Guerilla.Tags.FieldAttribute("camera interpolation end:degrees#looking-downward angle at which camera interpola" +
            "tion to fp position is complete", typeof(Single))]
        public Single CameraInterpolationEnd;
        [Abide.Guerilla.Tags.FieldAttribute("camera forward movement scale#amount of fp camera movement forward and back (1.0 " +
            "is full)", typeof(Single))]
        public Single CameraForwardMovementScale;
        [Abide.Guerilla.Tags.FieldAttribute("camera side movement scale#amount of fp camera movement side-to-side (1.0 is full" +
            ")", typeof(Single))]
        public Single CameraSideMovementScale;
        [Abide.Guerilla.Tags.FieldAttribute("camera vertical movement scale#amount of fp camera movement vertically (1.0 is fu" +
            "ll)", typeof(Single))]
        public Single CameraVerticalMovementScale;
        [Abide.Guerilla.Tags.FieldAttribute("camera exclusion distance:world units#fp camera must always be at least this far " +
            "out from root node", typeof(Single))]
        public Single CameraExclusionDistance;
        [Abide.Guerilla.Tags.FieldAttribute("autoaim width:world units", typeof(Single))]
        public Single AutoaimWidth;
        [Abide.Guerilla.Tags.FieldAttribute("lock-on data", typeof(BipedLockOnDataStructBlock))]
        public BipedLockOnDataStructBlock LockOnData;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(16)]
        public Byte[] EmptyString4;
        [Abide.Guerilla.Tags.FieldAttribute("head shot acc scale#when the biped ragdolls from a head shot it acceleartes based" +
            " on this value.  0 defaults to the standard acceleration scale", typeof(Single))]
        public Single HeadShotAccScale;
        [Abide.Guerilla.Tags.FieldAttribute("area damage effect", typeof(TagReference))]
        public TagReference AreaDamageEffect;
        [Abide.Guerilla.Tags.FieldAttribute("physics", typeof(CharacterPhysicsStructBlock))]
        public CharacterPhysicsStructBlock Physics;
        [Abide.Guerilla.Tags.FieldAttribute("contact points#these are the points where the biped touches the ground", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("contact_point_block", 3, typeof(ContactPointBlock))]
        public TagBlock ContactPoints;
        [Abide.Guerilla.Tags.FieldAttribute("reanimation character#when the flood reanimate this guy, he turns into a ...", typeof(TagReference))]
        public TagReference ReanimationCharacter;
        [Abide.Guerilla.Tags.FieldAttribute("death spawn character#when I die, out of the ashes of my death crawls a ...", typeof(TagReference))]
        public TagReference DeathSpawnCharacter;
        [Abide.Guerilla.Tags.FieldAttribute("death spawn count", typeof(Int16))]
        public Int16 DeathSpawnCount;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString6;
        public int Size
        {
            get
            {
                return 336;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
        public sealed class ContactPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("marker name^", typeof(StringId))]
            public StringId MarkerName;
            public int Size
            {
                get
                {
                    return 4;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class BipedLockOnDataStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("lock on distance", typeof(Single))]
            public Single LockOnDistance;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                LockedByHumanTargeting = 1,
                LockedByPlasmaTargeting = 2,
                AlwaysLockedByPlasmaTargeting = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(160, 4)]
        public sealed class CharacterPhysicsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("height standing", typeof(Single))]
            public Single HeightStanding;
            [Abide.Guerilla.Tags.FieldAttribute("height crouching", typeof(Single))]
            public Single HeightCrouching;
            [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
            public Single Radius;
            [Abide.Guerilla.Tags.FieldAttribute("mass", typeof(Single))]
            public Single Mass;
            [Abide.Guerilla.Tags.FieldAttribute("living material name#collision material used when character is alive", typeof(StringId))]
            public StringId LivingMaterialName;
            [Abide.Guerilla.Tags.FieldAttribute("dead material name#collision material used when character is dead", typeof(StringId))]
            public StringId DeadMaterialName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("dead sphere shapes", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("spheres_block", 1024, typeof(SpheresBlock))]
            public TagBlock DeadSphereShapes;
            [Abide.Guerilla.Tags.FieldAttribute("pill shapes", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("pills_block", 1024, typeof(PillsBlock))]
            public TagBlock PillShapes;
            [Abide.Guerilla.Tags.FieldAttribute("sphere shapes", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("spheres_block", 1024, typeof(SpheresBlock))]
            public TagBlock SphereShapes;
            [Abide.Guerilla.Tags.FieldAttribute("ground physics", typeof(CharacterPhysicsGroundStructBlock))]
            public CharacterPhysicsGroundStructBlock GroundPhysics;
            [Abide.Guerilla.Tags.FieldAttribute("flying physics", typeof(CharacterPhysicsFlyingStructBlock))]
            public CharacterPhysicsFlyingStructBlock FlyingPhysics;
            [Abide.Guerilla.Tags.FieldAttribute("dead physics", typeof(CharacterPhysicsDeadStructBlock))]
            public CharacterPhysicsDeadStructBlock DeadPhysics;
            [Abide.Guerilla.Tags.FieldAttribute("sentinel physics", typeof(CharacterPhysicsSentinelStructBlock))]
            public CharacterPhysicsSentinelStructBlock SentinelPhysics;
            public int Size
            {
                get
                {
                    return 160;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(128, 16)]
            public sealed class SpheresBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("material*", typeof(Int16))]
                public Int16 Material;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("relative mass scale", typeof(Single))]
                public Single RelativeMassScale;
                [Abide.Guerilla.Tags.FieldAttribute("friction", typeof(Single))]
                public Single Friction;
                [Abide.Guerilla.Tags.FieldAttribute("restitution", typeof(Single))]
                public Single Restitution;
                [Abide.Guerilla.Tags.FieldAttribute("volume *", typeof(Single))]
                public Single Volume;
                [Abide.Guerilla.Tags.FieldAttribute("mass*", typeof(Single))]
                public Single Mass;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("phantom*", typeof(Int16))]
                public Int16 Phantom;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("size*", typeof(Int16))]
                public Int16 Size1;
                [Abide.Guerilla.Tags.FieldAttribute("count*", typeof(Int16))]
                public Int16 Count;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("radius*", typeof(Single))]
                public Single Radius;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("size*", typeof(Int16))]
                public Int16 Size2;
                [Abide.Guerilla.Tags.FieldAttribute("count*", typeof(Int16))]
                public Int16 Count1;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString4;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString5;
                [Abide.Guerilla.Tags.FieldAttribute("rotation i*", typeof(Vector3))]
                public Vector3 RotationI;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString6;
                [Abide.Guerilla.Tags.FieldAttribute("rotation j*", typeof(Vector3))]
                public Vector3 RotationJ;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString7;
                [Abide.Guerilla.Tags.FieldAttribute("rotation k*", typeof(Vector3))]
                public Vector3 RotationK;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString8;
                [Abide.Guerilla.Tags.FieldAttribute("translation*", typeof(Vector3))]
                public Vector3 Translation;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString9;
                public int Size
                {
                    get
                    {
                        return 128;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Unused = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(80, 16)]
            public sealed class PillsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("name^*", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("material*", typeof(Int16))]
                public Int16 Material;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("relative mass scale", typeof(Single))]
                public Single RelativeMassScale;
                [Abide.Guerilla.Tags.FieldAttribute("friction", typeof(Single))]
                public Single Friction;
                [Abide.Guerilla.Tags.FieldAttribute("restitution", typeof(Single))]
                public Single Restitution;
                [Abide.Guerilla.Tags.FieldAttribute("volume *", typeof(Single))]
                public Single Volume;
                [Abide.Guerilla.Tags.FieldAttribute("mass*", typeof(Single))]
                public Single Mass;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("phantom*", typeof(Int16))]
                public Int16 Phantom;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("size*", typeof(Int16))]
                public Int16 Size1;
                [Abide.Guerilla.Tags.FieldAttribute("count*", typeof(Int16))]
                public Int16 Count;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString2;
                [Abide.Guerilla.Tags.FieldAttribute("radius*", typeof(Single))]
                public Single Radius;
                [Abide.Guerilla.Tags.FieldAttribute("bottom*", typeof(Vector3))]
                public Vector3 Bottom;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString3;
                [Abide.Guerilla.Tags.FieldAttribute("top*", typeof(Vector3))]
                public Vector3 Top;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString4;
                public int Size
                {
                    get
                    {
                        return 80;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    Unused = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(48, 4)]
            public sealed class CharacterPhysicsGroundStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("maximum slope angle:degrees", typeof(Single))]
                public Single MaximumSlopeAngle;
                [Abide.Guerilla.Tags.FieldAttribute("downhill falloff angle:degrees", typeof(Single))]
                public Single DownhillFalloffAngle;
                [Abide.Guerilla.Tags.FieldAttribute("downhill cutoff angle:degrees", typeof(Single))]
                public Single DownhillCutoffAngle;
                [Abide.Guerilla.Tags.FieldAttribute("uphill falloff angle:degrees", typeof(Single))]
                public Single UphillFalloffAngle;
                [Abide.Guerilla.Tags.FieldAttribute("uphill cutoff angle:degrees", typeof(Single))]
                public Single UphillCutoffAngle;
                [Abide.Guerilla.Tags.FieldAttribute("downhill velocity scale", typeof(Single))]
                public Single DownhillVelocityScale;
                [Abide.Guerilla.Tags.FieldAttribute("uphill velocity scale", typeof(Single))]
                public Single UphillVelocityScale;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(20)]
                public Byte[] EmptyString2;
                public int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(44, 4)]
            public sealed class CharacterPhysicsFlyingStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bank angle:degrees#angle at which we bank left/right when sidestepping or turning" +
                    " while moving forwards", typeof(Single))]
                public Single BankAngle;
                [Abide.Guerilla.Tags.FieldAttribute("bank apply time:seconds#time it takes us to apply a bank", typeof(Single))]
                public Single BankApplyTime;
                [Abide.Guerilla.Tags.FieldAttribute("bank decay time:seconds#time it takes us to recover from a bank", typeof(Single))]
                public Single BankDecayTime;
                [Abide.Guerilla.Tags.FieldAttribute("pitch ratio#amount that we pitch up/down when moving up or down", typeof(Single))]
                public Single PitchRatio;
                [Abide.Guerilla.Tags.FieldAttribute("max velocity:world units per second#max velocity when not crouching", typeof(Single))]
                public Single MaxVelocity;
                [Abide.Guerilla.Tags.FieldAttribute("max sidestep velocity:world units per second#max sideways or up/down velocity whe" +
                    "n not crouching", typeof(Single))]
                public Single MaxSidestepVelocity;
                [Abide.Guerilla.Tags.FieldAttribute("acceleration:world units per second squared", typeof(Single))]
                public Single Acceleration;
                [Abide.Guerilla.Tags.FieldAttribute("deceleration:world units per second squared", typeof(Single))]
                public Single Deceleration;
                [Abide.Guerilla.Tags.FieldAttribute("angular velocity maximum:degrees per second#turn rate", typeof(Single))]
                public Single AngularVelocityMaximum;
                [Abide.Guerilla.Tags.FieldAttribute("angular acceleration maximum:degrees per second squared#turn acceleration rate", typeof(Single))]
                public Single AngularAccelerationMaximum;
                [Abide.Guerilla.Tags.FieldAttribute("crouch velocity modifier:[0,1]#how much slower we fly if crouching (zero = same s" +
                    "peed)", typeof(Single))]
                public Single CrouchVelocityModifier;
                public int Size
                {
                    get
                    {
                        return 44;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
            public sealed class CharacterPhysicsDeadStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(0, 4)]
            public sealed class CharacterPhysicsSentinelStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                public int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            public enum FlagsOptions
            {
                CenteredAtOrigin = 1,
                ShapeSpherical = 2,
                UsePlayerPhysics = 4,
                ClimbAnySurface = 8,
                Flying = 16,
                NotPhysical = 32,
                DeadCharacterCollisionGroup = 64,
            }
        }
        public enum FlagsOptions
        {
            TurnsWithoutAnimating = 1,
            PassesThroughOtherBipeds = 2,
            ImmuneToFallingDamage = 4,
            RotateWhileAirborne = 8,
            UsesLimpBodyPhysics = 16,
            Unused = 32,
            RandomSpeedIncrease = 64,
            Unused1 = 128,
            SpawnDeathChildrenOnDestroy = 256,
            StunnedByEmpDamage = 512,
            DeadPhysicsWhenStunned = 1024,
            AlwaysRagdollWhenDead = 2048,
        }
    }
}
#pragma warning restore CS1591
