#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(128, 4)]
    [TagGroupAttribute("physics", 1885895027u, 4294967293u, typeof(PhysicsBlock))]
    public sealed class PhysicsBlock : AbideTagBlock
    {
        private TagBlockList<InertialMatrixBlock> inertialMatrixAndInverseList = new TagBlockList<InertialMatrixBlock>(2);
        private TagBlockList<PoweredMassPointBlock> poweredMassPointsList = new TagBlockList<PoweredMassPointBlock>(32);
        private TagBlockList<MassPointBlock> massPointsList = new TagBlockList<MassPointBlock>(32);
        [FieldAttribute("radius#positive uses old inferior physics, negative uses new improved physics", typeof(Single))]
        public Single Radius;
        [FieldAttribute("moment scale", typeof(Single))]
        public Single MomentScale;
        [FieldAttribute("mass", typeof(Single))]
        public Single Mass;
        [FieldAttribute("center of mass*", typeof(Vector3))]
        public Vector3 CenterOfMass;
        [FieldAttribute("density", typeof(Single))]
        public Single Density;
        [FieldAttribute("gravity scale", typeof(Single))]
        public Single GravityScale;
        [FieldAttribute("ground friction", typeof(Single))]
        public Single GroundFriction;
        [FieldAttribute("ground depth", typeof(Single))]
        public Single GroundDepth;
        [FieldAttribute("ground damp fraction", typeof(Single))]
        public Single GroundDampFraction;
        [FieldAttribute("ground normal k1", typeof(Single))]
        public Single GroundNormalK1;
        [FieldAttribute("ground normal k0", typeof(Single))]
        public Single GroundNormalK0;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString;
        [FieldAttribute("water friction", typeof(Single))]
        public Single WaterFriction;
        [FieldAttribute("water depth", typeof(Single))]
        public Single WaterDepth;
        [FieldAttribute("water density", typeof(Single))]
        public Single WaterDensity;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [FieldAttribute("air friction", typeof(Single))]
        public Single AirFriction;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString2;
        [FieldAttribute("xx moment", typeof(Single))]
        public Single XxMoment;
        [FieldAttribute("yy moment", typeof(Single))]
        public Single YyMoment;
        [FieldAttribute("zz moment", typeof(Single))]
        public Single ZzMoment;
        [FieldAttribute("inertial matrix and inverse*", typeof(TagBlock))]
        [BlockAttribute("inertial_matrix_block", 2, typeof(InertialMatrixBlock))]
        public TagBlock InertialMatrixAndInverse;
        [FieldAttribute("powered mass points", typeof(TagBlock))]
        [BlockAttribute("powered_mass_point_block", 32, typeof(PoweredMassPointBlock))]
        public TagBlock PoweredMassPoints;
        [FieldAttribute("mass points", typeof(TagBlock))]
        [BlockAttribute("mass_point_block", 32, typeof(MassPointBlock))]
        public TagBlock MassPoints;
        public TagBlockList<InertialMatrixBlock> InertialMatrixAndInverseList
        {
            get
            {
                return this.inertialMatrixAndInverseList;
            }
        }
        public TagBlockList<PoweredMassPointBlock> PoweredMassPointsList
        {
            get
            {
                return this.poweredMassPointsList;
            }
        }
        public TagBlockList<MassPointBlock> MassPointsList
        {
            get
            {
                return this.massPointsList;
            }
        }
        public override int Size
        {
            get
            {
                return 128;
            }
        }
        public override void Initialize()
        {
            this.inertialMatrixAndInverseList.Clear();
            this.poweredMassPointsList.Clear();
            this.massPointsList.Clear();
            this.Radius = 0;
            this.MomentScale = 0;
            this.Mass = 0;
            this.CenterOfMass = Vector3.Zero;
            this.Density = 0;
            this.GravityScale = 0;
            this.GroundFriction = 0;
            this.GroundDepth = 0;
            this.GroundDampFraction = 0;
            this.GroundNormalK1 = 0;
            this.GroundNormalK0 = 0;
            this.EmptyString = new byte[4];
            this.WaterFriction = 0;
            this.WaterDepth = 0;
            this.WaterDensity = 0;
            this.EmptyString1 = new byte[4];
            this.AirFriction = 0;
            this.EmptyString2 = new byte[4];
            this.XxMoment = 0;
            this.YyMoment = 0;
            this.ZzMoment = 0;
            this.InertialMatrixAndInverse = TagBlock.Zero;
            this.PoweredMassPoints = TagBlock.Zero;
            this.MassPoints = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Radius = reader.ReadSingle();
            this.MomentScale = reader.ReadSingle();
            this.Mass = reader.ReadSingle();
            this.CenterOfMass = reader.Read<Vector3>();
            this.Density = reader.ReadSingle();
            this.GravityScale = reader.ReadSingle();
            this.GroundFriction = reader.ReadSingle();
            this.GroundDepth = reader.ReadSingle();
            this.GroundDampFraction = reader.ReadSingle();
            this.GroundNormalK1 = reader.ReadSingle();
            this.GroundNormalK0 = reader.ReadSingle();
            this.EmptyString = reader.ReadBytes(4);
            this.WaterFriction = reader.ReadSingle();
            this.WaterDepth = reader.ReadSingle();
            this.WaterDensity = reader.ReadSingle();
            this.EmptyString1 = reader.ReadBytes(4);
            this.AirFriction = reader.ReadSingle();
            this.EmptyString2 = reader.ReadBytes(4);
            this.XxMoment = reader.ReadSingle();
            this.YyMoment = reader.ReadSingle();
            this.ZzMoment = reader.ReadSingle();
            this.InertialMatrixAndInverse = reader.ReadInt64();
            this.inertialMatrixAndInverseList.Read(reader, this.InertialMatrixAndInverse);
            this.PoweredMassPoints = reader.ReadInt64();
            this.poweredMassPointsList.Read(reader, this.PoweredMassPoints);
            this.MassPoints = reader.ReadInt64();
            this.massPointsList.Read(reader, this.MassPoints);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(36, 4)]
        public sealed class InertialMatrixBlock : AbideTagBlock
        {
            [FieldAttribute("yy+zz    -xy     -zx", typeof(Vector3))]
            public Vector3 YyzzXyZx;
            [FieldAttribute(" -xy    zz+xx    -yz", typeof(Vector3))]
            public Vector3 XyZzxxYz;
            [FieldAttribute(" -zx     -yz    xx+yy", typeof(Vector3))]
            public Vector3 ZxYzXxyy;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.YyzzXyZx = Vector3.Zero;
                this.XyZzxxYz = Vector3.Zero;
                this.ZxYzXxyy = Vector3.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.YyzzXyZx = reader.Read<Vector3>();
                this.XyZzxxYz = reader.Read<Vector3>();
                this.ZxYzXxyy = reader.Read<Vector3>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(128, 4)]
        public sealed class PoweredMassPointBlock : AbideTagBlock
        {
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("antigrav strength", typeof(Single))]
            public Single AntigravStrength;
            [FieldAttribute("antigrav offset", typeof(Single))]
            public Single AntigravOffset;
            [FieldAttribute("antigrav height", typeof(Single))]
            public Single AntigravHeight;
            [FieldAttribute("antigrav damp fraction", typeof(Single))]
            public Single AntigravDampFraction;
            [FieldAttribute("antigrav normal k1", typeof(Single))]
            public Single AntigravNormalK1;
            [FieldAttribute("antigrav normal k0", typeof(Single))]
            public Single AntigravNormalK0;
            [FieldAttribute("damage source region name", typeof(StringId))]
            public StringId DamageSourceRegionName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(64)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 128;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.Flags = ((FlagsOptions)(0));
                this.AntigravStrength = 0;
                this.AntigravOffset = 0;
                this.AntigravHeight = 0;
                this.AntigravDampFraction = 0;
                this.AntigravNormalK1 = 0;
                this.AntigravNormalK0 = 0;
                this.DamageSourceRegionName = StringId.Zero;
                this.EmptyString = new byte[64];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.AntigravStrength = reader.ReadSingle();
                this.AntigravOffset = reader.ReadSingle();
                this.AntigravHeight = reader.ReadSingle();
                this.AntigravDampFraction = reader.ReadSingle();
                this.AntigravNormalK1 = reader.ReadSingle();
                this.AntigravNormalK0 = reader.ReadSingle();
                this.DamageSourceRegionName = reader.ReadInt32();
                this.EmptyString = reader.ReadBytes(64);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                GroundFriction = 1,
                WaterFriction = 2,
                AirFriction = 4,
                WaterLift = 8,
                AirLift = 16,
                Thrust = 32,
                Antigrav = 64,
                GetsDamageFromRegion = 128,
            }
        }
        [FieldSetAttribute(128, 4)]
        public sealed class MassPointBlock : AbideTagBlock
        {
            [FieldAttribute("name^*", typeof(String32))]
            public String32 Name;
            [FieldAttribute("powered mass point", typeof(Int16))]
            public Int16 PoweredMassPoint;
            [FieldAttribute("model node*", typeof(Int16))]
            public Int16 ModelNode;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("relative mass", typeof(Single))]
            public Single RelativeMass;
            [FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [FieldAttribute("relative density", typeof(Single))]
            public Single RelativeDensity;
            [FieldAttribute("density*", typeof(Single))]
            public Single Density;
            [FieldAttribute("position", typeof(Vector3))]
            public Vector3 Position;
            [FieldAttribute("forward", typeof(Vector3))]
            public Vector3 Forward;
            [FieldAttribute("up", typeof(Vector3))]
            public Vector3 Up;
            [FieldAttribute("friction type", typeof(FrictionTypeOptions))]
            [OptionsAttribute(typeof(FrictionTypeOptions), false)]
            public FrictionTypeOptions FrictionType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("friction parallel scale", typeof(Single))]
            public Single FrictionParallelScale;
            [FieldAttribute("friction perpendicular scale", typeof(Single))]
            public Single FrictionPerpendicularScale;
            [FieldAttribute("radius", typeof(Single))]
            public Single Radius;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 128;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.PoweredMassPoint = 0;
                this.ModelNode = 0;
                this.Flags = ((FlagsOptions)(0));
                this.RelativeMass = 0;
                this.Mass = 0;
                this.RelativeDensity = 0;
                this.Density = 0;
                this.Position = Vector3.Zero;
                this.Forward = Vector3.Zero;
                this.Up = Vector3.Zero;
                this.FrictionType = ((FrictionTypeOptions)(0));
                this.EmptyString = new byte[2];
                this.FrictionParallelScale = 0;
                this.FrictionPerpendicularScale = 0;
                this.Radius = 0;
                this.EmptyString1 = new byte[20];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.PoweredMassPoint = reader.ReadInt16();
                this.ModelNode = reader.ReadInt16();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.RelativeMass = reader.ReadSingle();
                this.Mass = reader.ReadSingle();
                this.RelativeDensity = reader.ReadSingle();
                this.Density = reader.ReadSingle();
                this.Position = reader.Read<Vector3>();
                this.Forward = reader.Read<Vector3>();
                this.Up = reader.Read<Vector3>();
                this.FrictionType = ((FrictionTypeOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.FrictionParallelScale = reader.ReadSingle();
                this.FrictionPerpendicularScale = reader.ReadSingle();
                this.Radius = reader.ReadSingle();
                this.EmptyString1 = reader.ReadBytes(20);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                Metallic = 1,
            }
            public enum FrictionTypeOptions : Int16
            {
                Point = 0,
                Forward = 1,
                Left = 2,
                Up = 3,
            }
        }
    }
}
#pragma warning restore CS1591
