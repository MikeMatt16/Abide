#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("physics", 1885895027u, 4294967293u, typeof(PhysicsBlock))]
    public sealed class PhysicsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("radius#positive uses old inferior physics, negative uses new improved physics", typeof(Single))]
        public Single Radius;
        [Abide.Guerilla.Tags.FieldAttribute("moment scale", typeof(Single))]
        public Single MomentScale;
        [Abide.Guerilla.Tags.FieldAttribute("mass", typeof(Single))]
        public Single Mass;
        [Abide.Guerilla.Tags.FieldAttribute("center of mass*", typeof(Vector3))]
        public Vector3 CenterOfMass;
        [Abide.Guerilla.Tags.FieldAttribute("density", typeof(Single))]
        public Single Density;
        [Abide.Guerilla.Tags.FieldAttribute("gravity scale", typeof(Single))]
        public Single GravityScale;
        [Abide.Guerilla.Tags.FieldAttribute("ground friction", typeof(Single))]
        public Single GroundFriction;
        [Abide.Guerilla.Tags.FieldAttribute("ground depth", typeof(Single))]
        public Single GroundDepth;
        [Abide.Guerilla.Tags.FieldAttribute("ground damp fraction", typeof(Single))]
        public Single GroundDampFraction;
        [Abide.Guerilla.Tags.FieldAttribute("ground normal k1", typeof(Single))]
        public Single GroundNormalK1;
        [Abide.Guerilla.Tags.FieldAttribute("ground normal k0", typeof(Single))]
        public Single GroundNormalK0;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("water friction", typeof(Single))]
        public Single WaterFriction;
        [Abide.Guerilla.Tags.FieldAttribute("water depth", typeof(Single))]
        public Single WaterDepth;
        [Abide.Guerilla.Tags.FieldAttribute("water density", typeof(Single))]
        public Single WaterDensity;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("air friction", typeof(Single))]
        public Single AirFriction;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString2;
        [Abide.Guerilla.Tags.FieldAttribute("xx moment", typeof(Single))]
        public Single XxMoment;
        [Abide.Guerilla.Tags.FieldAttribute("yy moment", typeof(Single))]
        public Single YyMoment;
        [Abide.Guerilla.Tags.FieldAttribute("zz moment", typeof(Single))]
        public Single ZzMoment;
        [Abide.Guerilla.Tags.FieldAttribute("inertial matrix and inverse*", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("inertial_matrix_block", 2, typeof(InertialMatrixBlock))]
        public TagBlock InertialMatrixAndInverse;
        [Abide.Guerilla.Tags.FieldAttribute("powered mass points", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("powered_mass_point_block", 32, typeof(PoweredMassPointBlock))]
        public TagBlock PoweredMassPoints;
        [Abide.Guerilla.Tags.FieldAttribute("mass points", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("mass_point_block", 32, typeof(MassPointBlock))]
        public TagBlock MassPoints;
        public int Size
        {
            get
            {
                return 128;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(36, 4)]
        public sealed class InertialMatrixBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("yy+zz    -xy     -zx", typeof(Vector3))]
            public Vector3 YyzzXyZx;
            [Abide.Guerilla.Tags.FieldAttribute(" -xy    zz+xx    -yz", typeof(Vector3))]
            public Vector3 XyZzxxYz;
            [Abide.Guerilla.Tags.FieldAttribute(" -zx     -yz    xx+yy", typeof(Vector3))]
            public Vector3 ZxYzXxyy;
            public int Size
            {
                get
                {
                    return 36;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
        public sealed class PoweredMassPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("antigrav strength", typeof(Single))]
            public Single AntigravStrength;
            [Abide.Guerilla.Tags.FieldAttribute("antigrav offset", typeof(Single))]
            public Single AntigravOffset;
            [Abide.Guerilla.Tags.FieldAttribute("antigrav height", typeof(Single))]
            public Single AntigravHeight;
            [Abide.Guerilla.Tags.FieldAttribute("antigrav damp fraction", typeof(Single))]
            public Single AntigravDampFraction;
            [Abide.Guerilla.Tags.FieldAttribute("antigrav normal k1", typeof(Single))]
            public Single AntigravNormalK1;
            [Abide.Guerilla.Tags.FieldAttribute("antigrav normal k0", typeof(Single))]
            public Single AntigravNormalK0;
            [Abide.Guerilla.Tags.FieldAttribute("damage source region name", typeof(StringId))]
            public StringId DamageSourceRegionName;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(64)]
            public Byte[] EmptyString;
            public int Size
            {
                get
                {
                    return 128;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                GroundFriction = 1,
                WaterFriction = 2,
                AirFriction = 4,
                WaterLift = 8,
                AirLift = 16,
                Thrust = 32,
                Antigrav = 64,
                GetsDamageFromRegion = 128,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(128, 4)]
        public sealed class MassPointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^*", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("powered mass point", typeof(Int16))]
            public Int16 PoweredMassPoint;
            [Abide.Guerilla.Tags.FieldAttribute("model node*", typeof(Int16))]
            public Int16 ModelNode;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("relative mass", typeof(Single))]
            public Single RelativeMass;
            [Abide.Guerilla.Tags.FieldAttribute("mass*", typeof(Single))]
            public Single Mass;
            [Abide.Guerilla.Tags.FieldAttribute("relative density", typeof(Single))]
            public Single RelativeDensity;
            [Abide.Guerilla.Tags.FieldAttribute("density*", typeof(Single))]
            public Single Density;
            [Abide.Guerilla.Tags.FieldAttribute("position", typeof(Vector3))]
            public Vector3 Position;
            [Abide.Guerilla.Tags.FieldAttribute("forward", typeof(Vector3))]
            public Vector3 Forward;
            [Abide.Guerilla.Tags.FieldAttribute("up", typeof(Vector3))]
            public Vector3 Up;
            [Abide.Guerilla.Tags.FieldAttribute("friction type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FrictionTypeOptions), false)]
            public Int16 FrictionType;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("friction parallel scale", typeof(Single))]
            public Single FrictionParallelScale;
            [Abide.Guerilla.Tags.FieldAttribute("friction perpendicular scale", typeof(Single))]
            public Single FrictionPerpendicularScale;
            [Abide.Guerilla.Tags.FieldAttribute("radius", typeof(Single))]
            public Single Radius;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(20)]
            public Byte[] EmptyString1;
            public int Size
            {
                get
                {
                    return 128;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                Metallic = 1,
            }
            public enum FrictionTypeOptions
            {
                Point = 0,
                Forward = 1,
                Left = 2,
                Up = 3,
            }
        }
    }
}
#pragma warning restore CS1591
