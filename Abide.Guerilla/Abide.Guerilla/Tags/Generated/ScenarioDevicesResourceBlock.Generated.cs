#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(144, 4)]
    [TagGroupAttribute("scenario_devices_resource", 1684501034u, 4294967293u, typeof(ScenarioDevicesResourceBlock))]
    public sealed class ScenarioDevicesResourceBlock : AbideTagBlock
    {
        private TagBlockList<ScenarioObjectNamesBlock> namesList = new TagBlockList<ScenarioObjectNamesBlock>(640);
        private TagBlockList<DontUseMeScenarioEnvironmentObjectBlock> list = new TagBlockList<DontUseMeScenarioEnvironmentObjectBlock>(4096);
        private TagBlockList<ScenarioStructureBspReferenceBlock> structureReferencesList = new TagBlockList<ScenarioStructureBspReferenceBlock>(16);
        private TagBlockList<DeviceGroupBlock> deviceGroupsList = new TagBlockList<DeviceGroupBlock>(128);
        private TagBlockList<ScenarioMachineBlock> machinesList = new TagBlockList<ScenarioMachineBlock>(400);
        private TagBlockList<ScenarioMachinePaletteBlock> machinesPaletteList = new TagBlockList<ScenarioMachinePaletteBlock>(256);
        private TagBlockList<ScenarioControlBlock> controlsList = new TagBlockList<ScenarioControlBlock>(100);
        private TagBlockList<ScenarioControlPaletteBlock> controlsPaletteList = new TagBlockList<ScenarioControlPaletteBlock>(256);
        private TagBlockList<ScenarioLightFixtureBlock> lightFixturesList = new TagBlockList<ScenarioLightFixtureBlock>(500);
        private TagBlockList<ScenarioLightFixturePaletteBlock> lightFixturesPaletteList = new TagBlockList<ScenarioLightFixturePaletteBlock>(256);
        private TagBlockList<GScenarioEditorFolderBlock> editorFoldersList = new TagBlockList<GScenarioEditorFolderBlock>(32767);
        [FieldAttribute("Names", typeof(TagBlock))]
        [BlockAttribute("scenario_object_names_block", 640, typeof(ScenarioObjectNamesBlock))]
        public TagBlock Names;
        [FieldAttribute("*", typeof(TagBlock))]
        [BlockAttribute("dont_use_me_scenario_environment_object_block", 4096, typeof(DontUseMeScenarioEnvironmentObjectBlock))]
        public TagBlock EmptyString;
        [FieldAttribute("Structure References", typeof(TagBlock))]
        [BlockAttribute("scenario_structure_bsp_reference_block", 16, typeof(ScenarioStructureBspReferenceBlock))]
        public TagBlock StructureReferences;
        [FieldAttribute("Device Groups", typeof(TagBlock))]
        [BlockAttribute("device_group_block", 128, typeof(DeviceGroupBlock))]
        public TagBlock DeviceGroups;
        [FieldAttribute("Machines", typeof(TagBlock))]
        [BlockAttribute("scenario_machine_block", 400, typeof(ScenarioMachineBlock))]
        public TagBlock Machines;
        [FieldAttribute("Machines Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_machine_palette_block", 256, typeof(ScenarioMachinePaletteBlock))]
        public TagBlock MachinesPalette;
        [FieldAttribute("Controls", typeof(TagBlock))]
        [BlockAttribute("scenario_control_block", 100, typeof(ScenarioControlBlock))]
        public TagBlock Controls;
        [FieldAttribute("Controls Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_control_palette_block", 256, typeof(ScenarioControlPaletteBlock))]
        public TagBlock ControlsPalette;
        [FieldAttribute("Light Fixtures", typeof(TagBlock))]
        [BlockAttribute("scenario_light_fixture_block", 500, typeof(ScenarioLightFixtureBlock))]
        public TagBlock LightFixtures;
        [FieldAttribute("Light Fixtures Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_light_fixture_palette_block", 256, typeof(ScenarioLightFixturePaletteBlock))]
        public TagBlock LightFixturesPalette;
        [FieldAttribute("next machine id salt*", typeof(Int32))]
        public Int32 NextMachineIdSalt;
        [FieldAttribute("Next Control ID Salt*", typeof(Int32))]
        public Int32 NextControlIdSalt;
        [FieldAttribute("Next Light Fixture ID Salt*", typeof(Int32))]
        public Int32 NextLightFixtureIdSalt;
        [FieldAttribute("Editor Folders*", typeof(TagBlock))]
        [BlockAttribute("g_scenario_editor_folder_block", 32767, typeof(GScenarioEditorFolderBlock))]
        public TagBlock EditorFolders;
        public TagBlockList<ScenarioObjectNamesBlock> NamesList
        {
            get
            {
                return this.namesList;
            }
        }
        public TagBlockList<DontUseMeScenarioEnvironmentObjectBlock> List
        {
            get
            {
                return this.list;
            }
        }
        public TagBlockList<ScenarioStructureBspReferenceBlock> StructureReferencesList
        {
            get
            {
                return this.structureReferencesList;
            }
        }
        public TagBlockList<DeviceGroupBlock> DeviceGroupsList
        {
            get
            {
                return this.deviceGroupsList;
            }
        }
        public TagBlockList<ScenarioMachineBlock> MachinesList
        {
            get
            {
                return this.machinesList;
            }
        }
        public TagBlockList<ScenarioMachinePaletteBlock> MachinesPaletteList
        {
            get
            {
                return this.machinesPaletteList;
            }
        }
        public TagBlockList<ScenarioControlBlock> ControlsList
        {
            get
            {
                return this.controlsList;
            }
        }
        public TagBlockList<ScenarioControlPaletteBlock> ControlsPaletteList
        {
            get
            {
                return this.controlsPaletteList;
            }
        }
        public TagBlockList<ScenarioLightFixtureBlock> LightFixturesList
        {
            get
            {
                return this.lightFixturesList;
            }
        }
        public TagBlockList<ScenarioLightFixturePaletteBlock> LightFixturesPaletteList
        {
            get
            {
                return this.lightFixturesPaletteList;
            }
        }
        public TagBlockList<GScenarioEditorFolderBlock> EditorFoldersList
        {
            get
            {
                return this.editorFoldersList;
            }
        }
        public override int Size
        {
            get
            {
                return 144;
            }
        }
        public override void Initialize()
        {
            this.namesList.Clear();
            this.list.Clear();
            this.structureReferencesList.Clear();
            this.deviceGroupsList.Clear();
            this.machinesList.Clear();
            this.machinesPaletteList.Clear();
            this.controlsList.Clear();
            this.controlsPaletteList.Clear();
            this.lightFixturesList.Clear();
            this.lightFixturesPaletteList.Clear();
            this.editorFoldersList.Clear();
            this.Names = TagBlock.Zero;
            this.EmptyString = TagBlock.Zero;
            this.StructureReferences = TagBlock.Zero;
            this.DeviceGroups = TagBlock.Zero;
            this.Machines = TagBlock.Zero;
            this.MachinesPalette = TagBlock.Zero;
            this.Controls = TagBlock.Zero;
            this.ControlsPalette = TagBlock.Zero;
            this.LightFixtures = TagBlock.Zero;
            this.LightFixturesPalette = TagBlock.Zero;
            this.NextMachineIdSalt = 0;
            this.NextControlIdSalt = 0;
            this.NextLightFixtureIdSalt = 0;
            this.EditorFolders = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Names = reader.ReadInt64();
            this.namesList.Read(reader, this.Names);
            this.EmptyString = reader.ReadInt64();
            this.list.Read(reader, this.EmptyString);
            this.StructureReferences = reader.ReadInt64();
            this.structureReferencesList.Read(reader, this.StructureReferences);
            this.DeviceGroups = reader.ReadInt64();
            this.deviceGroupsList.Read(reader, this.DeviceGroups);
            this.Machines = reader.ReadInt64();
            this.machinesList.Read(reader, this.Machines);
            this.MachinesPalette = reader.ReadInt64();
            this.machinesPaletteList.Read(reader, this.MachinesPalette);
            this.Controls = reader.ReadInt64();
            this.controlsList.Read(reader, this.Controls);
            this.ControlsPalette = reader.ReadInt64();
            this.controlsPaletteList.Read(reader, this.ControlsPalette);
            this.LightFixtures = reader.ReadInt64();
            this.lightFixturesList.Read(reader, this.LightFixtures);
            this.LightFixturesPalette = reader.ReadInt64();
            this.lightFixturesPaletteList.Read(reader, this.LightFixturesPalette);
            this.NextMachineIdSalt = reader.ReadInt32();
            this.NextControlIdSalt = reader.ReadInt32();
            this.NextLightFixtureIdSalt = reader.ReadInt32();
            this.EditorFolders = reader.ReadInt64();
            this.editorFoldersList.Read(reader, this.EditorFolders);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(36, 4)]
        public sealed class ScenarioObjectNamesBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString;
            [FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString1;
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.EmptyString = 0;
                this.EmptyString1 = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.EmptyString = reader.ReadInt16();
                this.EmptyString1 = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class DontUseMeScenarioEnvironmentObjectBlock : AbideTagBlock
        {
            [FieldAttribute("BSP*", typeof(Int16))]
            public Int16 Bsp;
            [FieldAttribute("EMPTY STRING", typeof(Int16))]
            public Int16 EmptyString;
            [FieldAttribute("Unique ID*", typeof(Int32))]
            public Int32 UniqueId;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("Object Definition Tag*", typeof(Tag))]
            public Tag ObjectDefinitionTag;
            [FieldAttribute("Object*^", typeof(Int32))]
            public Int32 Object;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(44)]
            public Byte[] EmptyString2;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.Bsp = 0;
                this.EmptyString = 0;
                this.UniqueId = 0;
                this.EmptyString1 = new byte[4];
                this.ObjectDefinitionTag = "null";
                this.Object = 0;
                this.EmptyString2 = new byte[44];
            }
            public override void Read(BinaryReader reader)
            {
                this.Bsp = reader.ReadInt16();
                this.EmptyString = reader.ReadInt16();
                this.UniqueId = reader.ReadInt32();
                this.EmptyString1 = reader.ReadBytes(4);
                this.ObjectDefinitionTag = reader.Read<Tag>();
                this.Object = reader.ReadInt32();
                this.EmptyString2 = reader.ReadBytes(44);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(84, 4)]
        public sealed class ScenarioStructureBspReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString;
            [FieldAttribute("Structure BSP^", typeof(TagReference))]
            public TagReference StructureBsp;
            [FieldAttribute("Structure Lightmap^", typeof(TagReference))]
            public TagReference StructureLightmap;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("UNUSED radiance est. search distance", typeof(Single))]
            public Single UnusedRadianceEstSearchDistance;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("UNUSED luminels per world unit", typeof(Single))]
            public Single UnusedLuminelsPerWorldUnit;
            [FieldAttribute("UNUSED output white reference", typeof(Single))]
            public Single UnusedOutputWhiteReference;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString3;
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString4;
            [FieldAttribute("Default Sky", typeof(Int16))]
            public Int16 DefaultSky;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString5;
            public override int Size
            {
                get
                {
                    return 84;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new byte[16];
                this.StructureBsp = TagReference.Null;
                this.StructureLightmap = TagReference.Null;
                this.EmptyString1 = new byte[4];
                this.UnusedRadianceEstSearchDistance = 0;
                this.EmptyString2 = new byte[4];
                this.UnusedLuminelsPerWorldUnit = 0;
                this.UnusedOutputWhiteReference = 0;
                this.EmptyString3 = new byte[8];
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString4 = new byte[2];
                this.DefaultSky = 0;
                this.EmptyString5 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadBytes(16);
                this.StructureBsp = reader.Read<TagReference>();
                this.StructureLightmap = reader.Read<TagReference>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.UnusedRadianceEstSearchDistance = reader.ReadSingle();
                this.EmptyString2 = reader.ReadBytes(4);
                this.UnusedLuminelsPerWorldUnit = reader.ReadSingle();
                this.UnusedOutputWhiteReference = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(8);
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString4 = reader.ReadBytes(2);
                this.DefaultSky = reader.ReadInt16();
                this.EmptyString5 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                DefaultSkyEnabled = 1,
            }
        }
        [FieldSetAttribute(40, 4)]
        public sealed class DeviceGroupBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Initial Value:[0,1]", typeof(Single))]
            public Single InitialValue;
            [FieldAttribute("Flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            public override int Size
            {
                get
                {
                    return 40;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.InitialValue = 0;
                this.Flags = ((FlagsOptions)(0));
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.InitialValue = reader.ReadSingle();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                CanChangeOnlyOnce = 1,
            }
        }
        [FieldSetAttribute(76, 4)]
        public sealed class ScenarioMachineBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [FieldAttribute("Machine Data", typeof(ScenarioMachineStructV3Block))]
            public ScenarioMachineStructV3Block MachineData;
            public override int Size
            {
                get
                {
                    return 76;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.DeviceData = new ScenarioDeviceStructBlock();
                this.MachineData = new ScenarioMachineStructV3Block();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.DeviceData = reader.ReadDataStructure<ScenarioDeviceStructBlock>();
                this.MachineData = reader.ReadDataStructure<ScenarioMachineStructV3Block>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : AbideTagBlock
            {
                [FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PowerGroup = 0;
                    this.PositionGroup = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PowerGroup = reader.ReadInt16();
                    this.PositionGroup = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [FieldSetAttribute(16, 4)]
            public sealed class ScenarioMachineStructV3Block : AbideTagBlock
            {
                private TagBlockList<PathfindingObjectIndexListBlock> pathfindingReferencesList = new TagBlockList<PathfindingObjectIndexListBlock>(16);
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Pathfinding References*", typeof(TagBlock))]
                [BlockAttribute("pathfinding_object_index_list_block", 16, typeof(PathfindingObjectIndexListBlock))]
                public TagBlock PathfindingReferences;
                public TagBlockList<PathfindingObjectIndexListBlock> PathfindingReferencesList
                {
                    get
                    {
                        return this.pathfindingReferencesList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.pathfindingReferencesList.Clear();
                    this.Flags = ((FlagsOptions)(0));
                    this.PathfindingReferences = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.PathfindingReferences = reader.ReadInt64();
                    this.pathfindingReferencesList.Read(reader, this.PathfindingReferences);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(4, 4)]
                public sealed class PathfindingObjectIndexListBlock : AbideTagBlock
                {
                    [FieldAttribute("BSP Index", typeof(Int16))]
                    public Int16 BspIndex;
                    [FieldAttribute("Pathfinding Object Index", typeof(Int16))]
                    public Int16 PathfindingObjectIndex;
                    public override int Size
                    {
                        get
                        {
                            return 4;
                        }
                    }
                    public override void Initialize()
                    {
                        this.BspIndex = 0;
                        this.PathfindingObjectIndex = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.BspIndex = reader.ReadInt16();
                        this.PathfindingObjectIndex = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
                public enum FlagsOptions : Int32
                {
                    DoesNotOperateAutomatically = 1,
                    OneSided = 2,
                    NeverAppearsLocked = 4,
                    OpenedByMeleeAttack = 8,
                    OneSidedForPlayer = 16,
                    DoesNotCloseAutomatically = 32,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioMachinePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(68, 4)]
        public sealed class ScenarioControlBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [FieldAttribute("Control Data", typeof(ScenarioControlStructBlock))]
            public ScenarioControlStructBlock ControlData;
            public override int Size
            {
                get
                {
                    return 68;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.DeviceData = new ScenarioDeviceStructBlock();
                this.ControlData = new ScenarioControlStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.DeviceData = reader.ReadDataStructure<ScenarioDeviceStructBlock>();
                this.ControlData = reader.ReadDataStructure<ScenarioControlStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : AbideTagBlock
            {
                [FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PowerGroup = 0;
                    this.PositionGroup = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PowerGroup = reader.ReadInt16();
                    this.PositionGroup = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioControlStructBlock : AbideTagBlock
            {
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("*DON\'T TOUCH THIS", typeof(Int16))]
                public Int16 DontTouchThis;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = ((FlagsOptions)(0));
                    this.DontTouchThis = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.DontTouchThis = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    UsableFromBothSides = 1,
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioControlPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(84, 4)]
        public sealed class ScenarioLightFixtureBlock : AbideTagBlock
        {
            [FieldAttribute("Type", typeof(Int16))]
            public Int16 Type;
            [FieldAttribute("Name^", typeof(Int16))]
            public Int16 Name;
            [FieldAttribute("Object Data", typeof(ScenarioObjectDatumStructBlock))]
            public ScenarioObjectDatumStructBlock ObjectData;
            [FieldAttribute("Device Data", typeof(ScenarioDeviceStructBlock))]
            public ScenarioDeviceStructBlock DeviceData;
            [FieldAttribute("light_fixture data", typeof(ScenarioLightFixtureStructBlock))]
            public ScenarioLightFixtureStructBlock LightFixtureData;
            public override int Size
            {
                get
                {
                    return 84;
                }
            }
            public override void Initialize()
            {
                this.Type = 0;
                this.Name = 0;
                this.ObjectData = new ScenarioObjectDatumStructBlock();
                this.DeviceData = new ScenarioDeviceStructBlock();
                this.LightFixtureData = new ScenarioLightFixtureStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Type = reader.ReadInt16();
                this.Name = reader.ReadInt16();
                this.ObjectData = reader.ReadDataStructure<ScenarioObjectDatumStructBlock>();
                this.DeviceData = reader.ReadDataStructure<ScenarioDeviceStructBlock>();
                this.LightFixtureData = reader.ReadDataStructure<ScenarioLightFixtureStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(48, 4)]
            public sealed class ScenarioObjectDatumStructBlock : AbideTagBlock
            {
                [FieldAttribute("Placement Flags", typeof(PlacementFlagsOptions))]
                [OptionsAttribute(typeof(PlacementFlagsOptions), true)]
                public PlacementFlagsOptions PlacementFlags;
                [FieldAttribute("Position", typeof(Vector3))]
                public Vector3 Position;
                [FieldAttribute("Rotation", typeof(Vector3))]
                public Vector3 Rotation;
                [FieldAttribute("Scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute(")Transform Flags", typeof(TransformFlagsOptions))]
                [OptionsAttribute(typeof(TransformFlagsOptions), true)]
                public TransformFlagsOptions TransformFlags;
                [FieldAttribute("Manual BSP Flags*", typeof(Int16))]
                public Int16 ManualBspFlags;
                [FieldAttribute("Object ID", typeof(ScenarioObjectIdStructBlock))]
                public ScenarioObjectIdStructBlock ObjectId;
                [FieldAttribute("BSP Policy", typeof(BspPolicyOptions))]
                [OptionsAttribute(typeof(BspPolicyOptions), false)]
                public BspPolicyOptions BspPolicy;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                [FieldAttribute("Editor Folder", typeof(Int16))]
                public Int16 EditorFolder;
                public override int Size
                {
                    get
                    {
                        return 48;
                    }
                }
                public override void Initialize()
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(0));
                    this.Position = Vector3.Zero;
                    this.Rotation = Vector3.Zero;
                    this.Scale = 0;
                    this.TransformFlags = ((TransformFlagsOptions)(0));
                    this.ManualBspFlags = 0;
                    this.ObjectId = new ScenarioObjectIdStructBlock();
                    this.BspPolicy = ((BspPolicyOptions)(0));
                    this.EmptyString = new byte[1];
                    this.EditorFolder = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PlacementFlags = ((PlacementFlagsOptions)(reader.ReadInt32()));
                    this.Position = reader.Read<Vector3>();
                    this.Rotation = reader.Read<Vector3>();
                    this.Scale = reader.ReadSingle();
                    this.TransformFlags = ((TransformFlagsOptions)(reader.ReadInt16()));
                    this.ManualBspFlags = reader.ReadInt16();
                    this.ObjectId = reader.ReadDataStructure<ScenarioObjectIdStructBlock>();
                    this.BspPolicy = ((BspPolicyOptions)(reader.ReadByte()));
                    this.EmptyString = reader.ReadBytes(1);
                    this.EditorFolder = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class ScenarioObjectIdStructBlock : AbideTagBlock
                {
                    [FieldAttribute("Unique ID*", typeof(Int32))]
                    public Int32 UniqueId;
                    [FieldAttribute("Origin BSP Index*", typeof(Int16))]
                    public Int16 OriginBspIndex;
                    [FieldAttribute("Type*", typeof(TypeOptions))]
                    [OptionsAttribute(typeof(TypeOptions), false)]
                    public TypeOptions Type;
                    [FieldAttribute("Source*", typeof(SourceOptions))]
                    [OptionsAttribute(typeof(SourceOptions), false)]
                    public SourceOptions Source;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.UniqueId = 0;
                        this.OriginBspIndex = 0;
                        this.Type = ((TypeOptions)(0));
                        this.Source = ((SourceOptions)(0));
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.UniqueId = reader.ReadInt32();
                        this.OriginBspIndex = reader.ReadInt16();
                        this.Type = ((TypeOptions)(reader.ReadByte()));
                        this.Source = ((SourceOptions)(reader.ReadByte()));
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum TypeOptions : Byte
                    {
                        Biped = 0,
                        Vehicle = 1,
                        Weapon = 2,
                        Equipment = 3,
                        Garbage = 4,
                        Projectile = 5,
                        Scenery = 6,
                        Machine = 7,
                        Control = 8,
                        LightFixture = 9,
                        SoundScenery = 10,
                        Crate = 11,
                        Creature = 12,
                    }
                    public enum SourceOptions : Byte
                    {
                        Structure = 0,
                        Editor = 1,
                        Dynamic = 2,
                        Legacy = 3,
                    }
                }
                public enum PlacementFlagsOptions : Int32
                {
                    NotAutomatically = 1,
                    Unused = 2,
                    Unused1 = 4,
                    Unused2 = 8,
                    LockTypeToEnvObject = 16,
                    LockTransformToEnvObject = 32,
                    NeverPlaced = 64,
                    LockNameToEnvObject = 128,
                    CreateAtRest = 256,
                }
                public enum TransformFlagsOptions : Int16
                {
                    Mirrored = 1,
                }
                public enum BspPolicyOptions : Byte
                {
                    Default = 0,
                    AlwaysPlaced = 1,
                    ManualBspPlacement = 2,
                }
            }
            [FieldSetAttribute(8, 4)]
            public sealed class ScenarioDeviceStructBlock : AbideTagBlock
            {
                [FieldAttribute("Power Group", typeof(Int16))]
                public Int16 PowerGroup;
                [FieldAttribute("Position Group", typeof(Int16))]
                public Int16 PositionGroup;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.PowerGroup = 0;
                    this.PositionGroup = 0;
                    this.Flags = ((FlagsOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.PowerGroup = reader.ReadInt16();
                    this.PositionGroup = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int32
                {
                    InitiallyOpen10 = 1,
                    InitiallyOff00 = 2,
                    CanChangeOnlyOnce = 4,
                    PositionReversed = 8,
                    NotUsableFromAnySide = 16,
                }
            }
            [FieldSetAttribute(24, 4)]
            public sealed class ScenarioLightFixtureStructBlock : AbideTagBlock
            {
                [FieldAttribute("Color", typeof(ColorRgbF))]
                public ColorRgbF Color;
                [FieldAttribute("Intensity", typeof(Single))]
                public Single Intensity;
                [FieldAttribute("Falloff Angle:Degrees", typeof(Single))]
                public Single FalloffAngle;
                [FieldAttribute("Cutoff Angle:Degrees", typeof(Single))]
                public Single CutoffAngle;
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.Color = ColorRgbF.Zero;
                    this.Intensity = 0;
                    this.FalloffAngle = 0;
                    this.CutoffAngle = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Color = reader.Read<ColorRgbF>();
                    this.Intensity = reader.ReadSingle();
                    this.FalloffAngle = reader.ReadSingle();
                    this.CutoffAngle = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(48, 4)]
        public sealed class ScenarioLightFixturePaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(TagReference))]
            public TagReference Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Name = TagReference.Null;
                this.EmptyString = new byte[32];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(32);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(260, 4)]
        public sealed class GScenarioEditorFolderBlock : AbideTagBlock
        {
            [FieldAttribute("parent folder", typeof(Int32))]
            public Int32 ParentFolder;
            [FieldAttribute("name^", typeof(String256))]
            public String256 Name;
            public override int Size
            {
                get
                {
                    return 260;
                }
            }
            public override void Initialize()
            {
                this.ParentFolder = 0;
                this.Name = String256.Empty;
            }
            public override void Read(BinaryReader reader)
            {
                this.ParentFolder = reader.ReadInt32();
                this.Name = reader.Read<String256>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
    }
}
#pragma warning restore CS1591
