#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(472, 4)]
    [TagGroupAttribute("multiplayer_variant_settings_interface_definition", 1735356262u, 4294967293u, typeof(MultiplayerVariantSettingsInterfaceDefinitionBlock))]
    public sealed class MultiplayerVariantSettingsInterfaceDefinitionBlock : AbideTagBlock
    {
        private TagBlockList<VariantSettingEditReferenceBlock> gameEngineSettingsList = new TagBlockList<VariantSettingEditReferenceBlock>(40);
        private TagBlockList<GDefaultVariantsBlock> defaultVariantsList = new TagBlockList<GDefaultVariantsBlock>(100);
        [FieldAttribute("", typeof(TagReference))]
        public TagReference EmptyString;
        [FieldAttribute("", typeof(TagReference))]
        public TagReference EmptyString1;
        [FieldAttribute("", typeof(TagReference))]
        public TagReference EmptyString2;
        [FieldAttribute("game engine settings", typeof(TagBlock))]
        [BlockAttribute("variant_setting_edit_reference_block", 40, typeof(VariantSettingEditReferenceBlock))]
        public TagBlock GameEngineSettings;
        [FieldAttribute("default variant strings", typeof(TagReference))]
        public TagReference DefaultVariantStrings;
        [FieldAttribute("default variants", typeof(TagBlock))]
        [BlockAttribute("g_default_variants_block", 100, typeof(GDefaultVariantsBlock))]
        public TagBlock DefaultVariants;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString3;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString4;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString5;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString6;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString7;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString8;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString9;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString10;
        [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
        public CreateNewVariantStructBlock EmptyString11;
        [FieldAttribute("unused_create_new_variants", typeof(UnusedCreateNewVariantsElement[]))]
        [ArrayAttribute(7, typeof(UnusedCreateNewVariantsElement))]
        public UnusedCreateNewVariantsElement[] UnusedCreateNewVariants;
        public TagBlockList<VariantSettingEditReferenceBlock> GameEngineSettingsList
        {
            get
            {
                return this.gameEngineSettingsList;
            }
        }
        public TagBlockList<GDefaultVariantsBlock> DefaultVariantsList
        {
            get
            {
                return this.defaultVariantsList;
            }
        }
        public override int Size
        {
            get
            {
                return 472;
            }
        }
        public override void Initialize()
        {
            this.gameEngineSettingsList.Clear();
            this.defaultVariantsList.Clear();
            this.EmptyString = TagReference.Null;
            this.EmptyString1 = TagReference.Null;
            this.EmptyString2 = TagReference.Null;
            this.GameEngineSettings = TagBlock.Zero;
            this.DefaultVariantStrings = TagReference.Null;
            this.DefaultVariants = TagBlock.Zero;
            this.EmptyString3 = new CreateNewVariantStructBlock();
            this.EmptyString4 = new CreateNewVariantStructBlock();
            this.EmptyString5 = new CreateNewVariantStructBlock();
            this.EmptyString6 = new CreateNewVariantStructBlock();
            this.EmptyString7 = new CreateNewVariantStructBlock();
            this.EmptyString8 = new CreateNewVariantStructBlock();
            this.EmptyString9 = new CreateNewVariantStructBlock();
            this.EmptyString10 = new CreateNewVariantStructBlock();
            this.EmptyString11 = new CreateNewVariantStructBlock();
            this.UnusedCreateNewVariants = new UnusedCreateNewVariantsElement[7];
        }
        public override void Read(BinaryReader reader)
        {
            this.EmptyString = reader.Read<TagReference>();
            this.EmptyString1 = reader.Read<TagReference>();
            this.EmptyString2 = reader.Read<TagReference>();
            this.GameEngineSettings = reader.ReadInt64();
            this.gameEngineSettingsList.Read(reader, this.GameEngineSettings);
            this.DefaultVariantStrings = reader.Read<TagReference>();
            this.DefaultVariants = reader.ReadInt64();
            this.defaultVariantsList.Read(reader, this.DefaultVariants);
            this.EmptyString3 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString4 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString5 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString6 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString7 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString8 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString9 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString10 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            this.EmptyString11 = reader.ReadDataStructure<CreateNewVariantStructBlock>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(32, 4)]
        public sealed class VariantSettingEditReferenceBlock : AbideTagBlock
        {
            private TagBlockList<TextValuePairBlock> optionsList = new TagBlockList<TextValuePairBlock>(32);
            private TagBlockList<NullBlock> emptyStringList = new TagBlockList<NullBlock>(0);
            [FieldAttribute("setting category^", typeof(SettingCategoryOptions))]
            [OptionsAttribute(typeof(SettingCategoryOptions), false)]
            public SettingCategoryOptions SettingCategory;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("options", typeof(TagBlock))]
            [BlockAttribute("text_value_pair_block", 32, typeof(TextValuePairBlock))]
            public TagBlock Options;
            [FieldAttribute("", typeof(TagBlock))]
            [BlockAttribute("null_block", 0, typeof(NullBlock))]
            public TagBlock EmptyString1;
            public TagBlockList<TextValuePairBlock> OptionsList
            {
                get
                {
                    return this.optionsList;
                }
            }
            public TagBlockList<NullBlock> EmptyStringList
            {
                get
                {
                    return this.emptyStringList;
                }
            }
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.optionsList.Clear();
                this.emptyStringList.Clear();
                this.SettingCategory = ((SettingCategoryOptions)(0));
                this.EmptyString = new byte[4];
                this.Options = TagBlock.Zero;
                this.EmptyString1 = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.SettingCategory = ((SettingCategoryOptions)(reader.ReadInt32()));
                this.EmptyString = reader.ReadBytes(4);
                this.Options = reader.ReadInt64();
                this.optionsList.Read(reader, this.Options);
                this.EmptyString1 = reader.ReadInt64();
                this.emptyStringList.Read(reader, this.EmptyString1);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class TextValuePairBlock : AbideTagBlock
            {
                [FieldAttribute("value pairs^", typeof(TagReference))]
                public TagReference ValuePairs;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.ValuePairs = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ValuePairs = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(0, 4)]
            public sealed class NullBlock : AbideTagBlock
            {
                public override int Size
                {
                    get
                    {
                        return 0;
                    }
                }
                public override void Initialize()
                {
                }
                public override void Read(BinaryReader reader)
                {
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum SettingCategoryOptions : Int32
            {
                MatchCtf = 0,
                MatchSlayer = 1,
                MatchOddball = 2,
                MatchKing = 3,
                MatchRace = 4,
                MatchHeadhunter = 5,
                MatchJuggernaut = 6,
                MatchTerritories = 7,
                MatchAssault = 8,
                Players = 9,
                Obsolete = 10,
                Vehicles = 11,
                Equipment = 12,
                GameCtf = 13,
                GameSlayer = 14,
                GameOddball = 15,
                GameKing = 16,
                GameRace = 17,
                GameHeadhunter = 18,
                GameJuggernaut = 19,
                GameTerritories = 20,
                GameAssault = 21,
                QuickOptionsCtf = 22,
                QuickOptionsSlayer = 23,
                QuickOptionsOddball = 24,
                QuickOptionsKing = 25,
                QuickOptionsRace = 26,
                QuickOptionsHeadhunter = 27,
                QuickOptionsJuggernaut = 28,
                QuickOptionsTerritories = 29,
                QuickOptionsAssault = 30,
                TeamCtf = 31,
                TeamSlayer = 32,
                TeamOddball = 33,
                TeamKing = 34,
                TeamRace = 35,
                TeamHeadhunter = 36,
                TeamJuggernaut = 37,
                TeamTerritories = 38,
                TeamAssault = 39,
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class GDefaultVariantsBlock : AbideTagBlock
        {
            private TagBlockList<GDefaultVariantSettingsBlock> settingsList = new TagBlockList<GDefaultVariantSettingsBlock>(112);
            [FieldAttribute("variant name^", typeof(StringId))]
            public StringId VariantName;
            [FieldAttribute("variant type", typeof(VariantTypeOptions))]
            [OptionsAttribute(typeof(VariantTypeOptions), false)]
            public VariantTypeOptions VariantType;
            [FieldAttribute("settings", typeof(TagBlock))]
            [BlockAttribute("g_default_variant_settings_block", 112, typeof(GDefaultVariantSettingsBlock))]
            public TagBlock Settings;
            [FieldAttribute("description index", typeof(Byte))]
            public Byte DescriptionIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(3)]
            public Byte[] EmptyString;
            public TagBlockList<GDefaultVariantSettingsBlock> SettingsList
            {
                get
                {
                    return this.settingsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.settingsList.Clear();
                this.VariantName = StringId.Zero;
                this.VariantType = ((VariantTypeOptions)(0));
                this.Settings = TagBlock.Zero;
                this.DescriptionIndex = 0;
                this.EmptyString = new byte[3];
            }
            public override void Read(BinaryReader reader)
            {
                this.VariantName = reader.ReadInt32();
                this.VariantType = ((VariantTypeOptions)(reader.ReadInt32()));
                this.Settings = reader.ReadInt64();
                this.settingsList.Read(reader, this.Settings);
                this.DescriptionIndex = reader.ReadByte();
                this.EmptyString = reader.ReadBytes(3);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class GDefaultVariantSettingsBlock : AbideTagBlock
            {
                [FieldAttribute("setting category^", typeof(SettingCategoryOptions))]
                [OptionsAttribute(typeof(SettingCategoryOptions), false)]
                public SettingCategoryOptions SettingCategory;
                [FieldAttribute("value", typeof(Int32))]
                public Int32 Value;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.SettingCategory = ((SettingCategoryOptions)(0));
                    this.Value = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.SettingCategory = ((SettingCategoryOptions)(reader.ReadInt32()));
                    this.Value = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum SettingCategoryOptions : Int32
                {
                    MatchRoundSetting = 0,
                    MatchCtfScoreToWin = 1,
                    MatchSlayerScoreToWinRound = 2,
                    MatchOddballScoreToWinRound = 3,
                    MatchKingScoreToWinRound = 4,
                    MatchRaceScoreToWinRound = 5,
                    MatchHeadhunterScoreToWinRound = 6,
                    MatchJuggernautScoreToWinRound = 7,
                    MatchTerritoriesScoreToWinRound = 8,
                    MatchAssaultScoreToWinRound = 9,
                    MatchRoundTimeLimit = 10,
                    MatchRoundsResetMap = 11,
                    MatchTieResolution = 12,
                    MatchObservers = 13,
                    MatchJoinInProgress = 14,
                    MaximumPlayers = 15,
                    LivesPerRound = 16,
                    RespawnTime = 17,
                    SuicidePenalty = 18,
                    Shields = 19,
                    MotionSensor = 20,
                    Invisibility = 21,
                    TeamChanging = 22,
                    TeamScoring = 23,
                    FriendlyFire = 24,
                    TeamRespawnSetting = 25,
                    BetrayalRespawnPenalty = 26,
                    TeamKillerManagement = 27,
                    SlayerBonusPoints = 28,
                    SlayerSuicidePointLoss = 29,
                    SlayerDeathPointLoss = 30,
                    HeadhunterMovingHeadBin = 31,
                    HeadhunterPointMultiplier = 32,
                    HeadhunterSuicidePointLoss = 33,
                    HeadhunterDeathPointLoss = 34,
                    HeadhunterUncontestedBin = 35,
                    HeadhunterSpeedWithHeads = 36,
                    HeadhunterMaxHeadsCarried = 37,
                    KingUncontestedHill = 38,
                    KingTeamTimeMultiplier = 39,
                    KingMovingHill = 40,
                    KingExtraDamageOnHill = 41,
                    KingDmgResistanceOnHill = 42,
                    OddballBallSpawnCount = 43,
                    OddballBallHitDamage = 44,
                    OddballSpeedWithBall = 45,
                    OddballDrivingGunningWithBall = 46,
                    OddballWaypointToBall = 47,
                    RaceRandomTrack = 48,
                    RaceUncontestedFlag = 49,
                    CtfGameType = 50,
                    CtfSuddenDeath = 51,
                    CtfFlagMayBeReturned = 52,
                    CtfFlagAtHomeToScore = 53,
                    CtfFlagResetTime = 54,
                    CtfSpeedWithFlag = 55,
                    CtfFlagHitDamage = 56,
                    CtfDrivingGunningWithFlag = 57,
                    CtfWaypointToOwnFlag = 58,
                    AssaultGameType = 59,
                    AssaultSuddenDeath = 60,
                    AssaultDetonationTime = 61,
                    AssaultBombAtHomeToScore = 62,
                    AssaultArmingTime = 63,
                    AssaultSpeedWithBomb = 64,
                    AssaultBombHitDamage = 65,
                    AssaultDrivingGunningWithBomb = 66,
                    AssaultWaypointToOwnBomb = 67,
                    JuggernautBetrayalPointLoss = 68,
                    JuggernautJuggyExtraDamage = 69,
                    JuggernautJuggyInfiniteAmmo = 70,
                    JuggernautJuggyOvershields = 71,
                    JuggernautJuggyActiveCamo = 72,
                    JuggernautJuggyMotionSensor = 73,
                    TerritoriesTerritoryCount = 74,
                    VehRespawn = 75,
                    VehPrimaryLightLand = 76,
                    VehSecondaryLightLand = 77,
                    VehPrimaryHeavyLand = 78,
                    VehPrimaryFlying = 79,
                    VehSecondaryHeavyLand = 80,
                    VehPrimaryTurret = 81,
                    VehSecondaryTurret = 82,
                    EquipWeaponsOnMap = 83,
                    EquipOvershieldsOnMap = 84,
                    EquipActiveCamoOnMap = 85,
                    EquipGrenadesOnMap = 86,
                    EquipWeaponRespawnTimes = 87,
                    EquipStartingGrenades = 88,
                    EquipPrimaryStartingEquipment = 89,
                    UnsMaxLivingPlayers = 90,
                    UnsTeamsEnabled = 91,
                    UnsAssaultBombMayBeReturned = 92,
                    UnsMaxTeams = 93,
                    UnsEquipSecondaryStartingEquipment = 94,
                    UnsAssaultFuseTime = 95,
                    UnsJuggyMovement = 96,
                    UnsStickyFuse = 97,
                    UnsTerrContestTime = 98,
                    UnsTerrControlTime = 99,
                    UnsOddbCarrInvis = 100,
                    UnsKingInvisInHill = 101,
                    UnsBallCarrDmgResis = 102,
                    UnsKingDmgResInHill = 103,
                    UnsPlayersExDmg = 104,
                    UnsPlayersDmgResis = 105,
                    UnsCtfCarrDmgResis = 106,
                    UnsCtfCarrInvis = 107,
                    UnsJuggyDmgResis = 108,
                    UnsBombCarrDmgResis = 109,
                    UnsBombCarrInvis = 110,
                    UnsForceEvenTeams = 111,
                }
            }
            public enum VariantTypeOptions : Int32
            {
                Slayer = 0,
                Oddball = 1,
                Juggernaut = 2,
                King = 3,
                Ctf = 4,
                Invasion = 5,
                Territories = 6,
            }
        }
        [FieldSetAttribute(24, 4)]
        public sealed class CreateNewVariantStructBlock : AbideTagBlock
        {
            private TagBlockList<GDefaultVariantSettingsBlock> settingsList = new TagBlockList<GDefaultVariantSettingsBlock>(112);
            [FieldAttribute("", typeof(StringId))]
            public StringId EmptyString;
            [FieldAttribute("", typeof(EmptyStringOptions))]
            [OptionsAttribute(typeof(EmptyStringOptions), false)]
            public EmptyStringOptions EmptyString1;
            [FieldAttribute("settings", typeof(TagBlock))]
            [BlockAttribute("g_default_variant_settings_block", 112, typeof(GDefaultVariantSettingsBlock))]
            public TagBlock Settings;
            [FieldAttribute("", typeof(Byte))]
            public Byte EmptyString2;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(3)]
            public Byte[] EmptyString3;
            public TagBlockList<GDefaultVariantSettingsBlock> SettingsList
            {
                get
                {
                    return this.settingsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 24;
                }
            }
            public override void Initialize()
            {
                this.settingsList.Clear();
                this.EmptyString = StringId.Zero;
                this.EmptyString1 = ((EmptyStringOptions)(0));
                this.Settings = TagBlock.Zero;
                this.EmptyString2 = 0;
                this.EmptyString3 = new byte[3];
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadInt32();
                this.EmptyString1 = ((EmptyStringOptions)(reader.ReadInt32()));
                this.Settings = reader.ReadInt64();
                this.settingsList.Read(reader, this.Settings);
                this.EmptyString2 = reader.ReadByte();
                this.EmptyString3 = reader.ReadBytes(3);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(8, 4)]
            public sealed class GDefaultVariantSettingsBlock : AbideTagBlock
            {
                [FieldAttribute("setting category^", typeof(SettingCategoryOptions))]
                [OptionsAttribute(typeof(SettingCategoryOptions), false)]
                public SettingCategoryOptions SettingCategory;
                [FieldAttribute("value", typeof(Int32))]
                public Int32 Value;
                public override int Size
                {
                    get
                    {
                        return 8;
                    }
                }
                public override void Initialize()
                {
                    this.SettingCategory = ((SettingCategoryOptions)(0));
                    this.Value = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.SettingCategory = ((SettingCategoryOptions)(reader.ReadInt32()));
                    this.Value = reader.ReadInt32();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum SettingCategoryOptions : Int32
                {
                    MatchRoundSetting = 0,
                    MatchCtfScoreToWin = 1,
                    MatchSlayerScoreToWinRound = 2,
                    MatchOddballScoreToWinRound = 3,
                    MatchKingScoreToWinRound = 4,
                    MatchRaceScoreToWinRound = 5,
                    MatchHeadhunterScoreToWinRound = 6,
                    MatchJuggernautScoreToWinRound = 7,
                    MatchTerritoriesScoreToWinRound = 8,
                    MatchAssaultScoreToWinRound = 9,
                    MatchRoundTimeLimit = 10,
                    MatchRoundsResetMap = 11,
                    MatchTieResolution = 12,
                    MatchObservers = 13,
                    MatchJoinInProgress = 14,
                    MaximumPlayers = 15,
                    LivesPerRound = 16,
                    RespawnTime = 17,
                    SuicidePenalty = 18,
                    Shields = 19,
                    MotionSensor = 20,
                    Invisibility = 21,
                    TeamChanging = 22,
                    TeamScoring = 23,
                    FriendlyFire = 24,
                    TeamRespawnSetting = 25,
                    BetrayalRespawnPenalty = 26,
                    TeamKillerManagement = 27,
                    SlayerBonusPoints = 28,
                    SlayerSuicidePointLoss = 29,
                    SlayerDeathPointLoss = 30,
                    HeadhunterMovingHeadBin = 31,
                    HeadhunterPointMultiplier = 32,
                    HeadhunterSuicidePointLoss = 33,
                    HeadhunterDeathPointLoss = 34,
                    HeadhunterUncontestedBin = 35,
                    HeadhunterSpeedWithHeads = 36,
                    HeadhunterMaxHeadsCarried = 37,
                    KingUncontestedHill = 38,
                    KingTeamTimeMultiplier = 39,
                    KingMovingHill = 40,
                    KingExtraDamageOnHill = 41,
                    KingDmgResistanceOnHill = 42,
                    OddballBallSpawnCount = 43,
                    OddballBallHitDamage = 44,
                    OddballSpeedWithBall = 45,
                    OddballDrivingGunningWithBall = 46,
                    OddballWaypointToBall = 47,
                    RaceRandomTrack = 48,
                    RaceUncontestedFlag = 49,
                    CtfGameType = 50,
                    CtfSuddenDeath = 51,
                    CtfFlagMayBeReturned = 52,
                    CtfFlagAtHomeToScore = 53,
                    CtfFlagResetTime = 54,
                    CtfSpeedWithFlag = 55,
                    CtfFlagHitDamage = 56,
                    CtfDrivingGunningWithFlag = 57,
                    CtfWaypointToOwnFlag = 58,
                    AssaultGameType = 59,
                    AssaultSuddenDeath = 60,
                    AssaultDetonationTime = 61,
                    AssaultBombAtHomeToScore = 62,
                    AssaultArmingTime = 63,
                    AssaultSpeedWithBomb = 64,
                    AssaultBombHitDamage = 65,
                    AssaultDrivingGunningWithBomb = 66,
                    AssaultWaypointToOwnBomb = 67,
                    JuggernautBetrayalPointLoss = 68,
                    JuggernautJuggyExtraDamage = 69,
                    JuggernautJuggyInfiniteAmmo = 70,
                    JuggernautJuggyOvershields = 71,
                    JuggernautJuggyActiveCamo = 72,
                    JuggernautJuggyMotionSensor = 73,
                    TerritoriesTerritoryCount = 74,
                    VehRespawn = 75,
                    VehPrimaryLightLand = 76,
                    VehSecondaryLightLand = 77,
                    VehPrimaryHeavyLand = 78,
                    VehPrimaryFlying = 79,
                    VehSecondaryHeavyLand = 80,
                    VehPrimaryTurret = 81,
                    VehSecondaryTurret = 82,
                    EquipWeaponsOnMap = 83,
                    EquipOvershieldsOnMap = 84,
                    EquipActiveCamoOnMap = 85,
                    EquipGrenadesOnMap = 86,
                    EquipWeaponRespawnTimes = 87,
                    EquipStartingGrenades = 88,
                    EquipPrimaryStartingEquipment = 89,
                    UnsMaxLivingPlayers = 90,
                    UnsTeamsEnabled = 91,
                    UnsAssaultBombMayBeReturned = 92,
                    UnsMaxTeams = 93,
                    UnsEquipSecondaryStartingEquipment = 94,
                    UnsAssaultFuseTime = 95,
                    UnsJuggyMovement = 96,
                    UnsStickyFuse = 97,
                    UnsTerrContestTime = 98,
                    UnsTerrControlTime = 99,
                    UnsOddbCarrInvis = 100,
                    UnsKingInvisInHill = 101,
                    UnsBallCarrDmgResis = 102,
                    UnsKingDmgResInHill = 103,
                    UnsPlayersExDmg = 104,
                    UnsPlayersDmgResis = 105,
                    UnsCtfCarrDmgResis = 106,
                    UnsCtfCarrInvis = 107,
                    UnsJuggyDmgResis = 108,
                    UnsBombCarrDmgResis = 109,
                    UnsBombCarrInvis = 110,
                    UnsForceEvenTeams = 111,
                }
            }
            public enum EmptyStringOptions : Int32
            {
                Slayer = 0,
                Oddball = 1,
                Juggernaut = 2,
                King = 3,
                Ctf = 4,
                Invasion = 5,
                Territories = 6,
            }
        }
        public sealed class UnusedCreateNewVariantsElement : AbideTagBlock
        {
            [FieldAttribute("", typeof(CreateNewVariantStructBlock))]
            public CreateNewVariantStructBlock EmptyString;
            public override int Size
            {
                get
                {
                    return 0;
                }
            }
            public override void Initialize()
            {
                this.EmptyString = new CreateNewVariantStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.EmptyString = reader.ReadDataStructure<CreateNewVariantStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(24, 4)]
            public sealed class CreateNewVariantStructBlock : AbideTagBlock
            {
                private TagBlockList<GDefaultVariantSettingsBlock> settingsList = new TagBlockList<GDefaultVariantSettingsBlock>(112);
                [FieldAttribute("", typeof(StringId))]
                public StringId EmptyString;
                [FieldAttribute("", typeof(EmptyStringOptions))]
                [OptionsAttribute(typeof(EmptyStringOptions), false)]
                public EmptyStringOptions EmptyString1;
                [FieldAttribute("settings", typeof(TagBlock))]
                [BlockAttribute("g_default_variant_settings_block", 112, typeof(GDefaultVariantSettingsBlock))]
                public TagBlock Settings;
                [FieldAttribute("", typeof(Byte))]
                public Byte EmptyString2;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(3)]
                public Byte[] EmptyString3;
                public TagBlockList<GDefaultVariantSettingsBlock> SettingsList
                {
                    get
                    {
                        return this.settingsList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 24;
                    }
                }
                public override void Initialize()
                {
                    this.settingsList.Clear();
                    this.EmptyString = StringId.Zero;
                    this.EmptyString1 = ((EmptyStringOptions)(0));
                    this.Settings = TagBlock.Zero;
                    this.EmptyString2 = 0;
                    this.EmptyString3 = new byte[3];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadInt32();
                    this.EmptyString1 = ((EmptyStringOptions)(reader.ReadInt32()));
                    this.Settings = reader.ReadInt64();
                    this.settingsList.Read(reader, this.Settings);
                    this.EmptyString2 = reader.ReadByte();
                    this.EmptyString3 = reader.ReadBytes(3);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(8, 4)]
                public sealed class GDefaultVariantSettingsBlock : AbideTagBlock
                {
                    [FieldAttribute("setting category^", typeof(SettingCategoryOptions))]
                    [OptionsAttribute(typeof(SettingCategoryOptions), false)]
                    public SettingCategoryOptions SettingCategory;
                    [FieldAttribute("value", typeof(Int32))]
                    public Int32 Value;
                    public override int Size
                    {
                        get
                        {
                            return 8;
                        }
                    }
                    public override void Initialize()
                    {
                        this.SettingCategory = ((SettingCategoryOptions)(0));
                        this.Value = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.SettingCategory = ((SettingCategoryOptions)(reader.ReadInt32()));
                        this.Value = reader.ReadInt32();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum SettingCategoryOptions : Int32
                    {
                        MatchRoundSetting = 0,
                        MatchCtfScoreToWin = 1,
                        MatchSlayerScoreToWinRound = 2,
                        MatchOddballScoreToWinRound = 3,
                        MatchKingScoreToWinRound = 4,
                        MatchRaceScoreToWinRound = 5,
                        MatchHeadhunterScoreToWinRound = 6,
                        MatchJuggernautScoreToWinRound = 7,
                        MatchTerritoriesScoreToWinRound = 8,
                        MatchAssaultScoreToWinRound = 9,
                        MatchRoundTimeLimit = 10,
                        MatchRoundsResetMap = 11,
                        MatchTieResolution = 12,
                        MatchObservers = 13,
                        MatchJoinInProgress = 14,
                        MaximumPlayers = 15,
                        LivesPerRound = 16,
                        RespawnTime = 17,
                        SuicidePenalty = 18,
                        Shields = 19,
                        MotionSensor = 20,
                        Invisibility = 21,
                        TeamChanging = 22,
                        TeamScoring = 23,
                        FriendlyFire = 24,
                        TeamRespawnSetting = 25,
                        BetrayalRespawnPenalty = 26,
                        TeamKillerManagement = 27,
                        SlayerBonusPoints = 28,
                        SlayerSuicidePointLoss = 29,
                        SlayerDeathPointLoss = 30,
                        HeadhunterMovingHeadBin = 31,
                        HeadhunterPointMultiplier = 32,
                        HeadhunterSuicidePointLoss = 33,
                        HeadhunterDeathPointLoss = 34,
                        HeadhunterUncontestedBin = 35,
                        HeadhunterSpeedWithHeads = 36,
                        HeadhunterMaxHeadsCarried = 37,
                        KingUncontestedHill = 38,
                        KingTeamTimeMultiplier = 39,
                        KingMovingHill = 40,
                        KingExtraDamageOnHill = 41,
                        KingDmgResistanceOnHill = 42,
                        OddballBallSpawnCount = 43,
                        OddballBallHitDamage = 44,
                        OddballSpeedWithBall = 45,
                        OddballDrivingGunningWithBall = 46,
                        OddballWaypointToBall = 47,
                        RaceRandomTrack = 48,
                        RaceUncontestedFlag = 49,
                        CtfGameType = 50,
                        CtfSuddenDeath = 51,
                        CtfFlagMayBeReturned = 52,
                        CtfFlagAtHomeToScore = 53,
                        CtfFlagResetTime = 54,
                        CtfSpeedWithFlag = 55,
                        CtfFlagHitDamage = 56,
                        CtfDrivingGunningWithFlag = 57,
                        CtfWaypointToOwnFlag = 58,
                        AssaultGameType = 59,
                        AssaultSuddenDeath = 60,
                        AssaultDetonationTime = 61,
                        AssaultBombAtHomeToScore = 62,
                        AssaultArmingTime = 63,
                        AssaultSpeedWithBomb = 64,
                        AssaultBombHitDamage = 65,
                        AssaultDrivingGunningWithBomb = 66,
                        AssaultWaypointToOwnBomb = 67,
                        JuggernautBetrayalPointLoss = 68,
                        JuggernautJuggyExtraDamage = 69,
                        JuggernautJuggyInfiniteAmmo = 70,
                        JuggernautJuggyOvershields = 71,
                        JuggernautJuggyActiveCamo = 72,
                        JuggernautJuggyMotionSensor = 73,
                        TerritoriesTerritoryCount = 74,
                        VehRespawn = 75,
                        VehPrimaryLightLand = 76,
                        VehSecondaryLightLand = 77,
                        VehPrimaryHeavyLand = 78,
                        VehPrimaryFlying = 79,
                        VehSecondaryHeavyLand = 80,
                        VehPrimaryTurret = 81,
                        VehSecondaryTurret = 82,
                        EquipWeaponsOnMap = 83,
                        EquipOvershieldsOnMap = 84,
                        EquipActiveCamoOnMap = 85,
                        EquipGrenadesOnMap = 86,
                        EquipWeaponRespawnTimes = 87,
                        EquipStartingGrenades = 88,
                        EquipPrimaryStartingEquipment = 89,
                        UnsMaxLivingPlayers = 90,
                        UnsTeamsEnabled = 91,
                        UnsAssaultBombMayBeReturned = 92,
                        UnsMaxTeams = 93,
                        UnsEquipSecondaryStartingEquipment = 94,
                        UnsAssaultFuseTime = 95,
                        UnsJuggyMovement = 96,
                        UnsStickyFuse = 97,
                        UnsTerrContestTime = 98,
                        UnsTerrControlTime = 99,
                        UnsOddbCarrInvis = 100,
                        UnsKingInvisInHill = 101,
                        UnsBallCarrDmgResis = 102,
                        UnsKingDmgResInHill = 103,
                        UnsPlayersExDmg = 104,
                        UnsPlayersDmgResis = 105,
                        UnsCtfCarrDmgResis = 106,
                        UnsCtfCarrInvis = 107,
                        UnsJuggyDmgResis = 108,
                        UnsBombCarrDmgResis = 109,
                        UnsBombCarrInvis = 110,
                        UnsForceEvenTeams = 111,
                    }
                }
                public enum EmptyStringOptions : Int32
                {
                    Slayer = 0,
                    Oddball = 1,
                    Juggernaut = 2,
                    King = 3,
                    Ctf = 4,
                    Invasion = 5,
                    Territories = 6,
                }
            }
        }
    }
}
#pragma warning restore CS1591
