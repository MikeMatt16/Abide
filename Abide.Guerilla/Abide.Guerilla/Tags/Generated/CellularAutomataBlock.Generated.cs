#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(564, 4)]
    [TagGroupAttribute("cellular_automata", 1684371055u, 4294967293u, typeof(CellularAutomataBlock))]
    public sealed class CellularAutomataBlock : AbideTagBlock
    {
        [FieldAttribute("updates per second:Hz", typeof(Int16))]
        public Int16 UpdatesPerSecond;
        [FieldAttribute("x (width):cells", typeof(Int16))]
        public Int16 XWidth;
        [FieldAttribute("y (depth):cells", typeof(Int16))]
        public Int16 YDepth;
        [FieldAttribute("z (height):cells", typeof(Int16))]
        public Int16 ZHeight;
        [FieldAttribute("x (width):world units", typeof(Single))]
        public Single XWidth1;
        [FieldAttribute("y (depth):world units", typeof(Single))]
        public Single YDepth1;
        [FieldAttribute("z (height):world units", typeof(Single))]
        public Single ZHeight1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString;
        [FieldAttribute("marker", typeof(StringId))]
        public StringId Marker;
        [FieldAttribute("cell birth chance:[0,1]", typeof(Single))]
        public Single CellBirthChance;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString1;
        [FieldAttribute("cell gene mutates 1 in:times", typeof(Int32))]
        public Int32 CellGeneMutates1In;
        [FieldAttribute("virus gene mutations 1 in:times", typeof(Int32))]
        public Int32 VirusGeneMutations1In;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString2;
        [FieldAttribute("minimum infection age:updates#no cell can be infected before it has been alive th" +
            "is number of updates", typeof(Int16))]
        public Int16 MinimumInfectionAge;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString3;
        [FieldAttribute("cell infection chance:[0,1]", typeof(Single))]
        public Single CellInfectionChance;
        [FieldAttribute("infection threshold:[0,1]#0.0 is most difficult for the virus, 1.0 means any viru" +
            "s can infect any cell", typeof(Single))]
        public Single InfectionThreshold;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString4;
        [FieldAttribute("new cell filled chance:[0,1]", typeof(Single))]
        public Single NewCellFilledChance;
        [FieldAttribute("new cell infected chance:[0,1]", typeof(Single))]
        public Single NewCellInfectedChance;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString5;
        [FieldAttribute("detail texture change chance:[0,1]", typeof(Single))]
        public Single DetailTextureChangeChance;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString6;
        [FieldAttribute("detail texture width:cells#the number of cells repeating across the detail textur" +
            "e in both dimensions", typeof(Int16))]
        public Int16 DetailTextureWidth;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString7;
        [FieldAttribute("detail texture", typeof(TagReference))]
        public TagReference DetailTexture;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString8;
        [FieldAttribute("mask bitmap", typeof(TagReference))]
        public TagReference MaskBitmap;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(240)]
        public Byte[] EmptyString9;
        public override int Size
        {
            get
            {
                return 564;
            }
        }
        public override void Initialize()
        {
            this.UpdatesPerSecond = 0;
            this.XWidth = 0;
            this.YDepth = 0;
            this.ZHeight = 0;
            this.XWidth1 = 0;
            this.YDepth1 = 0;
            this.ZHeight1 = 0;
            this.EmptyString = new byte[32];
            this.Marker = StringId.Zero;
            this.CellBirthChance = 0;
            this.EmptyString1 = new byte[32];
            this.CellGeneMutates1In = 0;
            this.VirusGeneMutations1In = 0;
            this.EmptyString2 = new byte[32];
            this.MinimumInfectionAge = 0;
            this.EmptyString3 = new byte[2];
            this.CellInfectionChance = 0;
            this.InfectionThreshold = 0;
            this.EmptyString4 = new byte[32];
            this.NewCellFilledChance = 0;
            this.NewCellInfectedChance = 0;
            this.EmptyString5 = new byte[32];
            this.DetailTextureChangeChance = 0;
            this.EmptyString6 = new byte[32];
            this.DetailTextureWidth = 0;
            this.EmptyString7 = new byte[2];
            this.DetailTexture = TagReference.Null;
            this.EmptyString8 = new byte[32];
            this.MaskBitmap = TagReference.Null;
            this.EmptyString9 = new byte[240];
        }
        public override void Read(BinaryReader reader)
        {
            this.UpdatesPerSecond = reader.ReadInt16();
            this.XWidth = reader.ReadInt16();
            this.YDepth = reader.ReadInt16();
            this.ZHeight = reader.ReadInt16();
            this.XWidth1 = reader.ReadSingle();
            this.YDepth1 = reader.ReadSingle();
            this.ZHeight1 = reader.ReadSingle();
            this.EmptyString = reader.ReadBytes(32);
            this.Marker = reader.ReadInt32();
            this.CellBirthChance = reader.ReadSingle();
            this.EmptyString1 = reader.ReadBytes(32);
            this.CellGeneMutates1In = reader.ReadInt32();
            this.VirusGeneMutations1In = reader.ReadInt32();
            this.EmptyString2 = reader.ReadBytes(32);
            this.MinimumInfectionAge = reader.ReadInt16();
            this.EmptyString3 = reader.ReadBytes(2);
            this.CellInfectionChance = reader.ReadSingle();
            this.InfectionThreshold = reader.ReadSingle();
            this.EmptyString4 = reader.ReadBytes(32);
            this.NewCellFilledChance = reader.ReadSingle();
            this.NewCellInfectedChance = reader.ReadSingle();
            this.EmptyString5 = reader.ReadBytes(32);
            this.DetailTextureChangeChance = reader.ReadSingle();
            this.EmptyString6 = reader.ReadBytes(32);
            this.DetailTextureWidth = reader.ReadInt16();
            this.EmptyString7 = reader.ReadBytes(2);
            this.DetailTexture = reader.Read<TagReference>();
            this.EmptyString8 = reader.ReadBytes(32);
            this.MaskBitmap = reader.Read<TagReference>();
            this.EmptyString9 = reader.ReadBytes(240);
        }
        public override void Write(BinaryWriter writer)
        {
        }
    }
}
#pragma warning restore CS1591
