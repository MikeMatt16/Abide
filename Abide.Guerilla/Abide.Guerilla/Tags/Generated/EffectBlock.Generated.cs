#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(64, 4)]
    [TagGroupAttribute("effect", 1701209701u, 4294967293u, typeof(EffectBlock))]
    public sealed class EffectBlock : AbideTagBlock
    {
        private TagBlockList<EffectLocationsBlock> locationsList = new TagBlockList<EffectLocationsBlock>(32);
        private TagBlockList<EffectEventBlock> eventsList = new TagBlockList<EffectEventBlock>(32);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("loop start event", typeof(Int16))]
        public Int16 LoopStartEvent;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [FieldAttribute("locations", typeof(TagBlock))]
        [BlockAttribute("effect_locations_block", 32, typeof(EffectLocationsBlock))]
        public TagBlock Locations;
        [FieldAttribute("events", typeof(TagBlock))]
        [BlockAttribute("effect_event_block", 32, typeof(EffectEventBlock))]
        public TagBlock Events;
        [FieldAttribute("looping sound", typeof(TagReference))]
        public TagReference LoopingSound;
        [FieldAttribute("location", typeof(Int16))]
        public Int16 Location;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("always play distance", typeof(Single))]
        public Single AlwaysPlayDistance;
        [FieldAttribute("never play distance", typeof(Single))]
        public Single NeverPlayDistance;
        public TagBlockList<EffectLocationsBlock> LocationsList
        {
            get
            {
                return this.locationsList;
            }
        }
        public TagBlockList<EffectEventBlock> EventsList
        {
            get
            {
                return this.eventsList;
            }
        }
        public override int Size
        {
            get
            {
                return 64;
            }
        }
        public override void Initialize()
        {
            this.locationsList.Clear();
            this.eventsList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.LoopStartEvent = 0;
            this.EmptyString = new byte[2];
            this.EmptyString1 = new byte[4];
            this.Locations = TagBlock.Zero;
            this.Events = TagBlock.Zero;
            this.LoopingSound = TagReference.Null;
            this.Location = 0;
            this.EmptyString2 = new byte[2];
            this.AlwaysPlayDistance = 0;
            this.NeverPlayDistance = 0;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.LoopStartEvent = reader.ReadInt16();
            this.EmptyString = reader.ReadBytes(2);
            this.EmptyString1 = reader.ReadBytes(4);
            this.Locations = reader.ReadInt64();
            this.locationsList.Read(reader, this.Locations);
            this.Events = reader.ReadInt64();
            this.eventsList.Read(reader, this.Events);
            this.LoopingSound = reader.Read<TagReference>();
            this.Location = reader.ReadInt16();
            this.EmptyString2 = reader.ReadBytes(2);
            this.AlwaysPlayDistance = reader.ReadSingle();
            this.NeverPlayDistance = reader.ReadSingle();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(4, 4)]
        public sealed class EffectLocationsBlock : AbideTagBlock
        {
            [FieldAttribute("marker name^", typeof(StringId))]
            public StringId MarkerName;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.MarkerName = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.MarkerName = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(72, 4)]
        public sealed class EffectEventBlock : AbideTagBlock
        {
            private TagBlockList<EffectPartBlock> partsList = new TagBlockList<EffectPartBlock>(32);
            private TagBlockList<BeamBlock> beamsList = new TagBlockList<BeamBlock>(1024);
            private TagBlockList<EffectAccelerationsBlock> accelerationsList = new TagBlockList<EffectAccelerationsBlock>(32);
            private TagBlockList<ParticleSystemDefinitionBlockNew> particleSystemsList = new TagBlockList<ParticleSystemDefinitionBlockNew>(32);
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("skip fraction#chance that this event will be skipped entirely", typeof(Single))]
            public Single SkipFraction;
            [FieldAttribute("parts", typeof(TagBlock))]
            [BlockAttribute("effect_part_block", 32, typeof(EffectPartBlock))]
            public TagBlock Parts;
            [FieldAttribute("beams", typeof(TagBlock))]
            [BlockAttribute("beam_block", 1024, typeof(BeamBlock))]
            public TagBlock Beams;
            [FieldAttribute("accelerations", typeof(TagBlock))]
            [BlockAttribute("effect_accelerations_block", 32, typeof(EffectAccelerationsBlock))]
            public TagBlock Accelerations;
            [FieldAttribute("particle systems", typeof(TagBlock))]
            [BlockAttribute("particle_system_definition_block_new", 32, typeof(ParticleSystemDefinitionBlockNew))]
            public TagBlock ParticleSystems;
            public TagBlockList<EffectPartBlock> PartsList
            {
                get
                {
                    return this.partsList;
                }
            }
            public TagBlockList<BeamBlock> BeamsList
            {
                get
                {
                    return this.beamsList;
                }
            }
            public TagBlockList<EffectAccelerationsBlock> AccelerationsList
            {
                get
                {
                    return this.accelerationsList;
                }
            }
            public TagBlockList<ParticleSystemDefinitionBlockNew> ParticleSystemsList
            {
                get
                {
                    return this.particleSystemsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 72;
                }
            }
            public override void Initialize()
            {
                this.partsList.Clear();
                this.beamsList.Clear();
                this.accelerationsList.Clear();
                this.particleSystemsList.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.SkipFraction = 0;
                this.Parts = TagBlock.Zero;
                this.Beams = TagBlock.Zero;
                this.Accelerations = TagBlock.Zero;
                this.ParticleSystems = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.SkipFraction = reader.ReadSingle();
                this.Parts = reader.ReadInt64();
                this.partsList.Read(reader, this.Parts);
                this.Beams = reader.ReadInt64();
                this.beamsList.Read(reader, this.Beams);
                this.Accelerations = reader.ReadInt64();
                this.accelerationsList.Read(reader, this.Accelerations);
                this.ParticleSystems = reader.ReadInt64();
                this.particleSystemsList.Read(reader, this.ParticleSystems);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(64, 4)]
            public sealed class EffectPartBlock : AbideTagBlock
            {
                [FieldAttribute("create in", typeof(CreateInOptions))]
                [OptionsAttribute(typeof(CreateInOptions), false)]
                public CreateInOptions CreateIn;
                [FieldAttribute("create in", typeof(CreateInOptions1))]
                [OptionsAttribute(typeof(CreateInOptions1), false)]
                public CreateInOptions1 CreateIn1;
                [FieldAttribute("location", typeof(Int16))]
                public Int16 Location;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("type^", typeof(TagReference))]
                public TagReference Type;
                [FieldAttribute("velocity cone angle:degrees#initial velocity will be inside the cone defined by t" +
                    "his angle.", typeof(Single))]
                public Single VelocityConeAngle;
                [FieldAttribute("A scales values:", typeof(AScalesValuesOptions))]
                [OptionsAttribute(typeof(AScalesValuesOptions), true)]
                public AScalesValuesOptions AScalesValues;
                [FieldAttribute("B scales values:", typeof(BScalesValuesOptions))]
                [OptionsAttribute(typeof(BScalesValuesOptions), true)]
                public BScalesValuesOptions BScalesValues;
                public override int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public override void Initialize()
                {
                    this.CreateIn = ((CreateInOptions)(0));
                    this.CreateIn1 = ((CreateInOptions1)(0));
                    this.Location = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[4];
                    this.Type = TagReference.Null;
                    this.VelocityConeAngle = 0;
                    this.AScalesValues = ((AScalesValuesOptions)(0));
                    this.BScalesValues = ((BScalesValuesOptions)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.CreateIn = ((CreateInOptions)(reader.ReadInt16()));
                    this.CreateIn1 = ((CreateInOptions1)(reader.ReadInt16()));
                    this.Location = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(4);
                    this.Type = reader.Read<TagReference>();
                    this.VelocityConeAngle = reader.ReadSingle();
                    this.AScalesValues = ((AScalesValuesOptions)(reader.ReadInt32()));
                    this.BScalesValues = ((BScalesValuesOptions)(reader.ReadInt32()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum CreateInOptions : Int16
                {
                    AnyEnvironment = 0,
                    AirOnly = 1,
                    WaterOnly = 2,
                    SpaceOnly = 3,
                }
                public enum CreateInOptions1 : Int16
                {
                    EitherMode = 0,
                    ViolentModeOnly = 1,
                    NonviolentModeOnly = 2,
                }
                public enum FlagsOptions : Int16
                {
                    FaceDownRegardlessOfLocationDecals = 1,
                    OffsetOriginAwayFromGeometryLights = 2,
                    NeverAttachedToObject = 4,
                    DisabledForDebugging = 8,
                    DrawRegardlessOfDistance = 16,
                }
                public enum AScalesValuesOptions : Int32
                {
                    Velocity = 1,
                    VelocityDelta = 2,
                    VelocityConeAngle = 4,
                    AngularVelocity = 8,
                    AngularVelocityDelta = 16,
                    TypeSpecificScale = 32,
                }
                public enum BScalesValuesOptions : Int32
                {
                    Velocity = 1,
                    VelocityDelta = 2,
                    VelocityConeAngle = 4,
                    AngularVelocity = 8,
                    AngularVelocityDelta = 16,
                    TypeSpecificScale = 32,
                }
            }
            [FieldSetAttribute(92, 4)]
            public sealed class BeamBlock : AbideTagBlock
            {
                [FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [FieldAttribute("location", typeof(Int16))]
                public Int16 Location;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("color", typeof(ColorFunctionStructBlock))]
                public ColorFunctionStructBlock Color;
                [FieldAttribute("alpha", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Alpha;
                [FieldAttribute("width", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Width;
                [FieldAttribute("length", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Length;
                [FieldAttribute("yaw", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Yaw;
                [FieldAttribute("pitch", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Pitch;
                public override int Size
                {
                    get
                    {
                        return 92;
                    }
                }
                public override void Initialize()
                {
                    this.Shader = TagReference.Null;
                    this.Location = 0;
                    this.EmptyString = new byte[2];
                    this.Color = new ColorFunctionStructBlock();
                    this.Alpha = new ScalarFunctionStructBlock();
                    this.Width = new ScalarFunctionStructBlock();
                    this.Length = new ScalarFunctionStructBlock();
                    this.Yaw = new ScalarFunctionStructBlock();
                    this.Pitch = new ScalarFunctionStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Shader = reader.Read<TagReference>();
                    this.Location = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.Color = reader.ReadDataStructure<ColorFunctionStructBlock>();
                    this.Alpha = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.Width = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.Length = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.Yaw = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    this.Pitch = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class ColorFunctionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Function = new MappingFunctionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : AbideTagBlock
                    {
                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                        [FieldAttribute("data", typeof(TagBlock))]
                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public TagBlockList<ByteBlock> DataList
                        {
                            get
                            {
                                return this.dataList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.dataList.Clear();
                            this.Data = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Data = reader.ReadInt64();
                            this.dataList.Read(reader, this.Data);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : AbideTagBlock
                        {
                            [FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public override int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Value = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Value = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
                [FieldSetAttribute(12, 4)]
                public sealed class ScalarFunctionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Function = new MappingFunctionBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : AbideTagBlock
                    {
                        private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                        [FieldAttribute("data", typeof(TagBlock))]
                        [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public TagBlockList<ByteBlock> DataList
                        {
                            get
                            {
                                return this.dataList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.dataList.Clear();
                            this.Data = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Data = reader.ReadInt64();
                            this.dataList.Read(reader, this.Data);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : AbideTagBlock
                        {
                            [FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public override int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public override void Initialize()
                            {
                                this.Value = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Value = reader.ReadByte();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class EffectAccelerationsBlock : AbideTagBlock
            {
                [FieldAttribute("create in", typeof(CreateInOptions))]
                [OptionsAttribute(typeof(CreateInOptions), false)]
                public CreateInOptions CreateIn;
                [FieldAttribute("create in", typeof(CreateInOptions1))]
                [OptionsAttribute(typeof(CreateInOptions1), false)]
                public CreateInOptions1 CreateIn1;
                [FieldAttribute("location", typeof(Int16))]
                public Int16 Location;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("acceleration", typeof(Single))]
                public Single Acceleration;
                [FieldAttribute("inner cone angle:degrees", typeof(Single))]
                public Single InnerConeAngle;
                [FieldAttribute("outer cone angle:degrees", typeof(Single))]
                public Single OuterConeAngle;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.CreateIn = ((CreateInOptions)(0));
                    this.CreateIn1 = ((CreateInOptions1)(0));
                    this.Location = 0;
                    this.EmptyString = new byte[2];
                    this.Acceleration = 0;
                    this.InnerConeAngle = 0;
                    this.OuterConeAngle = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.CreateIn = ((CreateInOptions)(reader.ReadInt16()));
                    this.CreateIn1 = ((CreateInOptions1)(reader.ReadInt16()));
                    this.Location = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.Acceleration = reader.ReadSingle();
                    this.InnerConeAngle = reader.ReadSingle();
                    this.OuterConeAngle = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum CreateInOptions : Int16
                {
                    AnyEnvironment = 0,
                    AirOnly = 1,
                    WaterOnly = 2,
                    SpaceOnly = 3,
                }
                public enum CreateInOptions1 : Int16
                {
                    EitherMode = 0,
                    ViolentModeOnly = 1,
                    NonviolentModeOnly = 2,
                }
            }
            [FieldSetAttribute(68, 4)]
            public sealed class ParticleSystemDefinitionBlockNew : AbideTagBlock
            {
                private TagBlockList<ParticleSystemEmitterDefinitionBlock> emittersList = new TagBlockList<ParticleSystemEmitterDefinitionBlock>(8);
                [FieldAttribute("particle", typeof(TagReference))]
                public TagReference Particle;
                [FieldAttribute("location", typeof(Int32))]
                public Int32 Location;
                [FieldAttribute("coordinate system", typeof(CoordinateSystemOptions))]
                [OptionsAttribute(typeof(CoordinateSystemOptions), false)]
                public CoordinateSystemOptions CoordinateSystem;
                [FieldAttribute("environment", typeof(EnvironmentOptions))]
                [OptionsAttribute(typeof(EnvironmentOptions), false)]
                public EnvironmentOptions Environment;
                [FieldAttribute("disposition", typeof(DispositionOptions))]
                [OptionsAttribute(typeof(DispositionOptions), false)]
                public DispositionOptions Disposition;
                [FieldAttribute("camera mode", typeof(CameraModeOptions))]
                [OptionsAttribute(typeof(CameraModeOptions), false)]
                public CameraModeOptions CameraMode;
                [FieldAttribute("sort bias#use values between -10 and 10 to move closer and farther from camera (p" +
                    "ositive is closer)", typeof(Int16))]
                public Int16 SortBias;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("LOD in distance#defaults to 0.0", typeof(Single))]
                public Single LodInDistance;
                [FieldAttribute("LOD feather in delta#defaults to 0.0", typeof(Single))]
                public Single LodFeatherInDelta;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("LOD out distance#defaults to 30.0", typeof(Single))]
                public Single LodOutDistance;
                [FieldAttribute("LOD feather out delta#defaults to 10.0", typeof(Single))]
                public Single LodFeatherOutDelta;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [FieldAttribute("emitters", typeof(TagBlock))]
                [BlockAttribute("particle_system_emitter_definition_block", 8, typeof(ParticleSystemEmitterDefinitionBlock))]
                public TagBlock Emitters;
                public TagBlockList<ParticleSystemEmitterDefinitionBlock> EmittersList
                {
                    get
                    {
                        return this.emittersList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 68;
                    }
                }
                public override void Initialize()
                {
                    this.emittersList.Clear();
                    this.Particle = TagReference.Null;
                    this.Location = 0;
                    this.CoordinateSystem = ((CoordinateSystemOptions)(0));
                    this.Environment = ((EnvironmentOptions)(0));
                    this.Disposition = ((DispositionOptions)(0));
                    this.CameraMode = ((CameraModeOptions)(0));
                    this.SortBias = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.LodInDistance = 0;
                    this.LodFeatherInDelta = 0;
                    this.EmptyString = new byte[4];
                    this.LodOutDistance = 0;
                    this.LodFeatherOutDelta = 0;
                    this.EmptyString1 = new byte[4];
                    this.Emitters = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Particle = reader.Read<TagReference>();
                    this.Location = reader.ReadInt32();
                    this.CoordinateSystem = ((CoordinateSystemOptions)(reader.ReadInt16()));
                    this.Environment = ((EnvironmentOptions)(reader.ReadInt16()));
                    this.Disposition = ((DispositionOptions)(reader.ReadInt16()));
                    this.CameraMode = ((CameraModeOptions)(reader.ReadInt16()));
                    this.SortBias = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.LodInDistance = reader.ReadSingle();
                    this.LodFeatherInDelta = reader.ReadSingle();
                    this.EmptyString = reader.ReadBytes(4);
                    this.LodOutDistance = reader.ReadSingle();
                    this.LodFeatherOutDelta = reader.ReadSingle();
                    this.EmptyString1 = reader.ReadBytes(4);
                    this.Emitters = reader.ReadInt64();
                    this.emittersList.Read(reader, this.Emitters);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(228, 4)]
                public sealed class ParticleSystemEmitterDefinitionBlock : AbideTagBlock
                {
                    [FieldAttribute("particle physics", typeof(TagReference))]
                    public TagReference ParticlePhysics;
                    [FieldAttribute("particle emission rate", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleEmissionRate;
                    [FieldAttribute("particle lifespan", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleLifespan;
                    [FieldAttribute("particle velocity", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleVelocity;
                    [FieldAttribute("particle angular velocity", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleAngularVelocity;
                    [FieldAttribute("particle size", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleSize;
                    [FieldAttribute("particle tint", typeof(ParticlePropertyColorStructNewBlock))]
                    public ParticlePropertyColorStructNewBlock ParticleTint;
                    [FieldAttribute("particle alpha", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleAlpha;
                    [FieldAttribute("emission shape", typeof(EmissionShapeOptions))]
                    [OptionsAttribute(typeof(EmissionShapeOptions), false)]
                    public EmissionShapeOptions EmissionShape;
                    [FieldAttribute("emission radius", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock EmissionRadius;
                    [FieldAttribute("emission angle", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock EmissionAngle;
                    [FieldAttribute("translational offset", typeof(Vector3))]
                    public Vector3 TranslationalOffset;
                    [FieldAttribute("relative direction#particle initial velocity direction relative to the location\'s" +
                        " forward", typeof(Vector2))]
                    public Vector2 RelativeDirection;
                    [FieldAttribute("", typeof(Byte[]))]
                    [PaddingAttribute(8)]
                    public Byte[] EmptyString;
                    public override int Size
                    {
                        get
                        {
                            return 228;
                        }
                    }
                    public override void Initialize()
                    {
                        this.ParticlePhysics = TagReference.Null;
                        this.ParticleEmissionRate = new ParticlePropertyScalarStructNewBlock();
                        this.ParticleLifespan = new ParticlePropertyScalarStructNewBlock();
                        this.ParticleVelocity = new ParticlePropertyScalarStructNewBlock();
                        this.ParticleAngularVelocity = new ParticlePropertyScalarStructNewBlock();
                        this.ParticleSize = new ParticlePropertyScalarStructNewBlock();
                        this.ParticleTint = new ParticlePropertyColorStructNewBlock();
                        this.ParticleAlpha = new ParticlePropertyScalarStructNewBlock();
                        this.EmissionShape = ((EmissionShapeOptions)(0));
                        this.EmissionRadius = new ParticlePropertyScalarStructNewBlock();
                        this.EmissionAngle = new ParticlePropertyScalarStructNewBlock();
                        this.TranslationalOffset = Vector3.Zero;
                        this.RelativeDirection = Vector2.Zero;
                        this.EmptyString = new byte[8];
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.ParticlePhysics = reader.Read<TagReference>();
                        this.ParticleEmissionRate = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.ParticleLifespan = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.ParticleVelocity = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.ParticleAngularVelocity = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.ParticleSize = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.ParticleTint = reader.ReadDataStructure<ParticlePropertyColorStructNewBlock>();
                        this.ParticleAlpha = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.EmissionShape = ((EmissionShapeOptions)(reader.ReadInt32()));
                        this.EmissionRadius = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.EmissionAngle = reader.ReadDataStructure<ParticlePropertyScalarStructNewBlock>();
                        this.TranslationalOffset = reader.Read<Vector3>();
                        this.RelativeDirection = reader.Read<Vector2>();
                        this.EmptyString = reader.ReadBytes(8);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(20, 4)]
                    public sealed class ParticlePropertyScalarStructNewBlock : AbideTagBlock
                    {
                        [FieldAttribute("Input Variable", typeof(InputVariableOptions))]
                        [OptionsAttribute(typeof(InputVariableOptions), false)]
                        public InputVariableOptions InputVariable;
                        [FieldAttribute("Range Variable", typeof(RangeVariableOptions))]
                        [OptionsAttribute(typeof(RangeVariableOptions), false)]
                        public RangeVariableOptions RangeVariable;
                        [FieldAttribute("Output Modifier", typeof(OutputModifierOptions))]
                        [OptionsAttribute(typeof(OutputModifierOptions), false)]
                        public OutputModifierOptions OutputModifier;
                        [FieldAttribute("Output Modifier Input", typeof(OutputModifierInputOptions))]
                        [OptionsAttribute(typeof(OutputModifierInputOptions), false)]
                        public OutputModifierInputOptions OutputModifierInput;
                        [FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Mapping;
                        public override int Size
                        {
                            get
                            {
                                return 20;
                            }
                        }
                        public override void Initialize()
                        {
                            this.InputVariable = ((InputVariableOptions)(0));
                            this.RangeVariable = ((RangeVariableOptions)(0));
                            this.OutputModifier = ((OutputModifierOptions)(0));
                            this.OutputModifierInput = ((OutputModifierInputOptions)(0));
                            this.Mapping = new MappingFunctionBlock();
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.InputVariable = ((InputVariableOptions)(reader.ReadInt16()));
                            this.RangeVariable = ((RangeVariableOptions)(reader.ReadInt16()));
                            this.OutputModifier = ((OutputModifierOptions)(reader.ReadInt16()));
                            this.OutputModifierInput = ((OutputModifierInputOptions)(reader.ReadInt16()));
                            this.Mapping = reader.ReadDataStructure<MappingFunctionBlock>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : AbideTagBlock
                        {
                            private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                            [FieldAttribute("data", typeof(TagBlock))]
                            [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public TagBlockList<ByteBlock> DataList
                            {
                                get
                                {
                                    return this.dataList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public override void Initialize()
                            {
                                this.dataList.Clear();
                                this.Data = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Data = reader.ReadInt64();
                                this.dataList.Read(reader, this.Data);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : AbideTagBlock
                            {
                                [FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public override int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.Value = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Value = reader.ReadByte();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                        public enum InputVariableOptions : Int16
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum RangeVariableOptions : Int16
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum OutputModifierOptions : Int16
                        {
                            EmptyString = 0,
                            Plus = 1,
                            Times = 2,
                        }
                        public enum OutputModifierInputOptions : Int16
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                    }
                    [FieldSetAttribute(20, 4)]
                    public sealed class ParticlePropertyColorStructNewBlock : AbideTagBlock
                    {
                        [FieldAttribute("Input Variable", typeof(InputVariableOptions))]
                        [OptionsAttribute(typeof(InputVariableOptions), false)]
                        public InputVariableOptions InputVariable;
                        [FieldAttribute("Range Variable", typeof(RangeVariableOptions))]
                        [OptionsAttribute(typeof(RangeVariableOptions), false)]
                        public RangeVariableOptions RangeVariable;
                        [FieldAttribute("Output Modifier", typeof(OutputModifierOptions))]
                        [OptionsAttribute(typeof(OutputModifierOptions), false)]
                        public OutputModifierOptions OutputModifier;
                        [FieldAttribute("Output Modifier Input", typeof(OutputModifierInputOptions))]
                        [OptionsAttribute(typeof(OutputModifierInputOptions), false)]
                        public OutputModifierInputOptions OutputModifierInput;
                        [FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Mapping;
                        public override int Size
                        {
                            get
                            {
                                return 20;
                            }
                        }
                        public override void Initialize()
                        {
                            this.InputVariable = ((InputVariableOptions)(0));
                            this.RangeVariable = ((RangeVariableOptions)(0));
                            this.OutputModifier = ((OutputModifierOptions)(0));
                            this.OutputModifierInput = ((OutputModifierInputOptions)(0));
                            this.Mapping = new MappingFunctionBlock();
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.InputVariable = ((InputVariableOptions)(reader.ReadInt16()));
                            this.RangeVariable = ((RangeVariableOptions)(reader.ReadInt16()));
                            this.OutputModifier = ((OutputModifierOptions)(reader.ReadInt16()));
                            this.OutputModifierInput = ((OutputModifierInputOptions)(reader.ReadInt16()));
                            this.Mapping = reader.ReadDataStructure<MappingFunctionBlock>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : AbideTagBlock
                        {
                            private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                            [FieldAttribute("data", typeof(TagBlock))]
                            [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public TagBlockList<ByteBlock> DataList
                            {
                                get
                                {
                                    return this.dataList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public override void Initialize()
                            {
                                this.dataList.Clear();
                                this.Data = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Data = reader.ReadInt64();
                                this.dataList.Read(reader, this.Data);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : AbideTagBlock
                            {
                                [FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public override int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.Value = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Value = reader.ReadByte();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                        public enum InputVariableOptions : Int16
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum RangeVariableOptions : Int16
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum OutputModifierOptions : Int16
                        {
                            EmptyString = 0,
                            Plus = 1,
                            Times = 2,
                        }
                        public enum OutputModifierInputOptions : Int16
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                    }
                    public enum EmissionShapeOptions : Int32
                    {
                        Sprayer = 0,
                        Disc = 1,
                        Globe = 2,
                        Implode = 3,
                        Tube = 4,
                        Halo = 5,
                        ImpactContour = 6,
                        ImpactArea = 7,
                        Debris = 8,
                        Line = 9,
                    }
                }
                public enum CoordinateSystemOptions : Int16
                {
                    World = 0,
                    Local = 1,
                    Parent = 2,
                }
                public enum EnvironmentOptions : Int16
                {
                    AnyEnvironment = 0,
                    AirOnly = 1,
                    WaterOnly = 2,
                    SpaceOnly = 3,
                }
                public enum DispositionOptions : Int16
                {
                    EitherMode = 0,
                    ViolentModeOnly = 1,
                    NonviolentModeOnly = 2,
                }
                public enum CameraModeOptions : Int16
                {
                    IndependentOfCameraMode = 0,
                    OnlyInFirstPerson = 1,
                    OnlyInThirdPerson = 2,
                    BothFirstAndThird = 3,
                }
                public enum FlagsOptions : Int16
                {
                    Glow = 1,
                    Cinematics = 2,
                    LoopingParticle = 4,
                    DisabledForDebugging = 8,
                    InheritEffectVelocity = 16,
                    DontRenderSystem = 32,
                    RenderWhenZoomed = 64,
                    SpreadBetweenTicks = 128,
                    PersistentParticle = 256,
                    ExpensiveVisibility = 512,
                }
            }
            public enum FlagsOptions : Int32
            {
                DisabledForDebugging = 1,
            }
        }
        public enum FlagsOptions : Int32
        {
            DeletedWhenAttachmentDeactivates = 1,
        }
    }
}
#pragma warning restore CS1591
