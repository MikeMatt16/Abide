#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("effect", 1701209701u, 4294967293u, typeof(EffectBlock))]
    public sealed class EffectBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int32 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("loop start event", typeof(Int16))]
        public Int16 LoopStartEvent;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("locations", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("effect_locations_block", 32, typeof(EffectLocationsBlock))]
        public TagBlock Locations;
        [Abide.Guerilla.Tags.FieldAttribute("events", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("effect_event_block", 32, typeof(EffectEventBlock))]
        public TagBlock Events;
        [Abide.Guerilla.Tags.FieldAttribute("looping sound", typeof(TagReference))]
        public TagReference LoopingSound1;
        [Abide.Guerilla.Tags.FieldAttribute("location", typeof(Int16))]
        public Int16 Location;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString3;
        [Abide.Guerilla.Tags.FieldAttribute("always play distance", typeof(Single))]
        public Single AlwaysPlayDistance;
        [Abide.Guerilla.Tags.FieldAttribute("never play distance", typeof(Single))]
        public Single NeverPlayDistance;
        public int Size
        {
            get
            {
                return 64;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
        public sealed class EffectLocationsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("marker name^", typeof(StringId))]
            public StringId MarkerName;
            public int Size
            {
                get
                {
                    return 4;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(72, 4)]
        public sealed class EffectEventBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("skip fraction#chance that this event will be skipped entirely", typeof(Single))]
            public Single SkipFraction;
            [Abide.Guerilla.Tags.FieldAttribute("parts", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("effect_part_block", 32, typeof(EffectPartBlock))]
            public TagBlock Parts;
            [Abide.Guerilla.Tags.FieldAttribute("beams", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("beam_block", 1024, typeof(BeamBlock))]
            public TagBlock Beams;
            [Abide.Guerilla.Tags.FieldAttribute("accelerations", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("effect_accelerations_block", 32, typeof(EffectAccelerationsBlock))]
            public TagBlock Accelerations;
            [Abide.Guerilla.Tags.FieldAttribute("particle systems", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("particle_system_definition_block_new", 32, typeof(ParticleSystemDefinitionBlockNew))]
            public TagBlock ParticleSystems;
            public int Size
            {
                get
                {
                    return 72;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(64, 4)]
            public sealed class EffectPartBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("create in", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CreateInOptions), false)]
                public Int16 CreateIn;
                [Abide.Guerilla.Tags.FieldAttribute("create in", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CreateInOptions1), false)]
                public Int16 CreateIn1;
                [Abide.Guerilla.Tags.FieldAttribute("location", typeof(Int16))]
                public Int16 Location;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("type^", typeof(TagReference))]
                public TagReference Type;
                [Abide.Guerilla.Tags.FieldAttribute("velocity cone angle:degrees#initial velocity will be inside the cone defined by t" +
                    "his angle.", typeof(Single))]
                public Single VelocityConeAngle;
                [Abide.Guerilla.Tags.FieldAttribute("A scales values:", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(AScalesValuesOptions), true)]
                public Int32 AScalesValues;
                [Abide.Guerilla.Tags.FieldAttribute("B scales values:", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BScalesValuesOptions), true)]
                public Int32 BScalesValues;
                public int Size
                {
                    get
                    {
                        return 64;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum CreateInOptions
                {
                    AnyEnvironment = 0,
                    AirOnly = 1,
                    WaterOnly = 2,
                    SpaceOnly = 3,
                }
                public enum CreateInOptions1
                {
                    EitherMode = 0,
                    ViolentModeOnly = 1,
                    NonviolentModeOnly = 2,
                }
                public enum FlagsOptions
                {
                    FaceDownRegardlessOfLocationDecals = 1,
                    OffsetOriginAwayFromGeometryLights = 2,
                    NeverAttachedToObject = 4,
                    DisabledForDebugging = 8,
                    DrawRegardlessOfDistance = 16,
                }
                public enum AScalesValuesOptions
                {
                    Velocity = 1,
                    VelocityDelta = 2,
                    VelocityConeAngle = 4,
                    AngularVelocity = 8,
                    AngularVelocityDelta = 16,
                    TypeSpecificScale = 32,
                }
                public enum BScalesValuesOptions
                {
                    Velocity = 1,
                    VelocityDelta = 2,
                    VelocityConeAngle = 4,
                    AngularVelocity = 8,
                    AngularVelocityDelta = 16,
                    TypeSpecificScale = 32,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(92, 4)]
            public sealed class BeamBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [Abide.Guerilla.Tags.FieldAttribute("location", typeof(Int16))]
                public Int16 Location;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorFunctionStructBlock))]
                public ColorFunctionStructBlock Color1;
                [Abide.Guerilla.Tags.FieldAttribute("alpha", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Alpha1;
                [Abide.Guerilla.Tags.FieldAttribute("width", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Width1;
                [Abide.Guerilla.Tags.FieldAttribute("length", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Length1;
                [Abide.Guerilla.Tags.FieldAttribute("yaw", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Yaw1;
                [Abide.Guerilla.Tags.FieldAttribute("pitch", typeof(ScalarFunctionStructBlock))]
                public ScalarFunctionStructBlock Pitch1;
                public int Size
                {
                    get
                    {
                        return 92;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class ColorFunctionStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function1;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                        [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                public sealed class ScalarFunctionStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("function", typeof(MappingFunctionBlock))]
                    public MappingFunctionBlock Function1;
                    public int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                    public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                        [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                        public TagBlock Data;
                        public int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                        public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                            public Byte Value;
                            public int Size
                            {
                                get
                                {
                                    return 1;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                        }
                    }
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class EffectAccelerationsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("create in", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CreateInOptions), false)]
                public Int16 CreateIn;
                [Abide.Guerilla.Tags.FieldAttribute("create in", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CreateInOptions1), false)]
                public Int16 CreateIn1;
                [Abide.Guerilla.Tags.FieldAttribute("location", typeof(Int16))]
                public Int16 Location;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("acceleration", typeof(Single))]
                public Single Acceleration;
                [Abide.Guerilla.Tags.FieldAttribute("inner cone angle:degrees", typeof(Single))]
                public Single InnerConeAngle;
                [Abide.Guerilla.Tags.FieldAttribute("outer cone angle:degrees", typeof(Single))]
                public Single OuterConeAngle;
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum CreateInOptions
                {
                    AnyEnvironment = 0,
                    AirOnly = 1,
                    WaterOnly = 2,
                    SpaceOnly = 3,
                }
                public enum CreateInOptions1
                {
                    EitherMode = 0,
                    ViolentModeOnly = 1,
                    NonviolentModeOnly = 2,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(68, 4)]
            public sealed class ParticleSystemDefinitionBlockNew : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("particle", typeof(TagReference))]
                public TagReference Particle;
                [Abide.Guerilla.Tags.FieldAttribute("location", typeof(Int32))]
                public Int32 Location;
                [Abide.Guerilla.Tags.FieldAttribute("coordinate system", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CoordinateSystemOptions), false)]
                public Int16 CoordinateSystem;
                [Abide.Guerilla.Tags.FieldAttribute("environment", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(EnvironmentOptions), false)]
                public Int16 Environment;
                [Abide.Guerilla.Tags.FieldAttribute("disposition", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(DispositionOptions), false)]
                public Int16 Disposition;
                [Abide.Guerilla.Tags.FieldAttribute("camera mode", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(CameraModeOptions), false)]
                public Int16 CameraMode;
                [Abide.Guerilla.Tags.FieldAttribute("sort bias#use values between -10 and 10 to move closer and farther from camera (p" +
                    "ositive is closer)", typeof(Int16))]
                public Int16 SortBias;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("LOD in distance#defaults to 0.0", typeof(Single))]
                public Single LodInDistance;
                [Abide.Guerilla.Tags.FieldAttribute("LOD feather in delta#defaults to 0.0", typeof(Single))]
                public Single LodFeatherInDelta;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("LOD out distance#defaults to 30.0", typeof(Single))]
                public Single LodOutDistance;
                [Abide.Guerilla.Tags.FieldAttribute("LOD feather out delta#defaults to 10.0", typeof(Single))]
                public Single LodFeatherOutDelta;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(4)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("emitters", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("particle_system_emitter_definition_block", 8, typeof(ParticleSystemEmitterDefinitionBlock))]
                public TagBlock Emitters;
                public int Size
                {
                    get
                    {
                        return 68;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(228, 4)]
                public sealed class ParticleSystemEmitterDefinitionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("particle physics", typeof(TagReference))]
                    public TagReference ParticlePhysics;
                    [Abide.Guerilla.Tags.FieldAttribute("particle emission rate", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleEmissionRate;
                    [Abide.Guerilla.Tags.FieldAttribute("particle lifespan", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleLifespan;
                    [Abide.Guerilla.Tags.FieldAttribute("particle velocity", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleVelocity;
                    [Abide.Guerilla.Tags.FieldAttribute("particle angular velocity", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleAngularVelocity;
                    [Abide.Guerilla.Tags.FieldAttribute("particle size", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleSize;
                    [Abide.Guerilla.Tags.FieldAttribute("particle tint", typeof(ParticlePropertyColorStructNewBlock))]
                    public ParticlePropertyColorStructNewBlock ParticleTint1;
                    [Abide.Guerilla.Tags.FieldAttribute("particle alpha", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock ParticleAlpha1;
                    [Abide.Guerilla.Tags.FieldAttribute("emission shape", typeof(Int32))]
                    [Abide.Guerilla.Tags.OptionsAttribute(typeof(EmissionShapeOptions), false)]
                    public Int32 EmissionShape;
                    [Abide.Guerilla.Tags.FieldAttribute("emission radius", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock EmissionRadius;
                    [Abide.Guerilla.Tags.FieldAttribute("emission angle", typeof(ParticlePropertyScalarStructNewBlock))]
                    public ParticlePropertyScalarStructNewBlock EmissionAngle;
                    [Abide.Guerilla.Tags.FieldAttribute("translational offset", typeof(Vector3))]
                    public Vector3 TranslationalOffset;
                    [Abide.Guerilla.Tags.FieldAttribute("relative direction#particle initial velocity direction relative to the location\'s" +
                        " forward", typeof(Vector2))]
                    public Vector2 RelativeDirection;
                    [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                    [Abide.Guerilla.Tags.PaddingAttribute(8)]
                    public Byte[] EmptyString;
                    public int Size
                    {
                        get
                        {
                            return 228;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
                    public sealed class ParticlePropertyScalarStructNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Input Variable", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputVariableOptions), false)]
                        public Int16 InputVariable;
                        [Abide.Guerilla.Tags.FieldAttribute("Range Variable", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeVariableOptions), false)]
                        public Int16 RangeVariable;
                        [Abide.Guerilla.Tags.FieldAttribute("Output Modifier", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierOptions), false)]
                        public Int16 OutputModifier;
                        [Abide.Guerilla.Tags.FieldAttribute("Output Modifier Input", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierInputOptions), false)]
                        public Int16 OutputModifierInput;
                        [Abide.Guerilla.Tags.FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Mapping1;
                        public int Size
                        {
                            get
                            {
                                return 20;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                            }
                        }
                        public enum InputVariableOptions
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum RangeVariableOptions
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum OutputModifierOptions
                        {
                            EmptyString = 0,
                            Plus = 1,
                            Times = 2,
                        }
                        public enum OutputModifierInputOptions
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                    }
                    [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
                    public sealed class ParticlePropertyColorStructNewBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                    {
                        [Abide.Guerilla.Tags.FieldAttribute("Input Variable", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(InputVariableOptions), false)]
                        public Int16 InputVariable;
                        [Abide.Guerilla.Tags.FieldAttribute("Range Variable", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(RangeVariableOptions), false)]
                        public Int16 RangeVariable;
                        [Abide.Guerilla.Tags.FieldAttribute("Output Modifier", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierOptions), false)]
                        public Int16 OutputModifier;
                        [Abide.Guerilla.Tags.FieldAttribute("Output Modifier Input", typeof(Int16))]
                        [Abide.Guerilla.Tags.OptionsAttribute(typeof(OutputModifierInputOptions), false)]
                        public Int16 OutputModifierInput;
                        [Abide.Guerilla.Tags.FieldAttribute("Mapping", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Mapping1;
                        public int Size
                        {
                            get
                            {
                                return 20;
                            }
                        }
                        public void Initialize()
                        {
                        }
                        public void Read(System.IO.BinaryReader reader)
                        {
                        }
                        public void Write(System.IO.BinaryWriter writer)
                        {
                        }
                        [Abide.Guerilla.Tags.FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                        {
                            [Abide.Guerilla.Tags.FieldAttribute("data", typeof(TagBlock))]
                            [Abide.Guerilla.Tags.BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public void Initialize()
                            {
                            }
                            public void Read(System.IO.BinaryReader reader)
                            {
                            }
                            public void Write(System.IO.BinaryWriter writer)
                            {
                            }
                            [Abide.Guerilla.Tags.FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                            {
                                [Abide.Guerilla.Tags.FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public void Initialize()
                                {
                                }
                                public void Read(System.IO.BinaryReader reader)
                                {
                                }
                                public void Write(System.IO.BinaryWriter writer)
                                {
                                }
                            }
                        }
                        public enum InputVariableOptions
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum RangeVariableOptions
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                        public enum OutputModifierOptions
                        {
                            EmptyString = 0,
                            Plus = 1,
                            Times = 2,
                        }
                        public enum OutputModifierInputOptions
                        {
                            ParticleAge = 0,
                            ParticleEmitTime = 1,
                            ParticleRandom1 = 2,
                            ParticleRandom2 = 3,
                            EmitterAge = 4,
                            EmitterRandom1 = 5,
                            EmitterRandom2 = 6,
                            SystemLod = 7,
                            GameTime = 8,
                            EffectAScale = 9,
                            EffectBScale = 10,
                            ParticleRotation = 11,
                            ExplosionAnimation = 12,
                            ExplosionRotation = 13,
                            ParticleRandom3 = 14,
                            ParticleRandom4 = 15,
                            LocationRandom = 16,
                        }
                    }
                    public enum EmissionShapeOptions
                    {
                        Sprayer = 0,
                        Disc = 1,
                        Globe = 2,
                        Implode = 3,
                        Tube = 4,
                        Halo = 5,
                        ImpactContour = 6,
                        ImpactArea = 7,
                        Debris = 8,
                        Line = 9,
                    }
                }
                public enum CoordinateSystemOptions
                {
                    World = 0,
                    Local = 1,
                    Parent = 2,
                }
                public enum EnvironmentOptions
                {
                    AnyEnvironment = 0,
                    AirOnly = 1,
                    WaterOnly = 2,
                    SpaceOnly = 3,
                }
                public enum DispositionOptions
                {
                    EitherMode = 0,
                    ViolentModeOnly = 1,
                    NonviolentModeOnly = 2,
                }
                public enum CameraModeOptions
                {
                    IndependentOfCameraMode = 0,
                    OnlyInFirstPerson = 1,
                    OnlyInThirdPerson = 2,
                    BothFirstAndThird = 3,
                }
                public enum FlagsOptions
                {
                    Glow = 1,
                    Cinematics = 2,
                    LoopingParticle = 4,
                    DisabledForDebugging = 8,
                    InheritEffectVelocity = 16,
                    DontRenderSystem = 32,
                    RenderWhenZoomed = 64,
                    SpreadBetweenTicks = 128,
                    PersistentParticle = 256,
                    ExpensiveVisibility = 512,
                }
            }
            public enum FlagsOptions
            {
                DisabledForDebugging = 1,
            }
        }
        public enum FlagsOptions
        {
            DeletedWhenAttachmentDeactivates = 1,
        }
    }
}
#pragma warning restore CS1591
