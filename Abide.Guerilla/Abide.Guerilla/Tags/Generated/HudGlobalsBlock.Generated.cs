#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(1364, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("hud_globals", 1752523879u, 4294967293u, typeof(HudGlobalsBlock))]
    public sealed class HudGlobalsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("anchor", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(AnchorOptions), false)]
        public Int16 Anchor;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(32)]
        public Byte[] EmptyString1;
        [Abide.Guerilla.Tags.FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset;
        [Abide.Guerilla.Tags.FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale;
        [Abide.Guerilla.Tags.FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale;
        [Abide.Guerilla.Tags.FieldAttribute("scaling flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(ScalingFlagsOptions), true)]
        public Int16 ScalingFlags;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(20)]
        public Byte[] EmptyString3;
        [Abide.Guerilla.Tags.FieldAttribute("obsolete1", typeof(TagReference))]
        public TagReference Obsolete1;
        [Abide.Guerilla.Tags.FieldAttribute("obsolete2", typeof(TagReference))]
        public TagReference Obsolete2;
        [Abide.Guerilla.Tags.FieldAttribute("up time", typeof(Single))]
        public Single UpTime;
        [Abide.Guerilla.Tags.FieldAttribute("fade time", typeof(Single))]
        public Single FadeTime;
        [Abide.Guerilla.Tags.FieldAttribute("icon color", typeof(ColorArgbF))]
        public ColorArgbF IconColor;
        [Abide.Guerilla.Tags.FieldAttribute("text color", typeof(ColorArgbF))]
        public ColorArgbF TextColor;
        [Abide.Guerilla.Tags.FieldAttribute("text spacing", typeof(Single))]
        public Single TextSpacing;
        [Abide.Guerilla.Tags.FieldAttribute("item message text", typeof(TagReference))]
        public TagReference ItemMessageText;
        [Abide.Guerilla.Tags.FieldAttribute("icon bitmap", typeof(TagReference))]
        public TagReference IconBitmap;
        [Abide.Guerilla.Tags.FieldAttribute("alternate icon text", typeof(TagReference))]
        public TagReference AlternateIconText;
        [Abide.Guerilla.Tags.FieldAttribute("button icons", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hud_button_icon_block", 18, typeof(HudButtonIconBlock))]
        public TagBlock ButtonIcons;
        [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor;
        [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor;
        [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod;
        [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay;
        [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes;
        [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions), true)]
        public Int16 FlashFlags;
        [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength;
        [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString4;
        [Abide.Guerilla.Tags.FieldAttribute("hud messages", typeof(TagReference))]
        public TagReference HudMessages;
        [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor1;
        [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor1;
        [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod1;
        [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay1;
        [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes1;
        [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions1), true)]
        public Int16 FlashFlags1;
        [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength1;
        [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor1;
        [Abide.Guerilla.Tags.FieldAttribute("uptime ticks", typeof(Int16))]
        public Int16 UptimeTicks;
        [Abide.Guerilla.Tags.FieldAttribute("fade ticks", typeof(Int16))]
        public Int16 FadeTicks;
        [Abide.Guerilla.Tags.FieldAttribute("top offset", typeof(Single))]
        public Single TopOffset;
        [Abide.Guerilla.Tags.FieldAttribute("bottom offset", typeof(Single))]
        public Single BottomOffset;
        [Abide.Guerilla.Tags.FieldAttribute("left offset", typeof(Single))]
        public Single LeftOffset;
        [Abide.Guerilla.Tags.FieldAttribute("right offset", typeof(Single))]
        public Single RightOffset;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(32)]
        public Byte[] EmptyString5;
        [Abide.Guerilla.Tags.FieldAttribute("arrow bitmap", typeof(TagReference))]
        public TagReference ArrowBitmap;
        [Abide.Guerilla.Tags.FieldAttribute("waypoint arrows", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("hud_waypoint_arrow_block", 16, typeof(HudWaypointArrowBlock))]
        public TagBlock WaypointArrows;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(80)]
        public Byte[] EmptyString6;
        [Abide.Guerilla.Tags.FieldAttribute("hud scale in multiplayer", typeof(Single))]
        public Single HudScaleInMultiplayer;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(256)]
        public Byte[] EmptyString7;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(16)]
        public Byte[] EmptyString8;
        [Abide.Guerilla.Tags.FieldAttribute("motion sensor range", typeof(Single))]
        public Single MotionSensorRange;
        [Abide.Guerilla.Tags.FieldAttribute("motion sensor velocity sensitivity#how fast something moves to show up on the mot" +
            "ion sensor", typeof(Single))]
        public Single MotionSensorVelocitySensitivity;
        [Abide.Guerilla.Tags.FieldAttribute("motion sensor scale [DON\'T TOUCH EVER]*", typeof(Single))]
        public Single MotionSensorScaleDontTouchEver;
        [Abide.Guerilla.Tags.FieldAttribute("default chapter title bounds", typeof(Vector2))]
        public Vector2 DefaultChapterTitleBounds;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(44)]
        public Byte[] EmptyString9;
        [Abide.Guerilla.Tags.FieldAttribute("top offset", typeof(Int16))]
        public Int16 TopOffset1;
        [Abide.Guerilla.Tags.FieldAttribute("bottom offset", typeof(Int16))]
        public Int16 BottomOffset1;
        [Abide.Guerilla.Tags.FieldAttribute("left offset", typeof(Int16))]
        public Int16 LeftOffset1;
        [Abide.Guerilla.Tags.FieldAttribute("right offset", typeof(Int16))]
        public Int16 RightOffset1;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(32)]
        public Byte[] EmptyString10;
        [Abide.Guerilla.Tags.FieldAttribute("indicator bitmap", typeof(TagReference))]
        public TagReference IndicatorBitmap;
        [Abide.Guerilla.Tags.FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex;
        [Abide.Guerilla.Tags.FieldAttribute("multiplayer sequence index", typeof(Int16))]
        public Int16 MultiplayerSequenceIndex;
        [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorArgb))]
        public ColorArgb Color;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(16)]
        public Byte[] EmptyString11;
        [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor2;
        [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor2;
        [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod2;
        [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay2;
        [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes2;
        [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions2), true)]
        public Int16 FlashFlags2;
        [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength2;
        [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor2;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString12;
        [Abide.Guerilla.Tags.FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor3;
        [Abide.Guerilla.Tags.FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor3;
        [Abide.Guerilla.Tags.FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod3;
        [Abide.Guerilla.Tags.FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay3;
        [Abide.Guerilla.Tags.FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes3;
        [Abide.Guerilla.Tags.FieldAttribute("flash flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlashFlagsOptions3), true)]
        public Int16 FlashFlags3;
        [Abide.Guerilla.Tags.FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength3;
        [Abide.Guerilla.Tags.FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor3;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString13;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(40)]
        public Byte[] EmptyString14;
        [Abide.Guerilla.Tags.FieldAttribute("carnage report bitmap", typeof(TagReference))]
        public TagReference CarnageReportBitmap;
        [Abide.Guerilla.Tags.FieldAttribute("loading begin text", typeof(Int16))]
        public Int16 LoadingBeginText;
        [Abide.Guerilla.Tags.FieldAttribute("loading end text", typeof(Int16))]
        public Int16 LoadingEndText;
        [Abide.Guerilla.Tags.FieldAttribute("checkpoint begin text", typeof(Int16))]
        public Int16 CheckpointBeginText;
        [Abide.Guerilla.Tags.FieldAttribute("checkpoint end text", typeof(Int16))]
        public Int16 CheckpointEndText;
        [Abide.Guerilla.Tags.FieldAttribute("checkpoint sound", typeof(TagReference))]
        public TagReference CheckpointSound;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(96)]
        public Byte[] EmptyString15;
        [Abide.Guerilla.Tags.FieldAttribute("new globals", typeof(GlobalNewHudGlobalsStructBlock))]
        public GlobalNewHudGlobalsStructBlock NewGlobals;
        public int Size
        {
            get
            {
                return 1364;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class HudButtonIconBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("sequence index#sequence index into the global hud icon bitmap", typeof(Int16))]
            public Int16 SequenceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("width offset#extra spacing beyond bitmap width for text alignment", typeof(Int16))]
            public Int16 WidthOffset;
            [Abide.Guerilla.Tags.FieldAttribute("offset from reference corner", typeof(Vector2))]
            public Vector2 OffsetFromReferenceCorner;
            [Abide.Guerilla.Tags.FieldAttribute("override icon color", typeof(ColorArgb))]
            public ColorArgb OverrideIconColor;
            [Abide.Guerilla.Tags.FieldAttribute("frame rate [0,30]", typeof(Byte))]
            public Byte FrameRate030;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Byte))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Byte Flags;
            [Abide.Guerilla.Tags.FieldAttribute("text index", typeof(Int16))]
            public Int16 TextIndex;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                UseTextFromStringListInstead = 1,
                OverrideDefaultColor = 2,
                WidthOffsetIsAbsoluteIconWidth = 4,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(104, 4)]
        public sealed class HudWaypointArrowBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(8)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("color", typeof(ColorRgb))]
            public ColorRgb Color;
            [Abide.Guerilla.Tags.FieldAttribute("opacity", typeof(Single))]
            public Single Opacity;
            [Abide.Guerilla.Tags.FieldAttribute("translucency", typeof(Single))]
            public Single Translucency;
            [Abide.Guerilla.Tags.FieldAttribute("on screen sequence index", typeof(Int16))]
            public Int16 OnScreenSequenceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("off screen sequence index", typeof(Int16))]
            public Int16 OffScreenSequenceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("occluded sequence index", typeof(Int16))]
            public Int16 OccludedSequenceIndex;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(16)]
            public Byte[] EmptyString2;
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(24)]
            public Byte[] EmptyString3;
            public int Size
            {
                get
                {
                    return 104;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            public enum FlagsOptions
            {
                DontRotateWhenPointingOffscreen = 1,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(260, 4)]
        public sealed class GlobalNewHudGlobalsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("hud text", typeof(TagReference))]
            public TagReference HudText;
            [Abide.Guerilla.Tags.FieldAttribute("dashlights", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("hud_dashlights_block", 9, typeof(HudDashlightsBlock))]
            public TagBlock Dashlights;
            [Abide.Guerilla.Tags.FieldAttribute("waypoint arrows", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("hud_waypoint_arrow_block", 4, typeof(HudWaypointArrowBlock))]
            public TagBlock WaypointArrows;
            [Abide.Guerilla.Tags.FieldAttribute("waypoints", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("hud_waypoint_block", 8, typeof(HudWaypointBlock))]
            public TagBlock Waypoints;
            [Abide.Guerilla.Tags.FieldAttribute("hud sounds", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("new_hud_sound_block", 6, typeof(NewHudSoundBlock))]
            public TagBlock HudSounds;
            [Abide.Guerilla.Tags.FieldAttribute("player training data", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("player_training_entry_data_block", 32, typeof(PlayerTrainingEntryDataBlock))]
            public TagBlock PlayerTrainingData;
            [Abide.Guerilla.Tags.FieldAttribute("constants", typeof(GlobalNewHudGlobalsConstantsStructBlock))]
            public GlobalNewHudGlobalsConstantsStructBlock Constants;
            public int Size
            {
                get
                {
                    return 260;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(52, 4)]
            public sealed class HudDashlightsBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [Abide.Guerilla.Tags.FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [Abide.Guerilla.Tags.FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("sound", typeof(TagReference))]
                public TagReference Sound;
                public int Size
                {
                    get
                    {
                        return 52;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    DontScaleWhenPulsing = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(60, 4)]
            public sealed class HudWaypointArrowBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [Abide.Guerilla.Tags.FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [Abide.Guerilla.Tags.FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("smallest size", typeof(Single))]
                public Single SmallestSize;
                [Abide.Guerilla.Tags.FieldAttribute("smallest distance", typeof(Single))]
                public Single SmallestDistance;
                [Abide.Guerilla.Tags.FieldAttribute("border bitmap", typeof(TagReference))]
                public TagReference BorderBitmap;
                public int Size
                {
                    get
                    {
                        return 60;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
            public sealed class HudWaypointBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [Abide.Guerilla.Tags.FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [Abide.Guerilla.Tags.FieldAttribute("onscreen sequence index", typeof(Int16))]
                public Int16 OnscreenSequenceIndex;
                [Abide.Guerilla.Tags.FieldAttribute("occluded sequence index", typeof(Int16))]
                public Int16 OccludedSequenceIndex;
                [Abide.Guerilla.Tags.FieldAttribute("offscreen sequence index", typeof(Int16))]
                public Int16 OffscreenSequenceIndex;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(40, 4)]
            public sealed class NewHudSoundBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("chief sound^", typeof(TagReference))]
                public TagReference ChiefSound;
                [Abide.Guerilla.Tags.FieldAttribute("latched to", typeof(Int32))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(LatchedToOptions), true)]
                public Int32 LatchedTo;
                [Abide.Guerilla.Tags.FieldAttribute("scale", typeof(Single))]
                public Single Scale;
                [Abide.Guerilla.Tags.FieldAttribute("dervish sound", typeof(TagReference))]
                public TagReference DervishSound;
                public int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum LatchedToOptions
                {
                    ShieldRecharging = 1,
                    ShieldDamaged = 2,
                    ShieldLow = 4,
                    ShieldEmpty = 8,
                    HealthLow = 16,
                    HealthEmpty = 32,
                    HealthMinorDamage = 64,
                    HealthMajorDamage = 128,
                    RocketLocking = 256,
                    RocketLocked = 512,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
            public sealed class PlayerTrainingEntryDataBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("display string#comes out of the HUD text globals", typeof(StringId))]
                public StringId DisplayString;
                [Abide.Guerilla.Tags.FieldAttribute("display string2#comes out of the HUD text globals, used for grouped prompt", typeof(StringId))]
                public StringId DisplayString2;
                [Abide.Guerilla.Tags.FieldAttribute("display string3#comes out of the HUD text globals, used for ungrouped prompt", typeof(StringId))]
                public StringId DisplayString3;
                [Abide.Guerilla.Tags.FieldAttribute("max display time#how long the message can be on screen before being hidden", typeof(Int16))]
                public Int16 MaxDisplayTime;
                [Abide.Guerilla.Tags.FieldAttribute("display count#how many times a training message will get displayed (0-3 only!)", typeof(Int16))]
                public Int16 DisplayCount;
                [Abide.Guerilla.Tags.FieldAttribute("dissapear delay#how long a displayed but untriggered message stays up", typeof(Int16))]
                public Int16 DissapearDelay;
                [Abide.Guerilla.Tags.FieldAttribute("redisplay delay#how long after display this message will stay hidden", typeof(Int16))]
                public Int16 RedisplayDelay;
                [Abide.Guerilla.Tags.FieldAttribute("display delay (s)#how long the event can be triggered before it\'s displayed", typeof(Single))]
                public Single DisplayDelayS;
                [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                public int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum FlagsOptions
                {
                    NotInMultiplayer = 1,
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(184, 4)]
            public sealed class GlobalNewHudGlobalsConstantsStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("primary message sound", typeof(TagReference))]
                public TagReference PrimaryMessageSound;
                [Abide.Guerilla.Tags.FieldAttribute("secondary message sound", typeof(TagReference))]
                public TagReference SecondaryMessageSound;
                [Abide.Guerilla.Tags.FieldAttribute("boot griefer string", typeof(StringId))]
                public StringId BootGrieferString;
                [Abide.Guerilla.Tags.FieldAttribute("cannot boot griefer string", typeof(StringId))]
                public StringId CannotBootGrieferString;
                [Abide.Guerilla.Tags.FieldAttribute("training shader", typeof(TagReference))]
                public TagReference TrainingShader;
                [Abide.Guerilla.Tags.FieldAttribute("human training top right", typeof(TagReference))]
                public TagReference HumanTrainingTopRight;
                [Abide.Guerilla.Tags.FieldAttribute("human training top center", typeof(TagReference))]
                public TagReference HumanTrainingTopCenter;
                [Abide.Guerilla.Tags.FieldAttribute("human training top left", typeof(TagReference))]
                public TagReference HumanTrainingTopLeft;
                [Abide.Guerilla.Tags.FieldAttribute("human training middle", typeof(TagReference))]
                public TagReference HumanTrainingMiddle;
                [Abide.Guerilla.Tags.FieldAttribute("elite training top right", typeof(TagReference))]
                public TagReference EliteTrainingTopRight;
                [Abide.Guerilla.Tags.FieldAttribute("elite training top center", typeof(TagReference))]
                public TagReference EliteTrainingTopCenter;
                [Abide.Guerilla.Tags.FieldAttribute("elite training top left", typeof(TagReference))]
                public TagReference EliteTrainingTopLeft;
                [Abide.Guerilla.Tags.FieldAttribute("elite training middle", typeof(TagReference))]
                public TagReference EliteTrainingMiddle;
                public int Size
                {
                    get
                    {
                        return 184;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        public enum AnchorOptions
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        public enum ScalingFlagsOptions
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlashFlagsOptions
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum FlashFlagsOptions1
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum FlashFlagsOptions2
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum FlashFlagsOptions3
        {
            ReverseDefaultflashingColors = 1,
        }
    }
}
#pragma warning restore CS1591
