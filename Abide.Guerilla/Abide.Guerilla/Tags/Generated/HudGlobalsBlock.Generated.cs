#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(1364, 4)]
    [TagGroupAttribute("hud_globals", 1752523879u, 4294967293u, typeof(HudGlobalsBlock))]
    public sealed class HudGlobalsBlock : AbideTagBlock
    {
        private TagBlockList<HudButtonIconBlock> buttonIconsList = new TagBlockList<HudButtonIconBlock>(18);
        private TagBlockList<HudWaypointArrowBlock> waypointArrowsList = new TagBlockList<HudWaypointArrowBlock>(16);
        [FieldAttribute("anchor", typeof(AnchorOptions))]
        [OptionsAttribute(typeof(AnchorOptions), false)]
        public AnchorOptions Anchor;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString1;
        [FieldAttribute("anchor offset", typeof(Vector2))]
        public Vector2 AnchorOffset;
        [FieldAttribute("width scale", typeof(Single))]
        public Single WidthScale;
        [FieldAttribute("height scale", typeof(Single))]
        public Single HeightScale;
        [FieldAttribute("scaling flags", typeof(ScalingFlagsOptions))]
        [OptionsAttribute(typeof(ScalingFlagsOptions), true)]
        public ScalingFlagsOptions ScalingFlags;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(20)]
        public Byte[] EmptyString3;
        [FieldAttribute("obsolete1", typeof(TagReference))]
        public TagReference Obsolete1;
        [FieldAttribute("obsolete2", typeof(TagReference))]
        public TagReference Obsolete2;
        [FieldAttribute("up time", typeof(Single))]
        public Single UpTime;
        [FieldAttribute("fade time", typeof(Single))]
        public Single FadeTime;
        [FieldAttribute("icon color", typeof(ColorArgbF))]
        public ColorArgbF IconColor;
        [FieldAttribute("text color", typeof(ColorArgbF))]
        public ColorArgbF TextColor;
        [FieldAttribute("text spacing", typeof(Single))]
        public Single TextSpacing;
        [FieldAttribute("item message text", typeof(TagReference))]
        public TagReference ItemMessageText;
        [FieldAttribute("icon bitmap", typeof(TagReference))]
        public TagReference IconBitmap;
        [FieldAttribute("alternate icon text", typeof(TagReference))]
        public TagReference AlternateIconText;
        [FieldAttribute("button icons", typeof(TagBlock))]
        [BlockAttribute("hud_button_icon_block", 18, typeof(HudButtonIconBlock))]
        public TagBlock ButtonIcons;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions))]
        [OptionsAttribute(typeof(FlashFlagsOptions), true)]
        public FlashFlagsOptions FlashFlags;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString4;
        [FieldAttribute("hud messages", typeof(TagReference))]
        public TagReference HudMessages;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor1;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor1;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod1;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay1;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes1;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions1))]
        [OptionsAttribute(typeof(FlashFlagsOptions1), true)]
        public FlashFlagsOptions1 FlashFlags1;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength1;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor1;
        [FieldAttribute("uptime ticks", typeof(Int16))]
        public Int16 UptimeTicks;
        [FieldAttribute("fade ticks", typeof(Int16))]
        public Int16 FadeTicks;
        [FieldAttribute("top offset", typeof(Single))]
        public Single TopOffset;
        [FieldAttribute("bottom offset", typeof(Single))]
        public Single BottomOffset;
        [FieldAttribute("left offset", typeof(Single))]
        public Single LeftOffset;
        [FieldAttribute("right offset", typeof(Single))]
        public Single RightOffset;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString5;
        [FieldAttribute("arrow bitmap", typeof(TagReference))]
        public TagReference ArrowBitmap;
        [FieldAttribute("waypoint arrows", typeof(TagBlock))]
        [BlockAttribute("hud_waypoint_arrow_block", 16, typeof(HudWaypointArrowBlock))]
        public TagBlock WaypointArrows;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(80)]
        public Byte[] EmptyString6;
        [FieldAttribute("hud scale in multiplayer", typeof(Single))]
        public Single HudScaleInMultiplayer;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(256)]
        public Byte[] EmptyString7;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(16)]
        public Byte[] EmptyString8;
        [FieldAttribute("motion sensor range", typeof(Single))]
        public Single MotionSensorRange;
        [FieldAttribute("motion sensor velocity sensitivity#how fast something moves to show up on the mot" +
            "ion sensor", typeof(Single))]
        public Single MotionSensorVelocitySensitivity;
        [FieldAttribute("motion sensor scale [DON\'T TOUCH EVER]*", typeof(Single))]
        public Single MotionSensorScaleDontTouchEver;
        [FieldAttribute("default chapter title bounds", typeof(Vector2))]
        public Vector2 DefaultChapterTitleBounds;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(44)]
        public Byte[] EmptyString9;
        [FieldAttribute("top offset", typeof(Int16))]
        public Int16 TopOffset1;
        [FieldAttribute("bottom offset", typeof(Int16))]
        public Int16 BottomOffset1;
        [FieldAttribute("left offset", typeof(Int16))]
        public Int16 LeftOffset1;
        [FieldAttribute("right offset", typeof(Int16))]
        public Int16 RightOffset1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(32)]
        public Byte[] EmptyString10;
        [FieldAttribute("indicator bitmap", typeof(TagReference))]
        public TagReference IndicatorBitmap;
        [FieldAttribute("sequence index", typeof(Int16))]
        public Int16 SequenceIndex;
        [FieldAttribute("multiplayer sequence index", typeof(Int16))]
        public Int16 MultiplayerSequenceIndex;
        [FieldAttribute("color", typeof(ColorArgb))]
        public ColorArgb Color;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(16)]
        public Byte[] EmptyString11;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor2;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor2;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod2;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay2;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes2;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions2))]
        [OptionsAttribute(typeof(FlashFlagsOptions2), true)]
        public FlashFlagsOptions2 FlashFlags2;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength2;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor2;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString12;
        [FieldAttribute("default color", typeof(ColorArgb))]
        public ColorArgb DefaultColor3;
        [FieldAttribute("flashing color", typeof(ColorArgb))]
        public ColorArgb FlashingColor3;
        [FieldAttribute("flash period", typeof(Single))]
        public Single FlashPeriod3;
        [FieldAttribute("flash delay#time between flashes", typeof(Single))]
        public Single FlashDelay3;
        [FieldAttribute("number of flashes", typeof(Int16))]
        public Int16 NumberOfFlashes3;
        [FieldAttribute("flash flags", typeof(FlashFlagsOptions3))]
        [OptionsAttribute(typeof(FlashFlagsOptions3), true)]
        public FlashFlagsOptions3 FlashFlags3;
        [FieldAttribute("flash length#time of each flash", typeof(Single))]
        public Single FlashLength3;
        [FieldAttribute("disabled color", typeof(ColorArgb))]
        public ColorArgb DisabledColor3;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString13;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(40)]
        public Byte[] EmptyString14;
        [FieldAttribute("carnage report bitmap", typeof(TagReference))]
        public TagReference CarnageReportBitmap;
        [FieldAttribute("loading begin text", typeof(Int16))]
        public Int16 LoadingBeginText;
        [FieldAttribute("loading end text", typeof(Int16))]
        public Int16 LoadingEndText;
        [FieldAttribute("checkpoint begin text", typeof(Int16))]
        public Int16 CheckpointBeginText;
        [FieldAttribute("checkpoint end text", typeof(Int16))]
        public Int16 CheckpointEndText;
        [FieldAttribute("checkpoint sound", typeof(TagReference))]
        public TagReference CheckpointSound;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(96)]
        public Byte[] EmptyString15;
        [FieldAttribute("new globals", typeof(GlobalNewHudGlobalsStructBlock))]
        public GlobalNewHudGlobalsStructBlock NewGlobals;
        public TagBlockList<HudButtonIconBlock> ButtonIconsList
        {
            get
            {
                return this.buttonIconsList;
            }
        }
        public TagBlockList<HudWaypointArrowBlock> WaypointArrowsList
        {
            get
            {
                return this.waypointArrowsList;
            }
        }
        public override int Size
        {
            get
            {
                return 1364;
            }
        }
        public override void Initialize()
        {
            this.buttonIconsList.Clear();
            this.waypointArrowsList.Clear();
            this.Anchor = ((AnchorOptions)(0));
            this.EmptyString = new byte[2];
            this.EmptyString1 = new byte[32];
            this.AnchorOffset = Vector2.Zero;
            this.WidthScale = 0;
            this.HeightScale = 0;
            this.ScalingFlags = ((ScalingFlagsOptions)(0));
            this.EmptyString2 = new byte[2];
            this.EmptyString3 = new byte[20];
            this.Obsolete1 = TagReference.Null;
            this.Obsolete2 = TagReference.Null;
            this.UpTime = 0;
            this.FadeTime = 0;
            this.IconColor = ColorArgbF.Zero;
            this.TextColor = ColorArgbF.Zero;
            this.TextSpacing = 0;
            this.ItemMessageText = TagReference.Null;
            this.IconBitmap = TagReference.Null;
            this.AlternateIconText = TagReference.Null;
            this.ButtonIcons = TagBlock.Zero;
            this.DefaultColor = ColorArgb.Zero;
            this.FlashingColor = ColorArgb.Zero;
            this.FlashPeriod = 0;
            this.FlashDelay = 0;
            this.NumberOfFlashes = 0;
            this.FlashFlags = ((FlashFlagsOptions)(0));
            this.FlashLength = 0;
            this.DisabledColor = ColorArgb.Zero;
            this.EmptyString4 = new byte[4];
            this.HudMessages = TagReference.Null;
            this.DefaultColor1 = ColorArgb.Zero;
            this.FlashingColor1 = ColorArgb.Zero;
            this.FlashPeriod1 = 0;
            this.FlashDelay1 = 0;
            this.NumberOfFlashes1 = 0;
            this.FlashFlags1 = ((FlashFlagsOptions1)(0));
            this.FlashLength1 = 0;
            this.DisabledColor1 = ColorArgb.Zero;
            this.UptimeTicks = 0;
            this.FadeTicks = 0;
            this.TopOffset = 0;
            this.BottomOffset = 0;
            this.LeftOffset = 0;
            this.RightOffset = 0;
            this.EmptyString5 = new byte[32];
            this.ArrowBitmap = TagReference.Null;
            this.WaypointArrows = TagBlock.Zero;
            this.EmptyString6 = new byte[80];
            this.HudScaleInMultiplayer = 0;
            this.EmptyString7 = new byte[256];
            this.EmptyString8 = new byte[16];
            this.MotionSensorRange = 0;
            this.MotionSensorVelocitySensitivity = 0;
            this.MotionSensorScaleDontTouchEver = 0;
            this.DefaultChapterTitleBounds = Vector2.Zero;
            this.EmptyString9 = new byte[44];
            this.TopOffset1 = 0;
            this.BottomOffset1 = 0;
            this.LeftOffset1 = 0;
            this.RightOffset1 = 0;
            this.EmptyString10 = new byte[32];
            this.IndicatorBitmap = TagReference.Null;
            this.SequenceIndex = 0;
            this.MultiplayerSequenceIndex = 0;
            this.Color = ColorArgb.Zero;
            this.EmptyString11 = new byte[16];
            this.DefaultColor2 = ColorArgb.Zero;
            this.FlashingColor2 = ColorArgb.Zero;
            this.FlashPeriod2 = 0;
            this.FlashDelay2 = 0;
            this.NumberOfFlashes2 = 0;
            this.FlashFlags2 = ((FlashFlagsOptions2)(0));
            this.FlashLength2 = 0;
            this.DisabledColor2 = ColorArgb.Zero;
            this.EmptyString12 = new byte[4];
            this.DefaultColor3 = ColorArgb.Zero;
            this.FlashingColor3 = ColorArgb.Zero;
            this.FlashPeriod3 = 0;
            this.FlashDelay3 = 0;
            this.NumberOfFlashes3 = 0;
            this.FlashFlags3 = ((FlashFlagsOptions3)(0));
            this.FlashLength3 = 0;
            this.DisabledColor3 = ColorArgb.Zero;
            this.EmptyString13 = new byte[4];
            this.EmptyString14 = new byte[40];
            this.CarnageReportBitmap = TagReference.Null;
            this.LoadingBeginText = 0;
            this.LoadingEndText = 0;
            this.CheckpointBeginText = 0;
            this.CheckpointEndText = 0;
            this.CheckpointSound = TagReference.Null;
            this.EmptyString15 = new byte[96];
            this.NewGlobals = new GlobalNewHudGlobalsStructBlock();
        }
        public override void Read(BinaryReader reader)
        {
            this.Anchor = ((AnchorOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.EmptyString1 = reader.ReadBytes(32);
            this.AnchorOffset = reader.Read<Vector2>();
            this.WidthScale = reader.ReadSingle();
            this.HeightScale = reader.ReadSingle();
            this.ScalingFlags = ((ScalingFlagsOptions)(reader.ReadInt16()));
            this.EmptyString2 = reader.ReadBytes(2);
            this.EmptyString3 = reader.ReadBytes(20);
            this.Obsolete1 = reader.Read<TagReference>();
            this.Obsolete2 = reader.Read<TagReference>();
            this.UpTime = reader.ReadSingle();
            this.FadeTime = reader.ReadSingle();
            this.IconColor = reader.Read<ColorArgbF>();
            this.TextColor = reader.Read<ColorArgbF>();
            this.TextSpacing = reader.ReadSingle();
            this.ItemMessageText = reader.Read<TagReference>();
            this.IconBitmap = reader.Read<TagReference>();
            this.AlternateIconText = reader.Read<TagReference>();
            this.ButtonIcons = reader.ReadInt64();
            this.buttonIconsList.Read(reader, this.ButtonIcons);
            this.DefaultColor = reader.Read<ColorArgb>();
            this.FlashingColor = reader.Read<ColorArgb>();
            this.FlashPeriod = reader.ReadSingle();
            this.FlashDelay = reader.ReadSingle();
            this.NumberOfFlashes = reader.ReadInt16();
            this.FlashFlags = ((FlashFlagsOptions)(reader.ReadInt16()));
            this.FlashLength = reader.ReadSingle();
            this.DisabledColor = reader.Read<ColorArgb>();
            this.EmptyString4 = reader.ReadBytes(4);
            this.HudMessages = reader.Read<TagReference>();
            this.DefaultColor1 = reader.Read<ColorArgb>();
            this.FlashingColor1 = reader.Read<ColorArgb>();
            this.FlashPeriod1 = reader.ReadSingle();
            this.FlashDelay1 = reader.ReadSingle();
            this.NumberOfFlashes1 = reader.ReadInt16();
            this.FlashFlags1 = ((FlashFlagsOptions1)(reader.ReadInt16()));
            this.FlashLength1 = reader.ReadSingle();
            this.DisabledColor1 = reader.Read<ColorArgb>();
            this.UptimeTicks = reader.ReadInt16();
            this.FadeTicks = reader.ReadInt16();
            this.TopOffset = reader.ReadSingle();
            this.BottomOffset = reader.ReadSingle();
            this.LeftOffset = reader.ReadSingle();
            this.RightOffset = reader.ReadSingle();
            this.EmptyString5 = reader.ReadBytes(32);
            this.ArrowBitmap = reader.Read<TagReference>();
            this.WaypointArrows = reader.ReadInt64();
            this.waypointArrowsList.Read(reader, this.WaypointArrows);
            this.EmptyString6 = reader.ReadBytes(80);
            this.HudScaleInMultiplayer = reader.ReadSingle();
            this.EmptyString7 = reader.ReadBytes(256);
            this.EmptyString8 = reader.ReadBytes(16);
            this.MotionSensorRange = reader.ReadSingle();
            this.MotionSensorVelocitySensitivity = reader.ReadSingle();
            this.MotionSensorScaleDontTouchEver = reader.ReadSingle();
            this.DefaultChapterTitleBounds = reader.Read<Vector2>();
            this.EmptyString9 = reader.ReadBytes(44);
            this.TopOffset1 = reader.ReadInt16();
            this.BottomOffset1 = reader.ReadInt16();
            this.LeftOffset1 = reader.ReadInt16();
            this.RightOffset1 = reader.ReadInt16();
            this.EmptyString10 = reader.ReadBytes(32);
            this.IndicatorBitmap = reader.Read<TagReference>();
            this.SequenceIndex = reader.ReadInt16();
            this.MultiplayerSequenceIndex = reader.ReadInt16();
            this.Color = reader.Read<ColorArgb>();
            this.EmptyString11 = reader.ReadBytes(16);
            this.DefaultColor2 = reader.Read<ColorArgb>();
            this.FlashingColor2 = reader.Read<ColorArgb>();
            this.FlashPeriod2 = reader.ReadSingle();
            this.FlashDelay2 = reader.ReadSingle();
            this.NumberOfFlashes2 = reader.ReadInt16();
            this.FlashFlags2 = ((FlashFlagsOptions2)(reader.ReadInt16()));
            this.FlashLength2 = reader.ReadSingle();
            this.DisabledColor2 = reader.Read<ColorArgb>();
            this.EmptyString12 = reader.ReadBytes(4);
            this.DefaultColor3 = reader.Read<ColorArgb>();
            this.FlashingColor3 = reader.Read<ColorArgb>();
            this.FlashPeriod3 = reader.ReadSingle();
            this.FlashDelay3 = reader.ReadSingle();
            this.NumberOfFlashes3 = reader.ReadInt16();
            this.FlashFlags3 = ((FlashFlagsOptions3)(reader.ReadInt16()));
            this.FlashLength3 = reader.ReadSingle();
            this.DisabledColor3 = reader.Read<ColorArgb>();
            this.EmptyString13 = reader.ReadBytes(4);
            this.EmptyString14 = reader.ReadBytes(40);
            this.CarnageReportBitmap = reader.Read<TagReference>();
            this.LoadingBeginText = reader.ReadInt16();
            this.LoadingEndText = reader.ReadInt16();
            this.CheckpointBeginText = reader.ReadInt16();
            this.CheckpointEndText = reader.ReadInt16();
            this.CheckpointSound = reader.Read<TagReference>();
            this.EmptyString15 = reader.ReadBytes(96);
            this.NewGlobals = reader.ReadDataStructure<GlobalNewHudGlobalsStructBlock>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(16, 4)]
        public sealed class HudButtonIconBlock : AbideTagBlock
        {
            [FieldAttribute("sequence index#sequence index into the global hud icon bitmap", typeof(Int16))]
            public Int16 SequenceIndex;
            [FieldAttribute("width offset#extra spacing beyond bitmap width for text alignment", typeof(Int16))]
            public Int16 WidthOffset;
            [FieldAttribute("offset from reference corner", typeof(Vector2))]
            public Vector2 OffsetFromReferenceCorner;
            [FieldAttribute("override icon color", typeof(ColorArgb))]
            public ColorArgb OverrideIconColor;
            [FieldAttribute("frame rate [0,30]", typeof(Byte))]
            public Byte FrameRate030;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("text index", typeof(Int16))]
            public Int16 TextIndex;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.SequenceIndex = 0;
                this.WidthOffset = 0;
                this.OffsetFromReferenceCorner = Vector2.Zero;
                this.OverrideIconColor = ColorArgb.Zero;
                this.FrameRate030 = 0;
                this.Flags = ((FlagsOptions)(0));
                this.TextIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.SequenceIndex = reader.ReadInt16();
                this.WidthOffset = reader.ReadInt16();
                this.OffsetFromReferenceCorner = reader.Read<Vector2>();
                this.OverrideIconColor = reader.Read<ColorArgb>();
                this.FrameRate030 = reader.ReadByte();
                this.Flags = ((FlagsOptions)(reader.ReadByte()));
                this.TextIndex = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Byte
            {
                UseTextFromStringListInstead = 1,
                OverrideDefaultColor = 2,
                WidthOffsetIsAbsoluteIconWidth = 4,
            }
        }
        [FieldSetAttribute(104, 4)]
        public sealed class HudWaypointArrowBlock : AbideTagBlock
        {
            [FieldAttribute("name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString;
            [FieldAttribute("color", typeof(ColorRgb))]
            public ColorRgb Color;
            [FieldAttribute("opacity", typeof(Single))]
            public Single Opacity;
            [FieldAttribute("translucency", typeof(Single))]
            public Single Translucency;
            [FieldAttribute("on screen sequence index", typeof(Int16))]
            public Int16 OnScreenSequenceIndex;
            [FieldAttribute("off screen sequence index", typeof(Int16))]
            public Int16 OffScreenSequenceIndex;
            [FieldAttribute("occluded sequence index", typeof(Int16))]
            public Int16 OccludedSequenceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(16)]
            public Byte[] EmptyString2;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString3;
            public override int Size
            {
                get
                {
                    return 104;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.EmptyString = new byte[8];
                this.Color = ColorRgb.Zero;
                this.Opacity = 0;
                this.Translucency = 0;
                this.OnScreenSequenceIndex = 0;
                this.OffScreenSequenceIndex = 0;
                this.OccludedSequenceIndex = 0;
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[16];
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString3 = new byte[24];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.EmptyString = reader.ReadBytes(8);
                this.Color = reader.Read<ColorRgb>();
                this.Opacity = reader.ReadSingle();
                this.Translucency = reader.ReadSingle();
                this.OnScreenSequenceIndex = reader.ReadInt16();
                this.OffScreenSequenceIndex = reader.ReadInt16();
                this.OccludedSequenceIndex = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(16);
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.EmptyString3 = reader.ReadBytes(24);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                DontRotateWhenPointingOffscreen = 1,
            }
        }
        [FieldSetAttribute(260, 4)]
        public sealed class GlobalNewHudGlobalsStructBlock : AbideTagBlock
        {
            private TagBlockList<HudDashlightsBlock> dashlightsList = new TagBlockList<HudDashlightsBlock>(9);
            private TagBlockList<HudWaypointArrowBlock> waypointArrowsList = new TagBlockList<HudWaypointArrowBlock>(4);
            private TagBlockList<HudWaypointBlock> waypointsList = new TagBlockList<HudWaypointBlock>(8);
            private TagBlockList<NewHudSoundBlock> hudSoundsList = new TagBlockList<NewHudSoundBlock>(6);
            private TagBlockList<PlayerTrainingEntryDataBlock> playerTrainingDataList = new TagBlockList<PlayerTrainingEntryDataBlock>(32);
            [FieldAttribute("hud text", typeof(TagReference))]
            public TagReference HudText;
            [FieldAttribute("dashlights", typeof(TagBlock))]
            [BlockAttribute("hud_dashlights_block", 9, typeof(HudDashlightsBlock))]
            public TagBlock Dashlights;
            [FieldAttribute("waypoint arrows", typeof(TagBlock))]
            [BlockAttribute("hud_waypoint_arrow_block", 4, typeof(HudWaypointArrowBlock))]
            public TagBlock WaypointArrows;
            [FieldAttribute("waypoints", typeof(TagBlock))]
            [BlockAttribute("hud_waypoint_block", 8, typeof(HudWaypointBlock))]
            public TagBlock Waypoints;
            [FieldAttribute("hud sounds", typeof(TagBlock))]
            [BlockAttribute("new_hud_sound_block", 6, typeof(NewHudSoundBlock))]
            public TagBlock HudSounds;
            [FieldAttribute("player training data", typeof(TagBlock))]
            [BlockAttribute("player_training_entry_data_block", 32, typeof(PlayerTrainingEntryDataBlock))]
            public TagBlock PlayerTrainingData;
            [FieldAttribute("constants", typeof(GlobalNewHudGlobalsConstantsStructBlock))]
            public GlobalNewHudGlobalsConstantsStructBlock Constants;
            public TagBlockList<HudDashlightsBlock> DashlightsList
            {
                get
                {
                    return this.dashlightsList;
                }
            }
            public TagBlockList<HudWaypointArrowBlock> WaypointArrowsList
            {
                get
                {
                    return this.waypointArrowsList;
                }
            }
            public TagBlockList<HudWaypointBlock> WaypointsList
            {
                get
                {
                    return this.waypointsList;
                }
            }
            public TagBlockList<NewHudSoundBlock> HudSoundsList
            {
                get
                {
                    return this.hudSoundsList;
                }
            }
            public TagBlockList<PlayerTrainingEntryDataBlock> PlayerTrainingDataList
            {
                get
                {
                    return this.playerTrainingDataList;
                }
            }
            public override int Size
            {
                get
                {
                    return 260;
                }
            }
            public override void Initialize()
            {
                this.dashlightsList.Clear();
                this.waypointArrowsList.Clear();
                this.waypointsList.Clear();
                this.hudSoundsList.Clear();
                this.playerTrainingDataList.Clear();
                this.HudText = TagReference.Null;
                this.Dashlights = TagBlock.Zero;
                this.WaypointArrows = TagBlock.Zero;
                this.Waypoints = TagBlock.Zero;
                this.HudSounds = TagBlock.Zero;
                this.PlayerTrainingData = TagBlock.Zero;
                this.Constants = new GlobalNewHudGlobalsConstantsStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.HudText = reader.Read<TagReference>();
                this.Dashlights = reader.ReadInt64();
                this.dashlightsList.Read(reader, this.Dashlights);
                this.WaypointArrows = reader.ReadInt64();
                this.waypointArrowsList.Read(reader, this.WaypointArrows);
                this.Waypoints = reader.ReadInt64();
                this.waypointsList.Read(reader, this.Waypoints);
                this.HudSounds = reader.ReadInt64();
                this.hudSoundsList.Read(reader, this.HudSounds);
                this.PlayerTrainingData = reader.ReadInt64();
                this.playerTrainingDataList.Read(reader, this.PlayerTrainingData);
                this.Constants = reader.ReadDataStructure<GlobalNewHudGlobalsConstantsStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(52, 4)]
            public sealed class HudDashlightsBlock : AbideTagBlock
            {
                [FieldAttribute("bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("sound", typeof(TagReference))]
                public TagReference Sound;
                public override int Size
                {
                    get
                    {
                        return 52;
                    }
                }
                public override void Initialize()
                {
                    this.Bitmap = TagReference.Null;
                    this.Shader = TagReference.Null;
                    this.SequenceIndex = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.Sound = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Bitmap = reader.Read<TagReference>();
                    this.Shader = reader.Read<TagReference>();
                    this.SequenceIndex = reader.ReadInt16();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.Sound = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    DontScaleWhenPulsing = 1,
                }
            }
            [FieldSetAttribute(60, 4)]
            public sealed class HudWaypointArrowBlock : AbideTagBlock
            {
                [FieldAttribute("bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [FieldAttribute("sequence index", typeof(Int16))]
                public Int16 SequenceIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("smallest size", typeof(Single))]
                public Single SmallestSize;
                [FieldAttribute("smallest distance", typeof(Single))]
                public Single SmallestDistance;
                [FieldAttribute("border bitmap", typeof(TagReference))]
                public TagReference BorderBitmap;
                public override int Size
                {
                    get
                    {
                        return 60;
                    }
                }
                public override void Initialize()
                {
                    this.Bitmap = TagReference.Null;
                    this.Shader = TagReference.Null;
                    this.SequenceIndex = 0;
                    this.EmptyString = new byte[2];
                    this.SmallestSize = 0;
                    this.SmallestDistance = 0;
                    this.BorderBitmap = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Bitmap = reader.Read<TagReference>();
                    this.Shader = reader.Read<TagReference>();
                    this.SequenceIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                    this.SmallestSize = reader.ReadSingle();
                    this.SmallestDistance = reader.ReadSingle();
                    this.BorderBitmap = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class HudWaypointBlock : AbideTagBlock
            {
                [FieldAttribute("bitmap", typeof(TagReference))]
                public TagReference Bitmap;
                [FieldAttribute("shader", typeof(TagReference))]
                public TagReference Shader;
                [FieldAttribute("onscreen sequence index", typeof(Int16))]
                public Int16 OnscreenSequenceIndex;
                [FieldAttribute("occluded sequence index", typeof(Int16))]
                public Int16 OccludedSequenceIndex;
                [FieldAttribute("offscreen sequence index", typeof(Int16))]
                public Int16 OffscreenSequenceIndex;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.Bitmap = TagReference.Null;
                    this.Shader = TagReference.Null;
                    this.OnscreenSequenceIndex = 0;
                    this.OccludedSequenceIndex = 0;
                    this.OffscreenSequenceIndex = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Bitmap = reader.Read<TagReference>();
                    this.Shader = reader.Read<TagReference>();
                    this.OnscreenSequenceIndex = reader.ReadInt16();
                    this.OccludedSequenceIndex = reader.ReadInt16();
                    this.OffscreenSequenceIndex = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class NewHudSoundBlock : AbideTagBlock
            {
                [FieldAttribute("chief sound^", typeof(TagReference))]
                public TagReference ChiefSound;
                [FieldAttribute("latched to", typeof(LatchedToOptions))]
                [OptionsAttribute(typeof(LatchedToOptions), true)]
                public LatchedToOptions LatchedTo;
                [FieldAttribute("scale", typeof(Single))]
                public Single Scale;
                [FieldAttribute("dervish sound", typeof(TagReference))]
                public TagReference DervishSound;
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.ChiefSound = TagReference.Null;
                    this.LatchedTo = ((LatchedToOptions)(0));
                    this.Scale = 0;
                    this.DervishSound = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.ChiefSound = reader.Read<TagReference>();
                    this.LatchedTo = ((LatchedToOptions)(reader.ReadInt32()));
                    this.Scale = reader.ReadSingle();
                    this.DervishSound = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum LatchedToOptions : Int32
                {
                    ShieldRecharging = 1,
                    ShieldDamaged = 2,
                    ShieldLow = 4,
                    ShieldEmpty = 8,
                    HealthLow = 16,
                    HealthEmpty = 32,
                    HealthMinorDamage = 64,
                    HealthMajorDamage = 128,
                    RocketLocking = 256,
                    RocketLocked = 512,
                }
            }
            [FieldSetAttribute(28, 4)]
            public sealed class PlayerTrainingEntryDataBlock : AbideTagBlock
            {
                [FieldAttribute("display string#comes out of the HUD text globals", typeof(StringId))]
                public StringId DisplayString;
                [FieldAttribute("display string2#comes out of the HUD text globals, used for grouped prompt", typeof(StringId))]
                public StringId DisplayString2;
                [FieldAttribute("display string3#comes out of the HUD text globals, used for ungrouped prompt", typeof(StringId))]
                public StringId DisplayString3;
                [FieldAttribute("max display time#how long the message can be on screen before being hidden", typeof(Int16))]
                public Int16 MaxDisplayTime;
                [FieldAttribute("display count#how many times a training message will get displayed (0-3 only!)", typeof(Int16))]
                public Int16 DisplayCount;
                [FieldAttribute("dissapear delay#how long a displayed but untriggered message stays up", typeof(Int16))]
                public Int16 DissapearDelay;
                [FieldAttribute("redisplay delay#how long after display this message will stay hidden", typeof(Int16))]
                public Int16 RedisplayDelay;
                [FieldAttribute("display delay (s)#how long the event can be triggered before it\'s displayed", typeof(Single))]
                public Single DisplayDelayS;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 28;
                    }
                }
                public override void Initialize()
                {
                    this.DisplayString = StringId.Zero;
                    this.DisplayString2 = StringId.Zero;
                    this.DisplayString3 = StringId.Zero;
                    this.MaxDisplayTime = 0;
                    this.DisplayCount = 0;
                    this.DissapearDelay = 0;
                    this.RedisplayDelay = 0;
                    this.DisplayDelayS = 0;
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.DisplayString = reader.ReadInt32();
                    this.DisplayString2 = reader.ReadInt32();
                    this.DisplayString3 = reader.ReadInt32();
                    this.MaxDisplayTime = reader.ReadInt16();
                    this.DisplayCount = reader.ReadInt16();
                    this.DissapearDelay = reader.ReadInt16();
                    this.RedisplayDelay = reader.ReadInt16();
                    this.DisplayDelayS = reader.ReadSingle();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    NotInMultiplayer = 1,
                }
            }
            [FieldSetAttribute(184, 4)]
            public sealed class GlobalNewHudGlobalsConstantsStructBlock : AbideTagBlock
            {
                [FieldAttribute("primary message sound", typeof(TagReference))]
                public TagReference PrimaryMessageSound;
                [FieldAttribute("secondary message sound", typeof(TagReference))]
                public TagReference SecondaryMessageSound;
                [FieldAttribute("boot griefer string", typeof(StringId))]
                public StringId BootGrieferString;
                [FieldAttribute("cannot boot griefer string", typeof(StringId))]
                public StringId CannotBootGrieferString;
                [FieldAttribute("training shader", typeof(TagReference))]
                public TagReference TrainingShader;
                [FieldAttribute("human training top right", typeof(TagReference))]
                public TagReference HumanTrainingTopRight;
                [FieldAttribute("human training top center", typeof(TagReference))]
                public TagReference HumanTrainingTopCenter;
                [FieldAttribute("human training top left", typeof(TagReference))]
                public TagReference HumanTrainingTopLeft;
                [FieldAttribute("human training middle", typeof(TagReference))]
                public TagReference HumanTrainingMiddle;
                [FieldAttribute("elite training top right", typeof(TagReference))]
                public TagReference EliteTrainingTopRight;
                [FieldAttribute("elite training top center", typeof(TagReference))]
                public TagReference EliteTrainingTopCenter;
                [FieldAttribute("elite training top left", typeof(TagReference))]
                public TagReference EliteTrainingTopLeft;
                [FieldAttribute("elite training middle", typeof(TagReference))]
                public TagReference EliteTrainingMiddle;
                public override int Size
                {
                    get
                    {
                        return 184;
                    }
                }
                public override void Initialize()
                {
                    this.PrimaryMessageSound = TagReference.Null;
                    this.SecondaryMessageSound = TagReference.Null;
                    this.BootGrieferString = StringId.Zero;
                    this.CannotBootGrieferString = StringId.Zero;
                    this.TrainingShader = TagReference.Null;
                    this.HumanTrainingTopRight = TagReference.Null;
                    this.HumanTrainingTopCenter = TagReference.Null;
                    this.HumanTrainingTopLeft = TagReference.Null;
                    this.HumanTrainingMiddle = TagReference.Null;
                    this.EliteTrainingTopRight = TagReference.Null;
                    this.EliteTrainingTopCenter = TagReference.Null;
                    this.EliteTrainingTopLeft = TagReference.Null;
                    this.EliteTrainingMiddle = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.PrimaryMessageSound = reader.Read<TagReference>();
                    this.SecondaryMessageSound = reader.Read<TagReference>();
                    this.BootGrieferString = reader.ReadInt32();
                    this.CannotBootGrieferString = reader.ReadInt32();
                    this.TrainingShader = reader.Read<TagReference>();
                    this.HumanTrainingTopRight = reader.Read<TagReference>();
                    this.HumanTrainingTopCenter = reader.Read<TagReference>();
                    this.HumanTrainingTopLeft = reader.Read<TagReference>();
                    this.HumanTrainingMiddle = reader.Read<TagReference>();
                    this.EliteTrainingTopRight = reader.Read<TagReference>();
                    this.EliteTrainingTopCenter = reader.Read<TagReference>();
                    this.EliteTrainingTopLeft = reader.Read<TagReference>();
                    this.EliteTrainingMiddle = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        public enum AnchorOptions : Int16
        {
            TopLeft = 0,
            TopRight = 1,
            BottomLeft = 2,
            BottomRight = 3,
            Center = 4,
            Crosshair = 5,
        }
        public enum ScalingFlagsOptions : Int16
        {
            DontScaleOffset = 1,
            DontScaleSize = 2,
        }
        public enum FlashFlagsOptions : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum FlashFlagsOptions1 : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum FlashFlagsOptions2 : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
        public enum FlashFlagsOptions3 : Int16
        {
            ReverseDefaultflashingColors = 1,
        }
    }
}
#pragma warning restore CS1591
