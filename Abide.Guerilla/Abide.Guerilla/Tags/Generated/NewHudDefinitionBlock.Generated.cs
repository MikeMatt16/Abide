#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(60, 4)]
    [TagGroupAttribute("new_hud_definition", 1852335220u, 4294967293u, typeof(NewHudDefinitionBlock))]
    public sealed class NewHudDefinitionBlock : AbideTagBlock
    {
        private TagBlockList<HudBitmapWidgets> bitmapWidgetsList = new TagBlockList<HudBitmapWidgets>(256);
        private TagBlockList<HudTextWidgets> textWidgetsList = new TagBlockList<HudTextWidgets>(256);
        private TagBlockList<HudScreenEffectWidgets> screenEffectWidgetsList = new TagBlockList<HudScreenEffectWidgets>(4);
        [FieldAttribute("DO NOT USE", typeof(TagReference))]
        public TagReference DoNotUse;
        [FieldAttribute("bitmap widgets", typeof(TagBlock))]
        [BlockAttribute("hud_bitmap_widgets", 256, typeof(HudBitmapWidgets))]
        public TagBlock BitmapWidgets;
        [FieldAttribute("text widgets", typeof(TagBlock))]
        [BlockAttribute("hud_text_widgets", 256, typeof(HudTextWidgets))]
        public TagBlock TextWidgets;
        [FieldAttribute("dashlight data", typeof(NewHudDashlightDataStructBlock))]
        public NewHudDashlightDataStructBlock DashlightData;
        [FieldAttribute("screen effect widgets", typeof(TagBlock))]
        [BlockAttribute("hud_screen_effect_widgets", 4, typeof(HudScreenEffectWidgets))]
        public TagBlock ScreenEffectWidgets;
        public TagBlockList<HudBitmapWidgets> BitmapWidgetsList
        {
            get
            {
                return this.bitmapWidgetsList;
            }
        }
        public TagBlockList<HudTextWidgets> TextWidgetsList
        {
            get
            {
                return this.textWidgetsList;
            }
        }
        public TagBlockList<HudScreenEffectWidgets> ScreenEffectWidgetsList
        {
            get
            {
                return this.screenEffectWidgetsList;
            }
        }
        public override int Size
        {
            get
            {
                return 60;
            }
        }
        public override void Initialize()
        {
            this.bitmapWidgetsList.Clear();
            this.textWidgetsList.Clear();
            this.screenEffectWidgetsList.Clear();
            this.DoNotUse = TagReference.Null;
            this.BitmapWidgets = TagBlock.Zero;
            this.TextWidgets = TagBlock.Zero;
            this.DashlightData = new NewHudDashlightDataStructBlock();
            this.ScreenEffectWidgets = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.DoNotUse = reader.Read<TagReference>();
            this.BitmapWidgets = reader.ReadInt64();
            this.bitmapWidgetsList.Read(reader, this.BitmapWidgets);
            this.TextWidgets = reader.ReadInt64();
            this.textWidgetsList.Read(reader, this.TextWidgets);
            this.DashlightData = reader.ReadDataStructure<NewHudDashlightDataStructBlock>();
            this.ScreenEffectWidgets = reader.ReadInt64();
            this.screenEffectWidgetsList.Read(reader, this.ScreenEffectWidgets);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(120, 4)]
        public sealed class HudBitmapWidgets : AbideTagBlock
        {
            private TagBlockList<HudWidgetEffectBlock> effectList = new TagBlockList<HudWidgetEffectBlock>(1);
            [FieldAttribute("name", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("", typeof(HudWidgetInputsStructBlock))]
            public HudWidgetInputsStructBlock EmptyString;
            [FieldAttribute("", typeof(HudWidgetStateDefinitionStructBlock))]
            public HudWidgetStateDefinitionStructBlock EmptyString1;
            [FieldAttribute("anchor", typeof(AnchorOptions))]
            [OptionsAttribute(typeof(AnchorOptions), false)]
            public AnchorOptions Anchor;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("bitmap", typeof(TagReference))]
            public TagReference Bitmap;
            [FieldAttribute("shader", typeof(TagReference))]
            public TagReference Shader;
            [FieldAttribute("fullscreen sequence index", typeof(Byte))]
            public Byte FullscreenSequenceIndex;
            [FieldAttribute("halfscreen sequence index", typeof(Byte))]
            public Byte HalfscreenSequenceIndex;
            [FieldAttribute("quarterscreen sequence index", typeof(Byte))]
            public Byte QuarterscreenSequenceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(1)]
            public Byte[] EmptyString2;
            [FieldAttribute("fullscreen offset", typeof(Vector2))]
            public Vector2 FullscreenOffset;
            [FieldAttribute("halfscreen offset", typeof(Vector2))]
            public Vector2 HalfscreenOffset;
            [FieldAttribute("quarterscreen offset", typeof(Vector2))]
            public Vector2 QuarterscreenOffset;
            [FieldAttribute("fullscreen registration point", typeof(Vector2))]
            public Vector2 FullscreenRegistrationPoint;
            [FieldAttribute("halfscreen registration point", typeof(Vector2))]
            public Vector2 HalfscreenRegistrationPoint;
            [FieldAttribute("quarterscreen registration point", typeof(Vector2))]
            public Vector2 QuarterscreenRegistrationPoint;
            [FieldAttribute("effect", typeof(TagBlock))]
            [BlockAttribute("hud_widget_effect_block", 1, typeof(HudWidgetEffectBlock))]
            public TagBlock Effect;
            [FieldAttribute("special hud type", typeof(SpecialHudTypeOptions))]
            [OptionsAttribute(typeof(SpecialHudTypeOptions), false)]
            public SpecialHudTypeOptions SpecialHudType;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            public TagBlockList<HudWidgetEffectBlock> EffectList
            {
                get
                {
                    return this.effectList;
                }
            }
            public override int Size
            {
                get
                {
                    return 120;
                }
            }
            public override void Initialize()
            {
                this.effectList.Clear();
                this.Name = StringId.Zero;
                this.EmptyString = new HudWidgetInputsStructBlock();
                this.EmptyString1 = new HudWidgetStateDefinitionStructBlock();
                this.Anchor = ((AnchorOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.Bitmap = TagReference.Null;
                this.Shader = TagReference.Null;
                this.FullscreenSequenceIndex = 0;
                this.HalfscreenSequenceIndex = 0;
                this.QuarterscreenSequenceIndex = 0;
                this.EmptyString2 = new byte[1];
                this.FullscreenOffset = Vector2.Zero;
                this.HalfscreenOffset = Vector2.Zero;
                this.QuarterscreenOffset = Vector2.Zero;
                this.FullscreenRegistrationPoint = Vector2.Zero;
                this.HalfscreenRegistrationPoint = Vector2.Zero;
                this.QuarterscreenRegistrationPoint = Vector2.Zero;
                this.Effect = TagBlock.Zero;
                this.SpecialHudType = ((SpecialHudTypeOptions)(0));
                this.EmptyString3 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.EmptyString = reader.ReadDataStructure<HudWidgetInputsStructBlock>();
                this.EmptyString1 = reader.ReadDataStructure<HudWidgetStateDefinitionStructBlock>();
                this.Anchor = ((AnchorOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Bitmap = reader.Read<TagReference>();
                this.Shader = reader.Read<TagReference>();
                this.FullscreenSequenceIndex = reader.ReadByte();
                this.HalfscreenSequenceIndex = reader.ReadByte();
                this.QuarterscreenSequenceIndex = reader.ReadByte();
                this.EmptyString2 = reader.ReadBytes(1);
                this.FullscreenOffset = reader.Read<Vector2>();
                this.HalfscreenOffset = reader.Read<Vector2>();
                this.QuarterscreenOffset = reader.Read<Vector2>();
                this.FullscreenRegistrationPoint = reader.Read<Vector2>();
                this.HalfscreenRegistrationPoint = reader.Read<Vector2>();
                this.QuarterscreenRegistrationPoint = reader.Read<Vector2>();
                this.Effect = reader.ReadInt64();
                this.effectList.Read(reader, this.Effect);
                this.SpecialHudType = ((SpecialHudTypeOptions)(reader.ReadInt16()));
                this.EmptyString3 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(124, 4)]
            public sealed class HudWidgetEffectBlock : AbideTagBlock
            {
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom1;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom2;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom3;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom4;
                public override int Size
                {
                    get
                    {
                        return 124;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.YourMom = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom1 = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom2 = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom3 = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom4 = new HudWidgetEffectFunctionStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.YourMom = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom1 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom2 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom3 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom4 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(24, 4)]
                public sealed class HudWidgetEffectFunctionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("input name", typeof(StringId))]
                    public StringId InputName;
                    [FieldAttribute("range name", typeof(StringId))]
                    public StringId RangeName;
                    [FieldAttribute("time period in seconds", typeof(Single))]
                    public Single TimePeriodInSeconds;
                    [FieldAttribute("function", typeof(ScalarFunctionStructBlock))]
                    public ScalarFunctionStructBlock Function;
                    public override int Size
                    {
                        get
                        {
                            return 24;
                        }
                    }
                    public override void Initialize()
                    {
                        this.InputName = StringId.Zero;
                        this.RangeName = StringId.Zero;
                        this.TimePeriodInSeconds = 0;
                        this.Function = new ScalarFunctionStructBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.InputName = reader.ReadInt32();
                        this.RangeName = reader.ReadInt32();
                        this.TimePeriodInSeconds = reader.ReadSingle();
                        this.Function = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class ScalarFunctionStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("function", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Function;
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Function = new MappingFunctionBlock();
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : AbideTagBlock
                        {
                            private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                            [FieldAttribute("data", typeof(TagBlock))]
                            [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public TagBlockList<ByteBlock> DataList
                            {
                                get
                                {
                                    return this.dataList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public override void Initialize()
                            {
                                this.dataList.Clear();
                                this.Data = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Data = reader.ReadInt64();
                                this.dataList.Read(reader, this.Data);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : AbideTagBlock
                            {
                                [FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public override int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.Value = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Value = reader.ReadByte();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                    }
                }
                public enum FlagsOptions : Int16
                {
                    ApplyScale = 1,
                    ApplyTheta = 2,
                    ApplyOffset = 4,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class HudWidgetInputsStructBlock : AbideTagBlock
            {
                [FieldAttribute("input 1", typeof(Input1Options))]
                [OptionsAttribute(typeof(Input1Options), false)]
                public Input1Options Input1;
                [FieldAttribute("input 2", typeof(Input2Options))]
                [OptionsAttribute(typeof(Input2Options), false)]
                public Input2Options Input2;
                [FieldAttribute("input 3", typeof(Input3Options))]
                [OptionsAttribute(typeof(Input3Options), false)]
                public Input3Options Input3;
                [FieldAttribute("input 4", typeof(Input4Options))]
                [OptionsAttribute(typeof(Input4Options), false)]
                public Input4Options Input4;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Input1 = ((Input1Options)(0));
                    this.Input2 = ((Input2Options)(0));
                    this.Input3 = ((Input3Options)(0));
                    this.Input4 = ((Input4Options)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.Input1 = ((Input1Options)(reader.ReadByte()));
                    this.Input2 = ((Input2Options)(reader.ReadByte()));
                    this.Input3 = ((Input3Options)(reader.ReadByte()));
                    this.Input4 = ((Input4Options)(reader.ReadByte()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum Input1Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input2Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input3Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input4Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class HudWidgetStateDefinitionStructBlock : AbideTagBlock
            {
                [FieldAttribute("[Y] unit flags", typeof(YUnitFlagsOptions))]
                [OptionsAttribute(typeof(YUnitFlagsOptions), true)]
                public YUnitFlagsOptions YUnitFlags;
                [FieldAttribute("[Y] extra flags", typeof(YExtraFlagsOptions))]
                [OptionsAttribute(typeof(YExtraFlagsOptions), true)]
                public YExtraFlagsOptions YExtraFlags;
                [FieldAttribute("[Y] weapon flags", typeof(YWeaponFlagsOptions))]
                [OptionsAttribute(typeof(YWeaponFlagsOptions), true)]
                public YWeaponFlagsOptions YWeaponFlags;
                [FieldAttribute("[Y] game engine state flags", typeof(YGameEngineStateFlagsOptions))]
                [OptionsAttribute(typeof(YGameEngineStateFlagsOptions), true)]
                public YGameEngineStateFlagsOptions YGameEngineStateFlags;
                [FieldAttribute("[N] unit flags", typeof(NUnitFlagsOptions))]
                [OptionsAttribute(typeof(NUnitFlagsOptions), true)]
                public NUnitFlagsOptions NUnitFlags;
                [FieldAttribute("[N] extra flags", typeof(NExtraFlagsOptions))]
                [OptionsAttribute(typeof(NExtraFlagsOptions), true)]
                public NExtraFlagsOptions NExtraFlags;
                [FieldAttribute("[N] weapon flags", typeof(NWeaponFlagsOptions))]
                [OptionsAttribute(typeof(NWeaponFlagsOptions), true)]
                public NWeaponFlagsOptions NWeaponFlags;
                [FieldAttribute("[N] game engine state flags", typeof(NGameEngineStateFlagsOptions))]
                [OptionsAttribute(typeof(NGameEngineStateFlagsOptions), true)]
                public NGameEngineStateFlagsOptions NGameEngineStateFlags;
                [FieldAttribute("age cutoff", typeof(Byte))]
                public Byte AgeCutoff;
                [FieldAttribute("clip cutoff", typeof(Byte))]
                public Byte ClipCutoff;
                [FieldAttribute("total cutoff", typeof(Byte))]
                public Byte TotalCutoff;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.YUnitFlags = ((YUnitFlagsOptions)(0));
                    this.YExtraFlags = ((YExtraFlagsOptions)(0));
                    this.YWeaponFlags = ((YWeaponFlagsOptions)(0));
                    this.YGameEngineStateFlags = ((YGameEngineStateFlagsOptions)(0));
                    this.NUnitFlags = ((NUnitFlagsOptions)(0));
                    this.NExtraFlags = ((NExtraFlagsOptions)(0));
                    this.NWeaponFlags = ((NWeaponFlagsOptions)(0));
                    this.NGameEngineStateFlags = ((NGameEngineStateFlagsOptions)(0));
                    this.AgeCutoff = 0;
                    this.ClipCutoff = 0;
                    this.TotalCutoff = 0;
                    this.EmptyString = new byte[1];
                }
                public override void Read(BinaryReader reader)
                {
                    this.YUnitFlags = ((YUnitFlagsOptions)(reader.ReadInt16()));
                    this.YExtraFlags = ((YExtraFlagsOptions)(reader.ReadInt16()));
                    this.YWeaponFlags = ((YWeaponFlagsOptions)(reader.ReadInt16()));
                    this.YGameEngineStateFlags = ((YGameEngineStateFlagsOptions)(reader.ReadInt16()));
                    this.NUnitFlags = ((NUnitFlagsOptions)(reader.ReadInt16()));
                    this.NExtraFlags = ((NExtraFlagsOptions)(reader.ReadInt16()));
                    this.NWeaponFlags = ((NWeaponFlagsOptions)(reader.ReadInt16()));
                    this.NGameEngineStateFlags = ((NGameEngineStateFlagsOptions)(reader.ReadInt16()));
                    this.AgeCutoff = reader.ReadByte();
                    this.ClipCutoff = reader.ReadByte();
                    this.TotalCutoff = reader.ReadByte();
                    this.EmptyString = reader.ReadBytes(1);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum YUnitFlagsOptions : Int16
                {
                    Default = 1,
                    GrenadeTypeIsNone = 2,
                    GrenadeTypeIsFrag = 4,
                    GrenadeTypeIsPlasma = 8,
                    UnitIsSingleWielding = 16,
                    UnitIsDualWielding = 32,
                    UnitIsUnzoomed = 64,
                    UnitIsZoomedLevel1 = 128,
                    UnitIsZoomedLevel2 = 256,
                    GrenadesDisabled = 512,
                    BinocularsEnabled = 1024,
                    MotionSensorEnabled = 2048,
                    ShieldEnabled = 4096,
                    Dervish = 8192,
                }
                public enum YExtraFlagsOptions : Int16
                {
                    AutoaimFriendly = 1,
                    AutoaimPlasma = 2,
                    AutoaimHeadshot = 4,
                    AutoaimVulnerable = 8,
                    AutoaimInvincible = 16,
                }
                public enum YWeaponFlagsOptions : Int16
                {
                    PrimaryWeapon = 1,
                    SecondaryWeapon = 2,
                    BackpackWeapon = 4,
                    AgeBelowCutoff = 8,
                    ClipBelowCutoff = 16,
                    TotalBelowCutoff = 32,
                    Overheated = 64,
                    OutOfAmmo = 128,
                    LockTargetAvailable = 256,
                    Locking = 512,
                    Locked = 1024,
                }
                public enum YGameEngineStateFlagsOptions : Int16
                {
                    CampaignSolo = 1,
                    CampaignCoop = 2,
                    FreeForAll = 4,
                    TeamGame = 8,
                    UserLeading = 16,
                    UserNotLeading = 32,
                    TimedGame = 64,
                    UntimedGame = 128,
                    OtherScoreValid = 256,
                    OtherScoreInvalid = 512,
                    PlayerIsArmingBomb = 1024,
                    PlayerTalking = 2048,
                }
                public enum NUnitFlagsOptions : Int16
                {
                    Default = 1,
                    GrenadeTypeIsNone = 2,
                    GrenadeTypeIsFrag = 4,
                    GrenadeTypeIsPlasma = 8,
                    UnitIsSingleWielding = 16,
                    UnitIsDualWielding = 32,
                    UnitIsUnzoomed = 64,
                    UnitIsZoomedLevel1 = 128,
                    UnitIsZoomedLevel2 = 256,
                    GrenadesDisabled = 512,
                    BinocularsEnabled = 1024,
                    MotionSensorEnabled = 2048,
                    ShieldEnabled = 4096,
                    Dervish = 8192,
                }
                public enum NExtraFlagsOptions : Int16
                {
                    AutoaimFriendly = 1,
                    AutoaimPlasma = 2,
                    AutoaimHeadshot = 4,
                    AutoaimVulnerable = 8,
                    AutoaimInvincible = 16,
                }
                public enum NWeaponFlagsOptions : Int16
                {
                    PrimaryWeapon = 1,
                    SecondaryWeapon = 2,
                    BackpackWeapon = 4,
                    AgeBelowCutoff = 8,
                    ClipBelowCutoff = 16,
                    TotalBelowCutoff = 32,
                    Overheated = 64,
                    OutOfAmmo = 128,
                    LockTargetAvailable = 256,
                    Locking = 512,
                    Locked = 1024,
                }
                public enum NGameEngineStateFlagsOptions : Int16
                {
                    CampaignSolo = 1,
                    CampaignCoop = 2,
                    FreeForAll = 4,
                    TeamGame = 8,
                    UserLeading = 16,
                    UserNotLeading = 32,
                    TimedGame = 64,
                    UntimedGame = 128,
                    OtherScoreValid = 256,
                    OtherScoreInvalid = 512,
                    PlayerIsArmingBomb = 1024,
                    PlayerTalking = 2048,
                }
            }
            public enum AnchorOptions : Int16
            {
                HealthAndShield = 0,
                WeaponHud = 1,
                MotionSensor = 2,
                Scoreboard = 3,
                Crosshair = 4,
                LockOnTarget = 5,
            }
            public enum FlagsOptions : Int16
            {
                FlipHorizontally = 1,
                FlipVertically = 2,
                ScopeMirrorHorizontally = 4,
                ScopeMirrorVertically = 8,
                ScopeStretch = 16,
            }
            public enum SpecialHudTypeOptions : Int16
            {
                Unspecial = 0,
                SbPlayerEmblem = 1,
                SbOtherPlayerEmblem = 2,
                SbPlayerScoreMeter = 3,
                SbOtherPlayerScoreMeter = 4,
                UnitShieldMeter = 5,
                MotionSensor = 6,
                TerritoryMeter = 7,
            }
        }
        [FieldSetAttribute(96, 4)]
        public sealed class HudTextWidgets : AbideTagBlock
        {
            private TagBlockList<HudWidgetEffectBlock> effectList = new TagBlockList<HudWidgetEffectBlock>(1);
            [FieldAttribute("name", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("", typeof(HudWidgetInputsStructBlock))]
            public HudWidgetInputsStructBlock EmptyString;
            [FieldAttribute("", typeof(HudWidgetStateDefinitionStructBlock))]
            public HudWidgetStateDefinitionStructBlock EmptyString1;
            [FieldAttribute("anchor", typeof(AnchorOptions))]
            [OptionsAttribute(typeof(AnchorOptions), false)]
            public AnchorOptions Anchor;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("shader", typeof(TagReference))]
            public TagReference Shader;
            [FieldAttribute("string", typeof(StringId))]
            public StringId String;
            [FieldAttribute("justification", typeof(JustificationOptions))]
            [OptionsAttribute(typeof(JustificationOptions), false)]
            public JustificationOptions Justification;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString2;
            [FieldAttribute("fullscreen font index", typeof(FullscreenFontIndexOptions))]
            [OptionsAttribute(typeof(FullscreenFontIndexOptions), false)]
            public FullscreenFontIndexOptions FullscreenFontIndex;
            [FieldAttribute("halfscreen font index", typeof(HalfscreenFontIndexOptions))]
            [OptionsAttribute(typeof(HalfscreenFontIndexOptions), false)]
            public HalfscreenFontIndexOptions HalfscreenFontIndex;
            [FieldAttribute("quarterscreen font index", typeof(QuarterscreenFontIndexOptions))]
            [OptionsAttribute(typeof(QuarterscreenFontIndexOptions), false)]
            public QuarterscreenFontIndexOptions QuarterscreenFontIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(1)]
            public Byte[] EmptyString3;
            [FieldAttribute("fullscreen scale", typeof(Single))]
            public Single FullscreenScale;
            [FieldAttribute("halfscreen scale", typeof(Single))]
            public Single HalfscreenScale;
            [FieldAttribute("quarterscreen scale", typeof(Single))]
            public Single QuarterscreenScale;
            [FieldAttribute("fullscreen offset", typeof(Vector2))]
            public Vector2 FullscreenOffset;
            [FieldAttribute("halfscreen offset", typeof(Vector2))]
            public Vector2 HalfscreenOffset;
            [FieldAttribute("quarterscreen offset", typeof(Vector2))]
            public Vector2 QuarterscreenOffset;
            [FieldAttribute("effect", typeof(TagBlock))]
            [BlockAttribute("hud_widget_effect_block", 1, typeof(HudWidgetEffectBlock))]
            public TagBlock Effect;
            public TagBlockList<HudWidgetEffectBlock> EffectList
            {
                get
                {
                    return this.effectList;
                }
            }
            public override int Size
            {
                get
                {
                    return 96;
                }
            }
            public override void Initialize()
            {
                this.effectList.Clear();
                this.Name = StringId.Zero;
                this.EmptyString = new HudWidgetInputsStructBlock();
                this.EmptyString1 = new HudWidgetStateDefinitionStructBlock();
                this.Anchor = ((AnchorOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.Shader = TagReference.Null;
                this.String = StringId.Zero;
                this.Justification = ((JustificationOptions)(0));
                this.EmptyString2 = new byte[2];
                this.FullscreenFontIndex = ((FullscreenFontIndexOptions)(0));
                this.HalfscreenFontIndex = ((HalfscreenFontIndexOptions)(0));
                this.QuarterscreenFontIndex = ((QuarterscreenFontIndexOptions)(0));
                this.EmptyString3 = new byte[1];
                this.FullscreenScale = 0;
                this.HalfscreenScale = 0;
                this.QuarterscreenScale = 0;
                this.FullscreenOffset = Vector2.Zero;
                this.HalfscreenOffset = Vector2.Zero;
                this.QuarterscreenOffset = Vector2.Zero;
                this.Effect = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.EmptyString = reader.ReadDataStructure<HudWidgetInputsStructBlock>();
                this.EmptyString1 = reader.ReadDataStructure<HudWidgetStateDefinitionStructBlock>();
                this.Anchor = ((AnchorOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Shader = reader.Read<TagReference>();
                this.String = reader.ReadInt32();
                this.Justification = ((JustificationOptions)(reader.ReadInt16()));
                this.EmptyString2 = reader.ReadBytes(2);
                this.FullscreenFontIndex = ((FullscreenFontIndexOptions)(reader.ReadByte()));
                this.HalfscreenFontIndex = ((HalfscreenFontIndexOptions)(reader.ReadByte()));
                this.QuarterscreenFontIndex = ((QuarterscreenFontIndexOptions)(reader.ReadByte()));
                this.EmptyString3 = reader.ReadBytes(1);
                this.FullscreenScale = reader.ReadSingle();
                this.HalfscreenScale = reader.ReadSingle();
                this.QuarterscreenScale = reader.ReadSingle();
                this.FullscreenOffset = reader.Read<Vector2>();
                this.HalfscreenOffset = reader.Read<Vector2>();
                this.QuarterscreenOffset = reader.Read<Vector2>();
                this.Effect = reader.ReadInt64();
                this.effectList.Read(reader, this.Effect);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(124, 4)]
            public sealed class HudWidgetEffectBlock : AbideTagBlock
            {
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom1;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom2;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom3;
                [FieldAttribute("your mom", typeof(HudWidgetEffectFunctionStructBlock))]
                public HudWidgetEffectFunctionStructBlock YourMom4;
                public override int Size
                {
                    get
                    {
                        return 124;
                    }
                }
                public override void Initialize()
                {
                    this.Flags = ((FlagsOptions)(0));
                    this.EmptyString = new byte[2];
                    this.YourMom = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom1 = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom2 = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom3 = new HudWidgetEffectFunctionStructBlock();
                    this.YourMom4 = new HudWidgetEffectFunctionStructBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.YourMom = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom1 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom2 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom3 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                    this.YourMom4 = reader.ReadDataStructure<HudWidgetEffectFunctionStructBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(24, 4)]
                public sealed class HudWidgetEffectFunctionStructBlock : AbideTagBlock
                {
                    [FieldAttribute("input name", typeof(StringId))]
                    public StringId InputName;
                    [FieldAttribute("range name", typeof(StringId))]
                    public StringId RangeName;
                    [FieldAttribute("time period in seconds", typeof(Single))]
                    public Single TimePeriodInSeconds;
                    [FieldAttribute("function", typeof(ScalarFunctionStructBlock))]
                    public ScalarFunctionStructBlock Function;
                    public override int Size
                    {
                        get
                        {
                            return 24;
                        }
                    }
                    public override void Initialize()
                    {
                        this.InputName = StringId.Zero;
                        this.RangeName = StringId.Zero;
                        this.TimePeriodInSeconds = 0;
                        this.Function = new ScalarFunctionStructBlock();
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.InputName = reader.ReadInt32();
                        this.RangeName = reader.ReadInt32();
                        this.TimePeriodInSeconds = reader.ReadSingle();
                        this.Function = reader.ReadDataStructure<ScalarFunctionStructBlock>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class ScalarFunctionStructBlock : AbideTagBlock
                    {
                        [FieldAttribute("function", typeof(MappingFunctionBlock))]
                        public MappingFunctionBlock Function;
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Function = new MappingFunctionBlock();
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(12, 4)]
                        public sealed class MappingFunctionBlock : AbideTagBlock
                        {
                            private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                            [FieldAttribute("data", typeof(TagBlock))]
                            [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                            public TagBlock Data;
                            public TagBlockList<ByteBlock> DataList
                            {
                                get
                                {
                                    return this.dataList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public override void Initialize()
                            {
                                this.dataList.Clear();
                                this.Data = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Data = reader.ReadInt64();
                                this.dataList.Read(reader, this.Data);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(1, 4)]
                            public sealed class ByteBlock : AbideTagBlock
                            {
                                [FieldAttribute("Value", typeof(Byte))]
                                public Byte Value;
                                public override int Size
                                {
                                    get
                                    {
                                        return 1;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.Value = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Value = reader.ReadByte();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                            }
                        }
                    }
                }
                public enum FlagsOptions : Int16
                {
                    ApplyScale = 1,
                    ApplyTheta = 2,
                    ApplyOffset = 4,
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class HudWidgetInputsStructBlock : AbideTagBlock
            {
                [FieldAttribute("input 1", typeof(Input1Options))]
                [OptionsAttribute(typeof(Input1Options), false)]
                public Input1Options Input1;
                [FieldAttribute("input 2", typeof(Input2Options))]
                [OptionsAttribute(typeof(Input2Options), false)]
                public Input2Options Input2;
                [FieldAttribute("input 3", typeof(Input3Options))]
                [OptionsAttribute(typeof(Input3Options), false)]
                public Input3Options Input3;
                [FieldAttribute("input 4", typeof(Input4Options))]
                [OptionsAttribute(typeof(Input4Options), false)]
                public Input4Options Input4;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Input1 = ((Input1Options)(0));
                    this.Input2 = ((Input2Options)(0));
                    this.Input3 = ((Input3Options)(0));
                    this.Input4 = ((Input4Options)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.Input1 = ((Input1Options)(reader.ReadByte()));
                    this.Input2 = ((Input2Options)(reader.ReadByte()));
                    this.Input3 = ((Input3Options)(reader.ReadByte()));
                    this.Input4 = ((Input4Options)(reader.ReadByte()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum Input1Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input2Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input3Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input4Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class HudWidgetStateDefinitionStructBlock : AbideTagBlock
            {
                [FieldAttribute("[Y] unit flags", typeof(YUnitFlagsOptions))]
                [OptionsAttribute(typeof(YUnitFlagsOptions), true)]
                public YUnitFlagsOptions YUnitFlags;
                [FieldAttribute("[Y] extra flags", typeof(YExtraFlagsOptions))]
                [OptionsAttribute(typeof(YExtraFlagsOptions), true)]
                public YExtraFlagsOptions YExtraFlags;
                [FieldAttribute("[Y] weapon flags", typeof(YWeaponFlagsOptions))]
                [OptionsAttribute(typeof(YWeaponFlagsOptions), true)]
                public YWeaponFlagsOptions YWeaponFlags;
                [FieldAttribute("[Y] game engine state flags", typeof(YGameEngineStateFlagsOptions))]
                [OptionsAttribute(typeof(YGameEngineStateFlagsOptions), true)]
                public YGameEngineStateFlagsOptions YGameEngineStateFlags;
                [FieldAttribute("[N] unit flags", typeof(NUnitFlagsOptions))]
                [OptionsAttribute(typeof(NUnitFlagsOptions), true)]
                public NUnitFlagsOptions NUnitFlags;
                [FieldAttribute("[N] extra flags", typeof(NExtraFlagsOptions))]
                [OptionsAttribute(typeof(NExtraFlagsOptions), true)]
                public NExtraFlagsOptions NExtraFlags;
                [FieldAttribute("[N] weapon flags", typeof(NWeaponFlagsOptions))]
                [OptionsAttribute(typeof(NWeaponFlagsOptions), true)]
                public NWeaponFlagsOptions NWeaponFlags;
                [FieldAttribute("[N] game engine state flags", typeof(NGameEngineStateFlagsOptions))]
                [OptionsAttribute(typeof(NGameEngineStateFlagsOptions), true)]
                public NGameEngineStateFlagsOptions NGameEngineStateFlags;
                [FieldAttribute("age cutoff", typeof(Byte))]
                public Byte AgeCutoff;
                [FieldAttribute("clip cutoff", typeof(Byte))]
                public Byte ClipCutoff;
                [FieldAttribute("total cutoff", typeof(Byte))]
                public Byte TotalCutoff;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.YUnitFlags = ((YUnitFlagsOptions)(0));
                    this.YExtraFlags = ((YExtraFlagsOptions)(0));
                    this.YWeaponFlags = ((YWeaponFlagsOptions)(0));
                    this.YGameEngineStateFlags = ((YGameEngineStateFlagsOptions)(0));
                    this.NUnitFlags = ((NUnitFlagsOptions)(0));
                    this.NExtraFlags = ((NExtraFlagsOptions)(0));
                    this.NWeaponFlags = ((NWeaponFlagsOptions)(0));
                    this.NGameEngineStateFlags = ((NGameEngineStateFlagsOptions)(0));
                    this.AgeCutoff = 0;
                    this.ClipCutoff = 0;
                    this.TotalCutoff = 0;
                    this.EmptyString = new byte[1];
                }
                public override void Read(BinaryReader reader)
                {
                    this.YUnitFlags = ((YUnitFlagsOptions)(reader.ReadInt16()));
                    this.YExtraFlags = ((YExtraFlagsOptions)(reader.ReadInt16()));
                    this.YWeaponFlags = ((YWeaponFlagsOptions)(reader.ReadInt16()));
                    this.YGameEngineStateFlags = ((YGameEngineStateFlagsOptions)(reader.ReadInt16()));
                    this.NUnitFlags = ((NUnitFlagsOptions)(reader.ReadInt16()));
                    this.NExtraFlags = ((NExtraFlagsOptions)(reader.ReadInt16()));
                    this.NWeaponFlags = ((NWeaponFlagsOptions)(reader.ReadInt16()));
                    this.NGameEngineStateFlags = ((NGameEngineStateFlagsOptions)(reader.ReadInt16()));
                    this.AgeCutoff = reader.ReadByte();
                    this.ClipCutoff = reader.ReadByte();
                    this.TotalCutoff = reader.ReadByte();
                    this.EmptyString = reader.ReadBytes(1);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum YUnitFlagsOptions : Int16
                {
                    Default = 1,
                    GrenadeTypeIsNone = 2,
                    GrenadeTypeIsFrag = 4,
                    GrenadeTypeIsPlasma = 8,
                    UnitIsSingleWielding = 16,
                    UnitIsDualWielding = 32,
                    UnitIsUnzoomed = 64,
                    UnitIsZoomedLevel1 = 128,
                    UnitIsZoomedLevel2 = 256,
                    GrenadesDisabled = 512,
                    BinocularsEnabled = 1024,
                    MotionSensorEnabled = 2048,
                    ShieldEnabled = 4096,
                    Dervish = 8192,
                }
                public enum YExtraFlagsOptions : Int16
                {
                    AutoaimFriendly = 1,
                    AutoaimPlasma = 2,
                    AutoaimHeadshot = 4,
                    AutoaimVulnerable = 8,
                    AutoaimInvincible = 16,
                }
                public enum YWeaponFlagsOptions : Int16
                {
                    PrimaryWeapon = 1,
                    SecondaryWeapon = 2,
                    BackpackWeapon = 4,
                    AgeBelowCutoff = 8,
                    ClipBelowCutoff = 16,
                    TotalBelowCutoff = 32,
                    Overheated = 64,
                    OutOfAmmo = 128,
                    LockTargetAvailable = 256,
                    Locking = 512,
                    Locked = 1024,
                }
                public enum YGameEngineStateFlagsOptions : Int16
                {
                    CampaignSolo = 1,
                    CampaignCoop = 2,
                    FreeForAll = 4,
                    TeamGame = 8,
                    UserLeading = 16,
                    UserNotLeading = 32,
                    TimedGame = 64,
                    UntimedGame = 128,
                    OtherScoreValid = 256,
                    OtherScoreInvalid = 512,
                    PlayerIsArmingBomb = 1024,
                    PlayerTalking = 2048,
                }
                public enum NUnitFlagsOptions : Int16
                {
                    Default = 1,
                    GrenadeTypeIsNone = 2,
                    GrenadeTypeIsFrag = 4,
                    GrenadeTypeIsPlasma = 8,
                    UnitIsSingleWielding = 16,
                    UnitIsDualWielding = 32,
                    UnitIsUnzoomed = 64,
                    UnitIsZoomedLevel1 = 128,
                    UnitIsZoomedLevel2 = 256,
                    GrenadesDisabled = 512,
                    BinocularsEnabled = 1024,
                    MotionSensorEnabled = 2048,
                    ShieldEnabled = 4096,
                    Dervish = 8192,
                }
                public enum NExtraFlagsOptions : Int16
                {
                    AutoaimFriendly = 1,
                    AutoaimPlasma = 2,
                    AutoaimHeadshot = 4,
                    AutoaimVulnerable = 8,
                    AutoaimInvincible = 16,
                }
                public enum NWeaponFlagsOptions : Int16
                {
                    PrimaryWeapon = 1,
                    SecondaryWeapon = 2,
                    BackpackWeapon = 4,
                    AgeBelowCutoff = 8,
                    ClipBelowCutoff = 16,
                    TotalBelowCutoff = 32,
                    Overheated = 64,
                    OutOfAmmo = 128,
                    LockTargetAvailable = 256,
                    Locking = 512,
                    Locked = 1024,
                }
                public enum NGameEngineStateFlagsOptions : Int16
                {
                    CampaignSolo = 1,
                    CampaignCoop = 2,
                    FreeForAll = 4,
                    TeamGame = 8,
                    UserLeading = 16,
                    UserNotLeading = 32,
                    TimedGame = 64,
                    UntimedGame = 128,
                    OtherScoreValid = 256,
                    OtherScoreInvalid = 512,
                    PlayerIsArmingBomb = 1024,
                    PlayerTalking = 2048,
                }
            }
            public enum AnchorOptions : Int16
            {
                HealthAndShield = 0,
                WeaponHud = 1,
                MotionSensor = 2,
                Scoreboard = 3,
                Crosshair = 4,
                LockOnTarget = 5,
            }
            public enum FlagsOptions : Int16
            {
                StringIsANumber = 1,
                Force2DigitNumber = 2,
                Force3DigitNumber = 4,
                TalkingPlayerHack = 8,
            }
            public enum JustificationOptions : Int16
            {
                Left = 0,
                Center = 1,
                Right = 2,
            }
            public enum FullscreenFontIndexOptions : Byte
            {
                Defualt = 0,
                NumberFont = 1,
            }
            public enum HalfscreenFontIndexOptions : Byte
            {
                Defualt = 0,
                NumberFont = 1,
            }
            public enum QuarterscreenFontIndexOptions : Byte
            {
                Defualt = 0,
                NumberFont = 1,
            }
        }
        [FieldSetAttribute(112, 4)]
        public sealed class HudScreenEffectWidgets : AbideTagBlock
        {
            [FieldAttribute("name", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("", typeof(HudWidgetInputsStructBlock))]
            public HudWidgetInputsStructBlock EmptyString;
            [FieldAttribute("", typeof(HudWidgetStateDefinitionStructBlock))]
            public HudWidgetStateDefinitionStructBlock EmptyString1;
            [FieldAttribute("anchor", typeof(AnchorOptions))]
            [OptionsAttribute(typeof(AnchorOptions), false)]
            public AnchorOptions Anchor;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("bitmap", typeof(TagReference))]
            public TagReference Bitmap;
            [FieldAttribute("fullscreen screen effect", typeof(TagReference))]
            public TagReference FullscreenScreenEffect;
            [FieldAttribute("waa", typeof(ScreenEffectBonusStructBlock))]
            public ScreenEffectBonusStructBlock Waa;
            [FieldAttribute("fullscreen sequence index", typeof(Byte))]
            public Byte FullscreenSequenceIndex;
            [FieldAttribute("halfscreen sequence index", typeof(Byte))]
            public Byte HalfscreenSequenceIndex;
            [FieldAttribute("quarterscreen sequence index", typeof(Byte))]
            public Byte QuarterscreenSequenceIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(1)]
            public Byte[] EmptyString2;
            [FieldAttribute("fullscreen offset", typeof(Vector2))]
            public Vector2 FullscreenOffset;
            [FieldAttribute("halfscreen offset", typeof(Vector2))]
            public Vector2 HalfscreenOffset;
            [FieldAttribute("quarterscreen offset", typeof(Vector2))]
            public Vector2 QuarterscreenOffset;
            public override int Size
            {
                get
                {
                    return 112;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.EmptyString = new HudWidgetInputsStructBlock();
                this.EmptyString1 = new HudWidgetStateDefinitionStructBlock();
                this.Anchor = ((AnchorOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.Bitmap = TagReference.Null;
                this.FullscreenScreenEffect = TagReference.Null;
                this.Waa = new ScreenEffectBonusStructBlock();
                this.FullscreenSequenceIndex = 0;
                this.HalfscreenSequenceIndex = 0;
                this.QuarterscreenSequenceIndex = 0;
                this.EmptyString2 = new byte[1];
                this.FullscreenOffset = Vector2.Zero;
                this.HalfscreenOffset = Vector2.Zero;
                this.QuarterscreenOffset = Vector2.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.EmptyString = reader.ReadDataStructure<HudWidgetInputsStructBlock>();
                this.EmptyString1 = reader.ReadDataStructure<HudWidgetStateDefinitionStructBlock>();
                this.Anchor = ((AnchorOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Bitmap = reader.Read<TagReference>();
                this.FullscreenScreenEffect = reader.Read<TagReference>();
                this.Waa = reader.ReadDataStructure<ScreenEffectBonusStructBlock>();
                this.FullscreenSequenceIndex = reader.ReadByte();
                this.HalfscreenSequenceIndex = reader.ReadByte();
                this.QuarterscreenSequenceIndex = reader.ReadByte();
                this.EmptyString2 = reader.ReadBytes(1);
                this.FullscreenOffset = reader.Read<Vector2>();
                this.HalfscreenOffset = reader.Read<Vector2>();
                this.QuarterscreenOffset = reader.Read<Vector2>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(4, 4)]
            public sealed class HudWidgetInputsStructBlock : AbideTagBlock
            {
                [FieldAttribute("input 1", typeof(Input1Options))]
                [OptionsAttribute(typeof(Input1Options), false)]
                public Input1Options Input1;
                [FieldAttribute("input 2", typeof(Input2Options))]
                [OptionsAttribute(typeof(Input2Options), false)]
                public Input2Options Input2;
                [FieldAttribute("input 3", typeof(Input3Options))]
                [OptionsAttribute(typeof(Input3Options), false)]
                public Input3Options Input3;
                [FieldAttribute("input 4", typeof(Input4Options))]
                [OptionsAttribute(typeof(Input4Options), false)]
                public Input4Options Input4;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Input1 = ((Input1Options)(0));
                    this.Input2 = ((Input2Options)(0));
                    this.Input3 = ((Input3Options)(0));
                    this.Input4 = ((Input4Options)(0));
                }
                public override void Read(BinaryReader reader)
                {
                    this.Input1 = ((Input1Options)(reader.ReadByte()));
                    this.Input2 = ((Input2Options)(reader.ReadByte()));
                    this.Input3 = ((Input3Options)(reader.ReadByte()));
                    this.Input4 = ((Input4Options)(reader.ReadByte()));
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum Input1Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input2Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input3Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
                public enum Input4Options : Byte
                {
                    BasicZero = 0,
                    BasicOne = 1,
                    BasicTime = 2,
                    BasicGlobalHudFade = 3,
                    EmptyString = 4,
                    EmptyString1 = 5,
                    EmptyString2 = 6,
                    EmptyString3 = 7,
                    EmptyString4 = 8,
                    EmptyString5 = 9,
                    EmptyString6 = 10,
                    EmptyString7 = 11,
                    EmptyString8 = 12,
                    EmptyString9 = 13,
                    EmptyString10 = 14,
                    EmptyString11 = 15,
                    UnitShield = 16,
                    UnitBody = 17,
                    UnitAutoaimed = 18,
                    UnitHasNoGrenades = 19,
                    UnitFragGrenCnt = 20,
                    UnitPlasmaGrenCnt = 21,
                    UnitTimeOnDplShld = 22,
                    UnitZoomFraction = 23,
                    UnitCamoValue = 24,
                    EmptyString12 = 25,
                    EmptyString13 = 26,
                    EmptyString14 = 27,
                    EmptyString15 = 28,
                    EmptyString16 = 29,
                    EmptyString17 = 30,
                    EmptyString18 = 31,
                    ParentShield = 32,
                    ParentBody = 33,
                    EmptyString19 = 34,
                    EmptyString20 = 35,
                    EmptyString21 = 36,
                    EmptyString22 = 37,
                    EmptyString23 = 38,
                    EmptyString24 = 39,
                    EmptyString25 = 40,
                    EmptyString26 = 41,
                    EmptyString27 = 42,
                    EmptyString28 = 43,
                    EmptyString29 = 44,
                    EmptyString30 = 45,
                    EmptyString31 = 46,
                    EmptyString32 = 47,
                    WeaponClipAmmo = 48,
                    WeaponHeat = 49,
                    WeaponBattery = 50,
                    WeaponTotalAmmo = 51,
                    WeaponBarrelSpin = 52,
                    WeaponOverheated = 53,
                    WeaponClipAmmoFraction = 54,
                    WeaponTimeOnOverheat = 55,
                    WeaponBatteryFraction = 56,
                    WeaponLockingFraction = 57,
                    EmptyString33 = 58,
                    EmptyString34 = 59,
                    EmptyString35 = 60,
                    EmptyString36 = 61,
                    EmptyString37 = 62,
                    EmptyString38 = 63,
                    EmptyString39 = 64,
                    UserScoreFraction = 65,
                    OtherUserScoreFraction = 66,
                    UserWinning = 67,
                    BombArmingAmount = 68,
                    EmptyString40 = 69,
                    EmptyString41 = 70,
                    EmptyString42 = 71,
                    EmptyString43 = 72,
                    EmptyString44 = 73,
                    EmptyString45 = 74,
                    EmptyString46 = 75,
                    EmptyString47 = 76,
                    EmptyString48 = 77,
                    EmptyString49 = 78,
                    EmptyString50 = 79,
                    EmptyString51 = 80,
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class HudWidgetStateDefinitionStructBlock : AbideTagBlock
            {
                [FieldAttribute("[Y] unit flags", typeof(YUnitFlagsOptions))]
                [OptionsAttribute(typeof(YUnitFlagsOptions), true)]
                public YUnitFlagsOptions YUnitFlags;
                [FieldAttribute("[Y] extra flags", typeof(YExtraFlagsOptions))]
                [OptionsAttribute(typeof(YExtraFlagsOptions), true)]
                public YExtraFlagsOptions YExtraFlags;
                [FieldAttribute("[Y] weapon flags", typeof(YWeaponFlagsOptions))]
                [OptionsAttribute(typeof(YWeaponFlagsOptions), true)]
                public YWeaponFlagsOptions YWeaponFlags;
                [FieldAttribute("[Y] game engine state flags", typeof(YGameEngineStateFlagsOptions))]
                [OptionsAttribute(typeof(YGameEngineStateFlagsOptions), true)]
                public YGameEngineStateFlagsOptions YGameEngineStateFlags;
                [FieldAttribute("[N] unit flags", typeof(NUnitFlagsOptions))]
                [OptionsAttribute(typeof(NUnitFlagsOptions), true)]
                public NUnitFlagsOptions NUnitFlags;
                [FieldAttribute("[N] extra flags", typeof(NExtraFlagsOptions))]
                [OptionsAttribute(typeof(NExtraFlagsOptions), true)]
                public NExtraFlagsOptions NExtraFlags;
                [FieldAttribute("[N] weapon flags", typeof(NWeaponFlagsOptions))]
                [OptionsAttribute(typeof(NWeaponFlagsOptions), true)]
                public NWeaponFlagsOptions NWeaponFlags;
                [FieldAttribute("[N] game engine state flags", typeof(NGameEngineStateFlagsOptions))]
                [OptionsAttribute(typeof(NGameEngineStateFlagsOptions), true)]
                public NGameEngineStateFlagsOptions NGameEngineStateFlags;
                [FieldAttribute("age cutoff", typeof(Byte))]
                public Byte AgeCutoff;
                [FieldAttribute("clip cutoff", typeof(Byte))]
                public Byte ClipCutoff;
                [FieldAttribute("total cutoff", typeof(Byte))]
                public Byte TotalCutoff;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.YUnitFlags = ((YUnitFlagsOptions)(0));
                    this.YExtraFlags = ((YExtraFlagsOptions)(0));
                    this.YWeaponFlags = ((YWeaponFlagsOptions)(0));
                    this.YGameEngineStateFlags = ((YGameEngineStateFlagsOptions)(0));
                    this.NUnitFlags = ((NUnitFlagsOptions)(0));
                    this.NExtraFlags = ((NExtraFlagsOptions)(0));
                    this.NWeaponFlags = ((NWeaponFlagsOptions)(0));
                    this.NGameEngineStateFlags = ((NGameEngineStateFlagsOptions)(0));
                    this.AgeCutoff = 0;
                    this.ClipCutoff = 0;
                    this.TotalCutoff = 0;
                    this.EmptyString = new byte[1];
                }
                public override void Read(BinaryReader reader)
                {
                    this.YUnitFlags = ((YUnitFlagsOptions)(reader.ReadInt16()));
                    this.YExtraFlags = ((YExtraFlagsOptions)(reader.ReadInt16()));
                    this.YWeaponFlags = ((YWeaponFlagsOptions)(reader.ReadInt16()));
                    this.YGameEngineStateFlags = ((YGameEngineStateFlagsOptions)(reader.ReadInt16()));
                    this.NUnitFlags = ((NUnitFlagsOptions)(reader.ReadInt16()));
                    this.NExtraFlags = ((NExtraFlagsOptions)(reader.ReadInt16()));
                    this.NWeaponFlags = ((NWeaponFlagsOptions)(reader.ReadInt16()));
                    this.NGameEngineStateFlags = ((NGameEngineStateFlagsOptions)(reader.ReadInt16()));
                    this.AgeCutoff = reader.ReadByte();
                    this.ClipCutoff = reader.ReadByte();
                    this.TotalCutoff = reader.ReadByte();
                    this.EmptyString = reader.ReadBytes(1);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum YUnitFlagsOptions : Int16
                {
                    Default = 1,
                    GrenadeTypeIsNone = 2,
                    GrenadeTypeIsFrag = 4,
                    GrenadeTypeIsPlasma = 8,
                    UnitIsSingleWielding = 16,
                    UnitIsDualWielding = 32,
                    UnitIsUnzoomed = 64,
                    UnitIsZoomedLevel1 = 128,
                    UnitIsZoomedLevel2 = 256,
                    GrenadesDisabled = 512,
                    BinocularsEnabled = 1024,
                    MotionSensorEnabled = 2048,
                    ShieldEnabled = 4096,
                    Dervish = 8192,
                }
                public enum YExtraFlagsOptions : Int16
                {
                    AutoaimFriendly = 1,
                    AutoaimPlasma = 2,
                    AutoaimHeadshot = 4,
                    AutoaimVulnerable = 8,
                    AutoaimInvincible = 16,
                }
                public enum YWeaponFlagsOptions : Int16
                {
                    PrimaryWeapon = 1,
                    SecondaryWeapon = 2,
                    BackpackWeapon = 4,
                    AgeBelowCutoff = 8,
                    ClipBelowCutoff = 16,
                    TotalBelowCutoff = 32,
                    Overheated = 64,
                    OutOfAmmo = 128,
                    LockTargetAvailable = 256,
                    Locking = 512,
                    Locked = 1024,
                }
                public enum YGameEngineStateFlagsOptions : Int16
                {
                    CampaignSolo = 1,
                    CampaignCoop = 2,
                    FreeForAll = 4,
                    TeamGame = 8,
                    UserLeading = 16,
                    UserNotLeading = 32,
                    TimedGame = 64,
                    UntimedGame = 128,
                    OtherScoreValid = 256,
                    OtherScoreInvalid = 512,
                    PlayerIsArmingBomb = 1024,
                    PlayerTalking = 2048,
                }
                public enum NUnitFlagsOptions : Int16
                {
                    Default = 1,
                    GrenadeTypeIsNone = 2,
                    GrenadeTypeIsFrag = 4,
                    GrenadeTypeIsPlasma = 8,
                    UnitIsSingleWielding = 16,
                    UnitIsDualWielding = 32,
                    UnitIsUnzoomed = 64,
                    UnitIsZoomedLevel1 = 128,
                    UnitIsZoomedLevel2 = 256,
                    GrenadesDisabled = 512,
                    BinocularsEnabled = 1024,
                    MotionSensorEnabled = 2048,
                    ShieldEnabled = 4096,
                    Dervish = 8192,
                }
                public enum NExtraFlagsOptions : Int16
                {
                    AutoaimFriendly = 1,
                    AutoaimPlasma = 2,
                    AutoaimHeadshot = 4,
                    AutoaimVulnerable = 8,
                    AutoaimInvincible = 16,
                }
                public enum NWeaponFlagsOptions : Int16
                {
                    PrimaryWeapon = 1,
                    SecondaryWeapon = 2,
                    BackpackWeapon = 4,
                    AgeBelowCutoff = 8,
                    ClipBelowCutoff = 16,
                    TotalBelowCutoff = 32,
                    Overheated = 64,
                    OutOfAmmo = 128,
                    LockTargetAvailable = 256,
                    Locking = 512,
                    Locked = 1024,
                }
                public enum NGameEngineStateFlagsOptions : Int16
                {
                    CampaignSolo = 1,
                    CampaignCoop = 2,
                    FreeForAll = 4,
                    TeamGame = 8,
                    UserLeading = 16,
                    UserNotLeading = 32,
                    TimedGame = 64,
                    UntimedGame = 128,
                    OtherScoreValid = 256,
                    OtherScoreInvalid = 512,
                    PlayerIsArmingBomb = 1024,
                    PlayerTalking = 2048,
                }
            }
            [FieldSetAttribute(32, 4)]
            public sealed class ScreenEffectBonusStructBlock : AbideTagBlock
            {
                [FieldAttribute("halfscreen screen effect", typeof(TagReference))]
                public TagReference HalfscreenScreenEffect;
                [FieldAttribute("quarterscreen screen effect", typeof(TagReference))]
                public TagReference QuarterscreenScreenEffect;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.HalfscreenScreenEffect = TagReference.Null;
                    this.QuarterscreenScreenEffect = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.HalfscreenScreenEffect = reader.Read<TagReference>();
                    this.QuarterscreenScreenEffect = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum AnchorOptions : Int16
            {
                HealthAndShield = 0,
                WeaponHud = 1,
                MotionSensor = 2,
                Scoreboard = 3,
                Crosshair = 4,
                LockOnTarget = 5,
            }
            public enum FlagsOptions : Int16
            {
                Unused = 1,
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class NewHudDashlightDataStructBlock : AbideTagBlock
        {
            [FieldAttribute("low clip cutoff#the cutoff for showing the reload dashlight", typeof(Int16))]
            public Int16 LowClipCutoff;
            [FieldAttribute("low ammo cutoff#the cutoff for showing the low ammo dashlight", typeof(Int16))]
            public Int16 LowAmmoCutoff;
            [FieldAttribute("age cutoff#the age cutoff for showing the low battery dashlight", typeof(Single))]
            public Single AgeCutoff;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.LowClipCutoff = 0;
                this.LowAmmoCutoff = 0;
                this.AgeCutoff = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.LowClipCutoff = reader.ReadInt16();
                this.LowAmmoCutoff = reader.ReadInt16();
                this.AgeCutoff = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
    }
}
#pragma warning restore CS1591
