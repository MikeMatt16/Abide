#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(60, 4)]
    [TagGroupAttribute("sound_looping", 1819504228u, 4294967293u, typeof(SoundLoopingBlock))]
    public sealed class SoundLoopingBlock : AbideTagBlock
    {
        private TagBlockList<LoopingSoundTrackBlock> tracksList = new TagBlockList<LoopingSoundTrackBlock>(3);
        private TagBlockList<LoopingSoundDetailBlock> detailSoundsList = new TagBlockList<LoopingSoundDetailBlock>(12);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("marty\'s music time: seconds", typeof(Single))]
        public Single MartysMusicTime;
        [FieldAttribute("", typeof(Single))]
        public Single EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(8)]
        public Byte[] EmptyString1;
        [FieldAttribute("", typeof(TagReference))]
        public TagReference EmptyString2;
        [FieldAttribute("tracks#tracks play in parallel and loop continuously for the duration of the loop" +
            "ing sound.", typeof(TagBlock))]
        [BlockAttribute("looping_sound_track_block", 3, typeof(LoopingSoundTrackBlock))]
        public TagBlock Tracks;
        [FieldAttribute("detail sounds#detail sounds play at random throughout the duration of the looping" +
            " sound.", typeof(TagBlock))]
        [BlockAttribute("looping_sound_detail_block", 12, typeof(LoopingSoundDetailBlock))]
        public TagBlock DetailSounds;
        public TagBlockList<LoopingSoundTrackBlock> TracksList
        {
            get
            {
                return this.tracksList;
            }
        }
        public TagBlockList<LoopingSoundDetailBlock> DetailSoundsList
        {
            get
            {
                return this.detailSoundsList;
            }
        }
        public override int Size
        {
            get
            {
                return 60;
            }
        }
        public override void Initialize()
        {
            this.tracksList.Clear();
            this.detailSoundsList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.MartysMusicTime = 0;
            this.EmptyString = 0;
            this.EmptyString1 = new byte[8];
            this.EmptyString2 = TagReference.Null;
            this.Tracks = TagBlock.Zero;
            this.DetailSounds = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.MartysMusicTime = reader.ReadSingle();
            this.EmptyString = reader.ReadSingle();
            this.EmptyString1 = reader.ReadBytes(8);
            this.EmptyString2 = reader.Read<TagReference>();
            this.Tracks = reader.ReadInt64();
            this.tracksList.Read(reader, this.Tracks);
            this.DetailSounds = reader.ReadInt64();
            this.detailSoundsList.Read(reader, this.DetailSounds);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(144, 4)]
        public sealed class LoopingSoundTrackBlock : AbideTagBlock
        {
            [FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("gain:dB", typeof(Single))]
            public Single Gain;
            [FieldAttribute("fade in duration:seconds", typeof(Single))]
            public Single FadeInDuration;
            [FieldAttribute("fade out duration:seconds", typeof(Single))]
            public Single FadeOutDuration;
            [FieldAttribute("in", typeof(TagReference))]
            public TagReference In;
            [FieldAttribute("loop", typeof(TagReference))]
            public TagReference Loop;
            [FieldAttribute("out", typeof(TagReference))]
            public TagReference Out;
            [FieldAttribute("alt loop", typeof(TagReference))]
            public TagReference AltLoop;
            [FieldAttribute("alt out", typeof(TagReference))]
            public TagReference AltOut;
            [FieldAttribute("output effect", typeof(OutputEffectOptions))]
            [OptionsAttribute(typeof(OutputEffectOptions), false)]
            public OutputEffectOptions OutputEffect;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("alt trans in", typeof(TagReference))]
            public TagReference AltTransIn;
            [FieldAttribute("alt trans out", typeof(TagReference))]
            public TagReference AltTransOut;
            [FieldAttribute("alt crossfade duration:seconds", typeof(Single))]
            public Single AltCrossfadeDuration;
            [FieldAttribute("alt fade out duration:seconds", typeof(Single))]
            public Single AltFadeOutDuration;
            public override int Size
            {
                get
                {
                    return 144;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Flags = ((FlagsOptions)(0));
                this.Gain = 0;
                this.FadeInDuration = 0;
                this.FadeOutDuration = 0;
                this.In = TagReference.Null;
                this.Loop = TagReference.Null;
                this.Out = TagReference.Null;
                this.AltLoop = TagReference.Null;
                this.AltOut = TagReference.Null;
                this.OutputEffect = ((OutputEffectOptions)(0));
                this.EmptyString = new byte[2];
                this.AltTransIn = TagReference.Null;
                this.AltTransOut = TagReference.Null;
                this.AltCrossfadeDuration = 0;
                this.AltFadeOutDuration = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Gain = reader.ReadSingle();
                this.FadeInDuration = reader.ReadSingle();
                this.FadeOutDuration = reader.ReadSingle();
                this.In = reader.Read<TagReference>();
                this.Loop = reader.Read<TagReference>();
                this.Out = reader.Read<TagReference>();
                this.AltLoop = reader.Read<TagReference>();
                this.AltOut = reader.Read<TagReference>();
                this.OutputEffect = ((OutputEffectOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.AltTransIn = reader.Read<TagReference>();
                this.AltTransOut = reader.Read<TagReference>();
                this.AltCrossfadeDuration = reader.ReadSingle();
                this.AltFadeOutDuration = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                FadeInAtStart = 1,
                FadeOutAtStop = 2,
                CrossfadeAltLoop = 4,
                MasterSurroundSoundTrack = 8,
                FadeOutAtAltStop = 16,
            }
            public enum OutputEffectOptions : Int16
            {
                None = 0,
                OutputFrontSpeakers = 1,
                OutputRearSpeakers = 2,
                OutputCenterSpeakers = 3,
            }
        }
        [FieldSetAttribute(60, 4)]
        public sealed class LoopingSoundDetailBlock : AbideTagBlock
        {
            [FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("sound", typeof(TagReference))]
            public TagReference Sound;
            [FieldAttribute("", typeof(Single))]
            public Single EmptyString;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            public override int Size
            {
                get
                {
                    return 60;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.Sound = TagReference.Null;
                this.EmptyString = 0;
                this.Flags = ((FlagsOptions)(0));
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Sound = reader.Read<TagReference>();
                this.EmptyString = reader.ReadSingle();
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int32
            {
                DontPlayWithAlternate = 1,
                DontPlayWithoutAlternate = 2,
                StartImmediatelyWithLoop = 4,
            }
        }
        public enum FlagsOptions : Int32
        {
            DeafeningToAis = 1,
            NotALoop = 2,
            StopsMusic = 4,
            AlwaysSpatialize = 8,
            SynchronizePlayback = 16,
            SynchronizeTracks = 32,
            FakeSpatializationWithDistance = 64,
            CombineAll3dPlayback = 128,
        }
    }
}
#pragma warning restore CS1591
