#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(396, 4)]
    [TagGroupAttribute("unit", 1970170228u, 1868720741u, typeof(UnitBlock))]
    public sealed class UnitBlock : AbideTagBlock
    {
        private TagBlockList<UnitPosturesBlock> posturesList = new TagBlockList<UnitPosturesBlock>(20);
        private TagBlockList<UnitHudReferenceBlock> newHudInterfacesList = new TagBlockList<UnitHudReferenceBlock>(2);
        private TagBlockList<DialogueVariantBlock> dialogueVariantsList = new TagBlockList<DialogueVariantBlock>(16);
        private TagBlockList<PoweredSeatBlock> poweredSeatsList = new TagBlockList<PoweredSeatBlock>(2);
        private TagBlockList<UnitWeaponBlock> weaponsList = new TagBlockList<UnitWeaponBlock>(4);
        private TagBlockList<UnitSeatBlock> seatsList = new TagBlockList<UnitSeatBlock>(32);
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("default team", typeof(DefaultTeamOptions))]
        [OptionsAttribute(typeof(DefaultTeamOptions), false)]
        public DefaultTeamOptions DefaultTeam;
        [FieldAttribute("constant sound volume", typeof(ConstantSoundVolumeOptions))]
        [OptionsAttribute(typeof(ConstantSoundVolumeOptions), false)]
        public ConstantSoundVolumeOptions ConstantSoundVolume;
        [FieldAttribute("integrated light toggle", typeof(TagReference))]
        public TagReference IntegratedLightToggle;
        [FieldAttribute("camera field of view:degrees", typeof(Single))]
        public Single CameraFieldOfView;
        [FieldAttribute("camera stiffness", typeof(Single))]
        public Single CameraStiffness;
        [FieldAttribute("unit camera", typeof(UnitCameraStructBlock))]
        public UnitCameraStructBlock UnitCamera;
        [FieldAttribute("acceleration", typeof(UnitSeatAccelerationStructBlock))]
        public UnitSeatAccelerationStructBlock Acceleration;
        [FieldAttribute("soft ping threshold:[0,1]", typeof(Single))]
        public Single SoftPingThreshold;
        [FieldAttribute("soft ping interrupt time:seconds", typeof(Single))]
        public Single SoftPingInterruptTime;
        [FieldAttribute("hard ping threshold:[0,1]", typeof(Single))]
        public Single HardPingThreshold;
        [FieldAttribute("hard ping interrupt time:seconds", typeof(Single))]
        public Single HardPingInterruptTime;
        [FieldAttribute("hard death threshold:[0,1]", typeof(Single))]
        public Single HardDeathThreshold;
        [FieldAttribute("feign death threshold:[0,1]", typeof(Single))]
        public Single FeignDeathThreshold;
        [FieldAttribute("feign death time:seconds", typeof(Single))]
        public Single FeignDeathTime;
        [FieldAttribute("distance of evade anim:world units#this must be set to tell the AI how far it sho" +
            "uld expect our evade animation to move us", typeof(Single))]
        public Single DistanceOfEvadeAnim;
        [FieldAttribute("distance of dive anim:world units#this must be set to tell the AI how far it shou" +
            "ld expect our dive animation to move us", typeof(Single))]
        public Single DistanceOfDiveAnim;
        [FieldAttribute("stunned movement threshold:[0,1]#if we take this much damage in a short space of " +
            "time we will play our \'stunned movement\' animations", typeof(Single))]
        public Single StunnedMovementThreshold;
        [FieldAttribute("feign death chance:[0,1]", typeof(Single))]
        public Single FeignDeathChance;
        [FieldAttribute("feign repeat chance:[0,1]", typeof(Single))]
        public Single FeignRepeatChance;
        [FieldAttribute("spawned turret character#automatically created character when this unit is driven" +
            "", typeof(TagReference))]
        public TagReference SpawnedTurretCharacter;
        [FieldAttribute("spawned velocity#velocity at which we throw spawned actors", typeof(Single))]
        public Single SpawnedVelocity;
        [FieldAttribute("aiming velocity maximum:degrees per second", typeof(Single))]
        public Single AimingVelocityMaximum;
        [FieldAttribute("aiming acceleration maximum:degrees per second squared", typeof(Single))]
        public Single AimingAccelerationMaximum;
        [FieldAttribute("casual aiming modifier:[0,1]", typeof(Single))]
        public Single CasualAimingModifier;
        [FieldAttribute("looking velocity maximum:degrees per second", typeof(Single))]
        public Single LookingVelocityMaximum;
        [FieldAttribute("looking acceleration maximum:degrees per second squared", typeof(Single))]
        public Single LookingAccelerationMaximum;
        [FieldAttribute("right_hand_node#where the primary weapon is attached", typeof(StringId))]
        public StringId RightHandNode;
        [FieldAttribute("left_hand_node#where the seconday weapon is attached (for dual-pistol modes)", typeof(StringId))]
        public StringId LeftHandNode;
        [FieldAttribute("more damn nodes", typeof(UnitAdditionalNodeNamesStructBlock))]
        public UnitAdditionalNodeNamesStructBlock MoreDamnNodes;
        [FieldAttribute("melee damage", typeof(TagReference))]
        public TagReference MeleeDamage;
        [FieldAttribute("your momma", typeof(UnitBoardingMeleeStructBlock))]
        public UnitBoardingMeleeStructBlock YourMomma;
        [FieldAttribute("motion sensor blip size", typeof(MotionSensorBlipSizeOptions))]
        [OptionsAttribute(typeof(MotionSensorBlipSizeOptions), false)]
        public MotionSensorBlipSizeOptions MotionSensorBlipSize;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("postures", typeof(TagBlock))]
        [BlockAttribute("unit_postures_block", 20, typeof(UnitPosturesBlock))]
        public TagBlock Postures;
        [FieldAttribute("NEW HUD INTERFACES", typeof(TagBlock))]
        [BlockAttribute("unit_hud_reference_block", 2, typeof(UnitHudReferenceBlock))]
        public TagBlock NewHudInterfaces;
        [FieldAttribute("dialogue variants", typeof(TagBlock))]
        [BlockAttribute("dialogue_variant_block", 16, typeof(DialogueVariantBlock))]
        public TagBlock DialogueVariants;
        [FieldAttribute("grenade velocity:world units per second", typeof(Single))]
        public Single GrenadeVelocity;
        [FieldAttribute("grenade type", typeof(GrenadeTypeOptions))]
        [OptionsAttribute(typeof(GrenadeTypeOptions), false)]
        public GrenadeTypeOptions GrenadeType;
        [FieldAttribute("grenade count", typeof(Int16))]
        public Int16 GrenadeCount;
        [FieldAttribute("powered seats", typeof(TagBlock))]
        [BlockAttribute("powered_seat_block", 2, typeof(PoweredSeatBlock))]
        public TagBlock PoweredSeats;
        [FieldAttribute("weapons", typeof(TagBlock))]
        [BlockAttribute("unit_weapon_block", 4, typeof(UnitWeaponBlock))]
        public TagBlock Weapons;
        [FieldAttribute("seats", typeof(TagBlock))]
        [BlockAttribute("unit_seat_block", 32, typeof(UnitSeatBlock))]
        public TagBlock Seats;
        [FieldAttribute("boost", typeof(UnitBoostStructBlock))]
        public UnitBoostStructBlock Boost;
        [FieldAttribute("lipsync", typeof(UnitLipsyncScalesStructBlock))]
        public UnitLipsyncScalesStructBlock Lipsync;
        public TagBlockList<UnitPosturesBlock> PosturesList
        {
            get
            {
                return this.posturesList;
            }
        }
        public TagBlockList<UnitHudReferenceBlock> NewHudInterfacesList
        {
            get
            {
                return this.newHudInterfacesList;
            }
        }
        public TagBlockList<DialogueVariantBlock> DialogueVariantsList
        {
            get
            {
                return this.dialogueVariantsList;
            }
        }
        public TagBlockList<PoweredSeatBlock> PoweredSeatsList
        {
            get
            {
                return this.poweredSeatsList;
            }
        }
        public TagBlockList<UnitWeaponBlock> WeaponsList
        {
            get
            {
                return this.weaponsList;
            }
        }
        public TagBlockList<UnitSeatBlock> SeatsList
        {
            get
            {
                return this.seatsList;
            }
        }
        public override int Size
        {
            get
            {
                return 396;
            }
        }
        public override void Initialize()
        {
            this.posturesList.Clear();
            this.newHudInterfacesList.Clear();
            this.dialogueVariantsList.Clear();
            this.poweredSeatsList.Clear();
            this.weaponsList.Clear();
            this.seatsList.Clear();
            this.Flags = ((FlagsOptions)(0));
            this.DefaultTeam = ((DefaultTeamOptions)(0));
            this.ConstantSoundVolume = ((ConstantSoundVolumeOptions)(0));
            this.IntegratedLightToggle = TagReference.Null;
            this.CameraFieldOfView = 0;
            this.CameraStiffness = 0;
            this.UnitCamera = new UnitCameraStructBlock();
            this.Acceleration = new UnitSeatAccelerationStructBlock();
            this.SoftPingThreshold = 0;
            this.SoftPingInterruptTime = 0;
            this.HardPingThreshold = 0;
            this.HardPingInterruptTime = 0;
            this.HardDeathThreshold = 0;
            this.FeignDeathThreshold = 0;
            this.FeignDeathTime = 0;
            this.DistanceOfEvadeAnim = 0;
            this.DistanceOfDiveAnim = 0;
            this.StunnedMovementThreshold = 0;
            this.FeignDeathChance = 0;
            this.FeignRepeatChance = 0;
            this.SpawnedTurretCharacter = TagReference.Null;
            this.SpawnedVelocity = 0;
            this.AimingVelocityMaximum = 0;
            this.AimingAccelerationMaximum = 0;
            this.CasualAimingModifier = 0;
            this.LookingVelocityMaximum = 0;
            this.LookingAccelerationMaximum = 0;
            this.RightHandNode = StringId.Zero;
            this.LeftHandNode = StringId.Zero;
            this.MoreDamnNodes = new UnitAdditionalNodeNamesStructBlock();
            this.MeleeDamage = TagReference.Null;
            this.YourMomma = new UnitBoardingMeleeStructBlock();
            this.MotionSensorBlipSize = ((MotionSensorBlipSizeOptions)(0));
            this.EmptyString = new byte[2];
            this.Postures = TagBlock.Zero;
            this.NewHudInterfaces = TagBlock.Zero;
            this.DialogueVariants = TagBlock.Zero;
            this.GrenadeVelocity = 0;
            this.GrenadeType = ((GrenadeTypeOptions)(0));
            this.GrenadeCount = 0;
            this.PoweredSeats = TagBlock.Zero;
            this.Weapons = TagBlock.Zero;
            this.Seats = TagBlock.Zero;
            this.Boost = new UnitBoostStructBlock();
            this.Lipsync = new UnitLipsyncScalesStructBlock();
        }
        public override void Read(BinaryReader reader)
        {
            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
            this.DefaultTeam = ((DefaultTeamOptions)(reader.ReadInt16()));
            this.ConstantSoundVolume = ((ConstantSoundVolumeOptions)(reader.ReadInt16()));
            this.IntegratedLightToggle = reader.Read<TagReference>();
            this.CameraFieldOfView = reader.ReadSingle();
            this.CameraStiffness = reader.ReadSingle();
            this.UnitCamera = reader.ReadDataStructure<UnitCameraStructBlock>();
            this.Acceleration = reader.ReadDataStructure<UnitSeatAccelerationStructBlock>();
            this.SoftPingThreshold = reader.ReadSingle();
            this.SoftPingInterruptTime = reader.ReadSingle();
            this.HardPingThreshold = reader.ReadSingle();
            this.HardPingInterruptTime = reader.ReadSingle();
            this.HardDeathThreshold = reader.ReadSingle();
            this.FeignDeathThreshold = reader.ReadSingle();
            this.FeignDeathTime = reader.ReadSingle();
            this.DistanceOfEvadeAnim = reader.ReadSingle();
            this.DistanceOfDiveAnim = reader.ReadSingle();
            this.StunnedMovementThreshold = reader.ReadSingle();
            this.FeignDeathChance = reader.ReadSingle();
            this.FeignRepeatChance = reader.ReadSingle();
            this.SpawnedTurretCharacter = reader.Read<TagReference>();
            this.SpawnedVelocity = reader.ReadSingle();
            this.AimingVelocityMaximum = reader.ReadSingle();
            this.AimingAccelerationMaximum = reader.ReadSingle();
            this.CasualAimingModifier = reader.ReadSingle();
            this.LookingVelocityMaximum = reader.ReadSingle();
            this.LookingAccelerationMaximum = reader.ReadSingle();
            this.RightHandNode = reader.ReadInt32();
            this.LeftHandNode = reader.ReadInt32();
            this.MoreDamnNodes = reader.ReadDataStructure<UnitAdditionalNodeNamesStructBlock>();
            this.MeleeDamage = reader.Read<TagReference>();
            this.YourMomma = reader.ReadDataStructure<UnitBoardingMeleeStructBlock>();
            this.MotionSensorBlipSize = ((MotionSensorBlipSizeOptions)(reader.ReadInt16()));
            this.EmptyString = reader.ReadBytes(2);
            this.Postures = reader.ReadInt64();
            this.posturesList.Read(reader, this.Postures);
            this.NewHudInterfaces = reader.ReadInt64();
            this.newHudInterfacesList.Read(reader, this.NewHudInterfaces);
            this.DialogueVariants = reader.ReadInt64();
            this.dialogueVariantsList.Read(reader, this.DialogueVariants);
            this.GrenadeVelocity = reader.ReadSingle();
            this.GrenadeType = ((GrenadeTypeOptions)(reader.ReadInt16()));
            this.GrenadeCount = reader.ReadInt16();
            this.PoweredSeats = reader.ReadInt64();
            this.poweredSeatsList.Read(reader, this.PoweredSeats);
            this.Weapons = reader.ReadInt64();
            this.weaponsList.Read(reader, this.Weapons);
            this.Seats = reader.ReadInt64();
            this.seatsList.Read(reader, this.Seats);
            this.Boost = reader.ReadDataStructure<UnitBoostStructBlock>();
            this.Lipsync = reader.ReadDataStructure<UnitLipsyncScalesStructBlock>();
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(16, 4)]
        public sealed class UnitPosturesBlock : AbideTagBlock
        {
            [FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("pill offset", typeof(Vector3))]
            public Vector3 PillOffset;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Name = StringId.Zero;
                this.PillOffset = Vector3.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.PillOffset = reader.Read<Vector3>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class UnitHudReferenceBlock : AbideTagBlock
        {
            [FieldAttribute("new unit hud interface", typeof(TagReference))]
            public TagReference NewUnitHudInterface;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.NewUnitHudInterface = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.NewUnitHudInterface = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class DialogueVariantBlock : AbideTagBlock
        {
            [FieldAttribute("variant number#variant number to use this dialogue with (must match the suffix in" +
                " the permutations on the unit\'s model)", typeof(Int16))]
            public Int16 VariantNumber;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("dialogue", typeof(TagReference))]
            public TagReference Dialogue;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.VariantNumber = 0;
                this.EmptyString = new byte[2];
                this.Dialogue = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.VariantNumber = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
                this.Dialogue = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class PoweredSeatBlock : AbideTagBlock
        {
            [FieldAttribute("driver powerup time:seconds", typeof(Single))]
            public Single DriverPowerupTime;
            [FieldAttribute("driver powerdown time:seconds", typeof(Single))]
            public Single DriverPowerdownTime;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.DriverPowerupTime = 0;
                this.DriverPowerdownTime = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.DriverPowerupTime = reader.ReadSingle();
                this.DriverPowerdownTime = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class UnitWeaponBlock : AbideTagBlock
        {
            [FieldAttribute("weapon^", typeof(TagReference))]
            public TagReference Weapon;
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.Weapon = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.Weapon = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(192, 4)]
        public sealed class UnitSeatBlock : AbideTagBlock
        {
            private TagBlockList<UnitHudReferenceBlock> unitHudInterfaceList = new TagBlockList<UnitHudReferenceBlock>(2);
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("label^", typeof(StringId))]
            public StringId Label;
            [FieldAttribute("marker name", typeof(StringId))]
            public StringId MarkerName;
            [FieldAttribute("entry marker(s) name", typeof(StringId))]
            public StringId EntryMarkersName;
            [FieldAttribute("boarding grenade marker", typeof(StringId))]
            public StringId BoardingGrenadeMarker;
            [FieldAttribute("boarding grenade string", typeof(StringId))]
            public StringId BoardingGrenadeString;
            [FieldAttribute("boarding melee string", typeof(StringId))]
            public StringId BoardingMeleeString;
            [FieldAttribute("ping scale#nathan is too lazy to make pings for each seat.", typeof(Single))]
            public Single PingScale;
            [FieldAttribute("turnover time:seconds#how much time it takes to evict a rider from a flipped vehi" +
                "cle", typeof(Single))]
            public Single TurnoverTime;
            [FieldAttribute("acceleration", typeof(UnitSeatAccelerationStructBlock))]
            public UnitSeatAccelerationStructBlock Acceleration;
            [FieldAttribute("AI scariness", typeof(Single))]
            public Single AiScariness;
            [FieldAttribute("ai seat type", typeof(AiSeatTypeOptions))]
            [OptionsAttribute(typeof(AiSeatTypeOptions), false)]
            public AiSeatTypeOptions AiSeatType;
            [FieldAttribute("boarding seat", typeof(Int16))]
            public Int16 BoardingSeat;
            [FieldAttribute("listener interpolation factor#how far to interpolate listener position from camer" +
                "a to occupant\'s head", typeof(Single))]
            public Single ListenerInterpolationFactor;
            [FieldAttribute("min speed reference", typeof(Single))]
            public Single MinSpeedReference;
            [FieldAttribute("max speed reference", typeof(Single))]
            public Single MaxSpeedReference;
            [FieldAttribute("speed exponent", typeof(Single))]
            public Single SpeedExponent;
            [FieldAttribute("unit camera", typeof(UnitCameraStructBlock))]
            public UnitCameraStructBlock UnitCamera;
            [FieldAttribute("unit hud interface", typeof(TagBlock))]
            [BlockAttribute("unit_hud_reference_block", 2, typeof(UnitHudReferenceBlock))]
            public TagBlock UnitHudInterface;
            [FieldAttribute("enter seat string", typeof(StringId))]
            public StringId EnterSeatString;
            [FieldAttribute("yaw minimum", typeof(Single))]
            public Single YawMinimum;
            [FieldAttribute("yaw maximum", typeof(Single))]
            public Single YawMaximum;
            [FieldAttribute("built-in gunner", typeof(TagReference))]
            public TagReference BuiltInGunner;
            [FieldAttribute("entry radius#how close to the entry marker a unit must be", typeof(Single))]
            public Single EntryRadius;
            [FieldAttribute("entry marker cone angle#angle from marker forward the unit must be", typeof(Single))]
            public Single EntryMarkerConeAngle;
            [FieldAttribute("entry marker facing angle#angle from unit facing the marker must be", typeof(Single))]
            public Single EntryMarkerFacingAngle;
            [FieldAttribute("maximum relative velocity", typeof(Single))]
            public Single MaximumRelativeVelocity;
            [FieldAttribute("invisible seat region", typeof(StringId))]
            public StringId InvisibleSeatRegion;
            [FieldAttribute("runtime invisible seat region index*", typeof(Int32))]
            public Int32 RuntimeInvisibleSeatRegionIndex;
            public TagBlockList<UnitHudReferenceBlock> UnitHudInterfaceList
            {
                get
                {
                    return this.unitHudInterfaceList;
                }
            }
            public override int Size
            {
                get
                {
                    return 192;
                }
            }
            public override void Initialize()
            {
                this.unitHudInterfaceList.Clear();
                this.Flags = ((FlagsOptions)(0));
                this.Label = StringId.Zero;
                this.MarkerName = StringId.Zero;
                this.EntryMarkersName = StringId.Zero;
                this.BoardingGrenadeMarker = StringId.Zero;
                this.BoardingGrenadeString = StringId.Zero;
                this.BoardingMeleeString = StringId.Zero;
                this.PingScale = 0;
                this.TurnoverTime = 0;
                this.Acceleration = new UnitSeatAccelerationStructBlock();
                this.AiScariness = 0;
                this.AiSeatType = ((AiSeatTypeOptions)(0));
                this.BoardingSeat = 0;
                this.ListenerInterpolationFactor = 0;
                this.MinSpeedReference = 0;
                this.MaxSpeedReference = 0;
                this.SpeedExponent = 0;
                this.UnitCamera = new UnitCameraStructBlock();
                this.UnitHudInterface = TagBlock.Zero;
                this.EnterSeatString = StringId.Zero;
                this.YawMinimum = 0;
                this.YawMaximum = 0;
                this.BuiltInGunner = TagReference.Null;
                this.EntryRadius = 0;
                this.EntryMarkerConeAngle = 0;
                this.EntryMarkerFacingAngle = 0;
                this.MaximumRelativeVelocity = 0;
                this.InvisibleSeatRegion = StringId.Zero;
                this.RuntimeInvisibleSeatRegionIndex = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.Label = reader.ReadInt32();
                this.MarkerName = reader.ReadInt32();
                this.EntryMarkersName = reader.ReadInt32();
                this.BoardingGrenadeMarker = reader.ReadInt32();
                this.BoardingGrenadeString = reader.ReadInt32();
                this.BoardingMeleeString = reader.ReadInt32();
                this.PingScale = reader.ReadSingle();
                this.TurnoverTime = reader.ReadSingle();
                this.Acceleration = reader.ReadDataStructure<UnitSeatAccelerationStructBlock>();
                this.AiScariness = reader.ReadSingle();
                this.AiSeatType = ((AiSeatTypeOptions)(reader.ReadInt16()));
                this.BoardingSeat = reader.ReadInt16();
                this.ListenerInterpolationFactor = reader.ReadSingle();
                this.MinSpeedReference = reader.ReadSingle();
                this.MaxSpeedReference = reader.ReadSingle();
                this.SpeedExponent = reader.ReadSingle();
                this.UnitCamera = reader.ReadDataStructure<UnitCameraStructBlock>();
                this.UnitHudInterface = reader.ReadInt64();
                this.unitHudInterfaceList.Read(reader, this.UnitHudInterface);
                this.EnterSeatString = reader.ReadInt32();
                this.YawMinimum = reader.ReadSingle();
                this.YawMaximum = reader.ReadSingle();
                this.BuiltInGunner = reader.Read<TagReference>();
                this.EntryRadius = reader.ReadSingle();
                this.EntryMarkerConeAngle = reader.ReadSingle();
                this.EntryMarkerFacingAngle = reader.ReadSingle();
                this.MaximumRelativeVelocity = reader.ReadSingle();
                this.InvisibleSeatRegion = reader.ReadInt32();
                this.RuntimeInvisibleSeatRegionIndex = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class UnitHudReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("new unit hud interface", typeof(TagReference))]
                public TagReference NewUnitHudInterface;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.NewUnitHudInterface = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.NewUnitHudInterface = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(20, 4)]
            public sealed class UnitSeatAccelerationStructBlock : AbideTagBlock
            {
                [FieldAttribute("acceleration range:world units per second squared", typeof(Vector3))]
                public Vector3 AccelerationRange;
                [FieldAttribute("accel action scale:actions fail [0,1+]", typeof(Single))]
                public Single AccelActionScale;
                [FieldAttribute("accel attach scale:detach unit [0,1+]", typeof(Single))]
                public Single AccelAttachScale;
                public override int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public override void Initialize()
                {
                    this.AccelerationRange = Vector3.Zero;
                    this.AccelActionScale = 0;
                    this.AccelAttachScale = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.AccelerationRange = reader.Read<Vector3>();
                    this.AccelActionScale = reader.ReadSingle();
                    this.AccelAttachScale = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(32, 4)]
            public sealed class UnitCameraStructBlock : AbideTagBlock
            {
                private TagBlockList<UnitCameraTrackBlock> cameraTracksList = new TagBlockList<UnitCameraTrackBlock>(2);
                [FieldAttribute("camera marker name", typeof(StringId))]
                public StringId CameraMarkerName;
                [FieldAttribute("camera submerged marker name", typeof(StringId))]
                public StringId CameraSubmergedMarkerName;
                [FieldAttribute("pitch auto-level", typeof(Single))]
                public Single PitchAutoLevel;
                [FieldAttribute("camera tracks", typeof(TagBlock))]
                [BlockAttribute("unit_camera_track_block", 2, typeof(UnitCameraTrackBlock))]
                public TagBlock CameraTracks;
                public TagBlockList<UnitCameraTrackBlock> CameraTracksList
                {
                    get
                    {
                        return this.cameraTracksList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.cameraTracksList.Clear();
                    this.CameraMarkerName = StringId.Zero;
                    this.CameraSubmergedMarkerName = StringId.Zero;
                    this.PitchAutoLevel = 0;
                    this.CameraTracks = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.CameraMarkerName = reader.ReadInt32();
                    this.CameraSubmergedMarkerName = reader.ReadInt32();
                    this.PitchAutoLevel = reader.ReadSingle();
                    this.CameraTracks = reader.ReadInt64();
                    this.cameraTracksList.Read(reader, this.CameraTracks);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(16, 4)]
                public sealed class UnitCameraTrackBlock : AbideTagBlock
                {
                    [FieldAttribute("track", typeof(TagReference))]
                    public TagReference Track;
                    public override int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public override void Initialize()
                    {
                        this.Track = TagReference.Null;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Track = reader.Read<TagReference>();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                }
            }
            public enum FlagsOptions : Int32
            {
                Invisible = 1,
                Locked = 2,
                Driver = 4,
                Gunner = 8,
                ThirdPersonCamera = 16,
                AllowsWeapons = 32,
                ThirdPersonOnEnter = 64,
                FirstPersonCameraSlavedToGun = 128,
                AllowVehicleCommunicationAnimations = 256,
                NotValidWithoutDriver = 512,
                AllowAiNoncombatants = 1024,
                BoardingSeat = 2048,
                AiFiringDisabledByMaxAcceleration = 4096,
                BoardingEntersSeat = 8192,
                BoardingNeedAnyPassenger = 16384,
                ControlsOpenAndClose = 32768,
                InvalidForPlayer = 65536,
                InvalidForNonPlayer = 131072,
                GunnerPlayerOnly = 262144,
                InvisibleUnderMajorDamage = 524288,
            }
            public enum AiSeatTypeOptions : Int16
            {
                None = 0,
                Passenger = 1,
                Gunner = 2,
                SmallCargo = 3,
                LargeCargo = 4,
                Driver = 5,
            }
        }
        [FieldSetAttribute(32, 4)]
        public sealed class UnitCameraStructBlock : AbideTagBlock
        {
            private TagBlockList<UnitCameraTrackBlock> cameraTracksList = new TagBlockList<UnitCameraTrackBlock>(2);
            [FieldAttribute("camera marker name", typeof(StringId))]
            public StringId CameraMarkerName;
            [FieldAttribute("camera submerged marker name", typeof(StringId))]
            public StringId CameraSubmergedMarkerName;
            [FieldAttribute("pitch auto-level", typeof(Single))]
            public Single PitchAutoLevel;
            [FieldAttribute("camera tracks", typeof(TagBlock))]
            [BlockAttribute("unit_camera_track_block", 2, typeof(UnitCameraTrackBlock))]
            public TagBlock CameraTracks;
            public TagBlockList<UnitCameraTrackBlock> CameraTracksList
            {
                get
                {
                    return this.cameraTracksList;
                }
            }
            public override int Size
            {
                get
                {
                    return 32;
                }
            }
            public override void Initialize()
            {
                this.cameraTracksList.Clear();
                this.CameraMarkerName = StringId.Zero;
                this.CameraSubmergedMarkerName = StringId.Zero;
                this.PitchAutoLevel = 0;
                this.CameraTracks = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.CameraMarkerName = reader.ReadInt32();
                this.CameraSubmergedMarkerName = reader.ReadInt32();
                this.PitchAutoLevel = reader.ReadSingle();
                this.CameraTracks = reader.ReadInt64();
                this.cameraTracksList.Read(reader, this.CameraTracks);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class UnitCameraTrackBlock : AbideTagBlock
            {
                [FieldAttribute("track", typeof(TagReference))]
                public TagReference Track;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.Track = TagReference.Null;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Track = reader.Read<TagReference>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class UnitSeatAccelerationStructBlock : AbideTagBlock
        {
            [FieldAttribute("acceleration range:world units per second squared", typeof(Vector3))]
            public Vector3 AccelerationRange;
            [FieldAttribute("accel action scale:actions fail [0,1+]", typeof(Single))]
            public Single AccelActionScale;
            [FieldAttribute("accel attach scale:detach unit [0,1+]", typeof(Single))]
            public Single AccelAttachScale;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.AccelerationRange = Vector3.Zero;
                this.AccelActionScale = 0;
                this.AccelAttachScale = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.AccelerationRange = reader.Read<Vector3>();
                this.AccelActionScale = reader.ReadSingle();
                this.AccelAttachScale = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class UnitAdditionalNodeNamesStructBlock : AbideTagBlock
        {
            [FieldAttribute("preferred_gun_node#if found, use this gun marker", typeof(StringId))]
            public StringId PreferredGunNode;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.PreferredGunNode = StringId.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.PreferredGunNode = reader.ReadInt32();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class UnitBoardingMeleeStructBlock : AbideTagBlock
        {
            [FieldAttribute("boarding melee damage", typeof(TagReference))]
            public TagReference BoardingMeleeDamage;
            [FieldAttribute("boarding melee response", typeof(TagReference))]
            public TagReference BoardingMeleeResponse;
            [FieldAttribute("landing melee damage", typeof(TagReference))]
            public TagReference LandingMeleeDamage;
            [FieldAttribute("flurry melee damage", typeof(TagReference))]
            public TagReference FlurryMeleeDamage;
            [FieldAttribute("obstacle smash damage", typeof(TagReference))]
            public TagReference ObstacleSmashDamage;
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.BoardingMeleeDamage = TagReference.Null;
                this.BoardingMeleeResponse = TagReference.Null;
                this.LandingMeleeDamage = TagReference.Null;
                this.FlurryMeleeDamage = TagReference.Null;
                this.ObstacleSmashDamage = TagReference.Null;
            }
            public override void Read(BinaryReader reader)
            {
                this.BoardingMeleeDamage = reader.Read<TagReference>();
                this.BoardingMeleeResponse = reader.Read<TagReference>();
                this.LandingMeleeDamage = reader.Read<TagReference>();
                this.FlurryMeleeDamage = reader.Read<TagReference>();
                this.ObstacleSmashDamage = reader.Read<TagReference>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(20, 4)]
        public sealed class UnitBoostStructBlock : AbideTagBlock
        {
            [FieldAttribute("boost peak power", typeof(Single))]
            public Single BoostPeakPower;
            [FieldAttribute("boost rise power", typeof(Single))]
            public Single BoostRisePower;
            [FieldAttribute("boost peak time", typeof(Single))]
            public Single BoostPeakTime;
            [FieldAttribute("boost fall power", typeof(Single))]
            public Single BoostFallPower;
            [FieldAttribute("dead time", typeof(Single))]
            public Single DeadTime;
            public override int Size
            {
                get
                {
                    return 20;
                }
            }
            public override void Initialize()
            {
                this.BoostPeakPower = 0;
                this.BoostRisePower = 0;
                this.BoostPeakTime = 0;
                this.BoostFallPower = 0;
                this.DeadTime = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.BoostPeakPower = reader.ReadSingle();
                this.BoostRisePower = reader.ReadSingle();
                this.BoostPeakTime = reader.ReadSingle();
                this.BoostFallPower = reader.ReadSingle();
                this.DeadTime = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(8, 4)]
        public sealed class UnitLipsyncScalesStructBlock : AbideTagBlock
        {
            [FieldAttribute("attack weight", typeof(Single))]
            public Single AttackWeight;
            [FieldAttribute("decay weight", typeof(Single))]
            public Single DecayWeight;
            public override int Size
            {
                get
                {
                    return 8;
                }
            }
            public override void Initialize()
            {
                this.AttackWeight = 0;
                this.DecayWeight = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.AttackWeight = reader.ReadSingle();
                this.DecayWeight = reader.ReadSingle();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        public enum FlagsOptions : Int32
        {
            CircularAiming = 1,
            DestroyedAfterDying = 2,
            HalfSpeedInterpolation = 4,
            FiresFromCamera = 8,
            EntranceInsideBoundingSphere = 16,
            DoesntShowReadiedWeapon = 32,
            CausesPassengerDialogue = 64,
            ResistsPings = 128,
            MeleeAttackIsFatal = 256,
            DontRefaceDuringPings = 512,
            HasNoAiming = 1024,
            SimpleCreature = 2048,
            ImpactMeleeAttachesToUnit = 4096,
            ImpactMeleeDiesOnShields = 8192,
            CannotOpenDoorsAutomatically = 16384,
            MeleeAttackersCannotAttach = 32768,
            NotInstantlyKilledByMelee = 65536,
            ShieldSapping = 131072,
            RunsAroundFlaming = 262144,
            Inconsequential = 524288,
            SpecialCinematicUnit = 1048576,
            IgnoredByAutoaiming = 2097152,
            ShieldsFryInfectionForms = 4194304,
            Unused = 8388608,
            Unused1 = 16777216,
            ActsAsGunnerForParent = 33554432,
            ControlledByParentGunner = 67108864,
            ParentsPrimaryWeapon = 134217728,
            UnitHasBoost = 268435456,
        }
        public enum DefaultTeamOptions : Int16
        {
            Default = 0,
            Player = 1,
            Human = 2,
            Covenant = 3,
            Flood = 4,
            Sentinel = 5,
            Heretic = 6,
            Prophet = 7,
            Unused8 = 8,
            Unused9 = 9,
            Unused10 = 10,
            Unused11 = 11,
            Unused12 = 12,
            Unused13 = 13,
            Unused14 = 14,
            Unused15 = 15,
        }
        public enum ConstantSoundVolumeOptions : Int16
        {
            Silent = 0,
            Medium = 1,
            Loud = 2,
            Shout = 3,
            Quiet = 4,
        }
        public enum MotionSensorBlipSizeOptions : Int16
        {
            Medium = 0,
            Small = 1,
            Large = 2,
        }
        public enum GrenadeTypeOptions : Int16
        {
            HumanFragmentation = 0,
            CovenantPlasma = 1,
        }
    }
}
#pragma warning restore CS1591
