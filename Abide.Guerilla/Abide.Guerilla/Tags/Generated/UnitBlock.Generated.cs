#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(396, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("unit", 1970170228u, 1868720741u, typeof(UnitBlock))]
    public sealed class UnitBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int32 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("default team", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(DefaultTeamOptions), false)]
        public Int16 DefaultTeam;
        [Abide.Guerilla.Tags.FieldAttribute("constant sound volume", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(ConstantSoundVolumeOptions), false)]
        public Int16 ConstantSoundVolume;
        [Abide.Guerilla.Tags.FieldAttribute("integrated light toggle", typeof(TagReference))]
        public TagReference IntegratedLightToggle;
        [Abide.Guerilla.Tags.FieldAttribute("camera field of view:degrees", typeof(Single))]
        public Single CameraFieldOfView;
        [Abide.Guerilla.Tags.FieldAttribute("camera stiffness", typeof(Single))]
        public Single CameraStiffness;
        [Abide.Guerilla.Tags.FieldAttribute("unit camera", typeof(UnitCameraStructBlock))]
        public UnitCameraStructBlock UnitCamera;
        [Abide.Guerilla.Tags.FieldAttribute("acceleration", typeof(UnitSeatAccelerationStructBlock))]
        public UnitSeatAccelerationStructBlock Acceleration;
        [Abide.Guerilla.Tags.FieldAttribute("soft ping threshold:[0,1]", typeof(Single))]
        public Single SoftPingThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("soft ping interrupt time:seconds", typeof(Single))]
        public Single SoftPingInterruptTime;
        [Abide.Guerilla.Tags.FieldAttribute("hard ping threshold:[0,1]", typeof(Single))]
        public Single HardPingThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("hard ping interrupt time:seconds", typeof(Single))]
        public Single HardPingInterruptTime;
        [Abide.Guerilla.Tags.FieldAttribute("hard death threshold:[0,1]", typeof(Single))]
        public Single HardDeathThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("feign death threshold:[0,1]", typeof(Single))]
        public Single FeignDeathThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("feign death time:seconds", typeof(Single))]
        public Single FeignDeathTime;
        [Abide.Guerilla.Tags.FieldAttribute("distance of evade anim:world units#this must be set to tell the AI how far it sho" +
            "uld expect our evade animation to move us", typeof(Single))]
        public Single DistanceOfEvadeAnim;
        [Abide.Guerilla.Tags.FieldAttribute("distance of dive anim:world units#this must be set to tell the AI how far it shou" +
            "ld expect our dive animation to move us", typeof(Single))]
        public Single DistanceOfDiveAnim;
        [Abide.Guerilla.Tags.FieldAttribute("stunned movement threshold:[0,1]#if we take this much damage in a short space of " +
            "time we will play our \'stunned movement\' animations", typeof(Single))]
        public Single StunnedMovementThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("feign death chance:[0,1]", typeof(Single))]
        public Single FeignDeathChance;
        [Abide.Guerilla.Tags.FieldAttribute("feign repeat chance:[0,1]", typeof(Single))]
        public Single FeignRepeatChance;
        [Abide.Guerilla.Tags.FieldAttribute("spawned turret character#automatically created character when this unit is driven" +
            "", typeof(TagReference))]
        public TagReference SpawnedTurretCharacter;
        [Abide.Guerilla.Tags.FieldAttribute("spawned velocity#velocity at which we throw spawned actors", typeof(Single))]
        public Single SpawnedVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("aiming velocity maximum:degrees per second", typeof(Single))]
        public Single AimingVelocityMaximum;
        [Abide.Guerilla.Tags.FieldAttribute("aiming acceleration maximum:degrees per second squared", typeof(Single))]
        public Single AimingAccelerationMaximum;
        [Abide.Guerilla.Tags.FieldAttribute("casual aiming modifier:[0,1]", typeof(Single))]
        public Single CasualAimingModifier;
        [Abide.Guerilla.Tags.FieldAttribute("looking velocity maximum:degrees per second", typeof(Single))]
        public Single LookingVelocityMaximum;
        [Abide.Guerilla.Tags.FieldAttribute("looking acceleration maximum:degrees per second squared", typeof(Single))]
        public Single LookingAccelerationMaximum;
        [Abide.Guerilla.Tags.FieldAttribute("right_hand_node#where the primary weapon is attached", typeof(StringId))]
        public StringId RightHandNode;
        [Abide.Guerilla.Tags.FieldAttribute("left_hand_node#where the seconday weapon is attached (for dual-pistol modes)", typeof(StringId))]
        public StringId LeftHandNode;
        [Abide.Guerilla.Tags.FieldAttribute("more damn nodes", typeof(UnitAdditionalNodeNamesStructBlock))]
        public UnitAdditionalNodeNamesStructBlock MoreDamnNodes;
        [Abide.Guerilla.Tags.FieldAttribute("melee damage", typeof(TagReference))]
        public TagReference MeleeDamage;
        [Abide.Guerilla.Tags.FieldAttribute("your momma", typeof(UnitBoardingMeleeStructBlock))]
        public UnitBoardingMeleeStructBlock YourMomma;
        [Abide.Guerilla.Tags.FieldAttribute("motion sensor blip size", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(MotionSensorBlipSizeOptions), false)]
        public Int16 MotionSensorBlipSize;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString5;
        [Abide.Guerilla.Tags.FieldAttribute("postures", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("unit_postures_block", 20, typeof(UnitPosturesBlock))]
        public TagBlock Postures;
        [Abide.Guerilla.Tags.FieldAttribute("NEW HUD INTERFACES", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("unit_hud_reference_block", 2, typeof(UnitHudReferenceBlock))]
        public TagBlock NewHudInterfaces;
        [Abide.Guerilla.Tags.FieldAttribute("dialogue variants", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("dialogue_variant_block", 16, typeof(DialogueVariantBlock))]
        public TagBlock DialogueVariants;
        [Abide.Guerilla.Tags.FieldAttribute("grenade velocity:world units per second", typeof(Single))]
        public Single GrenadeVelocity;
        [Abide.Guerilla.Tags.FieldAttribute("grenade type", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(GrenadeTypeOptions), false)]
        public Int16 GrenadeType;
        [Abide.Guerilla.Tags.FieldAttribute("grenade count", typeof(Int16))]
        public Int16 GrenadeCount;
        [Abide.Guerilla.Tags.FieldAttribute("powered seats", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("powered_seat_block", 2, typeof(PoweredSeatBlock))]
        public TagBlock PoweredSeats;
        [Abide.Guerilla.Tags.FieldAttribute("weapons", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("unit_weapon_block", 4, typeof(UnitWeaponBlock))]
        public TagBlock Weapons;
        [Abide.Guerilla.Tags.FieldAttribute("seats", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("unit_seat_block", 32, typeof(UnitSeatBlock))]
        public TagBlock Seats;
        [Abide.Guerilla.Tags.FieldAttribute("boost", typeof(UnitBoostStructBlock))]
        public UnitBoostStructBlock Boost1;
        [Abide.Guerilla.Tags.FieldAttribute("lipsync", typeof(UnitLipsyncScalesStructBlock))]
        public UnitLipsyncScalesStructBlock Lipsync1;
        public int Size
        {
            get
            {
                return 396;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class UnitPosturesBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("pill offset", typeof(Vector3))]
            public Vector3 PillOffset;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class UnitHudReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("new unit hud interface", typeof(TagReference))]
            public TagReference NewUnitHudInterface;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class DialogueVariantBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("variant number#variant number to use this dialogue with (must match the suffix in" +
                " the permutations on the unit\'s model)", typeof(Int16))]
            public Int16 VariantNumber;
            [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
            [Abide.Guerilla.Tags.PaddingAttribute(2)]
            public Byte[] EmptyString;
            [Abide.Guerilla.Tags.FieldAttribute("dialogue", typeof(TagReference))]
            public TagReference Dialogue;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class PoweredSeatBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("driver powerup time:seconds", typeof(Single))]
            public Single DriverPowerupTime;
            [Abide.Guerilla.Tags.FieldAttribute("driver powerdown time:seconds", typeof(Single))]
            public Single DriverPowerdownTime;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class UnitWeaponBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("weapon^", typeof(TagReference))]
            public TagReference Weapon;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(192, 4)]
        public sealed class UnitSeatBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int32))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
            public Int32 Flags;
            [Abide.Guerilla.Tags.FieldAttribute("label^", typeof(StringId))]
            public StringId Label;
            [Abide.Guerilla.Tags.FieldAttribute("marker name", typeof(StringId))]
            public StringId MarkerName;
            [Abide.Guerilla.Tags.FieldAttribute("entry marker(s) name", typeof(StringId))]
            public StringId EntryMarkersName;
            [Abide.Guerilla.Tags.FieldAttribute("boarding grenade marker", typeof(StringId))]
            public StringId BoardingGrenadeMarker;
            [Abide.Guerilla.Tags.FieldAttribute("boarding grenade string", typeof(StringId))]
            public StringId BoardingGrenadeString;
            [Abide.Guerilla.Tags.FieldAttribute("boarding melee string", typeof(StringId))]
            public StringId BoardingMeleeString;
            [Abide.Guerilla.Tags.FieldAttribute("ping scale#nathan is too lazy to make pings for each seat.", typeof(Single))]
            public Single PingScale;
            [Abide.Guerilla.Tags.FieldAttribute("turnover time:seconds#how much time it takes to evict a rider from a flipped vehi" +
                "cle", typeof(Single))]
            public Single TurnoverTime;
            [Abide.Guerilla.Tags.FieldAttribute("acceleration", typeof(UnitSeatAccelerationStructBlock))]
            public UnitSeatAccelerationStructBlock Acceleration;
            [Abide.Guerilla.Tags.FieldAttribute("AI scariness", typeof(Single))]
            public Single AiScariness;
            [Abide.Guerilla.Tags.FieldAttribute("ai seat type", typeof(Int16))]
            [Abide.Guerilla.Tags.OptionsAttribute(typeof(AiSeatTypeOptions), false)]
            public Int16 AiSeatType;
            [Abide.Guerilla.Tags.FieldAttribute("boarding seat", typeof(Int16))]
            public Int16 BoardingSeat;
            [Abide.Guerilla.Tags.FieldAttribute("listener interpolation factor#how far to interpolate listener position from camer" +
                "a to occupant\'s head", typeof(Single))]
            public Single ListenerInterpolationFactor;
            [Abide.Guerilla.Tags.FieldAttribute("min speed reference", typeof(Single))]
            public Single MinSpeedReference;
            [Abide.Guerilla.Tags.FieldAttribute("max speed reference", typeof(Single))]
            public Single MaxSpeedReference;
            [Abide.Guerilla.Tags.FieldAttribute("speed exponent", typeof(Single))]
            public Single SpeedExponent;
            [Abide.Guerilla.Tags.FieldAttribute("unit camera", typeof(UnitCameraStructBlock))]
            public UnitCameraStructBlock UnitCamera;
            [Abide.Guerilla.Tags.FieldAttribute("unit hud interface", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("unit_hud_reference_block", 2, typeof(UnitHudReferenceBlock))]
            public TagBlock UnitHudInterface;
            [Abide.Guerilla.Tags.FieldAttribute("enter seat string", typeof(StringId))]
            public StringId EnterSeatString;
            [Abide.Guerilla.Tags.FieldAttribute("yaw minimum", typeof(Single))]
            public Single YawMinimum;
            [Abide.Guerilla.Tags.FieldAttribute("yaw maximum", typeof(Single))]
            public Single YawMaximum;
            [Abide.Guerilla.Tags.FieldAttribute("built-in gunner", typeof(TagReference))]
            public TagReference BuiltInGunner;
            [Abide.Guerilla.Tags.FieldAttribute("entry radius#how close to the entry marker a unit must be", typeof(Single))]
            public Single EntryRadius;
            [Abide.Guerilla.Tags.FieldAttribute("entry marker cone angle#angle from marker forward the unit must be", typeof(Single))]
            public Single EntryMarkerConeAngle;
            [Abide.Guerilla.Tags.FieldAttribute("entry marker facing angle#angle from unit facing the marker must be", typeof(Single))]
            public Single EntryMarkerFacingAngle;
            [Abide.Guerilla.Tags.FieldAttribute("maximum relative velocity", typeof(Single))]
            public Single MaximumRelativeVelocity;
            [Abide.Guerilla.Tags.FieldAttribute("invisible seat region", typeof(StringId))]
            public StringId InvisibleSeatRegion;
            [Abide.Guerilla.Tags.FieldAttribute("runtime invisible seat region index*", typeof(Int32))]
            public Int32 RuntimeInvisibleSeatRegionIndex;
            public int Size
            {
                get
                {
                    return 192;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class UnitHudReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("new unit hud interface", typeof(TagReference))]
                public TagReference NewUnitHudInterface;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
            public sealed class UnitSeatAccelerationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("acceleration range:world units per second squared", typeof(Vector3))]
                public Vector3 AccelerationRange;
                [Abide.Guerilla.Tags.FieldAttribute("accel action scale:actions fail [0,1+]", typeof(Single))]
                public Single AccelActionScale;
                [Abide.Guerilla.Tags.FieldAttribute("accel attach scale:detach unit [0,1+]", typeof(Single))]
                public Single AccelAttachScale;
                public int Size
                {
                    get
                    {
                        return 20;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class UnitCameraStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("camera marker name", typeof(StringId))]
                public StringId CameraMarkerName;
                [Abide.Guerilla.Tags.FieldAttribute("camera submerged marker name", typeof(StringId))]
                public StringId CameraSubmergedMarkerName;
                [Abide.Guerilla.Tags.FieldAttribute("pitch auto-level", typeof(Single))]
                public Single PitchAutoLevel;
                [Abide.Guerilla.Tags.FieldAttribute("camera tracks", typeof(TagBlock))]
                [Abide.Guerilla.Tags.BlockAttribute("unit_camera_track_block", 2, typeof(UnitCameraTrackBlock))]
                public TagBlock CameraTracks;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
                public sealed class UnitCameraTrackBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
                {
                    [Abide.Guerilla.Tags.FieldAttribute("track", typeof(TagReference))]
                    public TagReference Track;
                    public int Size
                    {
                        get
                        {
                            return 16;
                        }
                    }
                    public void Initialize()
                    {
                    }
                    public void Read(System.IO.BinaryReader reader)
                    {
                    }
                    public void Write(System.IO.BinaryWriter writer)
                    {
                    }
                }
            }
            public enum FlagsOptions
            {
                Invisible = 1,
                Locked = 2,
                Driver = 4,
                Gunner = 8,
                ThirdPersonCamera = 16,
                AllowsWeapons = 32,
                ThirdPersonOnEnter = 64,
                FirstPersonCameraSlavedToGun = 128,
                AllowVehicleCommunicationAnimations = 256,
                NotValidWithoutDriver = 512,
                AllowAiNoncombatants = 1024,
                BoardingSeat = 2048,
                AiFiringDisabledByMaxAcceleration = 4096,
                BoardingEntersSeat = 8192,
                BoardingNeedAnyPassenger = 16384,
                ControlsOpenAndClose = 32768,
                InvalidForPlayer = 65536,
                InvalidForNonPlayer = 131072,
                GunnerPlayerOnly = 262144,
                InvisibleUnderMajorDamage = 524288,
            }
            public enum AiSeatTypeOptions
            {
                None = 0,
                Passenger = 1,
                Gunner = 2,
                SmallCargo = 3,
                LargeCargo = 4,
                Driver = 5,
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
        public sealed class UnitCameraStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("camera marker name", typeof(StringId))]
            public StringId CameraMarkerName;
            [Abide.Guerilla.Tags.FieldAttribute("camera submerged marker name", typeof(StringId))]
            public StringId CameraSubmergedMarkerName;
            [Abide.Guerilla.Tags.FieldAttribute("pitch auto-level", typeof(Single))]
            public Single PitchAutoLevel;
            [Abide.Guerilla.Tags.FieldAttribute("camera tracks", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("unit_camera_track_block", 2, typeof(UnitCameraTrackBlock))]
            public TagBlock CameraTracks;
            public int Size
            {
                get
                {
                    return 32;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
            public sealed class UnitCameraTrackBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("track", typeof(TagReference))]
                public TagReference Track;
                public int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class UnitSeatAccelerationStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("acceleration range:world units per second squared", typeof(Vector3))]
            public Vector3 AccelerationRange;
            [Abide.Guerilla.Tags.FieldAttribute("accel action scale:actions fail [0,1+]", typeof(Single))]
            public Single AccelActionScale;
            [Abide.Guerilla.Tags.FieldAttribute("accel attach scale:detach unit [0,1+]", typeof(Single))]
            public Single AccelAttachScale;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(4, 4)]
        public sealed class UnitAdditionalNodeNamesStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("preferred_gun_node#if found, use this gun marker", typeof(StringId))]
            public StringId PreferredGunNode;
            public int Size
            {
                get
                {
                    return 4;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(80, 4)]
        public sealed class UnitBoardingMeleeStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("boarding melee damage", typeof(TagReference))]
            public TagReference BoardingMeleeDamage;
            [Abide.Guerilla.Tags.FieldAttribute("boarding melee response", typeof(TagReference))]
            public TagReference BoardingMeleeResponse;
            [Abide.Guerilla.Tags.FieldAttribute("landing melee damage", typeof(TagReference))]
            public TagReference LandingMeleeDamage;
            [Abide.Guerilla.Tags.FieldAttribute("flurry melee damage", typeof(TagReference))]
            public TagReference FlurryMeleeDamage;
            [Abide.Guerilla.Tags.FieldAttribute("obstacle smash damage", typeof(TagReference))]
            public TagReference ObstacleSmashDamage;
            public int Size
            {
                get
                {
                    return 80;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(20, 4)]
        public sealed class UnitBoostStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("boost peak power", typeof(Single))]
            public Single BoostPeakPower;
            [Abide.Guerilla.Tags.FieldAttribute("boost rise power", typeof(Single))]
            public Single BoostRisePower;
            [Abide.Guerilla.Tags.FieldAttribute("boost peak time", typeof(Single))]
            public Single BoostPeakTime;
            [Abide.Guerilla.Tags.FieldAttribute("boost fall power", typeof(Single))]
            public Single BoostFallPower;
            [Abide.Guerilla.Tags.FieldAttribute("dead time", typeof(Single))]
            public Single DeadTime;
            public int Size
            {
                get
                {
                    return 20;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(8, 4)]
        public sealed class UnitLipsyncScalesStructBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("attack weight", typeof(Single))]
            public Single AttackWeight;
            [Abide.Guerilla.Tags.FieldAttribute("decay weight", typeof(Single))]
            public Single DecayWeight;
            public int Size
            {
                get
                {
                    return 8;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
        }
        public enum FlagsOptions
        {
            CircularAiming = 1,
            DestroyedAfterDying = 2,
            HalfSpeedInterpolation = 4,
            FiresFromCamera = 8,
            EntranceInsideBoundingSphere = 16,
            DoesntShowReadiedWeapon = 32,
            CausesPassengerDialogue = 64,
            ResistsPings = 128,
            MeleeAttackIsFatal = 256,
            DontRefaceDuringPings = 512,
            HasNoAiming = 1024,
            SimpleCreature = 2048,
            ImpactMeleeAttachesToUnit = 4096,
            ImpactMeleeDiesOnShields = 8192,
            CannotOpenDoorsAutomatically = 16384,
            MeleeAttackersCannotAttach = 32768,
            NotInstantlyKilledByMelee = 65536,
            ShieldSapping = 131072,
            RunsAroundFlaming = 262144,
            Inconsequential = 524288,
            SpecialCinematicUnit = 1048576,
            IgnoredByAutoaiming = 2097152,
            ShieldsFryInfectionForms = 4194304,
            Unused = 8388608,
            Unused1 = 16777216,
            ActsAsGunnerForParent = 33554432,
            ControlledByParentGunner = 67108864,
            ParentsPrimaryWeapon = 134217728,
            UnitHasBoost = 268435456,
        }
        public enum DefaultTeamOptions
        {
            Default = 0,
            Player = 1,
            Human = 2,
            Covenant = 3,
            Flood = 4,
            Sentinel = 5,
            Heretic = 6,
            Prophet = 7,
            Unused8 = 8,
            Unused9 = 9,
            Unused10 = 10,
            Unused11 = 11,
            Unused12 = 12,
            Unused13 = 13,
            Unused14 = 14,
            Unused15 = 15,
        }
        public enum ConstantSoundVolumeOptions
        {
            Silent = 0,
            Medium = 1,
            Loud = 2,
            Shout = 3,
            Quiet = 4,
        }
        public enum MotionSensorBlipSizeOptions
        {
            Medium = 0,
            Small = 1,
            Large = 2,
        }
        public enum GrenadeTypeOptions
        {
            HumanFragmentation = 0,
            CovenantPlasma = 1,
        }
    }
}
#pragma warning restore CS1591
