#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(12, 4)]
    [TagGroupAttribute("material_effects", 1718579060u, 4294967293u, typeof(MaterialEffectsBlock))]
    public sealed class MaterialEffectsBlock : AbideTagBlock
    {
        private TagBlockList<MaterialEffectBlockV2> effectsList = new TagBlockList<MaterialEffectBlockV2>(21);
        [FieldAttribute("effects", typeof(TagBlock))]
        [BlockAttribute("material_effect_block_v2", 21, typeof(MaterialEffectBlockV2))]
        public TagBlock Effects;
        public TagBlockList<MaterialEffectBlockV2> EffectsList
        {
            get
            {
                return this.effectsList;
            }
        }
        public override int Size
        {
            get
            {
                return 12;
            }
        }
        public override void Initialize()
        {
            this.effectsList.Clear();
            this.Effects = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Effects = reader.ReadInt64();
            this.effectsList.Read(reader, this.Effects);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(36, 4)]
        public sealed class MaterialEffectBlockV2 : AbideTagBlock
        {
            private TagBlockList<OldMaterialEffectMaterialBlock> oldMaterialsDoNotUseList = new TagBlockList<OldMaterialEffectMaterialBlock>(33);
            private TagBlockList<MaterialEffectMaterialBlock> soundsList = new TagBlockList<MaterialEffectMaterialBlock>(500);
            [FieldAttribute("old materials (DO NOT USE)", typeof(TagBlock))]
            [BlockAttribute("old_material_effect_material_block", 33, typeof(OldMaterialEffectMaterialBlock))]
            public TagBlock OldMaterialsDoNotUse;
            [FieldAttribute("sounds", typeof(TagBlock))]
            [BlockAttribute("material_effect_material_block", 500, typeof(MaterialEffectMaterialBlock))]
            public TagBlock Sounds;
            [FieldAttribute("effects", typeof(TagBlock))]
            [BlockAttribute("material_effect_material_block", 500, typeof(MaterialEffectMaterialBlock))]
            public TagBlock Effects;
            public TagBlockList<OldMaterialEffectMaterialBlock> OldMaterialsDoNotUseList
            {
                get
                {
                    return this.oldMaterialsDoNotUseList;
                }
            }
            public TagBlockList<MaterialEffectMaterialBlock> SoundsList
            {
                get
                {
                    return this.soundsList;
                }
            }
            public override int Size
            {
                get
                {
                    return 36;
                }
            }
            public override void Initialize()
            {
                this.oldMaterialsDoNotUseList.Clear();
                this.soundsList.Clear();
                this.OldMaterialsDoNotUse = TagBlock.Zero;
                this.Sounds = TagBlock.Zero;
                this.Effects = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.OldMaterialsDoNotUse = reader.ReadInt64();
                this.oldMaterialsDoNotUseList.Read(reader, this.OldMaterialsDoNotUse);
                this.Sounds = reader.ReadInt64();
                this.soundsList.Read(reader, this.Sounds);
                this.Effects = reader.ReadInt64();
                this.soundsList.Read(reader, this.Effects);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(44, 4)]
            public sealed class OldMaterialEffectMaterialBlock : AbideTagBlock
            {
                [FieldAttribute("effect", typeof(TagReference))]
                public TagReference Effect;
                [FieldAttribute("sound", typeof(TagReference))]
                public TagReference Sound;
                [FieldAttribute("material name^", typeof(StringId))]
                public StringId MaterialName;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("sweetener mode", typeof(SweetenerModeOptions))]
                [OptionsAttribute(typeof(SweetenerModeOptions), false)]
                public SweetenerModeOptions SweetenerMode;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(3)]
                public Byte[] EmptyString1;
                public override int Size
                {
                    get
                    {
                        return 44;
                    }
                }
                public override void Initialize()
                {
                    this.Effect = TagReference.Null;
                    this.Sound = TagReference.Null;
                    this.MaterialName = StringId.Zero;
                    this.EmptyString = new byte[4];
                    this.SweetenerMode = ((SweetenerModeOptions)(0));
                    this.EmptyString1 = new byte[3];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Effect = reader.Read<TagReference>();
                    this.Sound = reader.Read<TagReference>();
                    this.MaterialName = reader.ReadInt32();
                    this.EmptyString = reader.ReadBytes(4);
                    this.SweetenerMode = ((SweetenerModeOptions)(reader.ReadByte()));
                    this.EmptyString1 = reader.ReadBytes(3);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum SweetenerModeOptions : Byte
                {
                    SweetenerDefault = 0,
                    SweetenerEnabled = 1,
                    SweetenerDisabled = 2,
                }
            }
            [FieldSetAttribute(40, 4)]
            public sealed class MaterialEffectMaterialBlock : AbideTagBlock
            {
                [FieldAttribute("tag (effect or sound)", typeof(TagReference))]
                public TagReference TagEffectOrSound;
                [FieldAttribute("secondary tag (effect or sound)", typeof(TagReference))]
                public TagReference SecondaryTagEffectOrSound;
                [FieldAttribute("material name^", typeof(StringId))]
                public StringId MaterialName;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("sweetener mode", typeof(SweetenerModeOptions))]
                [OptionsAttribute(typeof(SweetenerModeOptions), false)]
                public SweetenerModeOptions SweetenerMode;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(1)]
                public Byte[] EmptyString1;
                public override int Size
                {
                    get
                    {
                        return 40;
                    }
                }
                public override void Initialize()
                {
                    this.TagEffectOrSound = TagReference.Null;
                    this.SecondaryTagEffectOrSound = TagReference.Null;
                    this.MaterialName = StringId.Zero;
                    this.EmptyString = new byte[2];
                    this.SweetenerMode = ((SweetenerModeOptions)(0));
                    this.EmptyString1 = new byte[1];
                }
                public override void Read(BinaryReader reader)
                {
                    this.TagEffectOrSound = reader.Read<TagReference>();
                    this.SecondaryTagEffectOrSound = reader.Read<TagReference>();
                    this.MaterialName = reader.ReadInt32();
                    this.EmptyString = reader.ReadBytes(2);
                    this.SweetenerMode = ((SweetenerModeOptions)(reader.ReadByte()));
                    this.EmptyString1 = reader.ReadBytes(1);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum SweetenerModeOptions : Byte
                {
                    SweetenerDefault = 0,
                    SweetenerEnabled = 1,
                    SweetenerDisabled = 2,
                }
            }
        }
    }
}
#pragma warning restore CS1591
