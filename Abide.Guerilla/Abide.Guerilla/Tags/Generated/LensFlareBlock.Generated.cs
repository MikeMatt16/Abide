#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(124, 4)]
    [TagGroupAttribute("lens_flare", 1818586739u, 4294967293u, typeof(LensFlareBlock))]
    public sealed class LensFlareBlock : AbideTagBlock
    {
        private TagBlockList<LensFlareReflectionBlock> reflectionsList = new TagBlockList<LensFlareReflectionBlock>(32);
        private TagBlockList<LensFlareScalarAnimationBlock> brightnessList = new TagBlockList<LensFlareScalarAnimationBlock>(1);
        private TagBlockList<LensFlareColorAnimationBlock> colorList = new TagBlockList<LensFlareColorAnimationBlock>(1);
        [FieldAttribute("falloff angle:degrees", typeof(Single))]
        public Single FalloffAngle;
        [FieldAttribute("cutoff angle:degrees", typeof(Single))]
        public Single CutoffAngle;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(4)]
        public Byte[] EmptyString1;
        [FieldAttribute("occlusion radius:world units#radius of the square used to test occlusion", typeof(Single))]
        public Single OcclusionRadius;
        [FieldAttribute("occlusion offset direction", typeof(OcclusionOffsetDirectionOptions))]
        [OptionsAttribute(typeof(OcclusionOffsetDirectionOptions), false)]
        public OcclusionOffsetDirectionOptions OcclusionOffsetDirection;
        [FieldAttribute("occlusion inner radius scale", typeof(OcclusionInnerRadiusScaleOptions))]
        [OptionsAttribute(typeof(OcclusionInnerRadiusScaleOptions), false)]
        public OcclusionInnerRadiusScaleOptions OcclusionInnerRadiusScale;
        [FieldAttribute("near fade distance:world units#distance at which the lens flare brightness is max" +
            "imum", typeof(Single))]
        public Single NearFadeDistance;
        [FieldAttribute("far fade distance:world units#distance at which the lens flare brightness is mini" +
            "mum; set to zero to disable distance fading", typeof(Single))]
        public Single FarFadeDistance;
        [FieldAttribute("bitmap", typeof(TagReference))]
        public TagReference Bitmap;
        [FieldAttribute("flags", typeof(FlagsOptions))]
        [OptionsAttribute(typeof(FlagsOptions), true)]
        public FlagsOptions Flags;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString2;
        [FieldAttribute("rotation function", typeof(RotationFunctionOptions))]
        [OptionsAttribute(typeof(RotationFunctionOptions), false)]
        public RotationFunctionOptions RotationFunction;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString3;
        [FieldAttribute("rotation function scale:degrees", typeof(Single))]
        public Single RotationFunctionScale;
        [FieldAttribute("corona scale#amount to stretch the corona", typeof(Vector2))]
        public Vector2 CoronaScale;
        [FieldAttribute("falloff function", typeof(FalloffFunctionOptions))]
        [OptionsAttribute(typeof(FalloffFunctionOptions), false)]
        public FalloffFunctionOptions FalloffFunction;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString4;
        [FieldAttribute("reflections", typeof(TagBlock))]
        [BlockAttribute("reflection", 32, typeof(LensFlareReflectionBlock))]
        public TagBlock Reflections;
        [FieldAttribute("flags", typeof(FlagsOptions1))]
        [OptionsAttribute(typeof(FlagsOptions1), true)]
        public FlagsOptions1 Flags1;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString5;
        [FieldAttribute("brightness", typeof(TagBlock))]
        [BlockAttribute("lens_flare_scalar_animation_block", 1, typeof(LensFlareScalarAnimationBlock))]
        public TagBlock Brightness;
        [FieldAttribute("color", typeof(TagBlock))]
        [BlockAttribute("lens_flare_color_animation_block", 1, typeof(LensFlareColorAnimationBlock))]
        public TagBlock Color;
        [FieldAttribute("rotation", typeof(TagBlock))]
        [BlockAttribute("lens_flare_scalar_animation_block", 1, typeof(LensFlareScalarAnimationBlock))]
        public TagBlock Rotation;
        public TagBlockList<LensFlareReflectionBlock> ReflectionsList
        {
            get
            {
                return this.reflectionsList;
            }
        }
        public TagBlockList<LensFlareScalarAnimationBlock> BrightnessList
        {
            get
            {
                return this.brightnessList;
            }
        }
        public TagBlockList<LensFlareColorAnimationBlock> ColorList
        {
            get
            {
                return this.colorList;
            }
        }
        public override int Size
        {
            get
            {
                return 124;
            }
        }
        public override void Initialize()
        {
            this.reflectionsList.Clear();
            this.brightnessList.Clear();
            this.colorList.Clear();
            this.FalloffAngle = 0;
            this.CutoffAngle = 0;
            this.EmptyString = new byte[4];
            this.EmptyString1 = new byte[4];
            this.OcclusionRadius = 0;
            this.OcclusionOffsetDirection = ((OcclusionOffsetDirectionOptions)(0));
            this.OcclusionInnerRadiusScale = ((OcclusionInnerRadiusScaleOptions)(0));
            this.NearFadeDistance = 0;
            this.FarFadeDistance = 0;
            this.Bitmap = TagReference.Null;
            this.Flags = ((FlagsOptions)(0));
            this.EmptyString2 = new byte[2];
            this.RotationFunction = ((RotationFunctionOptions)(0));
            this.EmptyString3 = new byte[2];
            this.RotationFunctionScale = 0;
            this.CoronaScale = Vector2.Zero;
            this.FalloffFunction = ((FalloffFunctionOptions)(0));
            this.EmptyString4 = new byte[2];
            this.Reflections = TagBlock.Zero;
            this.Flags1 = ((FlagsOptions1)(0));
            this.EmptyString5 = new byte[2];
            this.Brightness = TagBlock.Zero;
            this.Color = TagBlock.Zero;
            this.Rotation = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.FalloffAngle = reader.ReadSingle();
            this.CutoffAngle = reader.ReadSingle();
            this.EmptyString = reader.ReadBytes(4);
            this.EmptyString1 = reader.ReadBytes(4);
            this.OcclusionRadius = reader.ReadSingle();
            this.OcclusionOffsetDirection = ((OcclusionOffsetDirectionOptions)(reader.ReadInt16()));
            this.OcclusionInnerRadiusScale = ((OcclusionInnerRadiusScaleOptions)(reader.ReadInt16()));
            this.NearFadeDistance = reader.ReadSingle();
            this.FarFadeDistance = reader.ReadSingle();
            this.Bitmap = reader.Read<TagReference>();
            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
            this.EmptyString2 = reader.ReadBytes(2);
            this.RotationFunction = ((RotationFunctionOptions)(reader.ReadInt16()));
            this.EmptyString3 = reader.ReadBytes(2);
            this.RotationFunctionScale = reader.ReadSingle();
            this.CoronaScale = reader.Read<Vector2>();
            this.FalloffFunction = ((FalloffFunctionOptions)(reader.ReadInt16()));
            this.EmptyString4 = reader.ReadBytes(2);
            this.Reflections = reader.ReadInt64();
            this.reflectionsList.Read(reader, this.Reflections);
            this.Flags1 = ((FlagsOptions1)(reader.ReadInt16()));
            this.EmptyString5 = reader.ReadBytes(2);
            this.Brightness = reader.ReadInt64();
            this.brightnessList.Read(reader, this.Brightness);
            this.Color = reader.ReadInt64();
            this.colorList.Read(reader, this.Color);
            this.Rotation = reader.ReadInt64();
            this.colorList.Read(reader, this.Rotation);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(48, 4)]
        public sealed class LensFlareReflectionBlock : AbideTagBlock
        {
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("bitmap index", typeof(Int16))]
            public Int16 BitmapIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("position:along flare axis#0 is on top of light, 1 is opposite light, 0.5 is the c" +
                "enter of the screen, etc.", typeof(Single))]
            public Single Position;
            [FieldAttribute("rotation offset:degrees", typeof(Single))]
            public Single RotationOffset;
            [FieldAttribute("modulation factor:[0,1]", typeof(Single))]
            public Single ModulationFactor;
            [FieldAttribute("color", typeof(ColorRgbF))]
            public ColorRgbF Color;
            public override int Size
            {
                get
                {
                    return 48;
                }
            }
            public override void Initialize()
            {
                this.Flags = ((FlagsOptions)(0));
                this.EmptyString = new byte[2];
                this.BitmapIndex = 0;
                this.EmptyString1 = new byte[2];
                this.Position = 0;
                this.RotationOffset = 0;
                this.ModulationFactor = 0;
                this.Color = ColorRgbF.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.BitmapIndex = reader.ReadInt16();
                this.EmptyString1 = reader.ReadBytes(2);
                this.Position = reader.ReadSingle();
                this.RotationOffset = reader.ReadSingle();
                this.ModulationFactor = reader.ReadSingle();
                this.Color = reader.Read<ColorRgbF>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum FlagsOptions : Int16
            {
                AlignRotationWithScreenCenter = 1,
                RadiusNotScaledByDistance = 2,
                RadiusScaledByOcclusionFactor = 4,
                OccludedBySolidObjects = 8,
                IgnoreLightColor = 16,
                NotAffectedByInnerOcclusion = 32,
            }
        }
        [FieldSetAttribute(12, 4)]
        public sealed class LensFlareScalarAnimationBlock : AbideTagBlock
        {
            [FieldAttribute("function", typeof(ScalarFunctionStructBlock))]
            public ScalarFunctionStructBlock Function;
            public override int Size
            {
                get
                {
                    return 12;
                }
            }
            public override void Initialize()
            {
                this.Function = new ScalarFunctionStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Function = reader.ReadDataStructure<ScalarFunctionStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScalarFunctionStructBlock : AbideTagBlock
            {
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        [FieldSetAttribute(12, 4)]
        public sealed class LensFlareColorAnimationBlock : AbideTagBlock
        {
            [FieldAttribute("function", typeof(ColorFunctionStructBlock))]
            public ColorFunctionStructBlock Function;
            public override int Size
            {
                get
                {
                    return 12;
                }
            }
            public override void Initialize()
            {
                this.Function = new ColorFunctionStructBlock();
            }
            public override void Read(BinaryReader reader)
            {
                this.Function = reader.ReadDataStructure<ColorFunctionStructBlock>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ColorFunctionStructBlock : AbideTagBlock
            {
                [FieldAttribute("function", typeof(MappingFunctionBlock))]
                public MappingFunctionBlock Function;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Function = new MappingFunctionBlock();
                }
                public override void Read(BinaryReader reader)
                {
                    this.Function = reader.ReadDataStructure<MappingFunctionBlock>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class MappingFunctionBlock : AbideTagBlock
                {
                    private TagBlockList<ByteBlock> dataList = new TagBlockList<ByteBlock>(1024);
                    [FieldAttribute("data", typeof(TagBlock))]
                    [BlockAttribute("byte_block", 1024, typeof(ByteBlock))]
                    public TagBlock Data;
                    public TagBlockList<ByteBlock> DataList
                    {
                        get
                        {
                            return this.dataList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.dataList.Clear();
                        this.Data = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Data = reader.ReadInt64();
                        this.dataList.Read(reader, this.Data);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(1, 4)]
                    public sealed class ByteBlock : AbideTagBlock
                    {
                        [FieldAttribute("Value", typeof(Byte))]
                        public Byte Value;
                        public override int Size
                        {
                            get
                            {
                                return 1;
                            }
                        }
                        public override void Initialize()
                        {
                            this.Value = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Value = reader.ReadByte();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                    }
                }
            }
        }
        public enum OcclusionOffsetDirectionOptions : Int16
        {
            TowardViewer = 0,
            MarkerForward = 1,
            None = 2,
        }
        public enum OcclusionInnerRadiusScaleOptions : Int16
        {
            None = 0,
            _12 = 1,
            _14 = 2,
            _18 = 3,
            _116 = 4,
            _132 = 5,
            _164 = 6,
        }
        public enum FlagsOptions : Int16
        {
            Sun = 1,
            NoOcclusionTest = 2,
            OnlyRenderInFirstPerson = 4,
            OnlyRenderInThirdPerson = 8,
            FadeInMoreQuickly = 16,
            FadeOutMoreQuickly = 32,
            ScaleByMarker = 64,
        }
        public enum RotationFunctionOptions : Int16
        {
            None = 0,
            RotationA = 1,
            RotationB = 2,
            RotationTranslation = 3,
            Translation = 4,
        }
        public enum FalloffFunctionOptions : Int16
        {
            Linear = 0,
            Late = 1,
            VeryLate = 2,
            Early = 3,
            VeryEarly = 4,
            Cosine = 5,
            Zero = 6,
            One = 7,
        }
        public enum FlagsOptions1 : Int16
        {
            Synchronized = 1,
        }
    }
}
#pragma warning restore CS1591
