#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(60, 4)]
    [TagGroupAttribute("ai_dialogue_globals", 1633971303u, 4294967293u, typeof(AiDialogueGlobalsBlock))]
    public sealed class AiDialogueGlobalsBlock : AbideTagBlock
    {
        private TagBlockList<VocalizationDefinitionsBlock0> vocalizationsList = new TagBlockList<VocalizationDefinitionsBlock0>(500);
        private TagBlockList<VocalizationPatternsBlock> patternsList = new TagBlockList<VocalizationPatternsBlock>(1000);
        private TagBlockList<DialogueDataBlock> dialogueDataList = new TagBlockList<DialogueDataBlock>(200);
        private TagBlockList<InvoluntaryDataBlock> involuntaryDataList = new TagBlockList<InvoluntaryDataBlock>(100);
        [FieldAttribute("vocalizations", typeof(TagBlock))]
        [BlockAttribute("vocalization_definitions_block_0", 500, typeof(VocalizationDefinitionsBlock0))]
        public TagBlock Vocalizations;
        [FieldAttribute("patterns", typeof(TagBlock))]
        [BlockAttribute("vocalization_patterns_block", 1000, typeof(VocalizationPatternsBlock))]
        public TagBlock Patterns;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(12)]
        public Byte[] EmptyString;
        [FieldAttribute("dialogue data", typeof(TagBlock))]
        [BlockAttribute("dialogue_data_block", 200, typeof(DialogueDataBlock))]
        public TagBlock DialogueData;
        [FieldAttribute("involuntary data", typeof(TagBlock))]
        [BlockAttribute("involuntary_data_block", 100, typeof(InvoluntaryDataBlock))]
        public TagBlock InvoluntaryData;
        public TagBlockList<VocalizationDefinitionsBlock0> VocalizationsList
        {
            get
            {
                return this.vocalizationsList;
            }
        }
        public TagBlockList<VocalizationPatternsBlock> PatternsList
        {
            get
            {
                return this.patternsList;
            }
        }
        public TagBlockList<DialogueDataBlock> DialogueDataList
        {
            get
            {
                return this.dialogueDataList;
            }
        }
        public TagBlockList<InvoluntaryDataBlock> InvoluntaryDataList
        {
            get
            {
                return this.involuntaryDataList;
            }
        }
        public override int Size
        {
            get
            {
                return 60;
            }
        }
        public override void Initialize()
        {
            this.vocalizationsList.Clear();
            this.patternsList.Clear();
            this.dialogueDataList.Clear();
            this.involuntaryDataList.Clear();
            this.Vocalizations = TagBlock.Zero;
            this.Patterns = TagBlock.Zero;
            this.EmptyString = new byte[12];
            this.DialogueData = TagBlock.Zero;
            this.InvoluntaryData = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.Vocalizations = reader.ReadInt64();
            this.vocalizationsList.Read(reader, this.Vocalizations);
            this.Patterns = reader.ReadInt64();
            this.patternsList.Read(reader, this.Patterns);
            this.EmptyString = reader.ReadBytes(12);
            this.DialogueData = reader.ReadInt64();
            this.dialogueDataList.Read(reader, this.DialogueData);
            this.InvoluntaryData = reader.ReadInt64();
            this.involuntaryDataList.Read(reader, this.InvoluntaryData);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(104, 4)]
        public sealed class VocalizationDefinitionsBlock0 : AbideTagBlock
        {
            private TagBlockList<ResponseBlock> reponsesList = new TagBlockList<ResponseBlock>(20);
            private TagBlockList<VocalizationDefinitionsBlock1> childrenList = new TagBlockList<VocalizationDefinitionsBlock1>(500);
            [FieldAttribute("vocalization^", typeof(StringId))]
            public StringId Vocalization;
            [FieldAttribute("parent vocalization", typeof(StringId))]
            public StringId ParentVocalization;
            [FieldAttribute("parent index*", typeof(Int16))]
            public Int16 ParentIndex;
            [FieldAttribute("priority", typeof(PriorityOptions))]
            [OptionsAttribute(typeof(PriorityOptions), false)]
            public PriorityOptions Priority;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("glance behavior#how does the speaker of this vocalization direct his gaze?", typeof(GlanceBehaviorOptions))]
            [OptionsAttribute(typeof(GlanceBehaviorOptions), false)]
            public GlanceBehaviorOptions GlanceBehavior;
            [FieldAttribute("glance recipient behavior#how does someone who hears me behave?", typeof(GlanceRecipientBehaviorOptions))]
            [OptionsAttribute(typeof(GlanceRecipientBehaviorOptions), false)]
            public GlanceRecipientBehaviorOptions GlanceRecipientBehavior;
            [FieldAttribute("perception type", typeof(PerceptionTypeOptions))]
            [OptionsAttribute(typeof(PerceptionTypeOptions), false)]
            public PerceptionTypeOptions PerceptionType;
            [FieldAttribute("max combat status", typeof(MaxCombatStatusOptions))]
            [OptionsAttribute(typeof(MaxCombatStatusOptions), false)]
            public MaxCombatStatusOptions MaxCombatStatus;
            [FieldAttribute("animation impulse", typeof(AnimationImpulseOptions))]
            [OptionsAttribute(typeof(AnimationImpulseOptions), false)]
            public AnimationImpulseOptions AnimationImpulse;
            [FieldAttribute("overlap priority", typeof(OverlapPriorityOptions))]
            [OptionsAttribute(typeof(OverlapPriorityOptions), false)]
            public OverlapPriorityOptions OverlapPriority;
            [FieldAttribute("sound repetition delay:minutes#Minimum delay time between playing the same permut" +
                "ation", typeof(Single))]
            public Single SoundRepetitionDelay;
            [FieldAttribute("allowable queue delay:seconds#How long to wait to actually start the vocalization" +
                "", typeof(Single))]
            public Single AllowableQueueDelay;
            [FieldAttribute("pre voc. delay:seconds#How long to wait to actually start the vocalization", typeof(Single))]
            public Single PreVocDelay;
            [FieldAttribute("notification delay:seconds#How long into the vocalization the AI should be notifi" +
                "ed", typeof(Single))]
            public Single NotificationDelay;
            [FieldAttribute("post voc. delay:seconds#How long speech is suppressed in the speaking unit after " +
                "vocalizing", typeof(Single))]
            public Single PostVocDelay;
            [FieldAttribute("repeat delay:seconds#How long before the same vocalization can be repeated", typeof(Single))]
            public Single RepeatDelay;
            [FieldAttribute("weight:[0-1]#Inherent weight of this vocalization", typeof(Single))]
            public Single Weight;
            [FieldAttribute("speaker freeze time#speaker won\'t move for the given amount of time", typeof(Single))]
            public Single SpeakerFreezeTime;
            [FieldAttribute("listener freeze time#listener won\'t move for the given amount of time (from start" +
                " of vocalization)", typeof(Single))]
            public Single ListenerFreezeTime;
            [FieldAttribute("speaker emotion", typeof(SpeakerEmotionOptions))]
            [OptionsAttribute(typeof(SpeakerEmotionOptions), false)]
            public SpeakerEmotionOptions SpeakerEmotion;
            [FieldAttribute("listener emotion", typeof(ListenerEmotionOptions))]
            [OptionsAttribute(typeof(ListenerEmotionOptions), false)]
            public ListenerEmotionOptions ListenerEmotion;
            [FieldAttribute("player skip fraction", typeof(Single))]
            public Single PlayerSkipFraction;
            [FieldAttribute("skip fraction", typeof(Single))]
            public Single SkipFraction;
            [FieldAttribute("Sample line", typeof(StringId))]
            public StringId SampleLine;
            [FieldAttribute("reponses", typeof(TagBlock))]
            [BlockAttribute("response_block", 20, typeof(ResponseBlock))]
            public TagBlock Reponses;
            [FieldAttribute("children", typeof(TagBlock))]
            [BlockAttribute("vocalization_definitions_block_1", 500, typeof(VocalizationDefinitionsBlock1))]
            public TagBlock Children;
            public TagBlockList<ResponseBlock> ReponsesList
            {
                get
                {
                    return this.reponsesList;
                }
            }
            public TagBlockList<VocalizationDefinitionsBlock1> ChildrenList
            {
                get
                {
                    return this.childrenList;
                }
            }
            public override int Size
            {
                get
                {
                    return 104;
                }
            }
            public override void Initialize()
            {
                this.reponsesList.Clear();
                this.childrenList.Clear();
                this.Vocalization = StringId.Zero;
                this.ParentVocalization = StringId.Zero;
                this.ParentIndex = 0;
                this.Priority = ((PriorityOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.GlanceBehavior = ((GlanceBehaviorOptions)(0));
                this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(0));
                this.PerceptionType = ((PerceptionTypeOptions)(0));
                this.MaxCombatStatus = ((MaxCombatStatusOptions)(0));
                this.AnimationImpulse = ((AnimationImpulseOptions)(0));
                this.OverlapPriority = ((OverlapPriorityOptions)(0));
                this.SoundRepetitionDelay = 0;
                this.AllowableQueueDelay = 0;
                this.PreVocDelay = 0;
                this.NotificationDelay = 0;
                this.PostVocDelay = 0;
                this.RepeatDelay = 0;
                this.Weight = 0;
                this.SpeakerFreezeTime = 0;
                this.ListenerFreezeTime = 0;
                this.SpeakerEmotion = ((SpeakerEmotionOptions)(0));
                this.ListenerEmotion = ((ListenerEmotionOptions)(0));
                this.PlayerSkipFraction = 0;
                this.SkipFraction = 0;
                this.SampleLine = StringId.Zero;
                this.Reponses = TagBlock.Zero;
                this.Children = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Vocalization = reader.ReadInt32();
                this.ParentVocalization = reader.ReadInt32();
                this.ParentIndex = reader.ReadInt16();
                this.Priority = ((PriorityOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                this.GlanceBehavior = ((GlanceBehaviorOptions)(reader.ReadInt16()));
                this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(reader.ReadInt16()));
                this.PerceptionType = ((PerceptionTypeOptions)(reader.ReadInt16()));
                this.MaxCombatStatus = ((MaxCombatStatusOptions)(reader.ReadInt16()));
                this.AnimationImpulse = ((AnimationImpulseOptions)(reader.ReadInt16()));
                this.OverlapPriority = ((OverlapPriorityOptions)(reader.ReadInt16()));
                this.SoundRepetitionDelay = reader.ReadSingle();
                this.AllowableQueueDelay = reader.ReadSingle();
                this.PreVocDelay = reader.ReadSingle();
                this.NotificationDelay = reader.ReadSingle();
                this.PostVocDelay = reader.ReadSingle();
                this.RepeatDelay = reader.ReadSingle();
                this.Weight = reader.ReadSingle();
                this.SpeakerFreezeTime = reader.ReadSingle();
                this.ListenerFreezeTime = reader.ReadSingle();
                this.SpeakerEmotion = ((SpeakerEmotionOptions)(reader.ReadInt16()));
                this.ListenerEmotion = ((ListenerEmotionOptions)(reader.ReadInt16()));
                this.PlayerSkipFraction = reader.ReadSingle();
                this.SkipFraction = reader.ReadSingle();
                this.SampleLine = reader.ReadInt32();
                this.Reponses = reader.ReadInt64();
                this.reponsesList.Read(reader, this.Reponses);
                this.Children = reader.ReadInt64();
                this.childrenList.Read(reader, this.Children);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ResponseBlock : AbideTagBlock
            {
                [FieldAttribute("vocalization name", typeof(StringId))]
                public StringId VocalizationName;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("vocalization index (post process)*", typeof(Int16))]
                public Int16 VocalizationIndexPostProcess;
                [FieldAttribute("response type", typeof(ResponseTypeOptions))]
                [OptionsAttribute(typeof(ResponseTypeOptions), false)]
                public ResponseTypeOptions ResponseType;
                [FieldAttribute("dialogue index (import)*", typeof(Int16))]
                public Int16 DialogueIndexImport;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.VocalizationName = StringId.Zero;
                    this.Flags = ((FlagsOptions)(0));
                    this.VocalizationIndexPostProcess = 0;
                    this.ResponseType = ((ResponseTypeOptions)(0));
                    this.DialogueIndexImport = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.VocalizationName = reader.ReadInt32();
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.VocalizationIndexPostProcess = reader.ReadInt16();
                    this.ResponseType = ((ResponseTypeOptions)(reader.ReadInt16()));
                    this.DialogueIndexImport = reader.ReadInt16();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum FlagsOptions : Int16
                {
                    Nonexclusive = 1,
                    TriggerResponse = 2,
                }
                public enum ResponseTypeOptions : Int16
                {
                    Friend = 0,
                    Enemy = 1,
                    Listener = 2,
                    Joint = 3,
                    Peer = 4,
                }
            }
            [FieldSetAttribute(104, 4)]
            public sealed class VocalizationDefinitionsBlock1 : AbideTagBlock
            {
                private TagBlockList<ResponseBlock> reponsesList = new TagBlockList<ResponseBlock>(20);
                private TagBlockList<VocalizationDefinitionsBlock2> childrenList = new TagBlockList<VocalizationDefinitionsBlock2>(500);
                [FieldAttribute("vocalization^", typeof(StringId))]
                public StringId Vocalization;
                [FieldAttribute("parent vocalization", typeof(StringId))]
                public StringId ParentVocalization;
                [FieldAttribute("parent index*", typeof(Int16))]
                public Int16 ParentIndex;
                [FieldAttribute("priority", typeof(PriorityOptions))]
                [OptionsAttribute(typeof(PriorityOptions), false)]
                public PriorityOptions Priority;
                [FieldAttribute("flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("glance behavior#how does the speaker of this vocalization direct his gaze?", typeof(GlanceBehaviorOptions))]
                [OptionsAttribute(typeof(GlanceBehaviorOptions), false)]
                public GlanceBehaviorOptions GlanceBehavior;
                [FieldAttribute("glance recipient behavior#how does someone who hears me behave?", typeof(GlanceRecipientBehaviorOptions))]
                [OptionsAttribute(typeof(GlanceRecipientBehaviorOptions), false)]
                public GlanceRecipientBehaviorOptions GlanceRecipientBehavior;
                [FieldAttribute("perception type", typeof(PerceptionTypeOptions))]
                [OptionsAttribute(typeof(PerceptionTypeOptions), false)]
                public PerceptionTypeOptions PerceptionType;
                [FieldAttribute("max combat status", typeof(MaxCombatStatusOptions))]
                [OptionsAttribute(typeof(MaxCombatStatusOptions), false)]
                public MaxCombatStatusOptions MaxCombatStatus;
                [FieldAttribute("animation impulse", typeof(AnimationImpulseOptions))]
                [OptionsAttribute(typeof(AnimationImpulseOptions), false)]
                public AnimationImpulseOptions AnimationImpulse;
                [FieldAttribute("overlap priority", typeof(OverlapPriorityOptions))]
                [OptionsAttribute(typeof(OverlapPriorityOptions), false)]
                public OverlapPriorityOptions OverlapPriority;
                [FieldAttribute("sound repetition delay:minutes#Minimum delay time between playing the same permut" +
                    "ation", typeof(Single))]
                public Single SoundRepetitionDelay;
                [FieldAttribute("allowable queue delay:seconds#How long to wait to actually start the vocalization" +
                    "", typeof(Single))]
                public Single AllowableQueueDelay;
                [FieldAttribute("pre voc. delay:seconds#How long to wait to actually start the vocalization", typeof(Single))]
                public Single PreVocDelay;
                [FieldAttribute("notification delay:seconds#How long into the vocalization the AI should be notifi" +
                    "ed", typeof(Single))]
                public Single NotificationDelay;
                [FieldAttribute("post voc. delay:seconds#How long speech is suppressed in the speaking unit after " +
                    "vocalizing", typeof(Single))]
                public Single PostVocDelay;
                [FieldAttribute("repeat delay:seconds#How long before the same vocalization can be repeated", typeof(Single))]
                public Single RepeatDelay;
                [FieldAttribute("weight:[0-1]#Inherent weight of this vocalization", typeof(Single))]
                public Single Weight;
                [FieldAttribute("speaker freeze time#speaker won\'t move for the given amount of time", typeof(Single))]
                public Single SpeakerFreezeTime;
                [FieldAttribute("listener freeze time#listener won\'t move for the given amount of time (from start" +
                    " of vocalization)", typeof(Single))]
                public Single ListenerFreezeTime;
                [FieldAttribute("speaker emotion", typeof(SpeakerEmotionOptions))]
                [OptionsAttribute(typeof(SpeakerEmotionOptions), false)]
                public SpeakerEmotionOptions SpeakerEmotion;
                [FieldAttribute("listener emotion", typeof(ListenerEmotionOptions))]
                [OptionsAttribute(typeof(ListenerEmotionOptions), false)]
                public ListenerEmotionOptions ListenerEmotion;
                [FieldAttribute("player skip fraction", typeof(Single))]
                public Single PlayerSkipFraction;
                [FieldAttribute("skip fraction", typeof(Single))]
                public Single SkipFraction;
                [FieldAttribute("Sample line", typeof(StringId))]
                public StringId SampleLine;
                [FieldAttribute("reponses", typeof(TagBlock))]
                [BlockAttribute("response_block", 20, typeof(ResponseBlock))]
                public TagBlock Reponses;
                [FieldAttribute("children", typeof(TagBlock))]
                [BlockAttribute("vocalization_definitions_block_2", 500, typeof(VocalizationDefinitionsBlock2))]
                public TagBlock Children;
                public TagBlockList<ResponseBlock> ReponsesList
                {
                    get
                    {
                        return this.reponsesList;
                    }
                }
                public TagBlockList<VocalizationDefinitionsBlock2> ChildrenList
                {
                    get
                    {
                        return this.childrenList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 104;
                    }
                }
                public override void Initialize()
                {
                    this.reponsesList.Clear();
                    this.childrenList.Clear();
                    this.Vocalization = StringId.Zero;
                    this.ParentVocalization = StringId.Zero;
                    this.ParentIndex = 0;
                    this.Priority = ((PriorityOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.GlanceBehavior = ((GlanceBehaviorOptions)(0));
                    this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(0));
                    this.PerceptionType = ((PerceptionTypeOptions)(0));
                    this.MaxCombatStatus = ((MaxCombatStatusOptions)(0));
                    this.AnimationImpulse = ((AnimationImpulseOptions)(0));
                    this.OverlapPriority = ((OverlapPriorityOptions)(0));
                    this.SoundRepetitionDelay = 0;
                    this.AllowableQueueDelay = 0;
                    this.PreVocDelay = 0;
                    this.NotificationDelay = 0;
                    this.PostVocDelay = 0;
                    this.RepeatDelay = 0;
                    this.Weight = 0;
                    this.SpeakerFreezeTime = 0;
                    this.ListenerFreezeTime = 0;
                    this.SpeakerEmotion = ((SpeakerEmotionOptions)(0));
                    this.ListenerEmotion = ((ListenerEmotionOptions)(0));
                    this.PlayerSkipFraction = 0;
                    this.SkipFraction = 0;
                    this.SampleLine = StringId.Zero;
                    this.Reponses = TagBlock.Zero;
                    this.Children = TagBlock.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Vocalization = reader.ReadInt32();
                    this.ParentVocalization = reader.ReadInt32();
                    this.ParentIndex = reader.ReadInt16();
                    this.Priority = ((PriorityOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                    this.GlanceBehavior = ((GlanceBehaviorOptions)(reader.ReadInt16()));
                    this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(reader.ReadInt16()));
                    this.PerceptionType = ((PerceptionTypeOptions)(reader.ReadInt16()));
                    this.MaxCombatStatus = ((MaxCombatStatusOptions)(reader.ReadInt16()));
                    this.AnimationImpulse = ((AnimationImpulseOptions)(reader.ReadInt16()));
                    this.OverlapPriority = ((OverlapPriorityOptions)(reader.ReadInt16()));
                    this.SoundRepetitionDelay = reader.ReadSingle();
                    this.AllowableQueueDelay = reader.ReadSingle();
                    this.PreVocDelay = reader.ReadSingle();
                    this.NotificationDelay = reader.ReadSingle();
                    this.PostVocDelay = reader.ReadSingle();
                    this.RepeatDelay = reader.ReadSingle();
                    this.Weight = reader.ReadSingle();
                    this.SpeakerFreezeTime = reader.ReadSingle();
                    this.ListenerFreezeTime = reader.ReadSingle();
                    this.SpeakerEmotion = ((SpeakerEmotionOptions)(reader.ReadInt16()));
                    this.ListenerEmotion = ((ListenerEmotionOptions)(reader.ReadInt16()));
                    this.PlayerSkipFraction = reader.ReadSingle();
                    this.SkipFraction = reader.ReadSingle();
                    this.SampleLine = reader.ReadInt32();
                    this.Reponses = reader.ReadInt64();
                    this.reponsesList.Read(reader, this.Reponses);
                    this.Children = reader.ReadInt64();
                    this.childrenList.Read(reader, this.Children);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                [FieldSetAttribute(12, 4)]
                public sealed class ResponseBlock : AbideTagBlock
                {
                    [FieldAttribute("vocalization name", typeof(StringId))]
                    public StringId VocalizationName;
                    [FieldAttribute("flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("vocalization index (post process)*", typeof(Int16))]
                    public Int16 VocalizationIndexPostProcess;
                    [FieldAttribute("response type", typeof(ResponseTypeOptions))]
                    [OptionsAttribute(typeof(ResponseTypeOptions), false)]
                    public ResponseTypeOptions ResponseType;
                    [FieldAttribute("dialogue index (import)*", typeof(Int16))]
                    public Int16 DialogueIndexImport;
                    public override int Size
                    {
                        get
                        {
                            return 12;
                        }
                    }
                    public override void Initialize()
                    {
                        this.VocalizationName = StringId.Zero;
                        this.Flags = ((FlagsOptions)(0));
                        this.VocalizationIndexPostProcess = 0;
                        this.ResponseType = ((ResponseTypeOptions)(0));
                        this.DialogueIndexImport = 0;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.VocalizationName = reader.ReadInt32();
                        this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                        this.VocalizationIndexPostProcess = reader.ReadInt16();
                        this.ResponseType = ((ResponseTypeOptions)(reader.ReadInt16()));
                        this.DialogueIndexImport = reader.ReadInt16();
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    public enum FlagsOptions : Int16
                    {
                        Nonexclusive = 1,
                        TriggerResponse = 2,
                    }
                    public enum ResponseTypeOptions : Int16
                    {
                        Friend = 0,
                        Enemy = 1,
                        Listener = 2,
                        Joint = 3,
                        Peer = 4,
                    }
                }
                [FieldSetAttribute(104, 4)]
                public sealed class VocalizationDefinitionsBlock2 : AbideTagBlock
                {
                    private TagBlockList<ResponseBlock> reponsesList = new TagBlockList<ResponseBlock>(20);
                    private TagBlockList<VocalizationDefinitionsBlock3> childrenList = new TagBlockList<VocalizationDefinitionsBlock3>(500);
                    [FieldAttribute("vocalization^", typeof(StringId))]
                    public StringId Vocalization;
                    [FieldAttribute("parent vocalization", typeof(StringId))]
                    public StringId ParentVocalization;
                    [FieldAttribute("parent index*", typeof(Int16))]
                    public Int16 ParentIndex;
                    [FieldAttribute("priority", typeof(PriorityOptions))]
                    [OptionsAttribute(typeof(PriorityOptions), false)]
                    public PriorityOptions Priority;
                    [FieldAttribute("flags", typeof(FlagsOptions))]
                    [OptionsAttribute(typeof(FlagsOptions), true)]
                    public FlagsOptions Flags;
                    [FieldAttribute("glance behavior#how does the speaker of this vocalization direct his gaze?", typeof(GlanceBehaviorOptions))]
                    [OptionsAttribute(typeof(GlanceBehaviorOptions), false)]
                    public GlanceBehaviorOptions GlanceBehavior;
                    [FieldAttribute("glance recipient behavior#how does someone who hears me behave?", typeof(GlanceRecipientBehaviorOptions))]
                    [OptionsAttribute(typeof(GlanceRecipientBehaviorOptions), false)]
                    public GlanceRecipientBehaviorOptions GlanceRecipientBehavior;
                    [FieldAttribute("perception type", typeof(PerceptionTypeOptions))]
                    [OptionsAttribute(typeof(PerceptionTypeOptions), false)]
                    public PerceptionTypeOptions PerceptionType;
                    [FieldAttribute("max combat status", typeof(MaxCombatStatusOptions))]
                    [OptionsAttribute(typeof(MaxCombatStatusOptions), false)]
                    public MaxCombatStatusOptions MaxCombatStatus;
                    [FieldAttribute("animation impulse", typeof(AnimationImpulseOptions))]
                    [OptionsAttribute(typeof(AnimationImpulseOptions), false)]
                    public AnimationImpulseOptions AnimationImpulse;
                    [FieldAttribute("overlap priority", typeof(OverlapPriorityOptions))]
                    [OptionsAttribute(typeof(OverlapPriorityOptions), false)]
                    public OverlapPriorityOptions OverlapPriority;
                    [FieldAttribute("sound repetition delay:minutes#Minimum delay time between playing the same permut" +
                        "ation", typeof(Single))]
                    public Single SoundRepetitionDelay;
                    [FieldAttribute("allowable queue delay:seconds#How long to wait to actually start the vocalization" +
                        "", typeof(Single))]
                    public Single AllowableQueueDelay;
                    [FieldAttribute("pre voc. delay:seconds#How long to wait to actually start the vocalization", typeof(Single))]
                    public Single PreVocDelay;
                    [FieldAttribute("notification delay:seconds#How long into the vocalization the AI should be notifi" +
                        "ed", typeof(Single))]
                    public Single NotificationDelay;
                    [FieldAttribute("post voc. delay:seconds#How long speech is suppressed in the speaking unit after " +
                        "vocalizing", typeof(Single))]
                    public Single PostVocDelay;
                    [FieldAttribute("repeat delay:seconds#How long before the same vocalization can be repeated", typeof(Single))]
                    public Single RepeatDelay;
                    [FieldAttribute("weight:[0-1]#Inherent weight of this vocalization", typeof(Single))]
                    public Single Weight;
                    [FieldAttribute("speaker freeze time#speaker won\'t move for the given amount of time", typeof(Single))]
                    public Single SpeakerFreezeTime;
                    [FieldAttribute("listener freeze time#listener won\'t move for the given amount of time (from start" +
                        " of vocalization)", typeof(Single))]
                    public Single ListenerFreezeTime;
                    [FieldAttribute("speaker emotion", typeof(SpeakerEmotionOptions))]
                    [OptionsAttribute(typeof(SpeakerEmotionOptions), false)]
                    public SpeakerEmotionOptions SpeakerEmotion;
                    [FieldAttribute("listener emotion", typeof(ListenerEmotionOptions))]
                    [OptionsAttribute(typeof(ListenerEmotionOptions), false)]
                    public ListenerEmotionOptions ListenerEmotion;
                    [FieldAttribute("player skip fraction", typeof(Single))]
                    public Single PlayerSkipFraction;
                    [FieldAttribute("skip fraction", typeof(Single))]
                    public Single SkipFraction;
                    [FieldAttribute("Sample line", typeof(StringId))]
                    public StringId SampleLine;
                    [FieldAttribute("reponses", typeof(TagBlock))]
                    [BlockAttribute("response_block", 20, typeof(ResponseBlock))]
                    public TagBlock Reponses;
                    [FieldAttribute("children", typeof(TagBlock))]
                    [BlockAttribute("vocalization_definitions_block_3", 500, typeof(VocalizationDefinitionsBlock3))]
                    public TagBlock Children;
                    public TagBlockList<ResponseBlock> ReponsesList
                    {
                        get
                        {
                            return this.reponsesList;
                        }
                    }
                    public TagBlockList<VocalizationDefinitionsBlock3> ChildrenList
                    {
                        get
                        {
                            return this.childrenList;
                        }
                    }
                    public override int Size
                    {
                        get
                        {
                            return 104;
                        }
                    }
                    public override void Initialize()
                    {
                        this.reponsesList.Clear();
                        this.childrenList.Clear();
                        this.Vocalization = StringId.Zero;
                        this.ParentVocalization = StringId.Zero;
                        this.ParentIndex = 0;
                        this.Priority = ((PriorityOptions)(0));
                        this.Flags = ((FlagsOptions)(0));
                        this.GlanceBehavior = ((GlanceBehaviorOptions)(0));
                        this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(0));
                        this.PerceptionType = ((PerceptionTypeOptions)(0));
                        this.MaxCombatStatus = ((MaxCombatStatusOptions)(0));
                        this.AnimationImpulse = ((AnimationImpulseOptions)(0));
                        this.OverlapPriority = ((OverlapPriorityOptions)(0));
                        this.SoundRepetitionDelay = 0;
                        this.AllowableQueueDelay = 0;
                        this.PreVocDelay = 0;
                        this.NotificationDelay = 0;
                        this.PostVocDelay = 0;
                        this.RepeatDelay = 0;
                        this.Weight = 0;
                        this.SpeakerFreezeTime = 0;
                        this.ListenerFreezeTime = 0;
                        this.SpeakerEmotion = ((SpeakerEmotionOptions)(0));
                        this.ListenerEmotion = ((ListenerEmotionOptions)(0));
                        this.PlayerSkipFraction = 0;
                        this.SkipFraction = 0;
                        this.SampleLine = StringId.Zero;
                        this.Reponses = TagBlock.Zero;
                        this.Children = TagBlock.Zero;
                    }
                    public override void Read(BinaryReader reader)
                    {
                        this.Vocalization = reader.ReadInt32();
                        this.ParentVocalization = reader.ReadInt32();
                        this.ParentIndex = reader.ReadInt16();
                        this.Priority = ((PriorityOptions)(reader.ReadInt16()));
                        this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                        this.GlanceBehavior = ((GlanceBehaviorOptions)(reader.ReadInt16()));
                        this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(reader.ReadInt16()));
                        this.PerceptionType = ((PerceptionTypeOptions)(reader.ReadInt16()));
                        this.MaxCombatStatus = ((MaxCombatStatusOptions)(reader.ReadInt16()));
                        this.AnimationImpulse = ((AnimationImpulseOptions)(reader.ReadInt16()));
                        this.OverlapPriority = ((OverlapPriorityOptions)(reader.ReadInt16()));
                        this.SoundRepetitionDelay = reader.ReadSingle();
                        this.AllowableQueueDelay = reader.ReadSingle();
                        this.PreVocDelay = reader.ReadSingle();
                        this.NotificationDelay = reader.ReadSingle();
                        this.PostVocDelay = reader.ReadSingle();
                        this.RepeatDelay = reader.ReadSingle();
                        this.Weight = reader.ReadSingle();
                        this.SpeakerFreezeTime = reader.ReadSingle();
                        this.ListenerFreezeTime = reader.ReadSingle();
                        this.SpeakerEmotion = ((SpeakerEmotionOptions)(reader.ReadInt16()));
                        this.ListenerEmotion = ((ListenerEmotionOptions)(reader.ReadInt16()));
                        this.PlayerSkipFraction = reader.ReadSingle();
                        this.SkipFraction = reader.ReadSingle();
                        this.SampleLine = reader.ReadInt32();
                        this.Reponses = reader.ReadInt64();
                        this.reponsesList.Read(reader, this.Reponses);
                        this.Children = reader.ReadInt64();
                        this.childrenList.Read(reader, this.Children);
                    }
                    public override void Write(BinaryWriter writer)
                    {
                    }
                    [FieldSetAttribute(12, 4)]
                    public sealed class ResponseBlock : AbideTagBlock
                    {
                        [FieldAttribute("vocalization name", typeof(StringId))]
                        public StringId VocalizationName;
                        [FieldAttribute("flags", typeof(FlagsOptions))]
                        [OptionsAttribute(typeof(FlagsOptions), true)]
                        public FlagsOptions Flags;
                        [FieldAttribute("vocalization index (post process)*", typeof(Int16))]
                        public Int16 VocalizationIndexPostProcess;
                        [FieldAttribute("response type", typeof(ResponseTypeOptions))]
                        [OptionsAttribute(typeof(ResponseTypeOptions), false)]
                        public ResponseTypeOptions ResponseType;
                        [FieldAttribute("dialogue index (import)*", typeof(Int16))]
                        public Int16 DialogueIndexImport;
                        public override int Size
                        {
                            get
                            {
                                return 12;
                            }
                        }
                        public override void Initialize()
                        {
                            this.VocalizationName = StringId.Zero;
                            this.Flags = ((FlagsOptions)(0));
                            this.VocalizationIndexPostProcess = 0;
                            this.ResponseType = ((ResponseTypeOptions)(0));
                            this.DialogueIndexImport = 0;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.VocalizationName = reader.ReadInt32();
                            this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                            this.VocalizationIndexPostProcess = reader.ReadInt16();
                            this.ResponseType = ((ResponseTypeOptions)(reader.ReadInt16()));
                            this.DialogueIndexImport = reader.ReadInt16();
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        public enum FlagsOptions : Int16
                        {
                            Nonexclusive = 1,
                            TriggerResponse = 2,
                        }
                        public enum ResponseTypeOptions : Int16
                        {
                            Friend = 0,
                            Enemy = 1,
                            Listener = 2,
                            Joint = 3,
                            Peer = 4,
                        }
                    }
                    [FieldSetAttribute(104, 4)]
                    public sealed class VocalizationDefinitionsBlock3 : AbideTagBlock
                    {
                        private TagBlockList<ResponseBlock> reponsesList = new TagBlockList<ResponseBlock>(20);
                        private TagBlockList<VocalizationDefinitionsBlock4> childrenList = new TagBlockList<VocalizationDefinitionsBlock4>(500);
                        [FieldAttribute("vocalization^", typeof(StringId))]
                        public StringId Vocalization;
                        [FieldAttribute("parent vocalization", typeof(StringId))]
                        public StringId ParentVocalization;
                        [FieldAttribute("parent index*", typeof(Int16))]
                        public Int16 ParentIndex;
                        [FieldAttribute("priority", typeof(PriorityOptions))]
                        [OptionsAttribute(typeof(PriorityOptions), false)]
                        public PriorityOptions Priority;
                        [FieldAttribute("flags", typeof(FlagsOptions))]
                        [OptionsAttribute(typeof(FlagsOptions), true)]
                        public FlagsOptions Flags;
                        [FieldAttribute("glance behavior#how does the speaker of this vocalization direct his gaze?", typeof(GlanceBehaviorOptions))]
                        [OptionsAttribute(typeof(GlanceBehaviorOptions), false)]
                        public GlanceBehaviorOptions GlanceBehavior;
                        [FieldAttribute("glance recipient behavior#how does someone who hears me behave?", typeof(GlanceRecipientBehaviorOptions))]
                        [OptionsAttribute(typeof(GlanceRecipientBehaviorOptions), false)]
                        public GlanceRecipientBehaviorOptions GlanceRecipientBehavior;
                        [FieldAttribute("perception type", typeof(PerceptionTypeOptions))]
                        [OptionsAttribute(typeof(PerceptionTypeOptions), false)]
                        public PerceptionTypeOptions PerceptionType;
                        [FieldAttribute("max combat status", typeof(MaxCombatStatusOptions))]
                        [OptionsAttribute(typeof(MaxCombatStatusOptions), false)]
                        public MaxCombatStatusOptions MaxCombatStatus;
                        [FieldAttribute("animation impulse", typeof(AnimationImpulseOptions))]
                        [OptionsAttribute(typeof(AnimationImpulseOptions), false)]
                        public AnimationImpulseOptions AnimationImpulse;
                        [FieldAttribute("overlap priority", typeof(OverlapPriorityOptions))]
                        [OptionsAttribute(typeof(OverlapPriorityOptions), false)]
                        public OverlapPriorityOptions OverlapPriority;
                        [FieldAttribute("sound repetition delay:minutes#Minimum delay time between playing the same permut" +
                            "ation", typeof(Single))]
                        public Single SoundRepetitionDelay;
                        [FieldAttribute("allowable queue delay:seconds#How long to wait to actually start the vocalization" +
                            "", typeof(Single))]
                        public Single AllowableQueueDelay;
                        [FieldAttribute("pre voc. delay:seconds#How long to wait to actually start the vocalization", typeof(Single))]
                        public Single PreVocDelay;
                        [FieldAttribute("notification delay:seconds#How long into the vocalization the AI should be notifi" +
                            "ed", typeof(Single))]
                        public Single NotificationDelay;
                        [FieldAttribute("post voc. delay:seconds#How long speech is suppressed in the speaking unit after " +
                            "vocalizing", typeof(Single))]
                        public Single PostVocDelay;
                        [FieldAttribute("repeat delay:seconds#How long before the same vocalization can be repeated", typeof(Single))]
                        public Single RepeatDelay;
                        [FieldAttribute("weight:[0-1]#Inherent weight of this vocalization", typeof(Single))]
                        public Single Weight;
                        [FieldAttribute("speaker freeze time#speaker won\'t move for the given amount of time", typeof(Single))]
                        public Single SpeakerFreezeTime;
                        [FieldAttribute("listener freeze time#listener won\'t move for the given amount of time (from start" +
                            " of vocalization)", typeof(Single))]
                        public Single ListenerFreezeTime;
                        [FieldAttribute("speaker emotion", typeof(SpeakerEmotionOptions))]
                        [OptionsAttribute(typeof(SpeakerEmotionOptions), false)]
                        public SpeakerEmotionOptions SpeakerEmotion;
                        [FieldAttribute("listener emotion", typeof(ListenerEmotionOptions))]
                        [OptionsAttribute(typeof(ListenerEmotionOptions), false)]
                        public ListenerEmotionOptions ListenerEmotion;
                        [FieldAttribute("player skip fraction", typeof(Single))]
                        public Single PlayerSkipFraction;
                        [FieldAttribute("skip fraction", typeof(Single))]
                        public Single SkipFraction;
                        [FieldAttribute("Sample line", typeof(StringId))]
                        public StringId SampleLine;
                        [FieldAttribute("reponses", typeof(TagBlock))]
                        [BlockAttribute("response_block", 20, typeof(ResponseBlock))]
                        public TagBlock Reponses;
                        [FieldAttribute("children", typeof(TagBlock))]
                        [BlockAttribute("vocalization_definitions_block_4", 500, typeof(VocalizationDefinitionsBlock4))]
                        public TagBlock Children;
                        public TagBlockList<ResponseBlock> ReponsesList
                        {
                            get
                            {
                                return this.reponsesList;
                            }
                        }
                        public TagBlockList<VocalizationDefinitionsBlock4> ChildrenList
                        {
                            get
                            {
                                return this.childrenList;
                            }
                        }
                        public override int Size
                        {
                            get
                            {
                                return 104;
                            }
                        }
                        public override void Initialize()
                        {
                            this.reponsesList.Clear();
                            this.childrenList.Clear();
                            this.Vocalization = StringId.Zero;
                            this.ParentVocalization = StringId.Zero;
                            this.ParentIndex = 0;
                            this.Priority = ((PriorityOptions)(0));
                            this.Flags = ((FlagsOptions)(0));
                            this.GlanceBehavior = ((GlanceBehaviorOptions)(0));
                            this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(0));
                            this.PerceptionType = ((PerceptionTypeOptions)(0));
                            this.MaxCombatStatus = ((MaxCombatStatusOptions)(0));
                            this.AnimationImpulse = ((AnimationImpulseOptions)(0));
                            this.OverlapPriority = ((OverlapPriorityOptions)(0));
                            this.SoundRepetitionDelay = 0;
                            this.AllowableQueueDelay = 0;
                            this.PreVocDelay = 0;
                            this.NotificationDelay = 0;
                            this.PostVocDelay = 0;
                            this.RepeatDelay = 0;
                            this.Weight = 0;
                            this.SpeakerFreezeTime = 0;
                            this.ListenerFreezeTime = 0;
                            this.SpeakerEmotion = ((SpeakerEmotionOptions)(0));
                            this.ListenerEmotion = ((ListenerEmotionOptions)(0));
                            this.PlayerSkipFraction = 0;
                            this.SkipFraction = 0;
                            this.SampleLine = StringId.Zero;
                            this.Reponses = TagBlock.Zero;
                            this.Children = TagBlock.Zero;
                        }
                        public override void Read(BinaryReader reader)
                        {
                            this.Vocalization = reader.ReadInt32();
                            this.ParentVocalization = reader.ReadInt32();
                            this.ParentIndex = reader.ReadInt16();
                            this.Priority = ((PriorityOptions)(reader.ReadInt16()));
                            this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                            this.GlanceBehavior = ((GlanceBehaviorOptions)(reader.ReadInt16()));
                            this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(reader.ReadInt16()));
                            this.PerceptionType = ((PerceptionTypeOptions)(reader.ReadInt16()));
                            this.MaxCombatStatus = ((MaxCombatStatusOptions)(reader.ReadInt16()));
                            this.AnimationImpulse = ((AnimationImpulseOptions)(reader.ReadInt16()));
                            this.OverlapPriority = ((OverlapPriorityOptions)(reader.ReadInt16()));
                            this.SoundRepetitionDelay = reader.ReadSingle();
                            this.AllowableQueueDelay = reader.ReadSingle();
                            this.PreVocDelay = reader.ReadSingle();
                            this.NotificationDelay = reader.ReadSingle();
                            this.PostVocDelay = reader.ReadSingle();
                            this.RepeatDelay = reader.ReadSingle();
                            this.Weight = reader.ReadSingle();
                            this.SpeakerFreezeTime = reader.ReadSingle();
                            this.ListenerFreezeTime = reader.ReadSingle();
                            this.SpeakerEmotion = ((SpeakerEmotionOptions)(reader.ReadInt16()));
                            this.ListenerEmotion = ((ListenerEmotionOptions)(reader.ReadInt16()));
                            this.PlayerSkipFraction = reader.ReadSingle();
                            this.SkipFraction = reader.ReadSingle();
                            this.SampleLine = reader.ReadInt32();
                            this.Reponses = reader.ReadInt64();
                            this.reponsesList.Read(reader, this.Reponses);
                            this.Children = reader.ReadInt64();
                            this.childrenList.Read(reader, this.Children);
                        }
                        public override void Write(BinaryWriter writer)
                        {
                        }
                        [FieldSetAttribute(12, 4)]
                        public sealed class ResponseBlock : AbideTagBlock
                        {
                            [FieldAttribute("vocalization name", typeof(StringId))]
                            public StringId VocalizationName;
                            [FieldAttribute("flags", typeof(FlagsOptions))]
                            [OptionsAttribute(typeof(FlagsOptions), true)]
                            public FlagsOptions Flags;
                            [FieldAttribute("vocalization index (post process)*", typeof(Int16))]
                            public Int16 VocalizationIndexPostProcess;
                            [FieldAttribute("response type", typeof(ResponseTypeOptions))]
                            [OptionsAttribute(typeof(ResponseTypeOptions), false)]
                            public ResponseTypeOptions ResponseType;
                            [FieldAttribute("dialogue index (import)*", typeof(Int16))]
                            public Int16 DialogueIndexImport;
                            public override int Size
                            {
                                get
                                {
                                    return 12;
                                }
                            }
                            public override void Initialize()
                            {
                                this.VocalizationName = StringId.Zero;
                                this.Flags = ((FlagsOptions)(0));
                                this.VocalizationIndexPostProcess = 0;
                                this.ResponseType = ((ResponseTypeOptions)(0));
                                this.DialogueIndexImport = 0;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.VocalizationName = reader.ReadInt32();
                                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                                this.VocalizationIndexPostProcess = reader.ReadInt16();
                                this.ResponseType = ((ResponseTypeOptions)(reader.ReadInt16()));
                                this.DialogueIndexImport = reader.ReadInt16();
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            public enum FlagsOptions : Int16
                            {
                                Nonexclusive = 1,
                                TriggerResponse = 2,
                            }
                            public enum ResponseTypeOptions : Int16
                            {
                                Friend = 0,
                                Enemy = 1,
                                Listener = 2,
                                Joint = 3,
                                Peer = 4,
                            }
                        }
                        [FieldSetAttribute(104, 4)]
                        public sealed class VocalizationDefinitionsBlock4 : AbideTagBlock
                        {
                            private TagBlockList<ResponseBlock> reponsesList = new TagBlockList<ResponseBlock>(20);
                            private TagBlockList<VocalizationDefinitionsBlock5> childrenList = new TagBlockList<VocalizationDefinitionsBlock5>(500);
                            [FieldAttribute("vocalization^", typeof(StringId))]
                            public StringId Vocalization;
                            [FieldAttribute("parent vocalization", typeof(StringId))]
                            public StringId ParentVocalization;
                            [FieldAttribute("parent index*", typeof(Int16))]
                            public Int16 ParentIndex;
                            [FieldAttribute("priority", typeof(PriorityOptions))]
                            [OptionsAttribute(typeof(PriorityOptions), false)]
                            public PriorityOptions Priority;
                            [FieldAttribute("flags", typeof(FlagsOptions))]
                            [OptionsAttribute(typeof(FlagsOptions), true)]
                            public FlagsOptions Flags;
                            [FieldAttribute("glance behavior#how does the speaker of this vocalization direct his gaze?", typeof(GlanceBehaviorOptions))]
                            [OptionsAttribute(typeof(GlanceBehaviorOptions), false)]
                            public GlanceBehaviorOptions GlanceBehavior;
                            [FieldAttribute("glance recipient behavior#how does someone who hears me behave?", typeof(GlanceRecipientBehaviorOptions))]
                            [OptionsAttribute(typeof(GlanceRecipientBehaviorOptions), false)]
                            public GlanceRecipientBehaviorOptions GlanceRecipientBehavior;
                            [FieldAttribute("perception type", typeof(PerceptionTypeOptions))]
                            [OptionsAttribute(typeof(PerceptionTypeOptions), false)]
                            public PerceptionTypeOptions PerceptionType;
                            [FieldAttribute("max combat status", typeof(MaxCombatStatusOptions))]
                            [OptionsAttribute(typeof(MaxCombatStatusOptions), false)]
                            public MaxCombatStatusOptions MaxCombatStatus;
                            [FieldAttribute("animation impulse", typeof(AnimationImpulseOptions))]
                            [OptionsAttribute(typeof(AnimationImpulseOptions), false)]
                            public AnimationImpulseOptions AnimationImpulse;
                            [FieldAttribute("overlap priority", typeof(OverlapPriorityOptions))]
                            [OptionsAttribute(typeof(OverlapPriorityOptions), false)]
                            public OverlapPriorityOptions OverlapPriority;
                            [FieldAttribute("sound repetition delay:minutes#Minimum delay time between playing the same permut" +
                                "ation", typeof(Single))]
                            public Single SoundRepetitionDelay;
                            [FieldAttribute("allowable queue delay:seconds#How long to wait to actually start the vocalization" +
                                "", typeof(Single))]
                            public Single AllowableQueueDelay;
                            [FieldAttribute("pre voc. delay:seconds#How long to wait to actually start the vocalization", typeof(Single))]
                            public Single PreVocDelay;
                            [FieldAttribute("notification delay:seconds#How long into the vocalization the AI should be notifi" +
                                "ed", typeof(Single))]
                            public Single NotificationDelay;
                            [FieldAttribute("post voc. delay:seconds#How long speech is suppressed in the speaking unit after " +
                                "vocalizing", typeof(Single))]
                            public Single PostVocDelay;
                            [FieldAttribute("repeat delay:seconds#How long before the same vocalization can be repeated", typeof(Single))]
                            public Single RepeatDelay;
                            [FieldAttribute("weight:[0-1]#Inherent weight of this vocalization", typeof(Single))]
                            public Single Weight;
                            [FieldAttribute("speaker freeze time#speaker won\'t move for the given amount of time", typeof(Single))]
                            public Single SpeakerFreezeTime;
                            [FieldAttribute("listener freeze time#listener won\'t move for the given amount of time (from start" +
                                " of vocalization)", typeof(Single))]
                            public Single ListenerFreezeTime;
                            [FieldAttribute("speaker emotion", typeof(SpeakerEmotionOptions))]
                            [OptionsAttribute(typeof(SpeakerEmotionOptions), false)]
                            public SpeakerEmotionOptions SpeakerEmotion;
                            [FieldAttribute("listener emotion", typeof(ListenerEmotionOptions))]
                            [OptionsAttribute(typeof(ListenerEmotionOptions), false)]
                            public ListenerEmotionOptions ListenerEmotion;
                            [FieldAttribute("player skip fraction", typeof(Single))]
                            public Single PlayerSkipFraction;
                            [FieldAttribute("skip fraction", typeof(Single))]
                            public Single SkipFraction;
                            [FieldAttribute("Sample line", typeof(StringId))]
                            public StringId SampleLine;
                            [FieldAttribute("reponses", typeof(TagBlock))]
                            [BlockAttribute("response_block", 20, typeof(ResponseBlock))]
                            public TagBlock Reponses;
                            [FieldAttribute("children", typeof(TagBlock))]
                            [BlockAttribute("vocalization_definitions_block_5", 500, typeof(VocalizationDefinitionsBlock5))]
                            public TagBlock Children;
                            public TagBlockList<ResponseBlock> ReponsesList
                            {
                                get
                                {
                                    return this.reponsesList;
                                }
                            }
                            public TagBlockList<VocalizationDefinitionsBlock5> ChildrenList
                            {
                                get
                                {
                                    return this.childrenList;
                                }
                            }
                            public override int Size
                            {
                                get
                                {
                                    return 104;
                                }
                            }
                            public override void Initialize()
                            {
                                this.reponsesList.Clear();
                                this.childrenList.Clear();
                                this.Vocalization = StringId.Zero;
                                this.ParentVocalization = StringId.Zero;
                                this.ParentIndex = 0;
                                this.Priority = ((PriorityOptions)(0));
                                this.Flags = ((FlagsOptions)(0));
                                this.GlanceBehavior = ((GlanceBehaviorOptions)(0));
                                this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(0));
                                this.PerceptionType = ((PerceptionTypeOptions)(0));
                                this.MaxCombatStatus = ((MaxCombatStatusOptions)(0));
                                this.AnimationImpulse = ((AnimationImpulseOptions)(0));
                                this.OverlapPriority = ((OverlapPriorityOptions)(0));
                                this.SoundRepetitionDelay = 0;
                                this.AllowableQueueDelay = 0;
                                this.PreVocDelay = 0;
                                this.NotificationDelay = 0;
                                this.PostVocDelay = 0;
                                this.RepeatDelay = 0;
                                this.Weight = 0;
                                this.SpeakerFreezeTime = 0;
                                this.ListenerFreezeTime = 0;
                                this.SpeakerEmotion = ((SpeakerEmotionOptions)(0));
                                this.ListenerEmotion = ((ListenerEmotionOptions)(0));
                                this.PlayerSkipFraction = 0;
                                this.SkipFraction = 0;
                                this.SampleLine = StringId.Zero;
                                this.Reponses = TagBlock.Zero;
                                this.Children = TagBlock.Zero;
                            }
                            public override void Read(BinaryReader reader)
                            {
                                this.Vocalization = reader.ReadInt32();
                                this.ParentVocalization = reader.ReadInt32();
                                this.ParentIndex = reader.ReadInt16();
                                this.Priority = ((PriorityOptions)(reader.ReadInt16()));
                                this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                                this.GlanceBehavior = ((GlanceBehaviorOptions)(reader.ReadInt16()));
                                this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(reader.ReadInt16()));
                                this.PerceptionType = ((PerceptionTypeOptions)(reader.ReadInt16()));
                                this.MaxCombatStatus = ((MaxCombatStatusOptions)(reader.ReadInt16()));
                                this.AnimationImpulse = ((AnimationImpulseOptions)(reader.ReadInt16()));
                                this.OverlapPriority = ((OverlapPriorityOptions)(reader.ReadInt16()));
                                this.SoundRepetitionDelay = reader.ReadSingle();
                                this.AllowableQueueDelay = reader.ReadSingle();
                                this.PreVocDelay = reader.ReadSingle();
                                this.NotificationDelay = reader.ReadSingle();
                                this.PostVocDelay = reader.ReadSingle();
                                this.RepeatDelay = reader.ReadSingle();
                                this.Weight = reader.ReadSingle();
                                this.SpeakerFreezeTime = reader.ReadSingle();
                                this.ListenerFreezeTime = reader.ReadSingle();
                                this.SpeakerEmotion = ((SpeakerEmotionOptions)(reader.ReadInt16()));
                                this.ListenerEmotion = ((ListenerEmotionOptions)(reader.ReadInt16()));
                                this.PlayerSkipFraction = reader.ReadSingle();
                                this.SkipFraction = reader.ReadSingle();
                                this.SampleLine = reader.ReadInt32();
                                this.Reponses = reader.ReadInt64();
                                this.reponsesList.Read(reader, this.Reponses);
                                this.Children = reader.ReadInt64();
                                this.childrenList.Read(reader, this.Children);
                            }
                            public override void Write(BinaryWriter writer)
                            {
                            }
                            [FieldSetAttribute(12, 4)]
                            public sealed class ResponseBlock : AbideTagBlock
                            {
                                [FieldAttribute("vocalization name", typeof(StringId))]
                                public StringId VocalizationName;
                                [FieldAttribute("flags", typeof(FlagsOptions))]
                                [OptionsAttribute(typeof(FlagsOptions), true)]
                                public FlagsOptions Flags;
                                [FieldAttribute("vocalization index (post process)*", typeof(Int16))]
                                public Int16 VocalizationIndexPostProcess;
                                [FieldAttribute("response type", typeof(ResponseTypeOptions))]
                                [OptionsAttribute(typeof(ResponseTypeOptions), false)]
                                public ResponseTypeOptions ResponseType;
                                [FieldAttribute("dialogue index (import)*", typeof(Int16))]
                                public Int16 DialogueIndexImport;
                                public override int Size
                                {
                                    get
                                    {
                                        return 12;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.VocalizationName = StringId.Zero;
                                    this.Flags = ((FlagsOptions)(0));
                                    this.VocalizationIndexPostProcess = 0;
                                    this.ResponseType = ((ResponseTypeOptions)(0));
                                    this.DialogueIndexImport = 0;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.VocalizationName = reader.ReadInt32();
                                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                                    this.VocalizationIndexPostProcess = reader.ReadInt16();
                                    this.ResponseType = ((ResponseTypeOptions)(reader.ReadInt16()));
                                    this.DialogueIndexImport = reader.ReadInt16();
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                                public enum FlagsOptions : Int16
                                {
                                    Nonexclusive = 1,
                                    TriggerResponse = 2,
                                }
                                public enum ResponseTypeOptions : Int16
                                {
                                    Friend = 0,
                                    Enemy = 1,
                                    Listener = 2,
                                    Joint = 3,
                                    Peer = 4,
                                }
                            }
                            [FieldSetAttribute(104, 4)]
                            public sealed class VocalizationDefinitionsBlock5 : AbideTagBlock
                            {
                                private TagBlockList<ResponseBlock> reponsesList = new TagBlockList<ResponseBlock>(20);
                                private TagBlockList<GNullBlock> emptyStringList = new TagBlockList<GNullBlock>(0);
                                [FieldAttribute("vocalization^", typeof(StringId))]
                                public StringId Vocalization;
                                [FieldAttribute("parent vocalization", typeof(StringId))]
                                public StringId ParentVocalization;
                                [FieldAttribute("parent index*", typeof(Int16))]
                                public Int16 ParentIndex;
                                [FieldAttribute("priority", typeof(PriorityOptions))]
                                [OptionsAttribute(typeof(PriorityOptions), false)]
                                public PriorityOptions Priority;
                                [FieldAttribute("flags", typeof(FlagsOptions))]
                                [OptionsAttribute(typeof(FlagsOptions), true)]
                                public FlagsOptions Flags;
                                [FieldAttribute("glance behavior#how does the speaker of this vocalization direct his gaze?", typeof(GlanceBehaviorOptions))]
                                [OptionsAttribute(typeof(GlanceBehaviorOptions), false)]
                                public GlanceBehaviorOptions GlanceBehavior;
                                [FieldAttribute("glance recipient behavior#how does someone who hears me behave?", typeof(GlanceRecipientBehaviorOptions))]
                                [OptionsAttribute(typeof(GlanceRecipientBehaviorOptions), false)]
                                public GlanceRecipientBehaviorOptions GlanceRecipientBehavior;
                                [FieldAttribute("perception type", typeof(PerceptionTypeOptions))]
                                [OptionsAttribute(typeof(PerceptionTypeOptions), false)]
                                public PerceptionTypeOptions PerceptionType;
                                [FieldAttribute("max combat status", typeof(MaxCombatStatusOptions))]
                                [OptionsAttribute(typeof(MaxCombatStatusOptions), false)]
                                public MaxCombatStatusOptions MaxCombatStatus;
                                [FieldAttribute("animation impulse", typeof(AnimationImpulseOptions))]
                                [OptionsAttribute(typeof(AnimationImpulseOptions), false)]
                                public AnimationImpulseOptions AnimationImpulse;
                                [FieldAttribute("overlap priority", typeof(OverlapPriorityOptions))]
                                [OptionsAttribute(typeof(OverlapPriorityOptions), false)]
                                public OverlapPriorityOptions OverlapPriority;
                                [FieldAttribute("sound repetition delay:minutes#Minimum delay time between playing the same permut" +
                                    "ation", typeof(Single))]
                                public Single SoundRepetitionDelay;
                                [FieldAttribute("allowable queue delay:seconds#How long to wait to actually start the vocalization" +
                                    "", typeof(Single))]
                                public Single AllowableQueueDelay;
                                [FieldAttribute("pre voc. delay:seconds#How long to wait to actually start the vocalization", typeof(Single))]
                                public Single PreVocDelay;
                                [FieldAttribute("notification delay:seconds#How long into the vocalization the AI should be notifi" +
                                    "ed", typeof(Single))]
                                public Single NotificationDelay;
                                [FieldAttribute("post voc. delay:seconds#How long speech is suppressed in the speaking unit after " +
                                    "vocalizing", typeof(Single))]
                                public Single PostVocDelay;
                                [FieldAttribute("repeat delay:seconds#How long before the same vocalization can be repeated", typeof(Single))]
                                public Single RepeatDelay;
                                [FieldAttribute("weight:[0-1]#Inherent weight of this vocalization", typeof(Single))]
                                public Single Weight;
                                [FieldAttribute("speaker freeze time#speaker won\'t move for the given amount of time", typeof(Single))]
                                public Single SpeakerFreezeTime;
                                [FieldAttribute("listener freeze time#listener won\'t move for the given amount of time (from start" +
                                    " of vocalization)", typeof(Single))]
                                public Single ListenerFreezeTime;
                                [FieldAttribute("speaker emotion", typeof(SpeakerEmotionOptions))]
                                [OptionsAttribute(typeof(SpeakerEmotionOptions), false)]
                                public SpeakerEmotionOptions SpeakerEmotion;
                                [FieldAttribute("listener emotion", typeof(ListenerEmotionOptions))]
                                [OptionsAttribute(typeof(ListenerEmotionOptions), false)]
                                public ListenerEmotionOptions ListenerEmotion;
                                [FieldAttribute("player skip fraction", typeof(Single))]
                                public Single PlayerSkipFraction;
                                [FieldAttribute("skip fraction", typeof(Single))]
                                public Single SkipFraction;
                                [FieldAttribute("Sample line", typeof(StringId))]
                                public StringId SampleLine;
                                [FieldAttribute("reponses", typeof(TagBlock))]
                                [BlockAttribute("response_block", 20, typeof(ResponseBlock))]
                                public TagBlock Reponses;
                                [FieldAttribute("", typeof(TagBlock))]
                                [BlockAttribute("g_null_block", 0, typeof(GNullBlock))]
                                public TagBlock EmptyString;
                                public TagBlockList<ResponseBlock> ReponsesList
                                {
                                    get
                                    {
                                        return this.reponsesList;
                                    }
                                }
                                public TagBlockList<GNullBlock> EmptyStringList
                                {
                                    get
                                    {
                                        return this.emptyStringList;
                                    }
                                }
                                public override int Size
                                {
                                    get
                                    {
                                        return 104;
                                    }
                                }
                                public override void Initialize()
                                {
                                    this.reponsesList.Clear();
                                    this.emptyStringList.Clear();
                                    this.Vocalization = StringId.Zero;
                                    this.ParentVocalization = StringId.Zero;
                                    this.ParentIndex = 0;
                                    this.Priority = ((PriorityOptions)(0));
                                    this.Flags = ((FlagsOptions)(0));
                                    this.GlanceBehavior = ((GlanceBehaviorOptions)(0));
                                    this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(0));
                                    this.PerceptionType = ((PerceptionTypeOptions)(0));
                                    this.MaxCombatStatus = ((MaxCombatStatusOptions)(0));
                                    this.AnimationImpulse = ((AnimationImpulseOptions)(0));
                                    this.OverlapPriority = ((OverlapPriorityOptions)(0));
                                    this.SoundRepetitionDelay = 0;
                                    this.AllowableQueueDelay = 0;
                                    this.PreVocDelay = 0;
                                    this.NotificationDelay = 0;
                                    this.PostVocDelay = 0;
                                    this.RepeatDelay = 0;
                                    this.Weight = 0;
                                    this.SpeakerFreezeTime = 0;
                                    this.ListenerFreezeTime = 0;
                                    this.SpeakerEmotion = ((SpeakerEmotionOptions)(0));
                                    this.ListenerEmotion = ((ListenerEmotionOptions)(0));
                                    this.PlayerSkipFraction = 0;
                                    this.SkipFraction = 0;
                                    this.SampleLine = StringId.Zero;
                                    this.Reponses = TagBlock.Zero;
                                    this.EmptyString = TagBlock.Zero;
                                }
                                public override void Read(BinaryReader reader)
                                {
                                    this.Vocalization = reader.ReadInt32();
                                    this.ParentVocalization = reader.ReadInt32();
                                    this.ParentIndex = reader.ReadInt16();
                                    this.Priority = ((PriorityOptions)(reader.ReadInt16()));
                                    this.Flags = ((FlagsOptions)(reader.ReadInt32()));
                                    this.GlanceBehavior = ((GlanceBehaviorOptions)(reader.ReadInt16()));
                                    this.GlanceRecipientBehavior = ((GlanceRecipientBehaviorOptions)(reader.ReadInt16()));
                                    this.PerceptionType = ((PerceptionTypeOptions)(reader.ReadInt16()));
                                    this.MaxCombatStatus = ((MaxCombatStatusOptions)(reader.ReadInt16()));
                                    this.AnimationImpulse = ((AnimationImpulseOptions)(reader.ReadInt16()));
                                    this.OverlapPriority = ((OverlapPriorityOptions)(reader.ReadInt16()));
                                    this.SoundRepetitionDelay = reader.ReadSingle();
                                    this.AllowableQueueDelay = reader.ReadSingle();
                                    this.PreVocDelay = reader.ReadSingle();
                                    this.NotificationDelay = reader.ReadSingle();
                                    this.PostVocDelay = reader.ReadSingle();
                                    this.RepeatDelay = reader.ReadSingle();
                                    this.Weight = reader.ReadSingle();
                                    this.SpeakerFreezeTime = reader.ReadSingle();
                                    this.ListenerFreezeTime = reader.ReadSingle();
                                    this.SpeakerEmotion = ((SpeakerEmotionOptions)(reader.ReadInt16()));
                                    this.ListenerEmotion = ((ListenerEmotionOptions)(reader.ReadInt16()));
                                    this.PlayerSkipFraction = reader.ReadSingle();
                                    this.SkipFraction = reader.ReadSingle();
                                    this.SampleLine = reader.ReadInt32();
                                    this.Reponses = reader.ReadInt64();
                                    this.reponsesList.Read(reader, this.Reponses);
                                    this.EmptyString = reader.ReadInt64();
                                    this.emptyStringList.Read(reader, this.EmptyString);
                                }
                                public override void Write(BinaryWriter writer)
                                {
                                }
                                [FieldSetAttribute(12, 4)]
                                public sealed class ResponseBlock : AbideTagBlock
                                {
                                    [FieldAttribute("vocalization name", typeof(StringId))]
                                    public StringId VocalizationName;
                                    [FieldAttribute("flags", typeof(FlagsOptions))]
                                    [OptionsAttribute(typeof(FlagsOptions), true)]
                                    public FlagsOptions Flags;
                                    [FieldAttribute("vocalization index (post process)*", typeof(Int16))]
                                    public Int16 VocalizationIndexPostProcess;
                                    [FieldAttribute("response type", typeof(ResponseTypeOptions))]
                                    [OptionsAttribute(typeof(ResponseTypeOptions), false)]
                                    public ResponseTypeOptions ResponseType;
                                    [FieldAttribute("dialogue index (import)*", typeof(Int16))]
                                    public Int16 DialogueIndexImport;
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 12;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                        this.VocalizationName = StringId.Zero;
                                        this.Flags = ((FlagsOptions)(0));
                                        this.VocalizationIndexPostProcess = 0;
                                        this.ResponseType = ((ResponseTypeOptions)(0));
                                        this.DialogueIndexImport = 0;
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                        this.VocalizationName = reader.ReadInt32();
                                        this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                                        this.VocalizationIndexPostProcess = reader.ReadInt16();
                                        this.ResponseType = ((ResponseTypeOptions)(reader.ReadInt16()));
                                        this.DialogueIndexImport = reader.ReadInt16();
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                    public enum FlagsOptions : Int16
                                    {
                                        Nonexclusive = 1,
                                        TriggerResponse = 2,
                                    }
                                    public enum ResponseTypeOptions : Int16
                                    {
                                        Friend = 0,
                                        Enemy = 1,
                                        Listener = 2,
                                        Joint = 3,
                                        Peer = 4,
                                    }
                                }
                                [FieldSetAttribute(0, 4)]
                                public sealed class GNullBlock : AbideTagBlock
                                {
                                    public override int Size
                                    {
                                        get
                                        {
                                            return 0;
                                        }
                                    }
                                    public override void Initialize()
                                    {
                                    }
                                    public override void Read(BinaryReader reader)
                                    {
                                    }
                                    public override void Write(BinaryWriter writer)
                                    {
                                    }
                                }
                                public enum PriorityOptions : Int16
                                {
                                    None = 0,
                                    Recall = 1,
                                    Idle = 2,
                                    Comment = 3,
                                    IdleResponse = 4,
                                    Postcombat = 5,
                                    Combat = 6,
                                    Status = 7,
                                    Respond = 8,
                                    Warn = 9,
                                    Act = 10,
                                    React = 11,
                                    Involuntary = 12,
                                    Scream = 13,
                                    Scripted = 14,
                                    Death = 15,
                                }
                                public enum FlagsOptions : Int32
                                {
                                    Immediate = 1,
                                    Interrupt = 2,
                                    CancelLowPriority = 4,
                                }
                                public enum GlanceBehaviorOptions : Int16
                                {
                                    None = 0,
                                    GlanceSubjectShort = 1,
                                    GlanceSubjectLong = 2,
                                    GlanceCauseShort = 3,
                                    GlanceCauseLong = 4,
                                    GlanceFriendShort = 5,
                                    GlanceFriendLong = 6,
                                }
                                public enum GlanceRecipientBehaviorOptions : Int16
                                {
                                    None = 0,
                                    GlanceSubjectShort = 1,
                                    GlanceSubjectLong = 2,
                                    GlanceCauseShort = 3,
                                    GlanceCauseLong = 4,
                                    GlanceFriendShort = 5,
                                    GlanceFriendLong = 6,
                                }
                                public enum PerceptionTypeOptions : Int16
                                {
                                    None = 0,
                                    Speaker = 1,
                                    Listener = 2,
                                }
                                public enum MaxCombatStatusOptions : Int16
                                {
                                    Asleep = 0,
                                    Idle = 1,
                                    Alert = 2,
                                    Active = 3,
                                    Uninspected = 4,
                                    Definite = 5,
                                    Certain = 6,
                                    Visible = 7,
                                    ClearLos = 8,
                                    Dangerous = 9,
                                }
                                public enum AnimationImpulseOptions : Int16
                                {
                                    None = 0,
                                    Shakefist = 1,
                                    Cheer = 2,
                                    SurpriseFront = 3,
                                    SurpriseBack = 4,
                                    Taunt = 5,
                                    Brace = 6,
                                    Point = 7,
                                    Hold = 8,
                                    Wave = 9,
                                    Advance = 10,
                                    Fallback = 11,
                                }
                                public enum OverlapPriorityOptions : Int16
                                {
                                    None = 0,
                                    Recall = 1,
                                    Idle = 2,
                                    Comment = 3,
                                    IdleResponse = 4,
                                    Postcombat = 5,
                                    Combat = 6,
                                    Status = 7,
                                    Respond = 8,
                                    Warn = 9,
                                    Act = 10,
                                    React = 11,
                                    Involuntary = 12,
                                    Scream = 13,
                                    Scripted = 14,
                                    Death = 15,
                                }
                                public enum SpeakerEmotionOptions : Int16
                                {
                                    None = 0,
                                    Asleep = 1,
                                    Amorous = 2,
                                    Happy = 3,
                                    Inquisitive = 4,
                                    Repulsed = 5,
                                    Disappointed = 6,
                                    Shocked = 7,
                                    Scared = 8,
                                    Arrogant = 9,
                                    Annoyed = 10,
                                    Angry = 11,
                                    Pensive = 12,
                                    Pain = 13,
                                }
                                public enum ListenerEmotionOptions : Int16
                                {
                                    None = 0,
                                    Asleep = 1,
                                    Amorous = 2,
                                    Happy = 3,
                                    Inquisitive = 4,
                                    Repulsed = 5,
                                    Disappointed = 6,
                                    Shocked = 7,
                                    Scared = 8,
                                    Arrogant = 9,
                                    Annoyed = 10,
                                    Angry = 11,
                                    Pensive = 12,
                                    Pain = 13,
                                }
                            }
                            public enum PriorityOptions : Int16
                            {
                                None = 0,
                                Recall = 1,
                                Idle = 2,
                                Comment = 3,
                                IdleResponse = 4,
                                Postcombat = 5,
                                Combat = 6,
                                Status = 7,
                                Respond = 8,
                                Warn = 9,
                                Act = 10,
                                React = 11,
                                Involuntary = 12,
                                Scream = 13,
                                Scripted = 14,
                                Death = 15,
                            }
                            public enum FlagsOptions : Int32
                            {
                                Immediate = 1,
                                Interrupt = 2,
                                CancelLowPriority = 4,
                            }
                            public enum GlanceBehaviorOptions : Int16
                            {
                                None = 0,
                                GlanceSubjectShort = 1,
                                GlanceSubjectLong = 2,
                                GlanceCauseShort = 3,
                                GlanceCauseLong = 4,
                                GlanceFriendShort = 5,
                                GlanceFriendLong = 6,
                            }
                            public enum GlanceRecipientBehaviorOptions : Int16
                            {
                                None = 0,
                                GlanceSubjectShort = 1,
                                GlanceSubjectLong = 2,
                                GlanceCauseShort = 3,
                                GlanceCauseLong = 4,
                                GlanceFriendShort = 5,
                                GlanceFriendLong = 6,
                            }
                            public enum PerceptionTypeOptions : Int16
                            {
                                None = 0,
                                Speaker = 1,
                                Listener = 2,
                            }
                            public enum MaxCombatStatusOptions : Int16
                            {
                                Asleep = 0,
                                Idle = 1,
                                Alert = 2,
                                Active = 3,
                                Uninspected = 4,
                                Definite = 5,
                                Certain = 6,
                                Visible = 7,
                                ClearLos = 8,
                                Dangerous = 9,
                            }
                            public enum AnimationImpulseOptions : Int16
                            {
                                None = 0,
                                Shakefist = 1,
                                Cheer = 2,
                                SurpriseFront = 3,
                                SurpriseBack = 4,
                                Taunt = 5,
                                Brace = 6,
                                Point = 7,
                                Hold = 8,
                                Wave = 9,
                                Advance = 10,
                                Fallback = 11,
                            }
                            public enum OverlapPriorityOptions : Int16
                            {
                                None = 0,
                                Recall = 1,
                                Idle = 2,
                                Comment = 3,
                                IdleResponse = 4,
                                Postcombat = 5,
                                Combat = 6,
                                Status = 7,
                                Respond = 8,
                                Warn = 9,
                                Act = 10,
                                React = 11,
                                Involuntary = 12,
                                Scream = 13,
                                Scripted = 14,
                                Death = 15,
                            }
                            public enum SpeakerEmotionOptions : Int16
                            {
                                None = 0,
                                Asleep = 1,
                                Amorous = 2,
                                Happy = 3,
                                Inquisitive = 4,
                                Repulsed = 5,
                                Disappointed = 6,
                                Shocked = 7,
                                Scared = 8,
                                Arrogant = 9,
                                Annoyed = 10,
                                Angry = 11,
                                Pensive = 12,
                                Pain = 13,
                            }
                            public enum ListenerEmotionOptions : Int16
                            {
                                None = 0,
                                Asleep = 1,
                                Amorous = 2,
                                Happy = 3,
                                Inquisitive = 4,
                                Repulsed = 5,
                                Disappointed = 6,
                                Shocked = 7,
                                Scared = 8,
                                Arrogant = 9,
                                Annoyed = 10,
                                Angry = 11,
                                Pensive = 12,
                                Pain = 13,
                            }
                        }
                        public enum PriorityOptions : Int16
                        {
                            None = 0,
                            Recall = 1,
                            Idle = 2,
                            Comment = 3,
                            IdleResponse = 4,
                            Postcombat = 5,
                            Combat = 6,
                            Status = 7,
                            Respond = 8,
                            Warn = 9,
                            Act = 10,
                            React = 11,
                            Involuntary = 12,
                            Scream = 13,
                            Scripted = 14,
                            Death = 15,
                        }
                        public enum FlagsOptions : Int32
                        {
                            Immediate = 1,
                            Interrupt = 2,
                            CancelLowPriority = 4,
                        }
                        public enum GlanceBehaviorOptions : Int16
                        {
                            None = 0,
                            GlanceSubjectShort = 1,
                            GlanceSubjectLong = 2,
                            GlanceCauseShort = 3,
                            GlanceCauseLong = 4,
                            GlanceFriendShort = 5,
                            GlanceFriendLong = 6,
                        }
                        public enum GlanceRecipientBehaviorOptions : Int16
                        {
                            None = 0,
                            GlanceSubjectShort = 1,
                            GlanceSubjectLong = 2,
                            GlanceCauseShort = 3,
                            GlanceCauseLong = 4,
                            GlanceFriendShort = 5,
                            GlanceFriendLong = 6,
                        }
                        public enum PerceptionTypeOptions : Int16
                        {
                            None = 0,
                            Speaker = 1,
                            Listener = 2,
                        }
                        public enum MaxCombatStatusOptions : Int16
                        {
                            Asleep = 0,
                            Idle = 1,
                            Alert = 2,
                            Active = 3,
                            Uninspected = 4,
                            Definite = 5,
                            Certain = 6,
                            Visible = 7,
                            ClearLos = 8,
                            Dangerous = 9,
                        }
                        public enum AnimationImpulseOptions : Int16
                        {
                            None = 0,
                            Shakefist = 1,
                            Cheer = 2,
                            SurpriseFront = 3,
                            SurpriseBack = 4,
                            Taunt = 5,
                            Brace = 6,
                            Point = 7,
                            Hold = 8,
                            Wave = 9,
                            Advance = 10,
                            Fallback = 11,
                        }
                        public enum OverlapPriorityOptions : Int16
                        {
                            None = 0,
                            Recall = 1,
                            Idle = 2,
                            Comment = 3,
                            IdleResponse = 4,
                            Postcombat = 5,
                            Combat = 6,
                            Status = 7,
                            Respond = 8,
                            Warn = 9,
                            Act = 10,
                            React = 11,
                            Involuntary = 12,
                            Scream = 13,
                            Scripted = 14,
                            Death = 15,
                        }
                        public enum SpeakerEmotionOptions : Int16
                        {
                            None = 0,
                            Asleep = 1,
                            Amorous = 2,
                            Happy = 3,
                            Inquisitive = 4,
                            Repulsed = 5,
                            Disappointed = 6,
                            Shocked = 7,
                            Scared = 8,
                            Arrogant = 9,
                            Annoyed = 10,
                            Angry = 11,
                            Pensive = 12,
                            Pain = 13,
                        }
                        public enum ListenerEmotionOptions : Int16
                        {
                            None = 0,
                            Asleep = 1,
                            Amorous = 2,
                            Happy = 3,
                            Inquisitive = 4,
                            Repulsed = 5,
                            Disappointed = 6,
                            Shocked = 7,
                            Scared = 8,
                            Arrogant = 9,
                            Annoyed = 10,
                            Angry = 11,
                            Pensive = 12,
                            Pain = 13,
                        }
                    }
                    public enum PriorityOptions : Int16
                    {
                        None = 0,
                        Recall = 1,
                        Idle = 2,
                        Comment = 3,
                        IdleResponse = 4,
                        Postcombat = 5,
                        Combat = 6,
                        Status = 7,
                        Respond = 8,
                        Warn = 9,
                        Act = 10,
                        React = 11,
                        Involuntary = 12,
                        Scream = 13,
                        Scripted = 14,
                        Death = 15,
                    }
                    public enum FlagsOptions : Int32
                    {
                        Immediate = 1,
                        Interrupt = 2,
                        CancelLowPriority = 4,
                    }
                    public enum GlanceBehaviorOptions : Int16
                    {
                        None = 0,
                        GlanceSubjectShort = 1,
                        GlanceSubjectLong = 2,
                        GlanceCauseShort = 3,
                        GlanceCauseLong = 4,
                        GlanceFriendShort = 5,
                        GlanceFriendLong = 6,
                    }
                    public enum GlanceRecipientBehaviorOptions : Int16
                    {
                        None = 0,
                        GlanceSubjectShort = 1,
                        GlanceSubjectLong = 2,
                        GlanceCauseShort = 3,
                        GlanceCauseLong = 4,
                        GlanceFriendShort = 5,
                        GlanceFriendLong = 6,
                    }
                    public enum PerceptionTypeOptions : Int16
                    {
                        None = 0,
                        Speaker = 1,
                        Listener = 2,
                    }
                    public enum MaxCombatStatusOptions : Int16
                    {
                        Asleep = 0,
                        Idle = 1,
                        Alert = 2,
                        Active = 3,
                        Uninspected = 4,
                        Definite = 5,
                        Certain = 6,
                        Visible = 7,
                        ClearLos = 8,
                        Dangerous = 9,
                    }
                    public enum AnimationImpulseOptions : Int16
                    {
                        None = 0,
                        Shakefist = 1,
                        Cheer = 2,
                        SurpriseFront = 3,
                        SurpriseBack = 4,
                        Taunt = 5,
                        Brace = 6,
                        Point = 7,
                        Hold = 8,
                        Wave = 9,
                        Advance = 10,
                        Fallback = 11,
                    }
                    public enum OverlapPriorityOptions : Int16
                    {
                        None = 0,
                        Recall = 1,
                        Idle = 2,
                        Comment = 3,
                        IdleResponse = 4,
                        Postcombat = 5,
                        Combat = 6,
                        Status = 7,
                        Respond = 8,
                        Warn = 9,
                        Act = 10,
                        React = 11,
                        Involuntary = 12,
                        Scream = 13,
                        Scripted = 14,
                        Death = 15,
                    }
                    public enum SpeakerEmotionOptions : Int16
                    {
                        None = 0,
                        Asleep = 1,
                        Amorous = 2,
                        Happy = 3,
                        Inquisitive = 4,
                        Repulsed = 5,
                        Disappointed = 6,
                        Shocked = 7,
                        Scared = 8,
                        Arrogant = 9,
                        Annoyed = 10,
                        Angry = 11,
                        Pensive = 12,
                        Pain = 13,
                    }
                    public enum ListenerEmotionOptions : Int16
                    {
                        None = 0,
                        Asleep = 1,
                        Amorous = 2,
                        Happy = 3,
                        Inquisitive = 4,
                        Repulsed = 5,
                        Disappointed = 6,
                        Shocked = 7,
                        Scared = 8,
                        Arrogant = 9,
                        Annoyed = 10,
                        Angry = 11,
                        Pensive = 12,
                        Pain = 13,
                    }
                }
                public enum PriorityOptions : Int16
                {
                    None = 0,
                    Recall = 1,
                    Idle = 2,
                    Comment = 3,
                    IdleResponse = 4,
                    Postcombat = 5,
                    Combat = 6,
                    Status = 7,
                    Respond = 8,
                    Warn = 9,
                    Act = 10,
                    React = 11,
                    Involuntary = 12,
                    Scream = 13,
                    Scripted = 14,
                    Death = 15,
                }
                public enum FlagsOptions : Int32
                {
                    Immediate = 1,
                    Interrupt = 2,
                    CancelLowPriority = 4,
                }
                public enum GlanceBehaviorOptions : Int16
                {
                    None = 0,
                    GlanceSubjectShort = 1,
                    GlanceSubjectLong = 2,
                    GlanceCauseShort = 3,
                    GlanceCauseLong = 4,
                    GlanceFriendShort = 5,
                    GlanceFriendLong = 6,
                }
                public enum GlanceRecipientBehaviorOptions : Int16
                {
                    None = 0,
                    GlanceSubjectShort = 1,
                    GlanceSubjectLong = 2,
                    GlanceCauseShort = 3,
                    GlanceCauseLong = 4,
                    GlanceFriendShort = 5,
                    GlanceFriendLong = 6,
                }
                public enum PerceptionTypeOptions : Int16
                {
                    None = 0,
                    Speaker = 1,
                    Listener = 2,
                }
                public enum MaxCombatStatusOptions : Int16
                {
                    Asleep = 0,
                    Idle = 1,
                    Alert = 2,
                    Active = 3,
                    Uninspected = 4,
                    Definite = 5,
                    Certain = 6,
                    Visible = 7,
                    ClearLos = 8,
                    Dangerous = 9,
                }
                public enum AnimationImpulseOptions : Int16
                {
                    None = 0,
                    Shakefist = 1,
                    Cheer = 2,
                    SurpriseFront = 3,
                    SurpriseBack = 4,
                    Taunt = 5,
                    Brace = 6,
                    Point = 7,
                    Hold = 8,
                    Wave = 9,
                    Advance = 10,
                    Fallback = 11,
                }
                public enum OverlapPriorityOptions : Int16
                {
                    None = 0,
                    Recall = 1,
                    Idle = 2,
                    Comment = 3,
                    IdleResponse = 4,
                    Postcombat = 5,
                    Combat = 6,
                    Status = 7,
                    Respond = 8,
                    Warn = 9,
                    Act = 10,
                    React = 11,
                    Involuntary = 12,
                    Scream = 13,
                    Scripted = 14,
                    Death = 15,
                }
                public enum SpeakerEmotionOptions : Int16
                {
                    None = 0,
                    Asleep = 1,
                    Amorous = 2,
                    Happy = 3,
                    Inquisitive = 4,
                    Repulsed = 5,
                    Disappointed = 6,
                    Shocked = 7,
                    Scared = 8,
                    Arrogant = 9,
                    Annoyed = 10,
                    Angry = 11,
                    Pensive = 12,
                    Pain = 13,
                }
                public enum ListenerEmotionOptions : Int16
                {
                    None = 0,
                    Asleep = 1,
                    Amorous = 2,
                    Happy = 3,
                    Inquisitive = 4,
                    Repulsed = 5,
                    Disappointed = 6,
                    Shocked = 7,
                    Scared = 8,
                    Arrogant = 9,
                    Annoyed = 10,
                    Angry = 11,
                    Pensive = 12,
                    Pain = 13,
                }
            }
            public enum PriorityOptions : Int16
            {
                None = 0,
                Recall = 1,
                Idle = 2,
                Comment = 3,
                IdleResponse = 4,
                Postcombat = 5,
                Combat = 6,
                Status = 7,
                Respond = 8,
                Warn = 9,
                Act = 10,
                React = 11,
                Involuntary = 12,
                Scream = 13,
                Scripted = 14,
                Death = 15,
            }
            public enum FlagsOptions : Int32
            {
                Immediate = 1,
                Interrupt = 2,
                CancelLowPriority = 4,
            }
            public enum GlanceBehaviorOptions : Int16
            {
                None = 0,
                GlanceSubjectShort = 1,
                GlanceSubjectLong = 2,
                GlanceCauseShort = 3,
                GlanceCauseLong = 4,
                GlanceFriendShort = 5,
                GlanceFriendLong = 6,
            }
            public enum GlanceRecipientBehaviorOptions : Int16
            {
                None = 0,
                GlanceSubjectShort = 1,
                GlanceSubjectLong = 2,
                GlanceCauseShort = 3,
                GlanceCauseLong = 4,
                GlanceFriendShort = 5,
                GlanceFriendLong = 6,
            }
            public enum PerceptionTypeOptions : Int16
            {
                None = 0,
                Speaker = 1,
                Listener = 2,
            }
            public enum MaxCombatStatusOptions : Int16
            {
                Asleep = 0,
                Idle = 1,
                Alert = 2,
                Active = 3,
                Uninspected = 4,
                Definite = 5,
                Certain = 6,
                Visible = 7,
                ClearLos = 8,
                Dangerous = 9,
            }
            public enum AnimationImpulseOptions : Int16
            {
                None = 0,
                Shakefist = 1,
                Cheer = 2,
                SurpriseFront = 3,
                SurpriseBack = 4,
                Taunt = 5,
                Brace = 6,
                Point = 7,
                Hold = 8,
                Wave = 9,
                Advance = 10,
                Fallback = 11,
            }
            public enum OverlapPriorityOptions : Int16
            {
                None = 0,
                Recall = 1,
                Idle = 2,
                Comment = 3,
                IdleResponse = 4,
                Postcombat = 5,
                Combat = 6,
                Status = 7,
                Respond = 8,
                Warn = 9,
                Act = 10,
                React = 11,
                Involuntary = 12,
                Scream = 13,
                Scripted = 14,
                Death = 15,
            }
            public enum SpeakerEmotionOptions : Int16
            {
                None = 0,
                Asleep = 1,
                Amorous = 2,
                Happy = 3,
                Inquisitive = 4,
                Repulsed = 5,
                Disappointed = 6,
                Shocked = 7,
                Scared = 8,
                Arrogant = 9,
                Annoyed = 10,
                Angry = 11,
                Pensive = 12,
                Pain = 13,
            }
            public enum ListenerEmotionOptions : Int16
            {
                None = 0,
                Asleep = 1,
                Amorous = 2,
                Happy = 3,
                Inquisitive = 4,
                Repulsed = 5,
                Disappointed = 6,
                Shocked = 7,
                Scared = 8,
                Arrogant = 9,
                Annoyed = 10,
                Angry = 11,
                Pensive = 12,
                Pain = 13,
            }
        }
        [FieldSetAttribute(64, 4)]
        public sealed class VocalizationPatternsBlock : AbideTagBlock
        {
            [FieldAttribute("dialogue type", typeof(DialogueTypeOptions))]
            [OptionsAttribute(typeof(DialogueTypeOptions), false)]
            public DialogueTypeOptions DialogueType;
            [FieldAttribute("vocalization index", typeof(Int16))]
            public Int16 VocalizationIndex;
            [FieldAttribute("vocalization name", typeof(StringId))]
            public StringId VocalizationName;
            [FieldAttribute("speaker type", typeof(SpeakerTypeOptions))]
            [OptionsAttribute(typeof(SpeakerTypeOptions), false)]
            public SpeakerTypeOptions SpeakerType;
            [FieldAttribute("flags", typeof(FlagsOptions))]
            [OptionsAttribute(typeof(FlagsOptions), true)]
            public FlagsOptions Flags;
            [FieldAttribute("listener/target#who/what am I speaking to/of?", typeof(ListenertargetOptions))]
            [OptionsAttribute(typeof(ListenertargetOptions), false)]
            public ListenertargetOptions Listenertarget;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("hostility#The relationship between the subject and the cause", typeof(HostilityOptions))]
            [OptionsAttribute(typeof(HostilityOptions), false)]
            public HostilityOptions Hostility;
            [FieldAttribute("damage type", typeof(DamageTypeOptions))]
            [OptionsAttribute(typeof(DamageTypeOptions), false)]
            public DamageTypeOptions DamageType;
            [FieldAttribute("danger level#Speaker must have danger level of at least this much", typeof(DangerLevelOptions))]
            [OptionsAttribute(typeof(DangerLevelOptions), false)]
            public DangerLevelOptions DangerLevel;
            [FieldAttribute("attitude", typeof(AttitudeOptions))]
            [OptionsAttribute(typeof(AttitudeOptions), false)]
            public AttitudeOptions Attitude;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("subject actor type", typeof(SubjectActorTypeOptions))]
            [OptionsAttribute(typeof(SubjectActorTypeOptions), false)]
            public SubjectActorTypeOptions SubjectActorType;
            [FieldAttribute("cause actor type", typeof(CauseActorTypeOptions))]
            [OptionsAttribute(typeof(CauseActorTypeOptions), false)]
            public CauseActorTypeOptions CauseActorType;
            [FieldAttribute("cause type", typeof(CauseTypeOptions))]
            [OptionsAttribute(typeof(CauseTypeOptions), false)]
            public CauseTypeOptions CauseType;
            [FieldAttribute("subject type", typeof(SubjectTypeOptions))]
            [OptionsAttribute(typeof(SubjectTypeOptions), false)]
            public SubjectTypeOptions SubjectType;
            [FieldAttribute("cause ai type name", typeof(StringId))]
            public StringId CauseAiTypeName;
            [FieldAttribute("spatial relation#with respect to the subject, the cause is ...", typeof(SpatialRelationOptions))]
            [OptionsAttribute(typeof(SpatialRelationOptions), false)]
            public SpatialRelationOptions SpatialRelation;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString3;
            [FieldAttribute("subject ai type name", typeof(StringId))]
            public StringId SubjectAiTypeName;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString4;
            [FieldAttribute("Conditions", typeof(ConditionsOptions))]
            [OptionsAttribute(typeof(ConditionsOptions), true)]
            public ConditionsOptions Conditions;
            public override int Size
            {
                get
                {
                    return 64;
                }
            }
            public override void Initialize()
            {
                this.DialogueType = ((DialogueTypeOptions)(0));
                this.VocalizationIndex = 0;
                this.VocalizationName = StringId.Zero;
                this.SpeakerType = ((SpeakerTypeOptions)(0));
                this.Flags = ((FlagsOptions)(0));
                this.Listenertarget = ((ListenertargetOptions)(0));
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[4];
                this.Hostility = ((HostilityOptions)(0));
                this.DamageType = ((DamageTypeOptions)(0));
                this.DangerLevel = ((DangerLevelOptions)(0));
                this.Attitude = ((AttitudeOptions)(0));
                this.EmptyString2 = new byte[4];
                this.SubjectActorType = ((SubjectActorTypeOptions)(0));
                this.CauseActorType = ((CauseActorTypeOptions)(0));
                this.CauseType = ((CauseTypeOptions)(0));
                this.SubjectType = ((SubjectTypeOptions)(0));
                this.CauseAiTypeName = StringId.Zero;
                this.SpatialRelation = ((SpatialRelationOptions)(0));
                this.EmptyString3 = new byte[2];
                this.SubjectAiTypeName = StringId.Zero;
                this.EmptyString4 = new byte[8];
                this.Conditions = ((ConditionsOptions)(0));
            }
            public override void Read(BinaryReader reader)
            {
                this.DialogueType = ((DialogueTypeOptions)(reader.ReadInt16()));
                this.VocalizationIndex = reader.ReadInt16();
                this.VocalizationName = reader.ReadInt32();
                this.SpeakerType = ((SpeakerTypeOptions)(reader.ReadInt16()));
                this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                this.Listenertarget = ((ListenertargetOptions)(reader.ReadInt16()));
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(4);
                this.Hostility = ((HostilityOptions)(reader.ReadInt16()));
                this.DamageType = ((DamageTypeOptions)(reader.ReadInt16()));
                this.DangerLevel = ((DangerLevelOptions)(reader.ReadInt16()));
                this.Attitude = ((AttitudeOptions)(reader.ReadInt16()));
                this.EmptyString2 = reader.ReadBytes(4);
                this.SubjectActorType = ((SubjectActorTypeOptions)(reader.ReadInt16()));
                this.CauseActorType = ((CauseActorTypeOptions)(reader.ReadInt16()));
                this.CauseType = ((CauseTypeOptions)(reader.ReadInt16()));
                this.SubjectType = ((SubjectTypeOptions)(reader.ReadInt16()));
                this.CauseAiTypeName = reader.ReadInt32();
                this.SpatialRelation = ((SpatialRelationOptions)(reader.ReadInt16()));
                this.EmptyString3 = reader.ReadBytes(2);
                this.SubjectAiTypeName = reader.ReadInt32();
                this.EmptyString4 = reader.ReadBytes(8);
                this.Conditions = ((ConditionsOptions)(reader.ReadInt32()));
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum DialogueTypeOptions : Int16
            {
                Death = 0,
                Unused = 1,
                Unused1 = 2,
                Damage = 3,
                DamageUnused1 = 4,
                DamageUnused2 = 5,
                SightedNew = 6,
                SightedNewMajor = 7,
                Unused2 = 8,
                SightedOld = 9,
                SightedFirst = 10,
                SightedSpecial = 11,
                Unused3 = 12,
                HeardNew = 13,
                Unused4 = 14,
                HeardOld = 15,
                Unused5 = 16,
                Unused6 = 17,
                Unused7 = 18,
                AcknowledgeMultiple = 19,
                Unused8 = 20,
                Unused9 = 21,
                Unused10 = 22,
                FoundUnit = 23,
                FoundUnitPresearch = 24,
                FoundUnitPursuit = 25,
                FoundUnitSelfPreserving = 26,
                FoundUnitRetreating = 27,
                ThrowingGrenade = 28,
                NoticedGrenade = 29,
                Fighting = 30,
                Charging = 31,
                SuppressingFire = 32,
                GrenadeUncover = 33,
                Unused11 = 34,
                Unused12 = 35,
                Dive = 36,
                Evade = 37,
                Avoid = 38,
                Surprised = 39,
                Unused13 = 40,
                Unused14 = 41,
                Presearch = 42,
                PresearchStart = 43,
                Search = 44,
                SearchStart = 45,
                InvestigateFailed = 46,
                UncoverFailed = 47,
                PursuitFailed = 48,
                InvestigateStart = 49,
                AbandonedSearchSpace = 50,
                AbandonedSearchTime = 51,
                PresearchFailed = 52,
                AbandonedSearchRestricted = 53,
                InvestigatePursuitStart = 54,
                PostcombatInspectBody = 55,
                VehicleSlowDown = 56,
                VehicleGetIn = 57,
                Idle = 58,
                Taunt = 59,
                TauntReply = 60,
                Retreat = 61,
                RetreatFromScaryTarget = 62,
                RetreatFromDeadLeader = 63,
                RetreatFromProximity = 64,
                RetreatFromLowShield = 65,
                Flee = 66,
                Cowering = 67,
                Unused15 = 68,
                Unused16 = 69,
                Unused17 = 70,
                Cover = 71,
                Covered = 72,
                Unused18 = 73,
                Unused19 = 74,
                Unused20 = 75,
                PursuitStart = 76,
                PursuitSyncStart = 77,
                PursuitSyncJoin = 78,
                PursuitSyncQuorum = 79,
                Melee = 80,
                Unused21 = 81,
                Unused22 = 82,
                Unused23 = 83,
                VehicleFalling = 84,
                VehicleWoohoo = 85,
                VehicleScared = 86,
                VehicleCrazy = 87,
                Unused24 = 88,
                Unused25 = 89,
                Leap = 90,
                Unused26 = 91,
                Unused27 = 92,
                PostcombatWin = 93,
                PostcombatLose = 94,
                PostcombatNeutral = 95,
                ShootCorpse = 96,
                PostcombatStart = 97,
                InspectBodyStart = 98,
                PostcombatStatus = 99,
                Unused28 = 100,
                VehicleEntryStartDriver = 101,
                VehicleEnter = 102,
                VehicleEntryStartGun = 103,
                VehicleEntryStartPassenger = 104,
                VehicleExit = 105,
                EvictDriver = 106,
                EvictGunner = 107,
                EvictPassenger = 108,
                Unused29 = 109,
                Unused30 = 110,
                NewOrderAdvance = 111,
                NewOrderCharge = 112,
                NewOrderFallback = 113,
                NewOrderRetreat = 114,
                NewOrderMoveon = 115,
                NewOrderArrival = 116,
                NewOrderEntervcl = 117,
                NewOrderExitvcl = 118,
                NewOrderFllplr = 119,
                NewOrderLeaveplr = 120,
                NewOrderSupport = 121,
                Unused31 = 122,
                Unused32 = 123,
                Unused33 = 124,
                Unused34 = 125,
                Unused35 = 126,
                Unused36 = 127,
                Unused37 = 128,
                Unused38 = 129,
                Unused39 = 130,
                Unused40 = 131,
                Unused41 = 132,
                Unused42 = 133,
                Emerge = 134,
                Unused43 = 135,
                Unused44 = 136,
                Unused45 = 137,
                Curse = 138,
                Unused46 = 139,
                Unused47 = 140,
                Unused48 = 141,
                Threaten = 142,
                Unused49 = 143,
                Unused50 = 144,
                Unused51 = 145,
                CoverFriend = 146,
                Unused52 = 147,
                Unused53 = 148,
                Unused54 = 149,
                Strike = 150,
                Unused55 = 151,
                Unused56 = 152,
                Unused57 = 153,
                Unused58 = 154,
                Unused59 = 155,
                Unused60 = 156,
                Unused61 = 157,
                Unused62 = 158,
                Gloat = 159,
                Unused63 = 160,
                Unused64 = 161,
                Unused65 = 162,
                Greet = 163,
                Unused66 = 164,
                Unused67 = 165,
                Unused68 = 166,
                Unused69 = 167,
                PlayerLook = 168,
                PlayerLookLongtime = 169,
                Unused70 = 170,
                Unused71 = 171,
                Unused72 = 172,
                Unused73 = 173,
                PanicGrenadeAttached = 174,
                Unused74 = 175,
                Unused75 = 176,
                Unused76 = 177,
                Unused77 = 178,
                HelpResponse = 179,
                Unused78 = 180,
                Unused79 = 181,
                Unused80 = 182,
                Remind = 183,
                Unused81 = 184,
                Unused82 = 185,
                Unused83 = 186,
                Unused84 = 187,
                WeaponTradeBetter = 188,
                WeaponTradeWorse = 189,
                WeaponReadeEqual = 190,
                Unused85 = 191,
                Unused86 = 192,
                Unused87 = 193,
                Betray = 194,
                Unused88 = 195,
                Forgive = 196,
                Unused89 = 197,
                Reanimate = 198,
                Unused90 = 199,
            }
            public enum SpeakerTypeOptions : Int16
            {
                Subject = 0,
                Cause = 1,
                Friend = 2,
                Target = 3,
                Enemy = 4,
                Vehicle = 5,
                Joint = 6,
                Squad = 7,
                Leader = 8,
                JointLeader = 9,
                Clump = 10,
                Peer = 11,
            }
            public enum FlagsOptions : Int16
            {
                SubjectVisible = 1,
                CauseVisible = 2,
                FriendsPresent = 4,
                SubjectIsSpeakersTarget = 8,
                CauseIsSpeakersTarget = 16,
                CauseIsPlayerOrSpeakerIsPlayerAlly = 32,
                SpeakerIsSearching = 64,
                SpeakerIsFollowingPlayer = 128,
                CauseIsPrimaryPlayerAlly = 256,
            }
            public enum ListenertargetOptions : Int16
            {
                Subject = 0,
                Cause = 1,
                Friend = 2,
                Target = 3,
                Enemy = 4,
                Vehicle = 5,
                Joint = 6,
                Squad = 7,
                Leader = 8,
                JointLeader = 9,
                Clump = 10,
                Peer = 11,
            }
            public enum HostilityOptions : Int16
            {
                None = 0,
                Self = 1,
                Neutral = 2,
                Friend = 3,
                Enemy = 4,
                Traitor = 5,
            }
            public enum DamageTypeOptions : Int16
            {
                None = 0,
                Falling = 1,
                Bullet = 2,
                Grenade = 3,
                Explosive = 4,
                Sniper = 5,
                Melee = 6,
                Flame = 7,
                MountedWeapon = 8,
                Vehicle = 9,
                Plasma = 10,
                Needle = 11,
                Shotgun = 12,
            }
            public enum DangerLevelOptions : Int16
            {
                None = 0,
                BroadlyFacing = 1,
                ShootingNear = 2,
                ShootingAt = 3,
                ExtremelyClose = 4,
                ShieldDamage = 5,
                ShieldExtendedDamage = 6,
                BodyDamage = 7,
                BodyExtendedDamage = 8,
            }
            public enum AttitudeOptions : Int16
            {
                Normal = 0,
                Timid = 1,
                Aggressive = 2,
            }
            public enum SubjectActorTypeOptions : Int16
            {
                None = 0,
                Elite = 1,
                Jackal = 2,
                Grunt = 3,
                Hunter = 4,
                Engineer = 5,
                Assassin = 6,
                Player = 7,
                Marine = 8,
                Crew = 9,
                CombatForm = 10,
                InfectionForm = 11,
                CarrierForm = 12,
                Monitor = 13,
                Sentinel = 14,
                None1 = 15,
                MountedWeapon = 16,
                Brute = 17,
                Prophet = 18,
                Bugger = 19,
                Juggernaut = 20,
            }
            public enum CauseActorTypeOptions : Int16
            {
                None = 0,
                Elite = 1,
                Jackal = 2,
                Grunt = 3,
                Hunter = 4,
                Engineer = 5,
                Assassin = 6,
                Player = 7,
                Marine = 8,
                Crew = 9,
                CombatForm = 10,
                InfectionForm = 11,
                CarrierForm = 12,
                Monitor = 13,
                Sentinel = 14,
                None1 = 15,
                MountedWeapon = 16,
                Brute = 17,
                Prophet = 18,
                Bugger = 19,
                Juggernaut = 20,
            }
            public enum CauseTypeOptions : Int16
            {
                None = 0,
                Player = 1,
                Actor = 2,
                Biped = 3,
                Body = 4,
                Vehicle = 5,
                Projectile = 6,
                ActorOrPlayer = 7,
                Turret = 8,
                UnitInVehicle = 9,
                UnitInTurret = 10,
                Driver = 11,
                Gunner = 12,
                Passenger = 13,
                Postcombat = 14,
                PostcombatWon = 15,
                PostcombatLost = 16,
                PlayerMasterchief = 17,
                PlayerDervish = 18,
                Heretic = 19,
                MajorlyScary = 20,
                LastManInVehicle = 21,
                Male = 22,
                Female = 23,
                Grenade = 24,
            }
            public enum SubjectTypeOptions : Int16
            {
                None = 0,
                Player = 1,
                Actor = 2,
                Biped = 3,
                Body = 4,
                Vehicle = 5,
                Projectile = 6,
                ActorOrPlayer = 7,
                Turret = 8,
                UnitInVehicle = 9,
                UnitInTurret = 10,
                Driver = 11,
                Gunner = 12,
                Passenger = 13,
                Postcombat = 14,
                PostcombatWon = 15,
                PostcombatLost = 16,
                PlayerMasterchief = 17,
                PlayerDervish = 18,
                Heretic = 19,
                MajorlyScary = 20,
                LastManInVehicle = 21,
                Male = 22,
                Female = 23,
                Grenade = 24,
            }
            public enum SpatialRelationOptions : Int16
            {
                None = 0,
                VeryNearLessThan1wu = 1,
                NearLessThan25wus = 2,
                MediumRangeLessThan5wus = 3,
                FarLessThan10wus = 4,
                VeryFarGreaterThan10wus = 5,
                InFrontOf = 6,
                Behind = 7,
                AboveDeltaGreaterThan1Wu = 8,
                BelowDeltaGreaterThan1Wu = 9,
            }
            public enum ConditionsOptions : Int32
            {
                Asleep = 1,
                Idle = 2,
                Alert = 4,
                Active = 8,
                UninspectedOrphan = 16,
                DefiniteOrphan = 32,
                CertainOrphan = 64,
                VisibleEnemy = 128,
                ClearLosEnemy = 256,
                DangerousEnemy = 512,
                NoVehicle = 1024,
                VehicleDriver = 2048,
                VehiclePassenger = 4096,
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class DialogueDataBlock : AbideTagBlock
        {
            [FieldAttribute("start index (postprocess)*", typeof(Int16))]
            public Int16 StartIndexPostprocess;
            [FieldAttribute("length (postprocess)*", typeof(Int16))]
            public Int16 LengthPostprocess;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.StartIndexPostprocess = 0;
                this.LengthPostprocess = 0;
            }
            public override void Read(BinaryReader reader)
            {
                this.StartIndexPostprocess = reader.ReadInt16();
                this.LengthPostprocess = reader.ReadInt16();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(4, 4)]
        public sealed class InvoluntaryDataBlock : AbideTagBlock
        {
            [FieldAttribute("involuntary vocalization index*", typeof(Int16))]
            public Int16 InvoluntaryVocalizationIndex;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 4;
                }
            }
            public override void Initialize()
            {
                this.InvoluntaryVocalizationIndex = 0;
                this.EmptyString = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.InvoluntaryVocalizationIndex = reader.ReadInt16();
                this.EmptyString = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
    }
}
#pragma warning restore CS1591
