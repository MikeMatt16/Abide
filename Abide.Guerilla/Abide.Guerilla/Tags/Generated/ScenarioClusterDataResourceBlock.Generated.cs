#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(60, 4)]
    [TagGroupAttribute("scenario_cluster_data_resource", 1668052266u, 4294967293u, typeof(ScenarioClusterDataResourceBlock))]
    public sealed class ScenarioClusterDataResourceBlock : AbideTagBlock
    {
        private TagBlockList<ScenarioClusterDataBlock> clusterDataList = new TagBlockList<ScenarioClusterDataBlock>(16);
        private TagBlockList<StructureBspBackgroundSoundPaletteBlock> backgroundSoundPaletteList = new TagBlockList<StructureBspBackgroundSoundPaletteBlock>(64);
        private TagBlockList<StructureBspSoundEnvironmentPaletteBlock> soundEnvironmentPaletteList = new TagBlockList<StructureBspSoundEnvironmentPaletteBlock>(64);
        private TagBlockList<StructureBspWeatherPaletteBlock> weatherPaletteList = new TagBlockList<StructureBspWeatherPaletteBlock>(32);
        private TagBlockList<ScenarioAtmosphericFogPalette> atmosphericFogPaletteList = new TagBlockList<ScenarioAtmosphericFogPalette>(127);
        [FieldAttribute("Cluster Data", typeof(TagBlock))]
        [BlockAttribute("scenario_cluster_data_block", 16, typeof(ScenarioClusterDataBlock))]
        public TagBlock ClusterData;
        [FieldAttribute("Background Sound Palette", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_background_sound_palette_block", 64, typeof(StructureBspBackgroundSoundPaletteBlock))]
        public TagBlock BackgroundSoundPalette;
        [FieldAttribute("Sound Environment Palette", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_sound_environment_palette_block", 64, typeof(StructureBspSoundEnvironmentPaletteBlock))]
        public TagBlock SoundEnvironmentPalette;
        [FieldAttribute("Weather Palette", typeof(TagBlock))]
        [BlockAttribute("structure_bsp_weather_palette_block", 32, typeof(StructureBspWeatherPaletteBlock))]
        public TagBlock WeatherPalette;
        [FieldAttribute("Atmospheric Fog Palette", typeof(TagBlock))]
        [BlockAttribute("scenario_atmospheric_fog_palette", 127, typeof(ScenarioAtmosphericFogPalette))]
        public TagBlock AtmosphericFogPalette;
        public TagBlockList<ScenarioClusterDataBlock> ClusterDataList
        {
            get
            {
                return this.clusterDataList;
            }
        }
        public TagBlockList<StructureBspBackgroundSoundPaletteBlock> BackgroundSoundPaletteList
        {
            get
            {
                return this.backgroundSoundPaletteList;
            }
        }
        public TagBlockList<StructureBspSoundEnvironmentPaletteBlock> SoundEnvironmentPaletteList
        {
            get
            {
                return this.soundEnvironmentPaletteList;
            }
        }
        public TagBlockList<StructureBspWeatherPaletteBlock> WeatherPaletteList
        {
            get
            {
                return this.weatherPaletteList;
            }
        }
        public TagBlockList<ScenarioAtmosphericFogPalette> AtmosphericFogPaletteList
        {
            get
            {
                return this.atmosphericFogPaletteList;
            }
        }
        public override int Size
        {
            get
            {
                return 60;
            }
        }
        public override void Initialize()
        {
            this.clusterDataList.Clear();
            this.backgroundSoundPaletteList.Clear();
            this.soundEnvironmentPaletteList.Clear();
            this.weatherPaletteList.Clear();
            this.atmosphericFogPaletteList.Clear();
            this.ClusterData = TagBlock.Zero;
            this.BackgroundSoundPalette = TagBlock.Zero;
            this.SoundEnvironmentPalette = TagBlock.Zero;
            this.WeatherPalette = TagBlock.Zero;
            this.AtmosphericFogPalette = TagBlock.Zero;
        }
        public override void Read(BinaryReader reader)
        {
            this.ClusterData = reader.ReadInt64();
            this.clusterDataList.Read(reader, this.ClusterData);
            this.BackgroundSoundPalette = reader.ReadInt64();
            this.backgroundSoundPaletteList.Read(reader, this.BackgroundSoundPalette);
            this.SoundEnvironmentPalette = reader.ReadInt64();
            this.soundEnvironmentPaletteList.Read(reader, this.SoundEnvironmentPalette);
            this.WeatherPalette = reader.ReadInt64();
            this.weatherPaletteList.Read(reader, this.WeatherPalette);
            this.AtmosphericFogPalette = reader.ReadInt64();
            this.atmosphericFogPaletteList.Read(reader, this.AtmosphericFogPalette);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(80, 4)]
        public sealed class ScenarioClusterDataBlock : AbideTagBlock
        {
            private TagBlockList<ScenarioClusterBackgroundSoundsBlock> backgroundSoundsList = new TagBlockList<ScenarioClusterBackgroundSoundsBlock>(512);
            private TagBlockList<ScenarioClusterSoundEnvironmentsBlock> soundEnvironmentsList = new TagBlockList<ScenarioClusterSoundEnvironmentsBlock>(512);
            private TagBlockList<ScenarioClusterPointsBlock> clusterCentroidsList = new TagBlockList<ScenarioClusterPointsBlock>(512);
            private TagBlockList<ScenarioClusterWeatherPropertiesBlock> weatherPropertiesList = new TagBlockList<ScenarioClusterWeatherPropertiesBlock>(512);
            private TagBlockList<ScenarioClusterAtmosphericFogPropertiesBlock> atmosphericFogPropertiesList = new TagBlockList<ScenarioClusterAtmosphericFogPropertiesBlock>(512);
            [FieldAttribute("BSP*", typeof(TagReference))]
            public TagReference Bsp;
            [FieldAttribute("Background Sounds*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_background_sounds_block", 512, typeof(ScenarioClusterBackgroundSoundsBlock))]
            public TagBlock BackgroundSounds;
            [FieldAttribute("Sound Environments*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_sound_environments_block", 512, typeof(ScenarioClusterSoundEnvironmentsBlock))]
            public TagBlock SoundEnvironments;
            [FieldAttribute("BSP Checksum*", typeof(Int32))]
            public Int32 BspChecksum;
            [FieldAttribute("Cluster Centroids*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_points_block", 512, typeof(ScenarioClusterPointsBlock))]
            public TagBlock ClusterCentroids;
            [FieldAttribute("Weather Properties*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_weather_properties_block", 512, typeof(ScenarioClusterWeatherPropertiesBlock))]
            public TagBlock WeatherProperties;
            [FieldAttribute("Atmospheric Fog Properties*", typeof(TagBlock))]
            [BlockAttribute("scenario_cluster_atmospheric_fog_properties_block", 512, typeof(ScenarioClusterAtmosphericFogPropertiesBlock))]
            public TagBlock AtmosphericFogProperties;
            public TagBlockList<ScenarioClusterBackgroundSoundsBlock> BackgroundSoundsList
            {
                get
                {
                    return this.backgroundSoundsList;
                }
            }
            public TagBlockList<ScenarioClusterSoundEnvironmentsBlock> SoundEnvironmentsList
            {
                get
                {
                    return this.soundEnvironmentsList;
                }
            }
            public TagBlockList<ScenarioClusterPointsBlock> ClusterCentroidsList
            {
                get
                {
                    return this.clusterCentroidsList;
                }
            }
            public TagBlockList<ScenarioClusterWeatherPropertiesBlock> WeatherPropertiesList
            {
                get
                {
                    return this.weatherPropertiesList;
                }
            }
            public TagBlockList<ScenarioClusterAtmosphericFogPropertiesBlock> AtmosphericFogPropertiesList
            {
                get
                {
                    return this.atmosphericFogPropertiesList;
                }
            }
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.backgroundSoundsList.Clear();
                this.soundEnvironmentsList.Clear();
                this.clusterCentroidsList.Clear();
                this.weatherPropertiesList.Clear();
                this.atmosphericFogPropertiesList.Clear();
                this.Bsp = TagReference.Null;
                this.BackgroundSounds = TagBlock.Zero;
                this.SoundEnvironments = TagBlock.Zero;
                this.BspChecksum = 0;
                this.ClusterCentroids = TagBlock.Zero;
                this.WeatherProperties = TagBlock.Zero;
                this.AtmosphericFogProperties = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Bsp = reader.Read<TagReference>();
                this.BackgroundSounds = reader.ReadInt64();
                this.backgroundSoundsList.Read(reader, this.BackgroundSounds);
                this.SoundEnvironments = reader.ReadInt64();
                this.soundEnvironmentsList.Read(reader, this.SoundEnvironments);
                this.BspChecksum = reader.ReadInt32();
                this.ClusterCentroids = reader.ReadInt64();
                this.clusterCentroidsList.Read(reader, this.ClusterCentroids);
                this.WeatherProperties = reader.ReadInt64();
                this.weatherPropertiesList.Read(reader, this.WeatherProperties);
                this.AtmosphericFogProperties = reader.ReadInt64();
                this.atmosphericFogPropertiesList.Read(reader, this.AtmosphericFogProperties);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterBackgroundSoundsBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterSoundEnvironmentsBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(12, 4)]
            public sealed class ScenarioClusterPointsBlock : AbideTagBlock
            {
                [FieldAttribute("Centroid*", typeof(Vector3))]
                public Vector3 Centroid;
                public override int Size
                {
                    get
                    {
                        return 12;
                    }
                }
                public override void Initialize()
                {
                    this.Centroid = Vector3.Zero;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Centroid = reader.Read<Vector3>();
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterWeatherPropertiesBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            [FieldSetAttribute(4, 4)]
            public sealed class ScenarioClusterAtmosphericFogPropertiesBlock : AbideTagBlock
            {
                [FieldAttribute("Type^", typeof(Int16))]
                public Int16 Type;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                public override int Size
                {
                    get
                    {
                        return 4;
                    }
                }
                public override void Initialize()
                {
                    this.Type = 0;
                    this.EmptyString = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Type = reader.ReadInt16();
                    this.EmptyString = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
        }
        [FieldSetAttribute(116, 4)]
        public sealed class StructureBspBackgroundSoundPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Background Sound", typeof(TagReference))]
            public TagReference BackgroundSound;
            [FieldAttribute("Inside Cluster Sound#Play only when player is inside cluster.", typeof(TagReference))]
            public TagReference InsideClusterSound;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(20)]
            public Byte[] EmptyString;
            [FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [FieldAttribute("Scale Flags", typeof(ScaleFlagsOptions))]
            [OptionsAttribute(typeof(ScaleFlagsOptions), true)]
            public ScaleFlagsOptions ScaleFlags;
            [FieldAttribute("Interior Scale", typeof(Single))]
            public Single InteriorScale;
            [FieldAttribute("Portal Scale", typeof(Single))]
            public Single PortalScale;
            [FieldAttribute("Exterior Scale", typeof(Single))]
            public Single ExteriorScale;
            [FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(8)]
            public Byte[] EmptyString1;
            public override int Size
            {
                get
                {
                    return 116;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.BackgroundSound = TagReference.Null;
                this.InsideClusterSound = TagReference.Null;
                this.EmptyString = new byte[20];
                this.CutoffDistance = 0;
                this.ScaleFlags = ((ScaleFlagsOptions)(0));
                this.InteriorScale = 0;
                this.PortalScale = 0;
                this.ExteriorScale = 0;
                this.InterpolationSpeed = 0;
                this.EmptyString1 = new byte[8];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.BackgroundSound = reader.Read<TagReference>();
                this.InsideClusterSound = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(20);
                this.CutoffDistance = reader.ReadSingle();
                this.ScaleFlags = ((ScaleFlagsOptions)(reader.ReadInt32()));
                this.InteriorScale = reader.ReadSingle();
                this.PortalScale = reader.ReadSingle();
                this.ExteriorScale = reader.ReadSingle();
                this.InterpolationSpeed = reader.ReadSingle();
                this.EmptyString1 = reader.ReadBytes(8);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            public enum ScaleFlagsOptions : Int32
            {
                OverrideDefaultScale = 1,
                UseAdjacentClusterAsPortalScale = 2,
                UseAdjacentClusterAsExteriorScale = 4,
                ScaleWithWeatherIntensity = 8,
            }
        }
        [FieldSetAttribute(80, 4)]
        public sealed class StructureBspSoundEnvironmentPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Sound Environment", typeof(TagReference))]
            public TagReference SoundEnvironment;
            [FieldAttribute("Cutoff Distance", typeof(Single))]
            public Single CutoffDistance;
            [FieldAttribute("Interpolation Speed:1/sec", typeof(Single))]
            public Single InterpolationSpeed;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(24)]
            public Byte[] EmptyString;
            public override int Size
            {
                get
                {
                    return 80;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.SoundEnvironment = TagReference.Null;
                this.CutoffDistance = 0;
                this.InterpolationSpeed = 0;
                this.EmptyString = new byte[24];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.SoundEnvironment = reader.Read<TagReference>();
                this.CutoffDistance = reader.ReadSingle();
                this.InterpolationSpeed = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(24);
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(152, 4)]
        public sealed class StructureBspWeatherPaletteBlock : AbideTagBlock
        {
            [FieldAttribute("Name^", typeof(String32))]
            public String32 Name;
            [FieldAttribute("Weather System", typeof(TagReference))]
            public TagReference WeatherSystem;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString2;
            [FieldAttribute("Wind", typeof(TagReference))]
            public TagReference Wind;
            [FieldAttribute("Wind Direction", typeof(Vector3))]
            public Vector3 WindDirection;
            [FieldAttribute("Wind Magnitude", typeof(Single))]
            public Single WindMagnitude;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString3;
            [FieldAttribute("Wind Scale Function", typeof(String32))]
            public String32 WindScaleFunction;
            public override int Size
            {
                get
                {
                    return 152;
                }
            }
            public override void Initialize()
            {
                this.Name = String32.Empty;
                this.WeatherSystem = TagReference.Null;
                this.EmptyString = new byte[2];
                this.EmptyString1 = new byte[2];
                this.EmptyString2 = new byte[32];
                this.Wind = TagReference.Null;
                this.WindDirection = Vector3.Zero;
                this.WindMagnitude = 0;
                this.EmptyString3 = new byte[4];
                this.WindScaleFunction = String32.Empty;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.Read<String32>();
                this.WeatherSystem = reader.Read<TagReference>();
                this.EmptyString = reader.ReadBytes(2);
                this.EmptyString1 = reader.ReadBytes(2);
                this.EmptyString2 = reader.ReadBytes(32);
                this.Wind = reader.Read<TagReference>();
                this.WindDirection = reader.Read<Vector3>();
                this.WindMagnitude = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(4);
                this.WindScaleFunction = reader.Read<String32>();
            }
            public override void Write(BinaryWriter writer)
            {
            }
        }
        [FieldSetAttribute(256, 4)]
        public sealed class ScenarioAtmosphericFogPalette : AbideTagBlock
        {
            private TagBlockList<ScenarioAtmosphericFogMixerBlock> mixersList = new TagBlockList<ScenarioAtmosphericFogMixerBlock>(2);
            [FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("Color", typeof(ColorRgbF))]
            public ColorRgbF Color;
            [FieldAttribute("Spread Distance:World Units#How far fog spreads into adjacent clusters: 0 default" +
                "s to 1.", typeof(Single))]
            public Single SpreadDistance;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString;
            [FieldAttribute("Maximum Density:[0,1]#Fog density clamps to this value.", typeof(Single))]
            public Single MaximumDensity;
            [FieldAttribute("Start Distance:World Units#Before this distance, there is no fog.", typeof(Single))]
            public Single StartDistance;
            [FieldAttribute("Opaque Distance:World Units#Fog becomes opaque (maximum density) at this distance" +
                " from viewer.", typeof(Single))]
            public Single OpaqueDistance;
            [FieldAttribute("Color", typeof(ColorRgbF))]
            public ColorRgbF Color1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString1;
            [FieldAttribute("Maximum Density:[0,1]#Fog density clamps to this value.", typeof(Single))]
            public Single MaximumDensity1;
            [FieldAttribute("Start Distance:World Units#Before this distance, there is no fog.", typeof(Single))]
            public Single StartDistance1;
            [FieldAttribute("Opaque Distance:World Units#Fog becomes opaque (maximum density) at this distance" +
                " from viewer.", typeof(Single))]
            public Single OpaqueDistance1;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(4)]
            public Byte[] EmptyString2;
            [FieldAttribute("Planar Color", typeof(ColorRgbF))]
            public ColorRgbF PlanarColor;
            [FieldAttribute("Planar Max Density:[0,1]", typeof(Single))]
            public Single PlanarMaxDensity;
            [FieldAttribute("Planar Override Amount:[0,1]", typeof(Single))]
            public Single PlanarOverrideAmount;
            [FieldAttribute("Planar Min Distance Bias:World Units#Don\'t ask.", typeof(Single))]
            public Single PlanarMinDistanceBias;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(44)]
            public Byte[] EmptyString3;
            [FieldAttribute("Patchy Color", typeof(ColorRgbF))]
            public ColorRgbF PatchyColor;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(12)]
            public Byte[] EmptyString4;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(32)]
            public Byte[] EmptyString5;
            [FieldAttribute("Patchy Fog", typeof(TagReference))]
            public TagReference PatchyFog;
            [FieldAttribute("Mixers", typeof(TagBlock))]
            [BlockAttribute("mixers", 2, typeof(ScenarioAtmosphericFogMixerBlock))]
            public TagBlock Mixers;
            [FieldAttribute("Amount:[0,1]", typeof(Single))]
            public Single Amount;
            [FieldAttribute("Threshold:[0,1]", typeof(Single))]
            public Single Threshold;
            [FieldAttribute("Brightness:[0,1]", typeof(Single))]
            public Single Brightness;
            [FieldAttribute("Gamma Power", typeof(Single))]
            public Single GammaPower;
            [FieldAttribute("Camera Immersion Flags", typeof(CameraImmersionFlagsOptions))]
            [OptionsAttribute(typeof(CameraImmersionFlagsOptions), true)]
            public CameraImmersionFlagsOptions CameraImmersionFlags;
            [FieldAttribute("", typeof(Byte[]))]
            [PaddingAttribute(2)]
            public Byte[] EmptyString6;
            public TagBlockList<ScenarioAtmosphericFogMixerBlock> MixersList
            {
                get
                {
                    return this.mixersList;
                }
            }
            public override int Size
            {
                get
                {
                    return 256;
                }
            }
            public override void Initialize()
            {
                this.mixersList.Clear();
                this.Name = StringId.Zero;
                this.Color = ColorRgbF.Zero;
                this.SpreadDistance = 0;
                this.EmptyString = new byte[4];
                this.MaximumDensity = 0;
                this.StartDistance = 0;
                this.OpaqueDistance = 0;
                this.Color1 = ColorRgbF.Zero;
                this.EmptyString1 = new byte[4];
                this.MaximumDensity1 = 0;
                this.StartDistance1 = 0;
                this.OpaqueDistance1 = 0;
                this.EmptyString2 = new byte[4];
                this.PlanarColor = ColorRgbF.Zero;
                this.PlanarMaxDensity = 0;
                this.PlanarOverrideAmount = 0;
                this.PlanarMinDistanceBias = 0;
                this.EmptyString3 = new byte[44];
                this.PatchyColor = ColorRgbF.Zero;
                this.EmptyString4 = new byte[12];
                this.EmptyString5 = new byte[32];
                this.PatchyFog = TagReference.Null;
                this.Mixers = TagBlock.Zero;
                this.Amount = 0;
                this.Threshold = 0;
                this.Brightness = 0;
                this.GammaPower = 0;
                this.CameraImmersionFlags = ((CameraImmersionFlagsOptions)(0));
                this.EmptyString6 = new byte[2];
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Color = reader.Read<ColorRgbF>();
                this.SpreadDistance = reader.ReadSingle();
                this.EmptyString = reader.ReadBytes(4);
                this.MaximumDensity = reader.ReadSingle();
                this.StartDistance = reader.ReadSingle();
                this.OpaqueDistance = reader.ReadSingle();
                this.Color1 = reader.Read<ColorRgbF>();
                this.EmptyString1 = reader.ReadBytes(4);
                this.MaximumDensity1 = reader.ReadSingle();
                this.StartDistance1 = reader.ReadSingle();
                this.OpaqueDistance1 = reader.ReadSingle();
                this.EmptyString2 = reader.ReadBytes(4);
                this.PlanarColor = reader.Read<ColorRgbF>();
                this.PlanarMaxDensity = reader.ReadSingle();
                this.PlanarOverrideAmount = reader.ReadSingle();
                this.PlanarMinDistanceBias = reader.ReadSingle();
                this.EmptyString3 = reader.ReadBytes(44);
                this.PatchyColor = reader.Read<ColorRgbF>();
                this.EmptyString4 = reader.ReadBytes(12);
                this.EmptyString5 = reader.ReadBytes(32);
                this.PatchyFog = reader.Read<TagReference>();
                this.Mixers = reader.ReadInt64();
                this.mixersList.Read(reader, this.Mixers);
                this.Amount = reader.ReadSingle();
                this.Threshold = reader.ReadSingle();
                this.Brightness = reader.ReadSingle();
                this.GammaPower = reader.ReadSingle();
                this.CameraImmersionFlags = ((CameraImmersionFlagsOptions)(reader.ReadInt16()));
                this.EmptyString6 = reader.ReadBytes(2);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(16, 4)]
            public sealed class ScenarioAtmosphericFogMixerBlock : AbideTagBlock
            {
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(4)]
                public Byte[] EmptyString;
                [FieldAttribute("Atmospheric Fog Source:From Scenario Atmospheric Fog Palette", typeof(StringId))]
                public StringId AtmosphericFogSource;
                [FieldAttribute("Interpolator:From Scenario Interpolators", typeof(StringId))]
                public StringId Interpolator;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString2;
                public override int Size
                {
                    get
                    {
                        return 16;
                    }
                }
                public override void Initialize()
                {
                    this.EmptyString = new byte[4];
                    this.AtmosphericFogSource = StringId.Zero;
                    this.Interpolator = StringId.Zero;
                    this.EmptyString1 = new byte[2];
                    this.EmptyString2 = new byte[2];
                }
                public override void Read(BinaryReader reader)
                {
                    this.EmptyString = reader.ReadBytes(4);
                    this.AtmosphericFogSource = reader.ReadInt32();
                    this.Interpolator = reader.ReadInt32();
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.EmptyString2 = reader.ReadBytes(2);
                }
                public override void Write(BinaryWriter writer)
                {
                }
            }
            public enum CameraImmersionFlagsOptions : Int16
            {
                DisableAtmosphericFog = 1,
                DisableSecondaryFog = 2,
                DisablePlanarFog = 4,
                InvertPlanarFogPriorities = 8,
                DisableWater = 16,
            }
        }
    }
}
#pragma warning restore CS1591
