#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    using System.IO;
    
    [FieldSetAttribute(28, 4)]
    [TagGroupAttribute("shader_light_response", 1936484724u, 4294967293u, typeof(ShaderLightResponseBlock))]
    public sealed class ShaderLightResponseBlock : AbideTagBlock
    {
        private TagBlockList<ShaderTemplateCategoryBlock> categoriesList = new TagBlockList<ShaderTemplateCategoryBlock>(16);
        private TagBlockList<ShaderTemplateLevelOfDetailBlock> shaderLodsList = new TagBlockList<ShaderTemplateLevelOfDetailBlock>(8);
        [FieldAttribute("categories", typeof(TagBlock))]
        [BlockAttribute("category", 16, typeof(ShaderTemplateCategoryBlock))]
        public TagBlock Categories;
        [FieldAttribute("shader LODs", typeof(TagBlock))]
        [BlockAttribute("shader_template_level_of_detail_block", 8, typeof(ShaderTemplateLevelOfDetailBlock))]
        public TagBlock ShaderLods;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString;
        [FieldAttribute("", typeof(Byte[]))]
        [PaddingAttribute(2)]
        public Byte[] EmptyString1;
        public TagBlockList<ShaderTemplateCategoryBlock> CategoriesList
        {
            get
            {
                return this.categoriesList;
            }
        }
        public TagBlockList<ShaderTemplateLevelOfDetailBlock> ShaderLodsList
        {
            get
            {
                return this.shaderLodsList;
            }
        }
        public override int Size
        {
            get
            {
                return 28;
            }
        }
        public override void Initialize()
        {
            this.categoriesList.Clear();
            this.shaderLodsList.Clear();
            this.Categories = TagBlock.Zero;
            this.ShaderLods = TagBlock.Zero;
            this.EmptyString = new byte[2];
            this.EmptyString1 = new byte[2];
        }
        public override void Read(BinaryReader reader)
        {
            this.Categories = reader.ReadInt64();
            this.categoriesList.Read(reader, this.Categories);
            this.ShaderLods = reader.ReadInt64();
            this.shaderLodsList.Read(reader, this.ShaderLods);
            this.EmptyString = reader.ReadBytes(2);
            this.EmptyString1 = reader.ReadBytes(2);
        }
        public override void Write(BinaryWriter writer)
        {
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ShaderTemplateCategoryBlock : AbideTagBlock
        {
            private TagBlockList<ShaderTemplateParameterBlock> parametersList = new TagBlockList<ShaderTemplateParameterBlock>(64);
            [FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [FieldAttribute("Parameters", typeof(TagBlock))]
            [BlockAttribute("parameter", 64, typeof(ShaderTemplateParameterBlock))]
            public TagBlock Parameters;
            public TagBlockList<ShaderTemplateParameterBlock> ParametersList
            {
                get
                {
                    return this.parametersList;
                }
            }
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.parametersList.Clear();
                this.Name = StringId.Zero;
                this.Parameters = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.Name = reader.ReadInt32();
                this.Parameters = reader.ReadInt64();
                this.parametersList.Read(reader, this.Parameters);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(72, 4)]
            public sealed class ShaderTemplateParameterBlock : AbideTagBlock
            {
                private DataList explanationList = new DataList(65535);
                [FieldAttribute("Name^", typeof(StringId))]
                public StringId Name;
                [FieldAttribute("Explanation", typeof(TagBlock))]
                [DataAttribute(65535)]
                public TagBlock Explanation;
                [FieldAttribute("Type", typeof(TypeOptions))]
                [OptionsAttribute(typeof(TypeOptions), false)]
                public TypeOptions Type;
                [FieldAttribute("Flags", typeof(FlagsOptions))]
                [OptionsAttribute(typeof(FlagsOptions), true)]
                public FlagsOptions Flags;
                [FieldAttribute("Default Bitmap", typeof(TagReference))]
                public TagReference DefaultBitmap;
                [FieldAttribute("Default Const Value", typeof(Single))]
                public Single DefaultConstValue;
                [FieldAttribute("Default Const Color", typeof(ColorRgbF))]
                public ColorRgbF DefaultConstColor;
                [FieldAttribute("Bitmap Type", typeof(BitmapTypeOptions))]
                [OptionsAttribute(typeof(BitmapTypeOptions), false)]
                public BitmapTypeOptions BitmapType;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("Bitmap Animation Flags", typeof(BitmapAnimationFlagsOptions))]
                [OptionsAttribute(typeof(BitmapAnimationFlagsOptions), true)]
                public BitmapAnimationFlagsOptions BitmapAnimationFlags;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [FieldAttribute("Bitmap Scale", typeof(Single))]
                public Single BitmapScale;
                public DataList ExplanationList
                {
                    get
                    {
                        return this.explanationList;
                    }
                }
                public override int Size
                {
                    get
                    {
                        return 72;
                    }
                }
                public override void Initialize()
                {
                    this.explanationList.Clear();
                    this.Name = StringId.Zero;
                    this.Explanation = TagBlock.Zero;
                    this.Type = ((TypeOptions)(0));
                    this.Flags = ((FlagsOptions)(0));
                    this.DefaultBitmap = TagReference.Null;
                    this.DefaultConstValue = 0;
                    this.DefaultConstColor = ColorRgbF.Zero;
                    this.BitmapType = ((BitmapTypeOptions)(0));
                    this.EmptyString = new byte[2];
                    this.BitmapAnimationFlags = ((BitmapAnimationFlagsOptions)(0));
                    this.EmptyString1 = new byte[2];
                    this.BitmapScale = 0;
                }
                public override void Read(BinaryReader reader)
                {
                    this.Name = reader.ReadInt32();
                    this.Explanation = reader.ReadInt64();
                    this.Type = ((TypeOptions)(reader.ReadInt16()));
                    this.Flags = ((FlagsOptions)(reader.ReadInt16()));
                    this.DefaultBitmap = reader.Read<TagReference>();
                    this.DefaultConstValue = reader.ReadSingle();
                    this.DefaultConstColor = reader.Read<ColorRgbF>();
                    this.BitmapType = ((BitmapTypeOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.BitmapAnimationFlags = ((BitmapAnimationFlagsOptions)(reader.ReadInt16()));
                    this.EmptyString1 = reader.ReadBytes(2);
                    this.BitmapScale = reader.ReadSingle();
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum TypeOptions : Int16
                {
                    Bitmap = 0,
                    Value = 1,
                    Color = 2,
                    Switch = 3,
                }
                public enum FlagsOptions : Int16
                {
                    Animated = 1,
                    HideBitmapReference = 2,
                }
                public enum BitmapTypeOptions : Int16
                {
                    _2d = 0,
                    _3d = 1,
                    CubeMap = 2,
                }
                public enum BitmapAnimationFlagsOptions : Int16
                {
                    ScaleUniform = 1,
                    Scale = 2,
                    Translation = 4,
                    Rotation = 8,
                    Index = 16,
                }
            }
        }
        [FieldSetAttribute(16, 4)]
        public sealed class ShaderTemplateLevelOfDetailBlock : AbideTagBlock
        {
            private TagBlockList<ShaderTemplatePassReferenceBlock> passList = new TagBlockList<ShaderTemplatePassReferenceBlock>(16);
            [FieldAttribute("Projected Diameter:pixels", typeof(Single))]
            public Single ProjectedDiameter;
            [FieldAttribute("Pass", typeof(TagBlock))]
            [BlockAttribute("pass", 16, typeof(ShaderTemplatePassReferenceBlock))]
            public TagBlock Pass;
            public TagBlockList<ShaderTemplatePassReferenceBlock> PassList
            {
                get
                {
                    return this.passList;
                }
            }
            public override int Size
            {
                get
                {
                    return 16;
                }
            }
            public override void Initialize()
            {
                this.passList.Clear();
                this.ProjectedDiameter = 0;
                this.Pass = TagBlock.Zero;
            }
            public override void Read(BinaryReader reader)
            {
                this.ProjectedDiameter = reader.ReadSingle();
                this.Pass = reader.ReadInt64();
                this.passList.Read(reader, this.Pass);
            }
            public override void Write(BinaryWriter writer)
            {
            }
            [FieldSetAttribute(32, 4)]
            public sealed class ShaderTemplatePassReferenceBlock : AbideTagBlock
            {
                [FieldAttribute("Layer", typeof(LayerOptions))]
                [OptionsAttribute(typeof(LayerOptions), false)]
                public LayerOptions Layer;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(2)]
                public Byte[] EmptyString;
                [FieldAttribute("Pass^", typeof(TagReference))]
                public TagReference Pass;
                [FieldAttribute("", typeof(Byte[]))]
                [PaddingAttribute(12)]
                public Byte[] EmptyString1;
                public override int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public override void Initialize()
                {
                    this.Layer = ((LayerOptions)(0));
                    this.EmptyString = new byte[2];
                    this.Pass = TagReference.Null;
                    this.EmptyString1 = new byte[12];
                }
                public override void Read(BinaryReader reader)
                {
                    this.Layer = ((LayerOptions)(reader.ReadInt16()));
                    this.EmptyString = reader.ReadBytes(2);
                    this.Pass = reader.Read<TagReference>();
                    this.EmptyString1 = reader.ReadBytes(12);
                }
                public override void Write(BinaryWriter writer)
                {
                }
                public enum LayerOptions : Int16
                {
                    Texaccum = 0,
                    EnvironmentMap = 1,
                    SelfIllumination = 2,
                    Overlay = 3,
                    Transparent = 4,
                    LightmapIndirect = 5,
                    Diffuse = 6,
                    Specular = 7,
                    ShadowGenerate = 8,
                    ShadowApply = 9,
                    Boom = 10,
                    Fog = 11,
                    ShPrt = 12,
                    ActiveCamo = 13,
                    WaterEdgeBlend = 14,
                    Decal = 15,
                    ActiveCamoStencilModulate = 16,
                    Hologram = 17,
                    LightAlbedo = 18,
                }
            }
        }
    }
}
#pragma warning restore CS1591
