#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(28, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("shader_light_response", 1936484724u, 4294967293u, typeof(ShaderLightResponseBlock))]
    public sealed class ShaderLightResponseBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
    {
        [Abide.Guerilla.Tags.FieldAttribute("categories", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("category", 16, typeof(ShaderTemplateCategoryBlock))]
        public TagBlock Categories;
        [Abide.Guerilla.Tags.FieldAttribute("shader LODs", typeof(TagBlock))]
        [Abide.Guerilla.Tags.BlockAttribute("shader_template_level_of_detail_block", 8, typeof(ShaderTemplateLevelOfDetailBlock))]
        public TagBlock ShaderLods;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString1;
        public int Size
        {
            get
            {
                return 28;
            }
        }
        public void Initialize()
        {
        }
        public void Read(System.IO.BinaryReader reader)
        {
        }
        public void Write(System.IO.BinaryWriter writer)
        {
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ShaderTemplateCategoryBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
            public StringId Name;
            [Abide.Guerilla.Tags.FieldAttribute("Parameters", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("parameter", 64, typeof(ShaderTemplateParameterBlock))]
            public TagBlock Parameters;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(72, 4)]
            public sealed class ShaderTemplateParameterBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Name^", typeof(StringId))]
                public StringId Name;
                [Abide.Guerilla.Tags.FieldAttribute("Type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(TypeOptions), false)]
                public Int16 Type;
                [Abide.Guerilla.Tags.FieldAttribute("Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
                public Int16 Flags;
                [Abide.Guerilla.Tags.FieldAttribute("Default Bitmap", typeof(TagReference))]
                public TagReference DefaultBitmap;
                [Abide.Guerilla.Tags.FieldAttribute("Default Const Value", typeof(Single))]
                public Single DefaultConstValue;
                [Abide.Guerilla.Tags.FieldAttribute("Default Const Color", typeof(ColorRgbF))]
                public ColorRgbF DefaultConstColor;
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap Type", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BitmapTypeOptions), false)]
                public Int16 BitmapType;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap Animation Flags", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(BitmapAnimationFlagsOptions), true)]
                public Int16 BitmapAnimationFlags;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString1;
                [Abide.Guerilla.Tags.FieldAttribute("Bitmap Scale", typeof(Single))]
                public Single BitmapScale;
                public int Size
                {
                    get
                    {
                        return 72;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum TypeOptions
                {
                    Bitmap = 0,
                    Value = 1,
                    Color = 2,
                    Switch = 3,
                }
                public enum FlagsOptions
                {
                    Animated = 1,
                    HideBitmapReference = 2,
                }
                public enum BitmapTypeOptions
                {
                    _2d = 0,
                    _3d = 1,
                    CubeMap = 2,
                }
                public enum BitmapAnimationFlagsOptions
                {
                    ScaleUniform = 1,
                    Scale = 2,
                    Translation = 4,
                    Rotation = 8,
                    Index = 16,
                }
            }
        }
        [Abide.Guerilla.Tags.FieldSetAttribute(16, 4)]
        public sealed class ShaderTemplateLevelOfDetailBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
        {
            [Abide.Guerilla.Tags.FieldAttribute("Projected Diameter:pixels", typeof(Single))]
            public Single ProjectedDiameter;
            [Abide.Guerilla.Tags.FieldAttribute("Pass", typeof(TagBlock))]
            [Abide.Guerilla.Tags.BlockAttribute("pass", 16, typeof(ShaderTemplatePassReferenceBlock))]
            public TagBlock Pass;
            public int Size
            {
                get
                {
                    return 16;
                }
            }
            public void Initialize()
            {
            }
            public void Read(System.IO.BinaryReader reader)
            {
            }
            public void Write(System.IO.BinaryWriter writer)
            {
            }
            [Abide.Guerilla.Tags.FieldSetAttribute(32, 4)]
            public sealed class ShaderTemplatePassReferenceBlock : Abide.Guerilla.Tags.IReadable, Abide.Guerilla.Tags.IWritable
            {
                [Abide.Guerilla.Tags.FieldAttribute("Layer", typeof(Int16))]
                [Abide.Guerilla.Tags.OptionsAttribute(typeof(LayerOptions), false)]
                public Int16 Layer;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(2)]
                public Byte[] EmptyString;
                [Abide.Guerilla.Tags.FieldAttribute("Pass^", typeof(TagReference))]
                public TagReference Pass;
                [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
                [Abide.Guerilla.Tags.PaddingAttribute(12)]
                public Byte[] EmptyString1;
                public int Size
                {
                    get
                    {
                        return 32;
                    }
                }
                public void Initialize()
                {
                }
                public void Read(System.IO.BinaryReader reader)
                {
                }
                public void Write(System.IO.BinaryWriter writer)
                {
                }
                public enum LayerOptions
                {
                    Texaccum = 0,
                    EnvironmentMap = 1,
                    SelfIllumination = 2,
                    Overlay = 3,
                    Transparent = 4,
                    LightmapIndirect = 5,
                    Diffuse = 6,
                    Specular = 7,
                    ShadowGenerate = 8,
                    ShadowApply = 9,
                    Boom = 10,
                    Fog = 11,
                    ShPrt = 12,
                    ActiveCamo = 13,
                    WaterEdgeBlend = 14,
                    Decal = 15,
                    ActiveCamoStencilModulate = 16,
                    Hologram = 17,
                    LightAlbedo = 18,
                }
            }
        }
    }
}
#pragma warning restore CS1591
