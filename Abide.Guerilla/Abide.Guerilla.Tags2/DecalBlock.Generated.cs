#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags2
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(188, 4)]
    [Abide.Guerilla.Tags.TagGroupAttribute("decal", "deca", "����", typeof(DecalBlock))]
    public class DecalBlock
    {
        [Abide.Guerilla.Tags.FieldAttribute("flags", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(FlagsOptions), true)]
        public Int16 Flags;
        [Abide.Guerilla.Tags.FieldAttribute("type#controls how the decal wraps onto surface geometry", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(Type), false)]
        public Int16 Type1;
        [Abide.Guerilla.Tags.FieldAttribute("layer", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(LayerOptions), false)]
        public Int16 Layer;
        [Abide.Guerilla.Tags.FieldAttribute("max overlapping count", typeof(Int16))]
        public Int16 MaxOverlappingCount;
        [Abide.Guerilla.Tags.FieldAttribute("next decal in chain", typeof(TagReference))]
        public TagReference NextDecalInChain;
        [Abide.Guerilla.Tags.FieldAttribute("radius overlap rejection:muliplier", typeof(Single))]
        public Single RadiusOverlapRejection;
        [Abide.Guerilla.Tags.FieldAttribute("color lower bounds", typeof(ColorRgbF))]
        public ColorRgbF ColorLowerBounds;
        [Abide.Guerilla.Tags.FieldAttribute("color upper bounds", typeof(ColorRgbF))]
        public ColorRgbF ColorUpperBounds;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(40)]
        public Byte[] EmptyString5;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString6;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString7;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString8;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString9;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(20)]
        public Byte[] EmptyString10;
        [Abide.Guerilla.Tags.FieldAttribute("bitmap", typeof(TagReference))]
        public TagReference Bitmap;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(20)]
        public Byte[] EmptyString11;
        [Abide.Guerilla.Tags.FieldAttribute("maximum sprite extent:pixels*", typeof(Single))]
        public Single MaximumSpriteExtent;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(4)]
        public Byte[] EmptyString12;
        public enum FlagsOptions
        {
            GeometryInheritedByNextDecalInChain = 1,
            InterpolateColorInHsv = 2,
            MoreColors = 4,
            NoRandomRotation = 8,
            Unused = 16,
            SapienSnapToAxis = 32,
            SapienIncrementalCounter = 64,
            Unused1 = 128,
            PreserveAspect = 256,
            Unused2 = 512,
        }
        public enum Type
        {
            Scratch = 0,
            Splatter = 1,
            Burn = 2,
            PaintedSign = 3,
        }
        public enum LayerOptions
        {
            LitAlphablendPrelight = 0,
            LitAlphablend = 1,
            DoubleMultiply = 2,
            Multiply = 3,
            Max = 4,
            Add = 5,
            Error = 6,
        }
    }
}
#pragma warning restore CS1591
