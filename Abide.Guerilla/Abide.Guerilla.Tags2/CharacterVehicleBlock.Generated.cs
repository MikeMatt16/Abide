#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Guerilla.Tags2
{
    using Abide.Guerilla.Types;
    using Abide.HaloLibrary;
    using System;
    
    [Abide.Guerilla.Tags.FieldSetAttribute(196, 4)]
    public class CharacterVehicleBlock
    {
        [Abide.Guerilla.Tags.FieldAttribute("unit^", typeof(TagReference))]
        public TagReference Unit;
        [Abide.Guerilla.Tags.FieldAttribute("style^", typeof(TagReference))]
        public TagReference Style;
        [Abide.Guerilla.Tags.FieldAttribute("vehicle flags", typeof(Int32))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(VehicleFlagsOptions), true)]
        public Int32 VehicleFlags;
        [Abide.Guerilla.Tags.FieldAttribute("ai pathfinding radius:world units#(Ground vehicles)", typeof(Single))]
        public Single AiPathfindingRadius;
        [Abide.Guerilla.Tags.FieldAttribute("ai destination radius:world units#(All vehicles) Distance within which goal is co" +
            "nsidered reached", typeof(Single))]
        public Single AiDestinationRadius;
        [Abide.Guerilla.Tags.FieldAttribute("ai deceleration distanceworld units#(All vehicles)Distance from goal at which AI " +
            "starts to decelerate", typeof(Single))]
        public Single AiDecelerationDistanceworldUnits;
        [Abide.Guerilla.Tags.FieldAttribute("ai turning radius#(Warthog, Pelican, Ghost) Idealized average turning radius (sho" +
            "uld reflect actual vehicle physics)", typeof(Single))]
        public Single AiTurningRadius;
        [Abide.Guerilla.Tags.FieldAttribute("ai inner turning radius (< tr)#(Warthog-type) Idealized minimum turning radius (s" +
            "hould reflect actual vehicle physics)", typeof(Single))]
        public Single AiInnerTurningRadiusLessThanTr;
        [Abide.Guerilla.Tags.FieldAttribute("ai ideal turning radius (> tr)#(Warthogs, ghosts) Ideal turning radius for roundi" +
            "ng turns (barring obstacles, etc.)", typeof(Single))]
        public Single AiIdealTurningRadiusGreaterThanTr;
        [Abide.Guerilla.Tags.FieldAttribute("ai banshee steering maximum#(Banshee)", typeof(Single))]
        public Single AiBansheeSteeringMaximum;
        [Abide.Guerilla.Tags.FieldAttribute("ai max steering angle:degrees#(Warthog, ghosts, wraiths)Maximum steering angle fr" +
            "om forward (ultimately controls turning speed)", typeof(Single))]
        public Single AiMaxSteeringAngle;
        [Abide.Guerilla.Tags.FieldAttribute("ai max steering delta: degrees#(pelicans, dropships, ghosts, wraiths)Maximum delt" +
            "a in steering angle from one tick to the next (ultimately controls turn accelera" +
            "tion)", typeof(Single))]
        public Single AiMaxSteeringDelta;
        [Abide.Guerilla.Tags.FieldAttribute("ai oversteering scale#(Warthog, ghosts, wraiths)", typeof(Single))]
        public Single AiOversteeringScale;
        [Abide.Guerilla.Tags.FieldAttribute("ai sideslip distance#(Ghosts, Dropships) Distance within which Ai will strafe to " +
            "target (as opposed to turning)", typeof(Single))]
        public Single AiSideslipDistance;
        [Abide.Guerilla.Tags.FieldAttribute("ai avoidance distance:world units#(Banshee-style) Look-ahead distance for obstacl" +
            "e avoidance", typeof(Single))]
        public Single AiAvoidanceDistance;
        [Abide.Guerilla.Tags.FieldAttribute("ai min urgency:[0-1]#(Banshees)The minimum urgency with which a turn can be made " +
            "(urgency = percent of maximum steering delta)", typeof(Single))]
        public Single AiMinUrgency;
        [Abide.Guerilla.Tags.FieldAttribute("ai throttle maximum:(0 - 1)#(All vehicles)", typeof(Single))]
        public Single AiThrottleMaximum;
        [Abide.Guerilla.Tags.FieldAttribute("ai goal min throttle scale#(Warthogs, Dropships, ghosts)scale on throttle when wi" +
            "thin \'ai deceleration distance\' of goal (0...1)", typeof(Single))]
        public Single AiGoalMinThrottleScale;
        [Abide.Guerilla.Tags.FieldAttribute("ai turn min throttle scale#(Warthogs, ghosts) Scale on throttle due to nearness t" +
            "o a turn (0...1)", typeof(Single))]
        public Single AiTurnMinThrottleScale;
        [Abide.Guerilla.Tags.FieldAttribute("ai direction min throttle scale#(Warthogs, ghosts) Scale on throttle due to facin" +
            "g away from intended direction (0...1)", typeof(Single))]
        public Single AiDirectionMinThrottleScale;
        [Abide.Guerilla.Tags.FieldAttribute("ai acceleration scale:(0-1)#(warthogs, ghosts) The maximum allowable change in th" +
            "rottle between ticks", typeof(Single))]
        public Single AiAccelerationScale;
        [Abide.Guerilla.Tags.FieldAttribute("ai throttle blend:(0-1)#(dropships, sentinels) The degree of throttle blending be" +
            "tween one tick and the next (0 = no blending)", typeof(Single))]
        public Single AiThrottleBlend;
        [Abide.Guerilla.Tags.FieldAttribute("theoretical max speed:wu/s#(dropships, warthogs, ghosts) About how fast I can go." +
            "", typeof(Single))]
        public Single TheoreticalMaxSpeed;
        [Abide.Guerilla.Tags.FieldAttribute("error scale#(dropships, warthogs) scale on the difference between desired and act" +
            "ual speed, applied to throttle", typeof(Single))]
        public Single ErrorScale;
        [Abide.Guerilla.Tags.FieldAttribute("ai allowable aim deviation angle", typeof(Single))]
        public Single AiAllowableAimDeviationAngle;
        [Abide.Guerilla.Tags.FieldAttribute("ai charge tight angle distance#(All vehicles) The distance at which the tight ang" +
            "le criterion is used for deciding to vehicle charge", typeof(Single))]
        public Single AiChargeTightAngleDistance;
        [Abide.Guerilla.Tags.FieldAttribute("ai charge tight angle:[0-1]#(All vehicles) Angle cosine within which the target m" +
            "ust be when target is closer than tight angle distance in order to charge", typeof(Single))]
        public Single AiChargeTightAngle;
        [Abide.Guerilla.Tags.FieldAttribute("ai charge repeat timeout#(All vehicles) Time delay between vehicle charges", typeof(Single))]
        public Single AiChargeRepeatTimeout;
        [Abide.Guerilla.Tags.FieldAttribute("ai charge look-ahead time#(All vehicles) In deciding when to abort vehicle charge" +
            ", look ahead these many seconds to predict time of contact", typeof(Single))]
        public Single AiChargeLookaheadTime;
        [Abide.Guerilla.Tags.FieldAttribute("ai charge consider distance#Consider charging the target when it is within this r" +
            "ange (0 = infinite distance)", typeof(Single))]
        public Single AiChargeConsiderDistance;
        [Abide.Guerilla.Tags.FieldAttribute("ai charge abort distance#Abort the charge when the target get more than this far " +
            "away (0 = never abort)", typeof(Single))]
        public Single AiChargeAbortDistance;
        [Abide.Guerilla.Tags.FieldAttribute("vehicle ram timeout#The ram behavior stops after a maximum of the given number of" +
            " seconds", typeof(Single))]
        public Single VehicleRamTimeout;
        [Abide.Guerilla.Tags.FieldAttribute("ram paralysis time#The ram behavior freezes the vehicle for a given number of sec" +
            "onds after performing the ram", typeof(Single))]
        public Single RamParalysisTime;
        [Abide.Guerilla.Tags.FieldAttribute("ai cover damage threshold#(All vehicles) Trigger a cover when recent damage is ab" +
            "ove given threshold (damage_vehicle_cover impulse)", typeof(Single))]
        public Single AiCoverDamageThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("ai cover min distance#(All vehicles) When executing vehicle-cover, minimum distan" +
            "ce from the target to flee to", typeof(Single))]
        public Single AiCoverMinDistance;
        [Abide.Guerilla.Tags.FieldAttribute("ai cover time#(All vehicles) How long to stay away from the target", typeof(Single))]
        public Single AiCoverTime;
        [Abide.Guerilla.Tags.FieldAttribute("ai cover min boost distance#(All vehicles) Boosting allowed when distance to cove" +
            "r destination is greater then this.", typeof(Single))]
        public Single AiCoverMinBoostDistance;
        [Abide.Guerilla.Tags.FieldAttribute("turtling recent damage threshold:%#If vehicle turtling behavior is enabled, turtl" +
            "ing is initiated if \'recent damage\' surpasses the given threshold", typeof(Single))]
        public Single TurtlingRecentDamageThreshold;
        [Abide.Guerilla.Tags.FieldAttribute("turtling min time:seconds#If the vehicle turtling behavior is enabled, turtling o" +
            "ccurs for at least the given time", typeof(Single))]
        public Single TurtlingMinTime;
        [Abide.Guerilla.Tags.FieldAttribute("turtling timeout:seconds#The turtled state times out after the given number of se" +
            "conds", typeof(Single))]
        public Single TurtlingTimeout;
        [Abide.Guerilla.Tags.FieldAttribute("obstacle ignore size", typeof(Int16))]
        [Abide.Guerilla.Tags.OptionsAttribute(typeof(ObstacleIgnoreSizeOptions), false)]
        public Int16 ObstacleIgnoreSize;
        [Abide.Guerilla.Tags.FieldAttribute("", typeof(Byte[]))]
        [Abide.Guerilla.Tags.PaddingAttribute(2)]
        public Byte[] EmptyString10;
        public enum VehicleFlagsOptions
        {
            PassengersAdoptOriginalSquad = 1,
        }
        public enum ObstacleIgnoreSizeOptions
        {
            None = 0,
            Tiny = 1,
            Small = 2,
            Medium = 3,
            Large = 4,
            Huge = 5,
            Immobile = 6,
        }
    }
}
#pragma warning restore CS1591
