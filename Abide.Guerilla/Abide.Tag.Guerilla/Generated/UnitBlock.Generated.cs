//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Guerilla.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated unit_block tag block.
    /// </summary>
    public sealed class UnitBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitBlock"/> class.
        /// </summary>
        public UnitBlock()
        {
            this.Fields.Add(new ExplanationField("$$$ UNIT $$$", ""));
            this.Fields.Add(new LongFlagsField("flags", "circular aiming", "destroyed after dying", "half-speed interpolation", "fires from camera", "entrance inside bounding sphere", "doesn\'t show readied weapon", "causes passenger dialogue", "resists pings", "melee attack is fatal", "don\'t reface during pings", "has no aiming", "simple creature", "impact melee attaches to unit", "impact melee dies on shields", "cannot open doors automatically", "melee attackers cannot attach", "not instantly killed by melee", "shield sapping", "runs around flaming", "inconsequential", "special cinematic unit", "ignored by autoaiming", "shields fry infection forms", "unused", "unused", "acts as gunner for parent", "controlled by parent gunner", "parent\'s primary weapon", "unit has boost"));
            this.Fields.Add(new EnumField("default team", "default", "player", "human", "covenant", "flood", "sentinel", "heretic", "prophet", "unused8", "unused9", "unused10", "unused11", "unused12", "unused13", "unused14", "unused15"));
            this.Fields.Add(new EnumField("constant sound volume", "silent", "medium", "loud", "shout", "quiet"));
            this.Fields.Add(new TagReferenceField("integrated light toggle", 1701209701));
            this.Fields.Add(new AngleField("camera field of view:degrees"));
            this.Fields.Add(new RealField("camera stiffness"));
            this.Fields.Add(new StructField<UnitCameraStructBlock>("unit camera"));
            this.Fields.Add(new StructField<UnitSeatAccelerationStructBlock>("acceleration"));
            this.Fields.Add(new RealField("soft ping threshold:[0,1]"));
            this.Fields.Add(new RealField("soft ping interrupt time:seconds"));
            this.Fields.Add(new RealField("hard ping threshold:[0,1]"));
            this.Fields.Add(new RealField("hard ping interrupt time:seconds"));
            this.Fields.Add(new RealField("hard death threshold:[0,1]"));
            this.Fields.Add(new RealField("feign death threshold:[0,1]"));
            this.Fields.Add(new RealField("feign death time:seconds"));
            this.Fields.Add(new RealField("distance of evade anim:world units#this must be set to tell the AI how far it sho" +
                        "uld expect our evade animation to move us"));
            this.Fields.Add(new RealField("distance of dive anim:world units#this must be set to tell the AI how far it shou" +
                        "ld expect our dive animation to move us"));
            this.Fields.Add(new RealField("stunned movement threshold:[0,1]#if we take this much damage in a short space of " +
                        "time we will play our \'stunned movement\' animations"));
            this.Fields.Add(new RealField("feign death chance:[0,1]"));
            this.Fields.Add(new RealField("feign repeat chance:[0,1]"));
            this.Fields.Add(new TagReferenceField("spawned turret character#automatically created character when this unit is driven" +
                        "", 1667785074));
            this.Fields.Add(new ShortBoundsField("spawned actor count#number of actors which we spawn"));
            this.Fields.Add(new RealField("spawned velocity#velocity at which we throw spawned actors"));
            this.Fields.Add(new AngleField("aiming velocity maximum:degrees per second"));
            this.Fields.Add(new AngleField("aiming acceleration maximum:degrees per second squared"));
            this.Fields.Add(new RealFractionField("casual aiming modifier:[0,1]"));
            this.Fields.Add(new AngleField("looking velocity maximum:degrees per second"));
            this.Fields.Add(new AngleField("looking acceleration maximum:degrees per second squared"));
            this.Fields.Add(new StringIdField("right_hand_node#where the primary weapon is attached"));
            this.Fields.Add(new StringIdField("left_hand_node#where the seconday weapon is attached (for dual-pistol modes)"));
            this.Fields.Add(new StructField<UnitAdditionalNodeNamesStructBlock>("more damn nodes"));
            this.Fields.Add(new TagReferenceField("melee damage", 1785754657));
            this.Fields.Add(new StructField<UnitBoardingMeleeStructBlock>("your momma"));
            this.Fields.Add(new EnumField("motion sensor blip size", "medium", "small", "large"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new BlockField<UnitPosturesBlock>("postures", 20));
            this.Fields.Add(new BlockField<UnitHudReferenceBlock>("NEW HUD INTERFACES", 2));
            this.Fields.Add(new BlockField<DialogueVariantBlock>("dialogue variants", 16));
            this.Fields.Add(new RealField("grenade velocity:world units per second"));
            this.Fields.Add(new EnumField("grenade type", "human fragmentation", "covenant plasma"));
            this.Fields.Add(new ShortIntegerField("grenade count"));
            this.Fields.Add(new BlockField<PoweredSeatBlock>("powered seats", 2));
            this.Fields.Add(new BlockField<UnitWeaponBlock>("weapons", 4));
            this.Fields.Add(new BlockField<UnitSeatBlock>("seats", 32));
            this.Fields.Add(new ExplanationField("Boost", ""));
            this.Fields.Add(new StructField<UnitBoostStructBlock>("boost"));
            this.Fields.Add(new ExplanationField("Lipsync", ""));
            this.Fields.Add(new StructField<UnitLipsyncScalesStructBlock>("lipsync"));
        }
        /// <summary>
        /// Gets and returns the name of the unit_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "unit_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the unit_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "unit";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the unit_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the unit_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
