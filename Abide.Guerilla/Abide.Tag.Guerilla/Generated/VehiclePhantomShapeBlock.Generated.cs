//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Guerilla.Generated
{
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated vehicle_phantom_shape_block tag block.
    /// </summary>
    public sealed class VehiclePhantomShapeBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclePhantomShapeBlock"/> class.
        /// </summary>
        public VehiclePhantomShapeBlock()
        {
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new ShortIntegerField("size*"));
            this.Fields.Add(new ShortIntegerField("count*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new LongIntegerField("child shapes size*"));
            this.Fields.Add(new LongIntegerField("child shapes capacity*"));
            this.Fields.Add(new EnumField("shape type*", "sphere", "pill", "box", "triangle", "polyhedron", "multi sphere", "unused 0", "unused 1", "unused 2", "unused 3", "unused 4", "unused 5", "unused 6", "unused 7", "list", "mopp"));
            this.Fields.Add(new ShortBlockIndexField("shape*"));
            this.Fields.Add(new LongIntegerField("collision filter*"));
            this.Fields.Add(new EnumField("shape type*", "sphere", "pill", "box", "triangle", "polyhedron", "multi sphere", "unused 0", "unused 1", "unused 2", "unused 3", "unused 4", "unused 5", "unused 6", "unused 7", "list", "mopp"));
            this.Fields.Add(new ShortBlockIndexField("shape*"));
            this.Fields.Add(new LongIntegerField("collision filter*"));
            this.Fields.Add(new EnumField("shape type*", "sphere", "pill", "box", "triangle", "polyhedron", "multi sphere", "unused 0", "unused 1", "unused 2", "unused 3", "unused 4", "unused 5", "unused 6", "unused 7", "list", "mopp"));
            this.Fields.Add(new ShortBlockIndexField("shape*"));
            this.Fields.Add(new LongIntegerField("collision filter*"));
            this.Fields.Add(new EnumField("shape type*", "sphere", "pill", "box", "triangle", "polyhedron", "multi sphere", "unused 0", "unused 1", "unused 2", "unused 3", "unused 4", "unused 5", "unused 6", "unused 7", "list", "mopp"));
            this.Fields.Add(new ShortBlockIndexField("shape*"));
            this.Fields.Add(new LongIntegerField("collision filter*"));
            this.Fields.Add(new LongIntegerField("multisphere count*"));
            this.Fields.Add(new LongFlagsField("flags", "has aabb phantom", "o.O 1"));
            this.Fields.Add(new PadField("", 8));
            this.Fields.Add(new RealField("x0"));
            this.Fields.Add(new RealField("x1"));
            this.Fields.Add(new RealField("y0"));
            this.Fields.Add(new RealField("y1"));
            this.Fields.Add(new RealField("z0"));
            this.Fields.Add(new RealField("z1"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new ShortIntegerField("size*"));
            this.Fields.Add(new ShortIntegerField("count*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new LongIntegerField("num spheres*"));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new ShortIntegerField("size*"));
            this.Fields.Add(new ShortIntegerField("count*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new LongIntegerField("num spheres*"));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new ShortIntegerField("size*"));
            this.Fields.Add(new ShortIntegerField("count*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new LongIntegerField("num spheres*"));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new ShortIntegerField("size*"));
            this.Fields.Add(new ShortIntegerField("count*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new LongIntegerField("num spheres*"));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new RealVector3dField("sphere*"));
            this.Fields.Add(new SkipField("", 4));
        }
        /// <summary>
        /// Gets and returns the name of the vehicle_phantom_shape_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "vehicle_phantom_shape_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the vehicle_phantom_shape_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "vehicle_phantom_shape_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the vehicle_phantom_shape_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the vehicle_phantom_shape_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 16;
            }
        }
    }
}
