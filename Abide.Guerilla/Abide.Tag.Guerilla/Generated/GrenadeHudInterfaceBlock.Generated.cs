//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Guerilla.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated grenade_hud_interface_block tag block.
    /// </summary>
    public sealed class GrenadeHudInterfaceBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GrenadeHudInterfaceBlock"/> class.
        /// </summary>
        public GrenadeHudInterfaceBlock()
        {
            this.Fields.Add(new ExplanationField("Grenade hud screen alignment", ""));
            this.Fields.Add(new EnumField("anchor", "top left", "top right", "bottom left", "bottom right", "center", "crosshair"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new ExplanationField("Grenade hud background", ""));
            this.Fields.Add(new Point2dField("anchor offset"));
            this.Fields.Add(new RealField("width scale"));
            this.Fields.Add(new RealField("height scale"));
            this.Fields.Add(new WordFlagsField("scaling flags", "don\'t scale offset", "don\'t scale size"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 20));
            this.Fields.Add(new TagReferenceField("interface bitmap", 1651078253));
            this.Fields.Add(new ArgbColorField("default color"));
            this.Fields.Add(new ArgbColorField("flashing color"));
            this.Fields.Add(new RealField("flash period"));
            this.Fields.Add(new RealField("flash delay#time between flashes"));
            this.Fields.Add(new ShortIntegerField("number of flashes"));
            this.Fields.Add(new WordFlagsField("flash flags", "reverse default/flashing colors"));
            this.Fields.Add(new RealField("flash length#time of each flash"));
            this.Fields.Add(new ArgbColorField("disabled color"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ShortIntegerField("sequence index"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new BlockField<GlobalHudMultitextureOverlayDefinition>("multitex overlay", 30));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ExplanationField("Total grenades background", ""));
            this.Fields.Add(new Point2dField("anchor offset"));
            this.Fields.Add(new RealField("width scale"));
            this.Fields.Add(new RealField("height scale"));
            this.Fields.Add(new WordFlagsField("scaling flags", "don\'t scale offset", "don\'t scale size"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 20));
            this.Fields.Add(new TagReferenceField("interface bitmap", 1651078253));
            this.Fields.Add(new ArgbColorField("default color"));
            this.Fields.Add(new ArgbColorField("flashing color"));
            this.Fields.Add(new RealField("flash period"));
            this.Fields.Add(new RealField("flash delay#time between flashes"));
            this.Fields.Add(new ShortIntegerField("number of flashes"));
            this.Fields.Add(new WordFlagsField("flash flags", "reverse default/flashing colors"));
            this.Fields.Add(new RealField("flash length#time of each flash"));
            this.Fields.Add(new ArgbColorField("disabled color"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ShortIntegerField("sequence index"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new BlockField<GlobalHudMultitextureOverlayDefinition>("multitex overlay", 30));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ExplanationField("Total grenades numbers", ""));
            this.Fields.Add(new Point2dField("anchor offset"));
            this.Fields.Add(new RealField("width scale"));
            this.Fields.Add(new RealField("height scale"));
            this.Fields.Add(new WordFlagsField("scaling flags", "don\'t scale offset", "don\'t scale size"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 20));
            this.Fields.Add(new ArgbColorField("default color"));
            this.Fields.Add(new ArgbColorField("flashing color"));
            this.Fields.Add(new RealField("flash period"));
            this.Fields.Add(new RealField("flash delay#time between flashes"));
            this.Fields.Add(new ShortIntegerField("number of flashes"));
            this.Fields.Add(new WordFlagsField("flash flags", "reverse default/flashing colors"));
            this.Fields.Add(new RealField("flash length#time of each flash"));
            this.Fields.Add(new ArgbColorField("disabled color"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new CharIntegerField("maximum number of digits"));
            this.Fields.Add(new ByteFlagsField("flags", "show leading zeros", "only show when zoomed", "draw a trailing m"));
            this.Fields.Add(new CharIntegerField("number of fractional digits"));
            this.Fields.Add(new PadField("", 1));
            this.Fields.Add(new PadField("", 12));
            this.Fields.Add(new ShortIntegerField("flash cutoff"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ExplanationField("Total grenades overlays", ""));
            this.Fields.Add(new TagReferenceField("Overlay bitmap", 1651078253));
            this.Fields.Add(new BlockField<GrenadeHudOverlayBlock>("Overlays", 16));
            this.Fields.Add(new BlockField<GrenadeHudSoundBlock>("Warning sounds", 12));
            this.Fields.Add(new PadField("", 68));
            this.Fields.Add(new ExplanationField("Messaging information", ""));
            this.Fields.Add(new ShortIntegerField("sequence index#sequence index into the global hud icon bitmap"));
            this.Fields.Add(new ShortIntegerField("width offset#extra spacing beyond bitmap width for text alignment"));
            this.Fields.Add(new Point2dField("offset from reference corner"));
            this.Fields.Add(new ArgbColorField("override icon color"));
            this.Fields.Add(new CharIntegerField("frame rate [0,30]"));
            this.Fields.Add(new ByteFlagsField("flags", "use text from string_list instead", "override default color", "width offset is absolute icon width"));
            this.Fields.Add(new ShortIntegerField("text index"));
            this.Fields.Add(new PadField("", 48));
        }
        /// <summary>
        /// Gets and returns the name of the grenade_hud_interface_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "grenade_hud_interface_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the grenade_hud_interface_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "grenade_hud_interface";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the grenade_hud_interface_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the grenade_hud_interface_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
