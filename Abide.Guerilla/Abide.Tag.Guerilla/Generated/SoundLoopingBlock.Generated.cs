//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Guerilla.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated sound_looping_block tag block.
    /// </summary>
    public sealed class SoundLoopingBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoundLoopingBlock"/> class.
        /// </summary>
        public SoundLoopingBlock()
        {
            this.Fields.Add(new LongFlagsField("flags", "deafening to AIs#when used as a background stereo track, causes nearby AIs to be " +
                        "unable to hear", "not a loop#this is a collection of permutations strung together that should play " +
                        "once then stop.", "stops music#all other music loops will stop when this one starts.", "always spatialize#always play as 3d sound, even in first person", "synchronize playback#synchronizes playback with other looping sounds attached to " +
                        "the owner of this sound", "synchronize tracks", "fake spatialization with distance", "combine all 3d playback"));
            this.Fields.Add(new RealField("marty\'s music time: seconds"));
            this.Fields.Add(new RealField(""));
            this.Fields.Add(new PadField("", 8));
            this.Fields.Add(new TagReferenceField("", -3));
            this.Fields.Add(new BlockField<LoopingSoundTrackBlock>("tracks#tracks play in parallel and loop continuously for the duration of the loop" +
                        "ing sound.", 3));
            this.Fields.Add(new BlockField<LoopingSoundDetailBlock>("detail sounds#detail sounds play at random throughout the duration of the looping" +
                        " sound.", 12));
        }
        /// <summary>
        /// Gets and returns the name of the sound_looping_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "sound_looping_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the sound_looping_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "sound_looping";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the sound_looping_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the sound_looping_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
