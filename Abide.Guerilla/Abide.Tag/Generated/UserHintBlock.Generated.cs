//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated user_hint_block tag block.
    /// </summary>
    public sealed class UserHintBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserHintBlock"/> class.
        /// </summary>
        public UserHintBlock()
        {
            this.Fields.Add(new BlockField<UserHintPointBlock>("point geometry", 200));
            this.Fields.Add(new BlockField<UserHintRayBlock>("ray geometry", 200));
            this.Fields.Add(new BlockField<UserHintLineSegmentBlock>("line segment geometry", 200));
            this.Fields.Add(new BlockField<UserHintParallelogramBlock>("parallelogram geometry", 200));
            this.Fields.Add(new BlockField<UserHintPolygonBlock>("polygon geometry", 200));
            this.Fields.Add(new BlockField<UserHintJumpBlock>("jump hints", 200));
            this.Fields.Add(new BlockField<UserHintClimbBlock>("climb hints", 200));
            this.Fields.Add(new BlockField<UserHintWellBlock>("well hints", 200));
            this.Fields.Add(new BlockField<UserHintFlightBlock>("flight hints", 50));
        }
        /// <summary>
        /// Gets and returns the name of the user_hint_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "user_hint_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the user_hint_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "user_hint_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the user_hint_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the user_hint_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the user_hint_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the user_hint_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<UserHintPointBlock>)(this.Fields[0])).WriteChildren(writer);
            ((BlockField<UserHintRayBlock>)(this.Fields[1])).WriteChildren(writer);
            ((BlockField<UserHintLineSegmentBlock>)(this.Fields[2])).WriteChildren(writer);
            ((BlockField<UserHintParallelogramBlock>)(this.Fields[3])).WriteChildren(writer);
            ((BlockField<UserHintPolygonBlock>)(this.Fields[4])).WriteChildren(writer);
            ((BlockField<UserHintJumpBlock>)(this.Fields[5])).WriteChildren(writer);
            ((BlockField<UserHintClimbBlock>)(this.Fields[6])).WriteChildren(writer);
            ((BlockField<UserHintWellBlock>)(this.Fields[7])).WriteChildren(writer);
            ((BlockField<UserHintFlightBlock>)(this.Fields[8])).WriteChildren(writer);
        }
    }
}
