//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated particle_block tag block.
    /// </summary>
    public sealed class ParticleBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticleBlock"/> class.
        /// </summary>
        public ParticleBlock()
        {
            this.Fields.Add(new LongFlagsField("flags", "spins", "random u mirror", "random v mirror", "frame animation one shot", "select random sequence", "disable frame blending", "can animate backwards", "receive lightmap lighting", "tint from diffuse texture", "dies at rest", "dies on structure collision", "dies in media", "dies in air", "bitmap authored vertically", "has sweetener"));
            this.Fields.Add(new EnumField("particle billboard style", "screen facing", "parallel to direction", "perpendicular to direction", "vertical", "horizontal"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ShortIntegerField("first sequence index"));
            this.Fields.Add(new ShortIntegerField("sequence count"));
            this.Fields.Add(new ExplanationField("Shader Parameters", null));
            this.Fields.Add(new TagReferenceField("shader template"));
            this.Fields.Add(new BlockField<GlobalShaderParameterBlock>("shader parameters", 64));
            this.Fields.Add(new ExplanationField("Color", null));
            this.Fields.Add(new StructField<ParticlePropertyColorStructNewBlock>("color"));
            this.Fields.Add(new ExplanationField("Alpha", null));
            this.Fields.Add(new StructField<ParticlePropertyScalarStructNewBlock>("alpha"));
            this.Fields.Add(new ExplanationField("Scale", null));
            this.Fields.Add(new StructField<ParticlePropertyScalarStructNewBlock>("scale"));
            this.Fields.Add(new ExplanationField("Rotation", null));
            this.Fields.Add(new StructField<ParticlePropertyScalarStructNewBlock>("rotation"));
            this.Fields.Add(new ExplanationField("Frame index", null));
            this.Fields.Add(new StructField<ParticlePropertyScalarStructNewBlock>("frame index"));
            this.Fields.Add(new ExplanationField("Spawned Effects", null));
            this.Fields.Add(new TagReferenceField("collision effect#effect, material effect or sound spawned when this particle coll" +
                        "ides with something"));
            this.Fields.Add(new TagReferenceField("death effect#effect, material effect or sound spawned when this particle dies"));
            this.Fields.Add(new ExplanationField("Attached Particle Systems", null));
            this.Fields.Add(new BlockField<EffectLocationsBlock>("locations", 32));
            this.Fields.Add(new BlockField<ParticleSystemDefinitionBlockNew>("attached particle systems", 32));
            this.Fields.Add(new BlockField<ShaderPostprocessDefinitionNewBlock>("", 1));
            this.Fields.Add(new PadField("", 8));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new PadField("", 16));
        }
        /// <summary>
        /// Gets and returns the name of the particle_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "particle_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the particle_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "particle";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the particle_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the particle_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the particle_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the particle_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<GlobalShaderParameterBlock>)(this.Fields[7])).WriteChildren(writer);
            ((BlockField<EffectLocationsBlock>)(this.Fields[22])).WriteChildren(writer);
            ((BlockField<ParticleSystemDefinitionBlockNew>)(this.Fields[23])).WriteChildren(writer);
            ((BlockField<ShaderPostprocessDefinitionNewBlock>)(this.Fields[24])).WriteChildren(writer);
        }
    }
}
