//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated multiplayer_runtime_block tag block.
    /// </summary>
    public sealed class MultiplayerRuntimeBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiplayerRuntimeBlock"/> class.
        /// </summary>
        public MultiplayerRuntimeBlock()
        {
            this.Fields.Add(new TagReferenceField("flag"));
            this.Fields.Add(new TagReferenceField("ball"));
            this.Fields.Add(new TagReferenceField("unit"));
            this.Fields.Add(new TagReferenceField("flag shader"));
            this.Fields.Add(new TagReferenceField("hill shader"));
            this.Fields.Add(new TagReferenceField("head"));
            this.Fields.Add(new TagReferenceField("juggernaut powerup"));
            this.Fields.Add(new TagReferenceField("da bomb"));
            this.Fields.Add(new TagReferenceField(""));
            this.Fields.Add(new TagReferenceField(""));
            this.Fields.Add(new TagReferenceField(""));
            this.Fields.Add(new TagReferenceField(""));
            this.Fields.Add(new TagReferenceField(""));
            this.Fields.Add(new BlockField<WeaponsBlock>("weapons", 20));
            this.Fields.Add(new BlockField<VehiclesBlock>("vehicles", 20));
            this.Fields.Add(new StructField<GrenadeAndPowerupStructBlock>("arr!"));
            this.Fields.Add(new TagReferenceField("in game text"));
            this.Fields.Add(new BlockField<SoundsBlock>("sounds", 60));
            this.Fields.Add(new BlockField<GameEngineGeneralEventBlock>("general events", 128));
            this.Fields.Add(new BlockField<GameEngineFlavorEventBlock>("flavor events", 128));
            this.Fields.Add(new BlockField<GameEngineSlayerEventBlock>("slayer events", 128));
            this.Fields.Add(new BlockField<GameEngineCtfEventBlock>("ctf events", 128));
            this.Fields.Add(new BlockField<GameEngineOddballEventBlock>("oddball events", 128));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GameEngineKingEventBlock>("king events", 128));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GameEngineJuggernautEventBlock>("juggernaut events", 128));
            this.Fields.Add(new BlockField<GameEngineTerritoriesEventBlock>("territories events", 128));
            this.Fields.Add(new BlockField<GameEngineAssaultEventBlock>("invasion events", 128));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new TagReferenceField("default item collection 1"));
            this.Fields.Add(new TagReferenceField("default item collection 2"));
            this.Fields.Add(new LongIntegerField("default frag grenade count"));
            this.Fields.Add(new LongIntegerField("default plasma grenade count"));
            this.Fields.Add(new PadField("", 40));
            this.Fields.Add(new ExplanationField("dynamic spawn zones", null));
            this.Fields.Add(new RealField("dynamic zone upper height"));
            this.Fields.Add(new RealField("dynamic zone lower height"));
            this.Fields.Add(new PadField("", 40));
            this.Fields.Add(new ExplanationField("enemy", null));
            this.Fields.Add(new RealField("enemy inner radius"));
            this.Fields.Add(new RealField("enemy outer radius"));
            this.Fields.Add(new RealField("enemy weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("friend", null));
            this.Fields.Add(new RealField("friend inner radius"));
            this.Fields.Add(new RealField("friend outer radius"));
            this.Fields.Add(new RealField("friend weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("enemy vehicle", null));
            this.Fields.Add(new RealField("enemy vehicle inner radius"));
            this.Fields.Add(new RealField("enemy vehicle outer radius"));
            this.Fields.Add(new RealField("enemy vehicle weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("friendly vehicle", null));
            this.Fields.Add(new RealField("friendly vehicle inner radius"));
            this.Fields.Add(new RealField("friendly vehicle outer radius"));
            this.Fields.Add(new RealField("friendly vehicle weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("empty vehicle", null));
            this.Fields.Add(new RealField("empty vehicle inner radius"));
            this.Fields.Add(new RealField("empty vehicle outer radius"));
            this.Fields.Add(new RealField("empty vehicle weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("oddball inclusion", null));
            this.Fields.Add(new RealField("oddball inclusion inner radius"));
            this.Fields.Add(new RealField("oddball inclusion outer radius"));
            this.Fields.Add(new RealField("oddball inclusion weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("oddball exclusion", null));
            this.Fields.Add(new RealField("oddball exclusion inner radius"));
            this.Fields.Add(new RealField("oddball exclusion outer radius"));
            this.Fields.Add(new RealField("oddball exclusion weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("hill inclusion", null));
            this.Fields.Add(new RealField("hill inclusion inner radius"));
            this.Fields.Add(new RealField("hill inclusion outer radius"));
            this.Fields.Add(new RealField("hill inclusion weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("hill exclusion", null));
            this.Fields.Add(new RealField("hill exclusion inner radius"));
            this.Fields.Add(new RealField("hill exclusion outer radius"));
            this.Fields.Add(new RealField("hill exclusion weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("last race flag", null));
            this.Fields.Add(new RealField("last race flag inner radius"));
            this.Fields.Add(new RealField("last race flag outer radius"));
            this.Fields.Add(new RealField("last race flag weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("dead ally", null));
            this.Fields.Add(new RealField("dead ally inner radius"));
            this.Fields.Add(new RealField("dead ally outer radius"));
            this.Fields.Add(new RealField("dead ally weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("controlled territory", null));
            this.Fields.Add(new RealField("controlled territory inner radius"));
            this.Fields.Add(new RealField("controlled territory outer radius"));
            this.Fields.Add(new RealField("controlled territory weight"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new PadField("", 560));
            this.Fields.Add(new PadField("", 48));
            this.Fields.Add(new BlockField<MultiplayerConstantsBlock>("multiplayer constants", 1));
            this.Fields.Add(new BlockField<GameEngineStatusResponseBlock>("state responses", 32));
            this.Fields.Add(new TagReferenceField("scoreboard hud definition"));
            this.Fields.Add(new TagReferenceField("scoreboard emblem shader"));
            this.Fields.Add(new TagReferenceField("scoreboard emblem bitmap"));
            this.Fields.Add(new TagReferenceField("scoreboard dead emblem shader"));
            this.Fields.Add(new TagReferenceField("scoreboard dead emblem bitmap"));
        }
        /// <summary>
        /// Gets and returns the name of the multiplayer_runtime_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "multiplayer_runtime_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the multiplayer_runtime_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "multiplayer_runtime_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the multiplayer_runtime_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the multiplayer_runtime_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the multiplayer_runtime_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the multiplayer_runtime_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<WeaponsBlock>)(this.Fields[13])).WriteChildren(writer);
            ((BlockField<VehiclesBlock>)(this.Fields[14])).WriteChildren(writer);
            ((BlockField<SoundsBlock>)(this.Fields[17])).WriteChildren(writer);
            ((BlockField<GameEngineGeneralEventBlock>)(this.Fields[18])).WriteChildren(writer);
            ((BlockField<GameEngineFlavorEventBlock>)(this.Fields[19])).WriteChildren(writer);
            ((BlockField<GameEngineSlayerEventBlock>)(this.Fields[20])).WriteChildren(writer);
            ((BlockField<GameEngineCtfEventBlock>)(this.Fields[21])).WriteChildren(writer);
            ((BlockField<GameEngineOddballEventBlock>)(this.Fields[22])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[23])).WriteChildren(writer);
            ((BlockField<GameEngineKingEventBlock>)(this.Fields[24])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[25])).WriteChildren(writer);
            ((BlockField<GameEngineJuggernautEventBlock>)(this.Fields[26])).WriteChildren(writer);
            ((BlockField<GameEngineTerritoriesEventBlock>)(this.Fields[27])).WriteChildren(writer);
            ((BlockField<GameEngineAssaultEventBlock>)(this.Fields[28])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[29])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[30])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[31])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[32])).WriteChildren(writer);
            ((BlockField<MultiplayerConstantsBlock>)(this.Fields[104])).WriteChildren(writer);
            ((BlockField<GameEngineStatusResponseBlock>)(this.Fields[105])).WriteChildren(writer);
        }
    }
}
