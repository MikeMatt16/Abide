//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated character_block tag block.
    /// </summary>
    public sealed class CharacterBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharacterBlock"/> class.
        /// </summary>
        public CharacterBlock()
        {
            this.Fields.Add(new LongFlagsField("Character flags", "Flag1"));
            this.Fields.Add(new TagReferenceField("parent character"));
            this.Fields.Add(new TagReferenceField("unit"));
            this.Fields.Add(new TagReferenceField("creature#Creature reference for swarm characters ONLY"));
            this.Fields.Add(new TagReferenceField("style"));
            this.Fields.Add(new TagReferenceField("major character"));
            this.Fields.Add(new BlockField<CharacterVariantsBlock>("variants", 64));
            this.Fields.Add(new BlockField<CharacterGeneralBlock>("general properties", 1));
            this.Fields.Add(new BlockField<CharacterVitalityBlock>("vitality properties", 1));
            this.Fields.Add(new BlockField<CharacterPlacementBlock>("placement properties", 1));
            this.Fields.Add(new BlockField<CharacterPerceptionBlock>("perception properties", 4));
            this.Fields.Add(new BlockField<CharacterLookBlock>("look properties", 1));
            this.Fields.Add(new BlockField<CharacterMovementBlock>("movement properties", 1));
            this.Fields.Add(new BlockField<CharacterSwarmBlock>("swarm properties", 3));
            this.Fields.Add(new BlockField<CharacterReadyBlock>("ready properties", 3));
            this.Fields.Add(new BlockField<CharacterEngageBlock>("engage properties", 3));
            this.Fields.Add(new BlockField<CharacterChargeBlock>("charge properties", 3));
            this.Fields.Add(new ExplanationField("Danger Values", null));
            this.Fields.Add(new BlockField<CharacterEvasionBlock>("evasion properties", 3));
            this.Fields.Add(new BlockField<CharacterCoverBlock>("cover properties", 3));
            this.Fields.Add(new BlockField<CharacterRetreatBlock>("retreat properties", 3));
            this.Fields.Add(new BlockField<CharacterSearchBlock>("search properties", 3));
            this.Fields.Add(new BlockField<CharacterPresearchBlock>("pre-search properties", 3));
            this.Fields.Add(new BlockField<CharacterIdleBlock>("idle properties", 3));
            this.Fields.Add(new BlockField<CharacterVocalizationBlock>("vocalization properties", 1));
            this.Fields.Add(new BlockField<CharacterBoardingBlock>("boarding properties", 1));
            this.Fields.Add(new BlockField<CharacterBossBlock>("boss properties", 1));
            this.Fields.Add(new BlockField<CharacterWeaponsBlock>("weapons properties", 100));
            this.Fields.Add(new BlockField<CharacterFiringPatternPropertiesBlock>("firing pattern properties", 100));
            this.Fields.Add(new BlockField<CharacterGrenadesBlock>("grenades properties", 10));
            this.Fields.Add(new BlockField<CharacterVehicleBlock>("vehicle properties", 100));
        }
        /// <summary>
        /// Gets and returns the name of the character_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "character_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the character_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "character";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the character_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the character_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the character_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the character_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<CharacterVariantsBlock>)(this.Fields[6])).WriteChildren(writer);
            ((BlockField<CharacterGeneralBlock>)(this.Fields[7])).WriteChildren(writer);
            ((BlockField<CharacterVitalityBlock>)(this.Fields[8])).WriteChildren(writer);
            ((BlockField<CharacterPlacementBlock>)(this.Fields[9])).WriteChildren(writer);
            ((BlockField<CharacterPerceptionBlock>)(this.Fields[10])).WriteChildren(writer);
            ((BlockField<CharacterLookBlock>)(this.Fields[11])).WriteChildren(writer);
            ((BlockField<CharacterMovementBlock>)(this.Fields[12])).WriteChildren(writer);
            ((BlockField<CharacterSwarmBlock>)(this.Fields[13])).WriteChildren(writer);
            ((BlockField<CharacterReadyBlock>)(this.Fields[14])).WriteChildren(writer);
            ((BlockField<CharacterEngageBlock>)(this.Fields[15])).WriteChildren(writer);
            ((BlockField<CharacterChargeBlock>)(this.Fields[16])).WriteChildren(writer);
            ((BlockField<CharacterEvasionBlock>)(this.Fields[18])).WriteChildren(writer);
            ((BlockField<CharacterCoverBlock>)(this.Fields[19])).WriteChildren(writer);
            ((BlockField<CharacterRetreatBlock>)(this.Fields[20])).WriteChildren(writer);
            ((BlockField<CharacterSearchBlock>)(this.Fields[21])).WriteChildren(writer);
            ((BlockField<CharacterPresearchBlock>)(this.Fields[22])).WriteChildren(writer);
            ((BlockField<CharacterIdleBlock>)(this.Fields[23])).WriteChildren(writer);
            ((BlockField<CharacterVocalizationBlock>)(this.Fields[24])).WriteChildren(writer);
            ((BlockField<CharacterBoardingBlock>)(this.Fields[25])).WriteChildren(writer);
            ((BlockField<CharacterBossBlock>)(this.Fields[26])).WriteChildren(writer);
            ((BlockField<CharacterWeaponsBlock>)(this.Fields[27])).WriteChildren(writer);
            ((BlockField<CharacterFiringPatternPropertiesBlock>)(this.Fields[28])).WriteChildren(writer);
            ((BlockField<CharacterGrenadesBlock>)(this.Fields[29])).WriteChildren(writer);
            ((BlockField<CharacterVehicleBlock>)(this.Fields[30])).WriteChildren(writer);
        }
    }
}
