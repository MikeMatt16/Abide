//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated character_grenades_block tag block.
    /// </summary>
    public sealed class CharacterGrenadesBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharacterGrenadesBlock"/> class.
        /// </summary>
        public CharacterGrenadesBlock()
        {
            this.Fields.Add(new LongFlagsField("grenades flags", "Flag1"));
            this.Fields.Add(new EnumField("grenade type^#type of grenades that we throw", "human fragmentation", "covenant plasma"));
            this.Fields.Add(new EnumField("trajectory type#how we throw our grenades", "toss", "lob", "bounce"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ShortIntegerField("minimum enemy count#how many enemies must be within the radius of the grenade bef" +
                        "ore we will consider throwing there"));
            this.Fields.Add(new RealField("enemy radius:world units#we consider enemies within this radius when determining " +
                        "where to throw"));
            this.Fields.Add(new RealField("grenade ideal velocity:world units per second#how fast we LIKE to throw our grena" +
                        "des"));
            this.Fields.Add(new RealField("grenade velocity:world units per second#the fastest we can possibly throw our gre" +
                        "nades"));
            this.Fields.Add(new RealBoundsField("grenade ranges:world units#ranges within which we will consider throwing a grenad" +
                        "e"));
            this.Fields.Add(new RealField("collateral damage radius:world units#we won\'t throw if there are friendlies aroun" +
                        "d our target within this range"));
            this.Fields.Add(new RealFractionField("grenade chance:[0,1]#how likely we are to throw a grenade in one second"));
            this.Fields.Add(new RealField("grenade throw delay:seconds#How long we have to wait after throwing a grenade bef" +
                        "ore we can throw another one"));
            this.Fields.Add(new RealFractionField("grenade uncover chance:[0,1]#how likely we are to throw a grenade to flush out a " +
                        "target in one second"));
            this.Fields.Add(new RealFractionField("anti-vehicle grenade chance:[0,1]#how likely we are to throw a grenade against a " +
                        "vehicle"));
            this.Fields.Add(new ExplanationField("Grenade drop when killed", null));
            this.Fields.Add(new ShortBoundsField("grenade count#number of grenades that we start with"));
            this.Fields.Add(new RealField("dont drop grenades chance:[0,1]#how likely we are not to drop any grenades when w" +
                        "e die, even if we still have some"));
        }
        /// <summary>
        /// Gets and returns the name of the character_grenades_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "character_grenades_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the character_grenades_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "character_grenades_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the character_grenades_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 10;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the character_grenades_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
