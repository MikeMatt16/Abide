//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated bitmap_block tag block.
    /// </summary>
    public sealed class BitmapBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BitmapBlock"/> class.
        /// </summary>
        public BitmapBlock()
        {
            this.Fields.Add(new ExplanationField("Type", null));
            this.Fields.Add(new EnumField("Type", "2D Textures", "3D Textures", "Cube Maps", "Sprites", "Interface Bitmaps"));
            this.Fields.Add(new ExplanationField("Format", null));
            this.Fields.Add(new EnumField("Format", "Compressed with Color-Key Transparency", "Compressed with Explicit Alpha", "Compressed with Interpolated Alpha", "16-Bit Color", "32-Bit Color", "Monochrome"));
            this.Fields.Add(new ExplanationField("Usage", null));
            this.Fields.Add(new EnumField("Usage", "Alpha Blend", "Default", "Height Map", "Detail Map", "Light Map", "Vector Map", "Height Map BLUE 255", "embm", "Height Map A8L8", "Height Map G8B8", "Height Map G8B8 w/ Alpha"));
            this.Fields.Add(new WordFlagsField("Flags", "Enable Diffusion Dithering", "Disable Height Map Compression", "Uniform Sprite Sequences", "Filthy Sprite Bug Fix", "Use Sharp Bump Filter", "UNUSED", "Use Clamped/Mirrored Bump Filter", "Invert Detail Fade", "Swap x-y Vector Components", "Convert from Signed", "Convert to Signed", "Import mipmap Chains", "Intentionally True Color"));
            this.Fields.Add(new ExplanationField("Postprocessing", null));
            this.Fields.Add(new RealFractionField("Detail Fade Factor:[0,1]#0 means fade to gray by last mipmap; 1 means fade to gra" +
                        "y by first mipmap."));
            this.Fields.Add(new RealFractionField("Sharpen Amount:[0,1]#Sharpens mipmap after downsampling."));
            this.Fields.Add(new RealField("Bump Height:repeats#tApparent height of the bump map above the triangle onto whic" +
                        "h it is textured, in texture repeats (i.e., 1.0 would be as high as the texture " +
                        "is wide)."));
            this.Fields.Add(new EnumField("Sprite Size", "32 x 32", "64 x 64", "128 x 128", "256 x 256", "512 x 512", "1024 x 1024"));
            this.Fields.Add(new ShortIntegerField("EMPTY STRING"));
            this.Fields.Add(new ExplanationField("Color Plate", null));
            this.Fields.Add(new ShortIntegerField("Color Plate Width*:pixels"));
            this.Fields.Add(new ShortIntegerField("Color Plate Height*:pixels"));
            this.Fields.Add(new SkipField("Compressed Color Plate Data*", 8));
            this.Fields.Add(new ExplanationField("Processed Pixel Data", null));
            this.Fields.Add(new SkipField("Processed Pixel Data*", 8));
            this.Fields.Add(new ExplanationField("Miscellaneous", null));
            this.Fields.Add(new RealField("Blur Filter Size:[0,10] pixels#Blurs the bitmap before generating mipmaps."));
            this.Fields.Add(new RealField("Alpha Bias:[-1,1]#Affects alpha mipmap generation."));
            this.Fields.Add(new ShortIntegerField("Mipmap Count:levels#0 Defaults to all levels."));
            this.Fields.Add(new ExplanationField("...More Sprite Processing", null));
            this.Fields.Add(new EnumField("Sprite Usage", "Blend/Add/Subtract/Max", "Multiply/Min", "Double Multiply"));
            this.Fields.Add(new ShortIntegerField("Sprite Spacing*"));
            this.Fields.Add(new ExplanationField("...More Stuff", null));
            this.Fields.Add(new EnumField("Force Format", "Default", "Force G8B8", "Force DXT1", "Force DXT3", "Force DXT5", "Force ALPHA-LUMINANCE8", "Force A4R4G4B4"));
            this.Fields.Add(new BlockField<BitmapGroupSequenceBlock>("Sequences*", 256));
            this.Fields.Add(new BlockField<BitmapDataBlock>("Bitmaps*", 65536));
        }
        /// <summary>
        /// Gets and returns the name of the bitmap_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "bitmap_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the bitmap_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "bitmap";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the bitmap_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the bitmap_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the bitmap_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the bitmap_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<BitmapGroupSequenceBlock>)(this.Fields[28])).WriteChildren(writer);
            ((BlockField<BitmapDataBlock>)(this.Fields[29])).WriteChildren(writer);
        }
    }
}
