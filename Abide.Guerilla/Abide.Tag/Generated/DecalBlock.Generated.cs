//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated decal_block tag block.
    /// </summary>
    public sealed class DecalBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecalBlock"/> class.
        /// </summary>
        public DecalBlock()
        {
            this.Fields.Add(new ExplanationField("DECAL", null));
            this.Fields.Add(new WordFlagsField("flags", "geometry inherited by next decal in chain", "interpolate color in hsv", "...more colors", "no random rotation", "UNUSED", "SAPIEN- snap to axis", "SAPIEN- incremental counter", "UNUSED", "preserve aspect", "UNUSED"));
            this.Fields.Add(new EnumField("type#controls how the decal wraps onto surface geometry", "scratch", "splatter", "burn", "painted sign"));
            this.Fields.Add(new EnumField("layer", "lit alpha-blend prelight", "lit alpha-blend", "double multiply", "multiply", "max", "add", "error"));
            this.Fields.Add(new ShortIntegerField("max overlapping count"));
            this.Fields.Add(new TagReferenceField("next decal in chain"));
            this.Fields.Add(new RealBoundsField("radius:world units#0 defaults to 0.125"));
            this.Fields.Add(new RealField("radius overlap rejection:muliplier"));
            this.Fields.Add(new RealRgbColorField("color lower bounds"));
            this.Fields.Add(new RealRgbColorField("color upper bounds"));
            this.Fields.Add(new RealBoundsField("lifetime:seconds"));
            this.Fields.Add(new RealBoundsField("decay time:seconds"));
            this.Fields.Add(new PadField("", 40));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 20));
            this.Fields.Add(new TagReferenceField("bitmap"));
            this.Fields.Add(new PadField("", 20));
            this.Fields.Add(new RealField("maximum sprite extent*:pixels"));
            this.Fields.Add(new PadField("", 4));
        }
        /// <summary>
        /// Gets and returns the name of the decal_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "decal_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the decal_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "decal";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the decal_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the decal_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
