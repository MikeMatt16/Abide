//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated light_volume_volume_block tag block.
    /// </summary>
    public sealed class LightVolumeVolumeBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LightVolumeVolumeBlock"/> class.
        /// </summary>
        public LightVolumeVolumeBlock()
        {
            this.Fields.Add(new ExplanationField("VOLUME", null));
            this.Fields.Add(new LongFlagsField("flags", "force linear radius function", "force linear offset", "force differential evaluation", "fuzzy", "not scaled by event duration", "scaled by marker"));
            this.Fields.Add(new TagReferenceField("bitmap"));
            this.Fields.Add(new LongIntegerField("sprite count:[4,256]"));
            this.Fields.Add(new ExplanationField("OFFSET", null));
            this.Fields.Add(new StructField<ScalarFunctionStructBlock>("offset function"));
            this.Fields.Add(new ExplanationField("RADIUS", null));
            this.Fields.Add(new StructField<ScalarFunctionStructBlock>("radius function"));
            this.Fields.Add(new ExplanationField("BRIGHTNESS", null));
            this.Fields.Add(new StructField<ScalarFunctionStructBlock>("brightness function"));
            this.Fields.Add(new ExplanationField("COLOR", null));
            this.Fields.Add(new StructField<ColorFunctionStructBlock>("color function"));
            this.Fields.Add(new ExplanationField("FACING", null));
            this.Fields.Add(new StructField<ScalarFunctionStructBlock>("facing function"));
            this.Fields.Add(new BlockField<LightVolumeAspectBlock>("aspect", 1));
            this.Fields.Add(new ExplanationField("POSTPROCESS CONTROL", null));
            this.Fields.Add(new RealFractionField("radius frac min*:[0.00390625, 1.0]"));
            this.Fields.Add(new RealFractionField("DEPRECATED!! x-step exponent*:[0.5, 0.875]"));
            this.Fields.Add(new LongIntegerField("DEPRECATED!! x-buffer length*:[32, 512]"));
            this.Fields.Add(new LongIntegerField("x-buffer spacing*:[1, 256]"));
            this.Fields.Add(new LongIntegerField("x-buffer min iterations*:[1, 256]"));
            this.Fields.Add(new LongIntegerField("x-buffer max iterations*:[1, 256]"));
            this.Fields.Add(new RealFractionField("x-delta max error*:[0.001, 0.1]"));
            this.Fields.Add(new SkipField("", 4));
            this.Fields.Add(new BlockField<LightVolumeRuntimeOffsetBlock>("*", 256));
            this.Fields.Add(new SkipField("", 48));
        }
        /// <summary>
        /// Gets and returns the name of the light_volume_volume_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "light_volume_volume_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the light_volume_volume_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "volume";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the light_volume_volume_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 16;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the light_volume_volume_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the light_volume_volume_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the light_volume_volume_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<LightVolumeAspectBlock>)(this.Fields[14])).WriteChildren(writer);
            ((BlockField<LightVolumeRuntimeOffsetBlock>)(this.Fields[24])).WriteChildren(writer);
        }
    }
}
