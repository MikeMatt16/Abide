//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated game_engine_territories_event_block tag block.
    /// </summary>
    public sealed class GameEngineTerritoriesEventBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameEngineTerritoriesEventBlock"/> class.
        /// </summary>
        public GameEngineTerritoriesEventBlock()
        {
            this.Fields.Add(new WordFlagsField("flags", "quantity message"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new EnumField("event^", "game start", "territory control gained", "territory contest lost", "all territories cntrld", "team territory ctrl gained", "team territory ctrl lost", "team all territories cntrld"));
            this.Fields.Add(new EnumField("audience^", "cause player", "cause team", "effect player", "effect team", "all"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new StringIdField("display string"));
            this.Fields.Add(new EnumField("required field", "NONE", "cause player", "cause team", "effect player", "effect team"));
            this.Fields.Add(new EnumField("excluded audience", "NONE", "cause player", "cause team", "effect player", "effect team"));
            this.Fields.Add(new StringIdField("primary string"));
            this.Fields.Add(new LongIntegerField("primary string duration:seconds"));
            this.Fields.Add(new StringIdField("plural display string"));
            this.Fields.Add(new PadField("", 28));
            this.Fields.Add(new RealField("sound delay (announcer only)"));
            this.Fields.Add(new WordFlagsField("sound flags", "announcer sound"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new TagReferenceField("sound^"));
            this.Fields.Add(new StructField<SoundResponseExtraSoundsStructBlock>("extra sounds"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new BlockField<SoundResponseDefinitionBlock>("sound permutations", 10));
        }
        /// <summary>
        /// Gets and returns the name of the game_engine_territories_event_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "game_engine_territories_event_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the game_engine_territories_event_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "game_engine_territories_event_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the game_engine_territories_event_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 128;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the game_engine_territories_event_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the game_engine_territories_event_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the game_engine_territories_event_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<SoundResponseDefinitionBlock>)(this.Fields[20])).WriteChildren(writer);
        }
    }
}
