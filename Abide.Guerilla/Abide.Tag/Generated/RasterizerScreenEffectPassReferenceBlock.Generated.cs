//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated rasterizer_screen_effect_pass_reference_block tag block.
    /// </summary>
    public sealed class RasterizerScreenEffectPassReferenceBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RasterizerScreenEffectPassReferenceBlock"/> class.
        /// </summary>
        public RasterizerScreenEffectPassReferenceBlock()
        {
            this.Fields.Add(new DataField("explanation"));
            this.Fields.Add(new ExplanationField("IMPLEMENTATIONS", null));
            this.Fields.Add(new ShortIntegerField("layer pass index*:leave as -1 unless debugging"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new CharIntegerField("primary=0 and secondary=0:implementation index"));
            this.Fields.Add(new CharIntegerField("primary>0 and secondary=0:implementation index"));
            this.Fields.Add(new CharIntegerField("primary=0 and secondary>0:implementation index"));
            this.Fields.Add(new CharIntegerField("primary>0 and secondary>0:implementation index"));
            this.Fields.Add(new PadField("", 64));
            this.Fields.Add(new ExplanationField("TEXCOORD GENERATION", null));
            this.Fields.Add(new EnumField("stage 0 mode", "default", "viewport normalized", "viewport relative", "framebuffer relative", "zero"));
            this.Fields.Add(new EnumField("stage 1 mode", "default", "viewport normalized", "viewport relative", "framebuffer relative", "zero"));
            this.Fields.Add(new EnumField("stage 2 mode", "default", "viewport normalized", "viewport relative", "framebuffer relative", "zero"));
            this.Fields.Add(new EnumField("stage 3 mode", "default", "viewport normalized", "viewport relative", "framebuffer relative", "zero"));
            this.Fields.Add(new BlockField<RasterizerScreenEffectTexcoordGenerationAdvancedControlBlock>("advanced control", 1));
            this.Fields.Add(new ExplanationField("TARGET", null));
            this.Fields.Add(new EnumField("target", "framebuffer", "texaccum", "texaccum small", "texaccum tiny", "copy fb to texaccum"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 64));
            this.Fields.Add(new BlockField<RasterizerScreenEffectConvolutionBlock>("convolution", 2));
        }
        /// <summary>
        /// Gets and returns the name of the rasterizer_screen_effect_pass_reference_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "rasterizer_screen_effect_pass_reference_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the rasterizer_screen_effect_pass_reference_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "pass reference";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the rasterizer_screen_effect_pass_reference_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 8;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the rasterizer_screen_effect_pass_reference_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the rasterizer_screen_effect_pass_reference_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the rasterizer_screen_effect_pass_reference_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<RasterizerScreenEffectTexcoordGenerationAdvancedControlBlock>)(this.Fields[14])).WriteChildren(writer);
            ((BlockField<RasterizerScreenEffectConvolutionBlock>)(this.Fields[19])).WriteChildren(writer);
        }
    }
}
