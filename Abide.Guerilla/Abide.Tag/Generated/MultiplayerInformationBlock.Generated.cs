//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated multiplayer_information_block tag block.
    /// </summary>
    public sealed class MultiplayerInformationBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiplayerInformationBlock"/> class.
        /// </summary>
        public MultiplayerInformationBlock()
        {
            this.Fields.Add(new TagReferenceField("flag"));
            this.Fields.Add(new TagReferenceField("unit"));
            this.Fields.Add(new BlockField<VehiclesBlock>("vehicles", 20));
            this.Fields.Add(new TagReferenceField("hill shader"));
            this.Fields.Add(new TagReferenceField("flag shader"));
            this.Fields.Add(new TagReferenceField("ball"));
            this.Fields.Add(new BlockField<SoundsBlock>("sounds", 60));
            this.Fields.Add(new TagReferenceField("in game text"));
            this.Fields.Add(new PadField("", 40));
            this.Fields.Add(new BlockField<GameEngineGeneralEventBlock>("general events", 128));
            this.Fields.Add(new BlockField<GameEngineSlayerEventBlock>("slayer events", 128));
            this.Fields.Add(new BlockField<GameEngineCtfEventBlock>("ctf events", 128));
            this.Fields.Add(new BlockField<GameEngineOddballEventBlock>("oddball events", 128));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GameEngineKingEventBlock>("king events", 128));
        }
        /// <summary>
        /// Gets and returns the name of the multiplayer_information_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "multiplayer_information_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the multiplayer_information_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "multiplayer_information_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the multiplayer_information_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the multiplayer_information_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the multiplayer_information_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the multiplayer_information_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<VehiclesBlock>)(this.Fields[2])).WriteChildren(writer);
            ((BlockField<SoundsBlock>)(this.Fields[6])).WriteChildren(writer);
            ((BlockField<GameEngineGeneralEventBlock>)(this.Fields[9])).WriteChildren(writer);
            ((BlockField<GameEngineSlayerEventBlock>)(this.Fields[10])).WriteChildren(writer);
            ((BlockField<GameEngineCtfEventBlock>)(this.Fields[11])).WriteChildren(writer);
            ((BlockField<GameEngineOddballEventBlock>)(this.Fields[12])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[13])).WriteChildren(writer);
            ((BlockField<GameEngineKingEventBlock>)(this.Fields[14])).WriteChildren(writer);
        }
    }
}
