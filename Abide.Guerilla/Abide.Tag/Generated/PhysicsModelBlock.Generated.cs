//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated physics_model_block tag block.
    /// </summary>
    public sealed class PhysicsModelBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhysicsModelBlock"/> class.
        /// </summary>
        public PhysicsModelBlock()
        {
            this.Fields.Add(new LongFlagsField("flags", "unused"));
            this.Fields.Add(new RealField("mass"));
            this.Fields.Add(new RealField("low freq. deactivation scale#0 is default (1). LESS than 1 deactivates less aggre" +
                        "ssively. GREATER than 1 is more agressive."));
            this.Fields.Add(new RealField("high freq. deactivation scale#0 is default (1). LESS than 1 deactivates less aggr" +
                        "essively. GREATER than 1 is more agressive."));
            this.Fields.Add(new PadField("", 24));
            this.Fields.Add(new BlockField<PhantomTypesBlock>("phantom types", 16));
            this.Fields.Add(new BlockField<PhysicsModelNodeConstraintEdgeBlock>("node edges*", 4096));
            this.Fields.Add(new BlockField<RigidBodiesBlock>("rigid bodies*", 64));
            this.Fields.Add(new BlockField<MaterialsBlock>("materials*", 256));
            this.Fields.Add(new BlockField<SpheresBlock>("spheres*", 1024));
            this.Fields.Add(new BlockField<MultiSpheresBlock>("multi spheres*", 1024));
            this.Fields.Add(new BlockField<PillsBlock>("pills*", 1024));
            this.Fields.Add(new BlockField<BoxesBlock>("boxes*", 1024));
            this.Fields.Add(new BlockField<TrianglesBlock>("triangles*", 1024));
            this.Fields.Add(new BlockField<PolyhedraBlock>("polyhedra*", 1024));
            this.Fields.Add(new ExplanationField("ALL THESE WORLDS ARE YOURS, EXCEPT EUROPA...", null));
            this.Fields.Add(new BlockField<PolyhedronFourVectorsBlock>("polyhedron four vectors*", 4096));
            this.Fields.Add(new BlockField<PolyhedronPlaneEquationsBlock>("polyhedron plane equations*", 1024));
            this.Fields.Add(new BlockField<MassDistributionsBlock>("mass distributions*", 256));
            this.Fields.Add(new BlockField<ListsBlock>("lists*", 64));
            this.Fields.Add(new BlockField<ListShapesBlock>("list shapes*", 256));
            this.Fields.Add(new BlockField<MoppsBlock>("mopps*", 64));
            this.Fields.Add(new DataField("mopp codes*"));
            this.Fields.Add(new BlockField<HingeConstraintsBlock>("hinge constraints*", 64));
            this.Fields.Add(new BlockField<RagdollConstraintsBlock>("ragdoll constraints*", 64));
            this.Fields.Add(new BlockField<RegionsBlock>("regions*", 16));
            this.Fields.Add(new BlockField<NodesBlock>("nodes*", 255));
            this.Fields.Add(new BlockField<GlobalTagImportInfoBlock>("import info*", 1));
            this.Fields.Add(new BlockField<GlobalErrorReportCategoriesBlock>("errors*", 64));
            this.Fields.Add(new BlockField<PointToPathCurveBlock>("point to path curves*", 64));
            this.Fields.Add(new BlockField<LimitedHingeConstraintsBlock>("limited hinge constraints*", 64));
            this.Fields.Add(new BlockField<BallAndSocketConstraintsBlock>("ball and socket constraints*", 64));
            this.Fields.Add(new BlockField<StiffSpringConstraintsBlock>("stiff spring constraints*", 64));
            this.Fields.Add(new BlockField<PrismaticConstraintsBlock>("prismatic constraints*", 64));
            this.Fields.Add(new BlockField<PhantomsBlock>("phantoms*", 1024));
        }
        /// <summary>
        /// Gets and returns the name of the physics_model_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "physics_model_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the physics_model_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "physics_model";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the physics_model_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the physics_model_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the physics_model_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the physics_model_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<PhantomTypesBlock>)(this.Fields[5])).WriteChildren(writer);
            ((BlockField<PhysicsModelNodeConstraintEdgeBlock>)(this.Fields[6])).WriteChildren(writer);
            ((BlockField<RigidBodiesBlock>)(this.Fields[7])).WriteChildren(writer);
            ((BlockField<MaterialsBlock>)(this.Fields[8])).WriteChildren(writer);
            ((BlockField<SpheresBlock>)(this.Fields[9])).WriteChildren(writer);
            ((BlockField<MultiSpheresBlock>)(this.Fields[10])).WriteChildren(writer);
            ((BlockField<PillsBlock>)(this.Fields[11])).WriteChildren(writer);
            ((BlockField<BoxesBlock>)(this.Fields[12])).WriteChildren(writer);
            ((BlockField<TrianglesBlock>)(this.Fields[13])).WriteChildren(writer);
            ((BlockField<PolyhedraBlock>)(this.Fields[14])).WriteChildren(writer);
            ((BlockField<PolyhedronFourVectorsBlock>)(this.Fields[16])).WriteChildren(writer);
            ((BlockField<PolyhedronPlaneEquationsBlock>)(this.Fields[17])).WriteChildren(writer);
            ((BlockField<MassDistributionsBlock>)(this.Fields[18])).WriteChildren(writer);
            ((BlockField<ListsBlock>)(this.Fields[19])).WriteChildren(writer);
            ((BlockField<ListShapesBlock>)(this.Fields[20])).WriteChildren(writer);
            ((BlockField<MoppsBlock>)(this.Fields[21])).WriteChildren(writer);
            ((BlockField<HingeConstraintsBlock>)(this.Fields[23])).WriteChildren(writer);
            ((BlockField<RagdollConstraintsBlock>)(this.Fields[24])).WriteChildren(writer);
            ((BlockField<RegionsBlock>)(this.Fields[25])).WriteChildren(writer);
            ((BlockField<NodesBlock>)(this.Fields[26])).WriteChildren(writer);
            ((BlockField<GlobalTagImportInfoBlock>)(this.Fields[27])).WriteChildren(writer);
            ((BlockField<GlobalErrorReportCategoriesBlock>)(this.Fields[28])).WriteChildren(writer);
            ((BlockField<PointToPathCurveBlock>)(this.Fields[29])).WriteChildren(writer);
            ((BlockField<LimitedHingeConstraintsBlock>)(this.Fields[30])).WriteChildren(writer);
            ((BlockField<BallAndSocketConstraintsBlock>)(this.Fields[31])).WriteChildren(writer);
            ((BlockField<StiffSpringConstraintsBlock>)(this.Fields[32])).WriteChildren(writer);
            ((BlockField<PrismaticConstraintsBlock>)(this.Fields[33])).WriteChildren(writer);
            ((BlockField<PhantomsBlock>)(this.Fields[34])).WriteChildren(writer);
        }
    }
}
