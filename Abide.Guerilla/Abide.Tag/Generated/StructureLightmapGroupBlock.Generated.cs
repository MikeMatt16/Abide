//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated structure_lightmap_group_block tag block.
    /// </summary>
    public sealed class StructureLightmapGroupBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureLightmapGroupBlock"/> class.
        /// </summary>
        public StructureLightmapGroupBlock()
        {
            this.Fields.Add(new EnumField("type", "normal"));
            this.Fields.Add(new WordFlagsField("flags", "unused"));
            this.Fields.Add(new LongIntegerField("structure checksum"));
            this.Fields.Add(new BlockField<StructureLightmapPaletteColorBlock>("section palette", 128));
            this.Fields.Add(new BlockField<StructureLightmapPaletteColorBlock>("writable palettes", 128));
            this.Fields.Add(new TagReferenceField("bitmap group"));
            this.Fields.Add(new BlockField<LightmapGeometrySectionBlock>("clusters", 512));
            this.Fields.Add(new BlockField<LightmapGeometryRenderInfoBlock>("cluster render info", 1024));
            this.Fields.Add(new BlockField<LightmapGeometrySectionBlock>("poop definitions", 512));
            this.Fields.Add(new BlockField<StructureLightmapLightingEnvironmentBlock>("lighting environments*", 1024));
            this.Fields.Add(new BlockField<LightmapVertexBufferBucketBlock>("geometry buckets", 1024));
            this.Fields.Add(new BlockField<LightmapGeometryRenderInfoBlock>("instance render info", 1024));
            this.Fields.Add(new BlockField<LightmapInstanceBucketReferenceBlock>("instance bucket refs", 2000));
            this.Fields.Add(new BlockField<LightmapSceneryObjectInfoBlock>("scenery object info", 2000));
            this.Fields.Add(new BlockField<LightmapInstanceBucketReferenceBlock>("scenery object bucket refs", 2000));
        }
        /// <summary>
        /// Gets and returns the name of the structure_lightmap_group_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "structure_lightmap_group_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the structure_lightmap_group_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "structure_lightmap_group_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the structure_lightmap_group_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 256;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the structure_lightmap_group_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the structure_lightmap_group_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the structure_lightmap_group_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<StructureLightmapPaletteColorBlock>)(this.Fields[3])).WriteChildren(writer);
            ((BlockField<StructureLightmapPaletteColorBlock>)(this.Fields[4])).WriteChildren(writer);
            ((BlockField<LightmapGeometrySectionBlock>)(this.Fields[6])).WriteChildren(writer);
            ((BlockField<LightmapGeometryRenderInfoBlock>)(this.Fields[7])).WriteChildren(writer);
            ((BlockField<LightmapGeometrySectionBlock>)(this.Fields[8])).WriteChildren(writer);
            ((BlockField<StructureLightmapLightingEnvironmentBlock>)(this.Fields[9])).WriteChildren(writer);
            ((BlockField<LightmapVertexBufferBucketBlock>)(this.Fields[10])).WriteChildren(writer);
            ((BlockField<LightmapGeometryRenderInfoBlock>)(this.Fields[11])).WriteChildren(writer);
            ((BlockField<LightmapInstanceBucketReferenceBlock>)(this.Fields[12])).WriteChildren(writer);
            ((BlockField<LightmapSceneryObjectInfoBlock>)(this.Fields[13])).WriteChildren(writer);
            ((BlockField<LightmapInstanceBucketReferenceBlock>)(this.Fields[14])).WriteChildren(writer);
        }
    }
}
