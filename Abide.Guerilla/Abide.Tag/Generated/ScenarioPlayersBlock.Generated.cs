//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated scenario_players_block tag block.
    /// </summary>
    public sealed class ScenarioPlayersBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioPlayersBlock"/> class.
        /// </summary>
        public ScenarioPlayersBlock()
        {
            this.Fields.Add(new RealPoint3dField("Position"));
            this.Fields.Add(new AngleField("Facing:Degrees"));
            this.Fields.Add(new EnumField("Team Designator", "Red (Alpha)", "Blue (Bravo)", "Yellow (Charlie)", "Green (Delta)", "Purple (Echo)", "Orange (Foxtrot)", "Brown (Golf)", "Pink (Hotel)", "NEUTRAL"));
            this.Fields.Add(new ShortIntegerField("BSP Index"));
            this.Fields.Add(new EnumField("Game Type 1", "NONE", "Capture the Flag", "Slayer", "Oddball", "King of the Hill", "Race", "Headhunter", "Juggernaut", "Territories", "stub", "ignored3", "ignored4", "All Game Types", "All Except CTF", "All Except CTF & Race"));
            this.Fields.Add(new EnumField("Game Type 2", "NONE", "Capture the Flag", "Slayer", "Oddball", "King of the Hill", "Race", "Headhunter", "Juggernaut", "Territories", "stub", "ignored3", "ignored4", "All Game Types", "All Except CTF", "All Except CTF & Race"));
            this.Fields.Add(new EnumField("Game Type 3", "NONE", "Capture the Flag", "Slayer", "Oddball", "King of the Hill", "Race", "Headhunter", "Juggernaut", "Territories", "stub", "ignored3", "ignored4", "All Game Types", "All Except CTF", "All Except CTF & Race"));
            this.Fields.Add(new EnumField("Game Type 4", "NONE", "Capture the Flag", "Slayer", "Oddball", "King of the Hill", "Race", "Headhunter", "Juggernaut", "Territories", "stub", "ignored3", "ignored4", "All Game Types", "All Except CTF", "All Except CTF & Race"));
            this.Fields.Add(new EnumField("Spawn Type 0", "Both", "Initial Spawn Only", "Respawn Only"));
            this.Fields.Add(new EnumField("Spawn Type 1", "Both", "Initial Spawn Only", "Respawn Only"));
            this.Fields.Add(new EnumField("Spawn Type 2", "Both", "Initial Spawn Only", "Respawn Only"));
            this.Fields.Add(new EnumField("Spawn Type 3", "Both", "Initial Spawn Only", "Respawn Only"));
            this.Fields.Add(new StringIdField(""));
            this.Fields.Add(new StringIdField(""));
            this.Fields.Add(new EnumField("Campaign Player Type", "masterchief", "dervish", "chief multiplayer", "elite multiplayer"));
            this.Fields.Add(new PadField("", 6));
        }
        /// <summary>
        /// Gets and returns the name of the scenario_players_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "scenario_players_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the scenario_players_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "scenario_players_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the scenario_players_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 256;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the scenario_players_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
