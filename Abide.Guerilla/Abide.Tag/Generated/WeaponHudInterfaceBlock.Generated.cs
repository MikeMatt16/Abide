//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated weapon_hud_interface_block tag block.
    /// </summary>
    public sealed class WeaponHudInterfaceBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeaponHudInterfaceBlock"/> class.
        /// </summary>
        public WeaponHudInterfaceBlock()
        {
            this.Fields.Add(new TagReferenceField("child hud"));
            this.Fields.Add(new ExplanationField("Flash cutoffs", null));
            this.Fields.Add(new WordFlagsField("flags", "use parent hud flashing parameters"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ShortIntegerField("inventory ammo cutoff"));
            this.Fields.Add(new ShortIntegerField("loaded ammo cutoff"));
            this.Fields.Add(new ShortIntegerField("heat cutoff"));
            this.Fields.Add(new ShortIntegerField("age cutoff"));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new ExplanationField("Weapon hud screen alignment", null));
            this.Fields.Add(new EnumField("anchor", "top left", "top right", "bottom left", "bottom right", "center", "crosshair"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new BlockField<WeaponHudStaticBlock>("static elements", 16));
            this.Fields.Add(new BlockField<WeaponHudMeterBlock>("meter elements", 16));
            this.Fields.Add(new BlockField<WeaponHudNumberBlock>("number elements", 16));
            this.Fields.Add(new ExplanationField("Crosshairs", null));
            this.Fields.Add(new BlockField<WeaponHudCrosshairBlock>("crosshairs", 19));
            this.Fields.Add(new BlockField<WeaponHudOverlaysBlock>("overlay elements", 16));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GlobalHudScreenEffectDefinition>("screen effect", 1));
            this.Fields.Add(new PadField("", 132));
            this.Fields.Add(new ExplanationField("Messaging information", null));
            this.Fields.Add(new ShortIntegerField("sequence index#sequence index into the global hud icon bitmap"));
            this.Fields.Add(new ShortIntegerField("width offset#extra spacing beyond bitmap width for text alignment"));
            this.Fields.Add(new Point2dField("offset from reference corner"));
            this.Fields.Add(new ArgbColorField("override icon color"));
            this.Fields.Add(new CharIntegerField("frame rate [0,30]"));
            this.Fields.Add(new ByteFlagsField("flags", "use text from string_list instead", "override default color", "width offset is absolute icon width"));
            this.Fields.Add(new ShortIntegerField("text index"));
            this.Fields.Add(new PadField("", 48));
        }
        /// <summary>
        /// Gets and returns the name of the weapon_hud_interface_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "weapon_hud_interface_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the weapon_hud_interface_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "weapon_hud_interface";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the weapon_hud_interface_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the weapon_hud_interface_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the weapon_hud_interface_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the weapon_hud_interface_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<WeaponHudStaticBlock>)(this.Fields[13])).WriteChildren(writer);
            ((BlockField<WeaponHudMeterBlock>)(this.Fields[14])).WriteChildren(writer);
            ((BlockField<WeaponHudNumberBlock>)(this.Fields[15])).WriteChildren(writer);
            ((BlockField<WeaponHudCrosshairBlock>)(this.Fields[17])).WriteChildren(writer);
            ((BlockField<WeaponHudOverlaysBlock>)(this.Fields[18])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[20])).WriteChildren(writer);
            ((BlockField<GlobalHudScreenEffectDefinition>)(this.Fields[21])).WriteChildren(writer);
        }
    }
}
