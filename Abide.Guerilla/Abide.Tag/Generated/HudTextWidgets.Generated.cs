//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated hud_text_widgets tag block.
    /// </summary>
    public sealed class HudTextWidgets : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudTextWidgets"/> class.
        /// </summary>
        public HudTextWidgets()
        {
            this.Fields.Add(new StringIdField("name"));
            this.Fields.Add(new StructField<HudWidgetInputsStructBlock>(""));
            this.Fields.Add(new StructField<HudWidgetStateDefinitionStructBlock>(""));
            this.Fields.Add(new EnumField("anchor", "health and shield", "weapon hud", "motion sensor", "scoreboard", "crosshair", "lock-on target"));
            this.Fields.Add(new ExplanationField("FLAGS", null));
            this.Fields.Add(new WordFlagsField("flags", "string is a number", "force 2-digit number", "force 3-digit number", "talking player hack"));
            this.Fields.Add(new TagReferenceField("shader"));
            this.Fields.Add(new StringIdField("string"));
            this.Fields.Add(new EnumField("justification", "left", "center", "right"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new CharEnumField("fullscreen font index", "defualt", "number font"));
            this.Fields.Add(new CharEnumField("halfscreen font index", "defualt", "number font"));
            this.Fields.Add(new CharEnumField("quarterscreen font index", "defualt", "number font"));
            this.Fields.Add(new PadField("", 1));
            this.Fields.Add(new RealField("fullscreen scale"));
            this.Fields.Add(new RealField("halfscreen scale"));
            this.Fields.Add(new RealField("quarterscreen scale"));
            this.Fields.Add(new Point2dField("fullscreen offset"));
            this.Fields.Add(new Point2dField("halfscreen offset"));
            this.Fields.Add(new Point2dField("quarterscreen offset"));
            this.Fields.Add(new BlockField<HudWidgetEffectBlock>("effect", 1));
        }
        /// <summary>
        /// Gets and returns the name of the hud_text_widgets tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "hud_text_widgets";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the hud_text_widgets tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "hud_text_widgets";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the hud_text_widgets tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 256;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the hud_text_widgets tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the hud_text_widgets tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the hud_text_widgets tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<HudWidgetEffectBlock>)(this.Fields[20])).WriteChildren(writer);
        }
    }
}
