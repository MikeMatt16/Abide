//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated ai_conversation_block tag block.
    /// </summary>
    public sealed class AiConversationBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AiConversationBlock"/> class.
        /// </summary>
        public AiConversationBlock()
        {
            this.Fields.Add(new StringField("name^"));
            this.Fields.Add(new WordFlagsField("flags", "stop if death#this conversation will be aborted if any participant dies", "stop if damaged#an actor will abort this conversation if they are damaged", "stop if visible enemy#an actor will abort this conversation if they see an enemy", "stop if alerted to enemy#an actor will abort this conversation if they suspect an" +
                        " enemy", "player must be visible#this conversation cannot take place unless the participant" +
                        "s can _see_ a nearby player", "stop other actions#participants stop doing whatever they were doing in order to p" +
                        "erform this conversation", "keep trying to play#if this conversation fails initially, it will keep testing to" +
                        " see when it can play", "player must be looking#this conversation will not start until the player is looki" +
                        "ng at one of the participants"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new RealField("trigger distance:world units#distance the player must enter before the conversati" +
                        "on can trigger"));
            this.Fields.Add(new RealField("run-to-player dist:world units#if the \'involves player\' flag is set, when trigger" +
                        "ed the conversation\'s participant(s) will run to within this distance of the pla" +
                        "yer"));
            this.Fields.Add(new PadField("", 36));
            this.Fields.Add(new BlockField<AiConversationParticipantBlock>("participants", 8));
            this.Fields.Add(new BlockField<AiConversationLineBlock>("lines", 32));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
        }
        /// <summary>
        /// Gets and returns the name of the ai_conversation_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "ai_conversation_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the ai_conversation_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "ai_conversation_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the ai_conversation_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 128;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the ai_conversation_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the ai_conversation_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the ai_conversation_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<AiConversationParticipantBlock>)(this.Fields[6])).WriteChildren(writer);
            ((BlockField<AiConversationLineBlock>)(this.Fields[7])).WriteChildren(writer);
            ((BlockField<GNullBlock>)(this.Fields[8])).WriteChildren(writer);
        }
    }
}
