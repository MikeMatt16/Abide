//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated hud_globals_block tag block.
    /// </summary>
    public sealed class HudGlobalsBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudGlobalsBlock"/> class.
        /// </summary>
        public HudGlobalsBlock()
        {
            this.Fields.Add(new ExplanationField("Messaging parameters", null));
            this.Fields.Add(new EnumField("anchor", "top left", "top right", "bottom left", "bottom right", "center", "crosshair"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new Point2dField("anchor offset"));
            this.Fields.Add(new RealField("width scale"));
            this.Fields.Add(new RealField("height scale"));
            this.Fields.Add(new WordFlagsField("scaling flags", "don\'t scale offset", "don\'t scale size"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 20));
            this.Fields.Add(new TagReferenceField("obsolete1"));
            this.Fields.Add(new TagReferenceField("obsolete2"));
            this.Fields.Add(new RealField("up time"));
            this.Fields.Add(new RealField("fade time"));
            this.Fields.Add(new RealArgbColorField("icon color"));
            this.Fields.Add(new RealArgbColorField("text color"));
            this.Fields.Add(new RealField("text spacing"));
            this.Fields.Add(new TagReferenceField("item message text"));
            this.Fields.Add(new TagReferenceField("icon bitmap"));
            this.Fields.Add(new TagReferenceField("alternate icon text"));
            this.Fields.Add(new BlockField<HudButtonIconBlock>("button icons", 18));
            this.Fields.Add(new ExplanationField("HUD HELP TEXT COLOR", null));
            this.Fields.Add(new ArgbColorField("default color"));
            this.Fields.Add(new ArgbColorField("flashing color"));
            this.Fields.Add(new RealField("flash period"));
            this.Fields.Add(new RealField("flash delay#time between flashes"));
            this.Fields.Add(new ShortIntegerField("number of flashes"));
            this.Fields.Add(new WordFlagsField("flash flags", "reverse default/flashing colors"));
            this.Fields.Add(new RealField("flash length#time of each flash"));
            this.Fields.Add(new ArgbColorField("disabled color"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ExplanationField("Other hud messaging data", null));
            this.Fields.Add(new TagReferenceField("hud messages"));
            this.Fields.Add(new ExplanationField("Objective colors", null));
            this.Fields.Add(new ArgbColorField("default color"));
            this.Fields.Add(new ArgbColorField("flashing color"));
            this.Fields.Add(new RealField("flash period"));
            this.Fields.Add(new RealField("flash delay#time between flashes"));
            this.Fields.Add(new ShortIntegerField("number of flashes"));
            this.Fields.Add(new WordFlagsField("flash flags", "reverse default/flashing colors"));
            this.Fields.Add(new RealField("flash length#time of each flash"));
            this.Fields.Add(new ArgbColorField("disabled color"));
            this.Fields.Add(new ShortIntegerField("uptime ticks"));
            this.Fields.Add(new ShortIntegerField("fade ticks"));
            this.Fields.Add(new ExplanationField("Waypoint parameters", null));
            this.Fields.Add(new RealField("top offset"));
            this.Fields.Add(new RealField("bottom offset"));
            this.Fields.Add(new RealField("left offset"));
            this.Fields.Add(new RealField("right offset"));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new TagReferenceField("arrow bitmap"));
            this.Fields.Add(new BlockField<HudWaypointArrowBlock>("waypoint arrows", 4));
            this.Fields.Add(new PadField("", 80));
            this.Fields.Add(new ExplanationField("Multiplayer parameters", null));
            this.Fields.Add(new RealField("hud scale in multiplayer"));
            this.Fields.Add(new PadField("", 256));
            this.Fields.Add(new ExplanationField("Hud globals", null));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new RealField("motion sensor range"));
            this.Fields.Add(new RealField("motion sensor velocity sensitivity#how fast something moves to show up on the mot" +
                        "ion sensor"));
            this.Fields.Add(new RealField("motion sensor scale [DON\'T TOUCH EVER]*"));
            this.Fields.Add(new Rectangle2dField("default chapter title bounds"));
            this.Fields.Add(new PadField("", 44));
            this.Fields.Add(new ExplanationField("Hud damage indicators", null));
            this.Fields.Add(new ShortIntegerField("top offset"));
            this.Fields.Add(new ShortIntegerField("bottom offset"));
            this.Fields.Add(new ShortIntegerField("left offset"));
            this.Fields.Add(new ShortIntegerField("right offset"));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new TagReferenceField("indicator bitmap"));
            this.Fields.Add(new ShortIntegerField("sequence index"));
            this.Fields.Add(new ShortIntegerField("multiplayer sequence index"));
            this.Fields.Add(new ArgbColorField("color"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new ExplanationField("Hud timer definitions", null));
            this.Fields.Add(new ExplanationField("Not much time left flash color", null));
            this.Fields.Add(new ArgbColorField("default color"));
            this.Fields.Add(new ArgbColorField("flashing color"));
            this.Fields.Add(new RealField("flash period"));
            this.Fields.Add(new RealField("flash delay#time between flashes"));
            this.Fields.Add(new ShortIntegerField("number of flashes"));
            this.Fields.Add(new WordFlagsField("flash flags", "reverse default/flashing colors"));
            this.Fields.Add(new RealField("flash length#time of each flash"));
            this.Fields.Add(new ArgbColorField("disabled color"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ExplanationField("Time out flash color", null));
            this.Fields.Add(new ArgbColorField("default color"));
            this.Fields.Add(new ArgbColorField("flashing color"));
            this.Fields.Add(new RealField("flash period"));
            this.Fields.Add(new RealField("flash delay#time between flashes"));
            this.Fields.Add(new ShortIntegerField("number of flashes"));
            this.Fields.Add(new WordFlagsField("flash flags", "reverse default/flashing colors"));
            this.Fields.Add(new RealField("flash length#time of each flash"));
            this.Fields.Add(new ArgbColorField("disabled color"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new PadField("", 40));
            this.Fields.Add(new TagReferenceField("carnage report bitmap"));
            this.Fields.Add(new ExplanationField("Hud crap that wouldn\'t fit anywhere else", null));
            this.Fields.Add(new ShortIntegerField("loading begin text"));
            this.Fields.Add(new ShortIntegerField("loading end text"));
            this.Fields.Add(new ShortIntegerField("checkpoint begin text"));
            this.Fields.Add(new ShortIntegerField("checkpoint end text"));
            this.Fields.Add(new TagReferenceField("checkpoint sound"));
            this.Fields.Add(new PadField("", 96));
            this.Fields.Add(new StructField<GlobalNewHudGlobalsStructBlock>("new globals"));
        }
        /// <summary>
        /// Gets and returns the name of the hud_globals_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "hud_globals_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the hud_globals_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "hud_globals";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the hud_globals_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the hud_globals_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the hud_globals_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the hud_globals_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<HudButtonIconBlock>)(this.Fields[20])).WriteChildren(writer);
            ((BlockField<HudWaypointArrowBlock>)(this.Fields[51])).WriteChildren(writer);
        }
    }
}
