//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated scenario_structure_lightmap_block tag block.
    /// </summary>
    public sealed class ScenarioStructureLightmapBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioStructureLightmapBlock"/> class.
        /// </summary>
        public ScenarioStructureLightmapBlock()
        {
            this.Fields.Add(new ExplanationField("lightmap options", null));
            this.Fields.Add(new RealField("search distance lower bound"));
            this.Fields.Add(new RealField("search distance upper bound"));
            this.Fields.Add(new RealField("luminels per world unit"));
            this.Fields.Add(new RealField("output white reference"));
            this.Fields.Add(new RealField("output black reference"));
            this.Fields.Add(new RealField("output schlick parameter"));
            this.Fields.Add(new RealField("diffuse map scale"));
            this.Fields.Add(new RealField("sun scale"));
            this.Fields.Add(new RealField("sky scale"));
            this.Fields.Add(new RealField("indirect scale"));
            this.Fields.Add(new RealField("prt scale"));
            this.Fields.Add(new RealField("surface light scale"));
            this.Fields.Add(new RealField("scenario light scale"));
            this.Fields.Add(new RealField("lightprobe interpolation overide"));
            this.Fields.Add(new PadField("", 72));
            this.Fields.Add(new BlockField<StructureLightmapGroupBlock>("lightmap groups", 256));
            this.Fields.Add(new PadField("", 12));
            this.Fields.Add(new BlockField<GlobalErrorReportCategoriesBlock>("errors*", 64));
            this.Fields.Add(new PadField("", 104));
        }
        /// <summary>
        /// Gets and returns the name of the scenario_structure_lightmap_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "scenario_structure_lightmap_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the scenario_structure_lightmap_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "scenario_structure_lightmap";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the scenario_structure_lightmap_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the scenario_structure_lightmap_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the scenario_structure_lightmap_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the scenario_structure_lightmap_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<StructureLightmapGroupBlock>)(this.Fields[16])).WriteChildren(writer);
            ((BlockField<GlobalErrorReportCategoriesBlock>)(this.Fields[18])).WriteChildren(writer);
        }
    }
}
