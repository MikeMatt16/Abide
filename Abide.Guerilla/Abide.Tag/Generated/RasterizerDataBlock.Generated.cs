//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Generated
{
    using Abide.Tag;
    using System.IO;
    
    /// <summary>
    /// Represents the generated rasterizer_data_block tag block.
    /// </summary>
    public sealed class RasterizerDataBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RasterizerDataBlock"/> class.
        /// </summary>
        public RasterizerDataBlock()
        {
            this.Fields.Add(new ExplanationField("function textures", null));
            this.Fields.Add(new TagReferenceField("distance attenuation"));
            this.Fields.Add(new TagReferenceField("vector normalization"));
            this.Fields.Add(new TagReferenceField("gradients"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("glow"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new PadField("", 16));
            this.Fields.Add(new BlockField<VertexShaderReferenceBlock>("global vertex shaders", 32));
            this.Fields.Add(new ExplanationField("default textures", null));
            this.Fields.Add(new TagReferenceField("default 2D"));
            this.Fields.Add(new TagReferenceField("default 3D"));
            this.Fields.Add(new TagReferenceField("default cube map"));
            this.Fields.Add(new ExplanationField("experimental textures", null));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new ExplanationField("video effect textures", null));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new TagReferenceField("UNUSED"));
            this.Fields.Add(new PadField("", 36));
            this.Fields.Add(new ExplanationField("global shader", null));
            this.Fields.Add(new TagReferenceField("global shader"));
            this.Fields.Add(new ExplanationField("active camouflage", null));
            this.Fields.Add(new WordFlagsField("flags", "tint edge density"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new RealField("refraction amount:pixels"));
            this.Fields.Add(new RealField("distance falloff"));
            this.Fields.Add(new RealRgbColorField("tint color"));
            this.Fields.Add(new RealField("hyper-stealth refraction:pixels"));
            this.Fields.Add(new RealField("hyper-stealth distance falloff"));
            this.Fields.Add(new RealRgbColorField("hyper-stealth tint color"));
            this.Fields.Add(new ExplanationField("PC textures", null));
            this.Fields.Add(new TagReferenceField("UNUSED"));
        }
        /// <summary>
        /// Gets and returns the name of the rasterizer_data_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "rasterizer_data_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the rasterizer_data_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "rasterizer_data_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the rasterizer_data_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the rasterizer_data_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
        /// <summary>
        /// Writes the rasterizer_data_block tag block using the specified binary writer.
        /// </summary>
        // <param name="writer">The <see cref="BinaryWriter"/> used to write the rasterizer_data_block tag block.</param>
        public override void Write(BinaryWriter writer)
        {
            // Invoke base write procedure.
            base.Write(writer);
            // Post-write the tag blocks.
            ((BlockField<VertexShaderReferenceBlock>)(this.Fields[11])).WriteChildren(writer);
        }
    }
}
