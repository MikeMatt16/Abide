//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Cache.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated weapon_hud_interface_block tag block.
    /// </summary>
    public sealed class WeaponHudInterfaceBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeaponHudInterfaceBlock"/> class.
        /// </summary>
        public WeaponHudInterfaceBlock()
        {
            this.Fields.Add(new TagReferenceField("child hud", 2003855465));
            this.Fields.Add(new ExplanationField("Flash cutoffs", ""));
            this.Fields.Add(new WordFlagsField("flags", "use parent hud flashing parameters"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ShortIntegerField("inventory ammo cutoff"));
            this.Fields.Add(new ShortIntegerField("loaded ammo cutoff"));
            this.Fields.Add(new ShortIntegerField("heat cutoff"));
            this.Fields.Add(new ShortIntegerField("age cutoff"));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new ExplanationField("Weapon hud screen alignment", ""));
            this.Fields.Add(new EnumField("anchor", "top left", "top right", "bottom left", "bottom right", "center", "crosshair"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new PadField("", 32));
            this.Fields.Add(new BlockField<WeaponHudStaticBlock>("static elements", 16));
            this.Fields.Add(new BlockField<WeaponHudMeterBlock>("meter elements", 16));
            this.Fields.Add(new BlockField<WeaponHudNumberBlock>("number elements", 16));
            this.Fields.Add(new ExplanationField("Crosshairs", @"Crosshairs always go in the center of the screen.
Crosshairs can be attached to one of four different states:

* Aim: Default crosshair. Frame 0 is the default state, frame 1 is the auto-aim state (frame rate ignored)
* Zoom: Zoom overlay. Each zoom level has a corresponding frame (frame rate ignored)
* Charge: Charging overlay. If you wish to display an animation for charging, put it here.
* Flash: Similar to charging, but for low ammo/batter/heat states
* Reload/Overheat: Similar to charging, but for reloading/overheating
"));
            this.Fields.Add(new BlockField<WeaponHudCrosshairBlock>("crosshairs", 19));
            this.Fields.Add(new BlockField<WeaponHudOverlaysBlock>("overlay elements", 16));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new BlockField<GNullBlock>("", 0));
            this.Fields.Add(new BlockField<GlobalHudScreenEffectDefinition>("screen effect", 1));
            this.Fields.Add(new PadField("", 132));
            this.Fields.Add(new ExplanationField("Messaging information", ""));
            this.Fields.Add(new ShortIntegerField("sequence index#sequence index into the global hud icon bitmap"));
            this.Fields.Add(new ShortIntegerField("width offset#extra spacing beyond bitmap width for text alignment"));
            this.Fields.Add(new Point2dField("offset from reference corner"));
            this.Fields.Add(new ArgbColorField("override icon color"));
            this.Fields.Add(new CharIntegerField("frame rate [0,30]"));
            this.Fields.Add(new ByteFlagsField("flags", "use text from string_list instead", "override default color", "width offset is absolute icon width"));
            this.Fields.Add(new ShortIntegerField("text index"));
            this.Fields.Add(new PadField("", 48));
        }
        /// <summary>
        /// Gets and returns the name of the weapon_hud_interface_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "weapon_hud_interface_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the weapon_hud_interface_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "weapon_hud_interface";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the weapon_hud_interface_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the weapon_hud_interface_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
