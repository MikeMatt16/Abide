//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.Tag.Cache.Generated
{
    using Abide.Tag;
    
    /// <summary>
    /// Represents the generated character_vitality_block tag block.
    /// </summary>
    public sealed class CharacterVitalityBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharacterVitalityBlock"/> class.
        /// </summary>
        public CharacterVitalityBlock()
        {
            this.Fields.Add(new LongFlagsField("vitality flags", "unused"));
            this.Fields.Add(new RealField("normal body vitality#maximum body vitality of our unit"));
            this.Fields.Add(new RealField("normal shield vitality#maximum shield vitality of our unit"));
            this.Fields.Add(new RealField("legendary body vitality#maximum body vitality of our unit (on legendary)"));
            this.Fields.Add(new RealField("legendary shield vitality#maximum shield vitality of our unit (on legendary)"));
            this.Fields.Add(new RealField("body recharge fraction#fraction of body health that can be regained after damage"));
            this.Fields.Add(new RealField("soft ping threshold (with shields)#damage necessary to trigger a soft ping when s" +
                        "hields are up"));
            this.Fields.Add(new RealField("soft ping threshold (no shields)#damage necessary to trigger a soft ping when shi" +
                        "elds are down"));
            this.Fields.Add(new RealField("soft ping min interrupt time#minimum time before a soft ping can be interrupted"));
            this.Fields.Add(new RealField("hard ping threshold (with shields)#damage necessary to trigger a hard ping when s" +
                        "hields are up"));
            this.Fields.Add(new RealField("hard ping threshold (no shields)#damage necessary to trigger a hard ping when shi" +
                        "elds are down"));
            this.Fields.Add(new RealField("hard ping min interrupt time#minimum time before a hard ping can be interrupted"));
            this.Fields.Add(new RealField("current damage decay delay#current damage begins to fall after a time delay has p" +
                        "assed since last the damage"));
            this.Fields.Add(new RealField("current damage decay time#amount of time it would take for 100% current damage to" +
                        " decay to 0"));
            this.Fields.Add(new RealField("recent damage decay delay#recent damage begins to fall after a time delay has pas" +
                        "sed since last the damage"));
            this.Fields.Add(new RealField("recent damage decay time#amount of time it would take for 100% recent damage to d" +
                        "ecay to 0"));
            this.Fields.Add(new RealField("body recharge delay time#amount of time delay before a shield begins to recharge"));
            this.Fields.Add(new RealField("body recharge time#amount of time for shields to recharge completely"));
            this.Fields.Add(new RealField("shield recharge delay time#amount of time delay before a shield begins to recharg" +
                        "e"));
            this.Fields.Add(new RealField("shield recharge time#amount of time for shields to recharge completely"));
            this.Fields.Add(new RealField("stun threshold#stun level that triggers the stunned state (currently, the \'stunne" +
                        "d\' behavior)"));
            this.Fields.Add(new RealBoundsField("stun time bounds:seconds"));
            this.Fields.Add(new RealField("extended shield damage threshold:%#Amount of shield damage sustained before it is" +
                        " considered \'extended\'"));
            this.Fields.Add(new RealField("extended body damage threshold:%#Amount of body damage sustained before it is con" +
                        "sidered \'extended\'"));
            this.Fields.Add(new RealField("suicide radius#when I die and explode, I damage stuff within this distance of me." +
                        ""));
            this.Fields.Add(new SkipField("", 8));
        }
        /// <summary>
        /// Gets and returns the name of the character_vitality_block tag block.
        /// </summary>
        public override string Name
        {
            get
            {
                return "character_vitality_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the character_vitality_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "character_vitality_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the character_vitality_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the character_vitality_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
