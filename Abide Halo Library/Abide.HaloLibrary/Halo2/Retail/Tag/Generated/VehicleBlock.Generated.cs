//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.HaloLibrary.Halo2.Retail.Tag.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.HaloLibrary.Halo2.Retail.Tag;
    
    /// <summary>
    /// Represents the generated vehicle_block tag block.
    /// </summary>
    internal sealed class VehicleBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleBlock"/> class.
        /// </summary>
        public VehicleBlock()
        {
            this.Fields.Add(new ExplanationField("$$$ VEHICLE $$$", ""));
            this.Fields.Add(new LongFlagsField("flags", "speed wakes physics", "turn wakes physics", "driver power wakes physics", "gunner power wakes physics", "control opposite speed sets brake", "slide wakes physics", "kills riders at terminal velocity", "causes collision damage", "ai weapon cannot rotate", "ai does not require driver", "ai unused", "ai driver enable", "ai driver flying", "ai driver can-sidestep", "ai driver hovering", "vehicle steers directly", "unused", "has e-brake", "noncombat vehicle", "no friction w/driver", "can trigger automatic opening doors", "autoaim when teamless"));
            this.Fields.Add(new EnumField("type", "human tank", "human jeep", "human boat", "human plane", "alien scout", "alien fighter", "turret"));
            this.Fields.Add(new EnumField("control", "vehicle control normal", "vehicle control unused", "vehicle control tank"));
            this.Fields.Add(new RealField("maximum forward speed"));
            this.Fields.Add(new RealField("maximum reverse speed"));
            this.Fields.Add(new RealField("speed acceleration"));
            this.Fields.Add(new RealField("speed deceleration"));
            this.Fields.Add(new RealField("maximum left turn"));
            this.Fields.Add(new RealField("maximum right turn (negative)"));
            this.Fields.Add(new RealField("wheel circumference"));
            this.Fields.Add(new RealField("turn rate"));
            this.Fields.Add(new RealField("blur speed"));
            this.Fields.Add(new EnumField("specific type#if your type corresponds to something in this list choose it", "none", "ghost", "wraith", "spectre", "sentinel enforcer"));
            this.Fields.Add(new EnumField("player training vehicle type", "none", "warthog", "warthog turret", "ghost", "banshee", "tank", "wraith"));
            this.Fields.Add(new StringIdField("flip message"));
            this.Fields.Add(new RealField("turn scale"));
            this.Fields.Add(new RealField("speed turn penalty power (0.5 .. 2)"));
            this.Fields.Add(new RealField("speed turn penalty (0 = none, 1 = can\'t turn at top speed)"));
            this.Fields.Add(new RealField("maximum left slide"));
            this.Fields.Add(new RealField("maximum right slide"));
            this.Fields.Add(new RealField("slide acceleration"));
            this.Fields.Add(new RealField("slide deceleration"));
            this.Fields.Add(new RealField("minimum flipping angular velocity"));
            this.Fields.Add(new RealField("maximum flipping angular velocity"));
            this.Fields.Add(new EnumField("vehicle size#The size determine what kind of seats in larger vehicles it may occu" +
                        "py (i.e. small or large cargo seats)", "small", "large"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new RealField("fixed gun yaw"));
            this.Fields.Add(new RealField("fixed gun pitch"));
            this.Fields.Add(new ExplanationField("steering overdampening", "when the steering is off by more than the cusp angle\nthe steering will overcompen" +
                        "sate more and more.  when it\nis less, it overcompensates less and less.  the exp" +
                        "onent\nshould be something in the neighborhood of 2.0\n"));
            this.Fields.Add(new RealField("overdampen cusp angle:degrees"));
            this.Fields.Add(new RealField("overdampen exponent"));
            this.Fields.Add(new RealField("crouch transition time:seconds"));
            this.Fields.Add(new PadField("", 4));
            this.Fields.Add(new ExplanationField("engine", ""));
            this.Fields.Add(new RealField("engine moment#higher moments make engine spin up slower"));
            this.Fields.Add(new RealField("engine max angular velocity#higher moments make engine spin up slower"));
            this.Fields.Add(new BlockField<GearBlock>("gears", 16));
            this.Fields.Add(new RealField("flying torque scale#big vehicles need to scale this down.  0 defaults to 1, which" +
                        " is generally a good value.  This is used with alien fighter physics"));
            this.Fields.Add(new RealField("seat enterance acceleration scale#how much do we scale the force the biped the ap" +
                        "plies down on the seat when he enters. 0 == no acceleration"));
            this.Fields.Add(new RealField("seat exit accelersation scale#how much do we scale the force the biped the applie" +
                        "s down on the seat when he exits. 0 == no acceleration"));
            this.Fields.Add(new RealField("air friction deceleration#human plane physics only. 0 is nothing.  1 is like thow" +
                        "ing the engine to full reverse"));
            this.Fields.Add(new RealField("thrust scale#human plane physics only. 0 is default (1)"));
            this.Fields.Add(new ExplanationField("sounds and effects", ""));
            this.Fields.Add(new TagReferenceField("suspension sound", 1936614433));
            this.Fields.Add(new TagReferenceField("crash sound", 1936614433));
            this.Fields.Add(new TagReferenceField("UNUSED*", 1718579060));
            this.Fields.Add(new TagReferenceField("special effect", 1701209701));
            this.Fields.Add(new TagReferenceField("unused effect", 1701209701));
            this.Fields.Add(new ExplanationField("physics", ""));
            this.Fields.Add(new StructField<HavokVehiclePhysicsStructBlock>("havok vehicle physics"));
        }
        /// <summary>
        /// Gets and returns the name of the vehicle_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "vehicle_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the vehicle_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "vehicle";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the vehicle_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the vehicle_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
