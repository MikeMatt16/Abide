//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.HaloLibrary.Halo2.Retail.Tag.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.HaloLibrary.Halo2.Retail.Tag;
    
    /// <summary>
    /// Represents the generated hud_widget_state_definition_struct_block tag block.
    /// </summary>
    internal sealed class HudWidgetStateDefinitionStructBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudWidgetStateDefinitionStructBlock"/> class.
        /// </summary>
        public HudWidgetStateDefinitionStructBlock()
        {
            this.Fields.Add(new ExplanationField("widget state", "this section is split up into YES and NO flags.\na widget will draw if any of it\'s" +
                        " YES flags are true,\nbut it will NOT draw if any of it\'s NO flags are true.\n"));
            this.Fields.Add(new WordFlagsField("[Y] unit flags", "default", "grenade type is NONE", "grenade type is frag", "grenade type is plasma", "unit is single wielding", "unit is dual wielding", "unit is unzoomed", "unit is zoomed (level 1)", "unit is zoomed (level 2)", "grenades disabled", "binoculars enabled", "motion sensor enabled", "shield enabled", "dervish"));
            this.Fields.Add(new WordFlagsField("[Y] extra flags", "autoaim-friendly", "autoaim-plasma", "autoaim-headshot", "autoaim-vulnerable", "autoaim-invincible"));
            this.Fields.Add(new WordFlagsField("[Y] weapon flags", "primary weapon", "secondary weapon", "backpack weapon", "age below cutoff", "clip below cutoff", "total below cutoff", "overheated", "out of ammo", "lock target available", "locking", "locked"));
            this.Fields.Add(new WordFlagsField("[Y] game engine state flags", "campaign solo", "campaign coop", "free-for-all", "team game", "user leading", "user not leading", "timed game", "untimed game", "other score valid", "other score invalid", "player is arming bomb", "player talking"));
            this.Fields.Add(new WordFlagsField("[N] unit flags", "default", "grenade type is NONE", "grenade type is frag", "grenade type is plasma", "unit is single wielding", "unit is dual wielding", "unit is unzoomed", "unit is zoomed (level 1)", "unit is zoomed (level 2)", "grenades disabled", "binoculars enabled", "motion sensor enabled", "shield enabled", "dervish"));
            this.Fields.Add(new WordFlagsField("[N] extra flags", "autoaim-friendly", "autoaim-plasma", "autoaim-headshot", "autoaim-vulnerable", "autoaim-invincible"));
            this.Fields.Add(new WordFlagsField("[N] weapon flags", "primary weapon", "secondary weapon", "backpack weapon", "age below cutoff", "clip below cutoff", "total below cutoff", "overheated", "out of ammo", "lock target available", "locking", "locked"));
            this.Fields.Add(new WordFlagsField("[N] game engine state flags", "campaign solo", "campaign coop", "free-for-all", "team game", "user leading", "user not leading", "timed game", "untimed game", "other score valid", "other score invalid", "player is arming bomb", "player talking"));
            this.Fields.Add(new CharIntegerField("age cutoff"));
            this.Fields.Add(new CharIntegerField("clip cutoff"));
            this.Fields.Add(new CharIntegerField("total cutoff"));
            this.Fields.Add(new PadField("", 1));
        }
        /// <summary>
        /// Gets and returns the name of the hud_widget_state_definition_struct_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "hud_widget_state_definition_struct_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the hud_widget_state_definition_struct_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "hud_widget_state_definition_struct";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the hud_widget_state_definition_struct_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the hud_widget_state_definition_struct_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
