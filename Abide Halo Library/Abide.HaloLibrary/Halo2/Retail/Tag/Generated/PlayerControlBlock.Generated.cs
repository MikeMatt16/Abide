//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abide.HaloLibrary.Halo2.Retail.Tag.Generated
{
    using System;
    using Abide.HaloLibrary;
    using Abide.HaloLibrary.Halo2.Retail.Tag;
    
    /// <summary>
    /// Represents the generated player_control_block tag block.
    /// </summary>
    internal sealed class PlayerControlBlock : Block
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerControlBlock"/> class.
        /// </summary>
        public PlayerControlBlock()
        {
            this.Fields.Add(new RealFractionField("magnetism friction#how much the crosshair slows over enemies"));
            this.Fields.Add(new RealFractionField("magnetism adhesion#how much the crosshair sticks to enemies"));
            this.Fields.Add(new RealFractionField("inconsequential target scale#scales magnetism level for inconsequential targets l" +
                        "ike infection forms"));
            this.Fields.Add(new PadField("", 12));
            this.Fields.Add(new ExplanationField("crosshair", ""));
            this.Fields.Add(new RealPoint2dField("crosshair location#-1..1, 0 is middle of the screen"));
            this.Fields.Add(new ExplanationField("sprinting", ""));
            this.Fields.Add(new RealField("seconds to start#how long you must be pegged before you start sprinting"));
            this.Fields.Add(new RealField("seconds to full speed#how long you must sprint before you reach top speed"));
            this.Fields.Add(new RealField("decay rate#how fast being unpegged decays the timer (seconds per second)"));
            this.Fields.Add(new RealField("full speed multiplier#how much faster we actually go when at full sprint"));
            this.Fields.Add(new RealField("pegged magnitude#how far the stick needs to be pressed before being considered pe" +
                        "gged"));
            this.Fields.Add(new RealField("pegged angular threshold#how far off straight up (in degrees) we consider pegged"));
            this.Fields.Add(new PadField("", 8));
            this.Fields.Add(new ExplanationField("looking", ""));
            this.Fields.Add(new RealField("look default pitch rate:degrees"));
            this.Fields.Add(new RealField("look default yaw rate:degrees"));
            this.Fields.Add(new RealFractionField("look peg threshold [0,1]#magnitude of yaw for pegged acceleration to kick in"));
            this.Fields.Add(new RealField("look yaw acceleration time:seconds#time for a pegged look to reach maximum effect" +
                        ""));
            this.Fields.Add(new RealField("look yaw acceleration scale#maximum effect of a pegged look (scales last value in" +
                        " the look function below)"));
            this.Fields.Add(new RealField("look pitch acceleration time:seconds#time for a pegged look to reach maximum effe" +
                        "ct"));
            this.Fields.Add(new RealField("look pitch acceleration scale#maximum effect of a pegged look (scales last value " +
                        "in the look function below)"));
            this.Fields.Add(new RealField("look autolevelling scale#1 is fast, 0 is none, >1 will probably be really fast"));
            this.Fields.Add(new PadField("", 8));
            this.Fields.Add(new RealField("gravity_scale"));
            this.Fields.Add(new PadField("", 2));
            this.Fields.Add(new ShortIntegerField("minimum autolevelling ticks#amount of time player needs to move and not look up o" +
                        "r down for autolevelling to kick in"));
            this.Fields.Add(new AngleField("minimum angle for vehicle flipping:degrees#0 means the vehicle\'s up vector is alo" +
                        "ng the ground, 90 means the up vector is pointing straight up"));
            this.Fields.Add(new BlockField<LookFunctionBlock>("look function", 16));
            this.Fields.Add(new RealField("minimum action hold time:seconds#time that player needs to press ACTION to regist" +
                        "er as a HOLD"));
        }
        /// <summary>
        /// Gets and returns the name of the player_control_block tag block.
        /// </summary>
        public override string BlockName
        {
            get
            {
                return "player_control_block";
            }
        }
        /// <summary>
        /// Gets and returns the display name of the player_control_block tag block.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "player_control_block";
            }
        }
        /// <summary>
        /// Gets and returns the maximum number of elements allowed of the player_control_block tag block.
        /// </summary>
        public override int MaximumElementCount
        {
            get
            {
                return 1;
            }
        }
        /// <summary>
        /// Gets and returns the alignment of the player_control_block tag block.
        /// </summary>
        public override int Alignment
        {
            get
            {
                return 4;
            }
        }
    }
}
